"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require(".");
describe('index', function () {
    var sampleArgument = 'sample-argument';
    var uppercase = function (str) { return str.toUpperCase(); };
    var reverse = function (str) { return str.split('').reverse().join(''); };
    var get3Chars = function (str) { return str.substring(0, 3); };
    var add1 = function (current) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
        return [2, current + 1];
    }); }); };
    var divide3 = function (current) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
        return [2, current / 3];
    }); }); };
    var multiply2 = function (current) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
        return [2, current * 2];
    }); }); };
    describe('pipe', function () {
        it('pipe should return result without any functions', function () {
            expect(_1.pipe(sampleArgument)).toEqual(sampleArgument);
        });
        it('should pipe', function () {
            expect(_1.pipe(sampleArgument, uppercase, get3Chars, reverse)).toEqual('MAS');
            expect(_1.pipe(sampleArgument, uppercase, reverse, get3Chars)).toEqual('TNE');
        });
    });
    describe('compose', function () {
        it('compose should return result without any functions', function () {
            expect(_1.compose(sampleArgument)).toEqual(sampleArgument);
        });
        it('should compose', function () {
            expect(_1.compose(sampleArgument, uppercase, get3Chars, reverse)).toEqual('TNE');
            expect(_1.compose(sampleArgument, uppercase, reverse, get3Chars)).toEqual('MAS');
        });
    });
    describe('cPipe', function () {
        it('cPipe should return result without any functions', function () {
            expect(_1.cPipe()(sampleArgument)).toEqual(sampleArgument);
        });
        it('should pipe', function () {
            expect(_1.cPipe(uppercase, get3Chars, reverse)(sampleArgument)).toEqual('MAS');
            expect(_1.cPipe(uppercase, reverse, get3Chars)(sampleArgument)).toEqual('TNE');
        });
    });
    describe('cCompose', function () {
        it('cCompose should return result without any functions', function () {
            expect(_1.cCompose()(sampleArgument)).toEqual(sampleArgument);
        });
        it('should compose', function () {
            expect(_1.cCompose(uppercase, get3Chars, reverse)(sampleArgument)).toEqual('TNE');
            expect(_1.cCompose(uppercase, reverse, get3Chars)(sampleArgument)).toEqual('MAS');
        });
    });
    describe('pPipe', function () {
        it('pPipe should return value if no functions', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = expect;
                        return [4, _1.pPipe()(1)];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toEqual(1);
                        return [2];
                }
            });
        }); });
        it('should pipe promises', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = expect;
                        return [4, _1.pPipe(add1, multiply2, divide3)(2)];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toEqual(2);
                        return [2];
                }
            });
        }); });
    });
    describe('pCompose', function () {
        it('pCompose should return value if no functions', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = expect;
                        return [4, _1.pCompose()(1)];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toEqual(1);
                        return [2];
                }
            });
        }); });
        it('should pipe promises', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = expect;
                        return [4, _1.pCompose(add1, multiply2, divide3)(6)];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toEqual(5);
                        return [2];
                }
            });
        }); });
    });
    it('pipe and compose', function () {
        expect(_1.compose(sampleArgument, uppercase, get3Chars, reverse)).toEqual(_1.pipe(sampleArgument, reverse, get3Chars, uppercase));
    });
});
//# sourceMappingURL=index.spec.js.map
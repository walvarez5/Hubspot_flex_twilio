"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var url_1 = __importDefault(require("url"));
var strip_ansi_1 = __importDefault(require("strip-ansi"));
var react_error_overlay_1 = require("react-error-overlay");
var format_webpack_messages_1 = __importDefault(require("@k88/format-webpack-messages"));
var editorEndpoint = '/__open-stack-frame-in-editor';
var encode = window.encodeURIComponent;
react_error_overlay_1.setEditorHandler(function (errorLocation) { return __awaiter(void 0, void 0, void 0, function () {
    var line, col;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                line = errorLocation.lineNumber || 1;
                col = errorLocation.colNumber || 1;
                return [4, fetch(editorEndpoint + "?fileName=" + encode(errorLocation.fileName) + "&lineNumber=" + encode(line) + "&colNumber=" + encode(col))];
            case 1:
                _a.sent();
                return [2];
        }
    });
}); });
var hadRuntimeError = false;
react_error_overlay_1.startReportingRuntimeErrors({
    onError: function () {
        hadRuntimeError = true;
    },
    filename: '/static/js/bundle.js',
});
if (module.hot && typeof module.hot.dispose === 'function') {
    module.hot.dispose(function () {
        react_error_overlay_1.stopReportingRuntimeErrors();
    });
}
var connection = new WebSocket(url_1.default.format({
    protocol: window.location.protocol === 'https:' ? 'wss' : 'ws',
    hostname: process.env.WDS_SOCKET_HOST || window.location.hostname,
    port: process.env.WDS_SOCKET_PORT || window.location.port,
    pathname: process.env.WDS_SOCKET_PATH || '/sockjs-node',
    slashes: true,
}));
connection.onclose = function () {
    if (typeof console !== 'undefined' && typeof console.info === 'function') {
        console.info('The development server has disconnected.\nRefresh the page if necessary.');
    }
};
var isFirstCompilation = true;
var mostRecentCompilationHash = null;
var hasCompileErrors = false;
var clearOutdatedErrors = function () {
    if (typeof console !== 'undefined' && typeof console.clear === 'function' && hasCompileErrors) {
        console.clear();
    }
};
var handleSuccess = function () {
    clearOutdatedErrors();
    var isHotUpdate = !isFirstCompilation;
    isFirstCompilation = false;
    hasCompileErrors = false;
    if (isHotUpdate) {
        tryApplyUpdates(function onHotUpdateSuccess() {
            tryDismissErrorOverlay();
        });
    }
};
function handleWarnings(warnings) {
    clearOutdatedErrors();
    var isHotUpdate = !isFirstCompilation;
    isFirstCompilation = false;
    hasCompileErrors = false;
    function printWarnings() {
        var formatted = format_webpack_messages_1.default({
            warnings: warnings,
            errors: [],
        });
        if (typeof console !== 'undefined' && typeof console.warn === 'function') {
            for (var i = 0; i < formatted.warnings.length; i++) {
                if (i === 5) {
                    console.warn('There were more warnings in other files.\nYou can find a complete log in the terminal.');
                    break;
                }
                console.warn(strip_ansi_1.default(formatted.warnings[i]));
            }
        }
    }
    printWarnings();
    if (isHotUpdate) {
        tryApplyUpdates(function onSuccessfulHotUpdate() {
            tryDismissErrorOverlay();
        });
    }
}
function handleErrors(errors) {
    clearOutdatedErrors();
    isFirstCompilation = false;
    hasCompileErrors = true;
    var formatted = format_webpack_messages_1.default({
        errors: errors,
        warnings: [],
    });
    react_error_overlay_1.reportBuildError(formatted.errors[0]);
    if (typeof console !== 'undefined' && typeof console.error === 'function') {
        for (var i = 0; i < formatted.errors.length; i++) {
            console.error(strip_ansi_1.default(formatted.errors[i]));
        }
    }
}
function tryDismissErrorOverlay() {
    if (!hasCompileErrors) {
        react_error_overlay_1.dismissBuildError();
    }
}
function handleAvailableHash(hash) {
    mostRecentCompilationHash = hash;
}
connection.onmessage = function (e) {
    var message = JSON.parse(e.data);
    switch (message.type) {
        case 'hash':
            handleAvailableHash(message.data);
            break;
        case 'still-ok':
        case 'ok':
            handleSuccess();
            break;
        case 'content-changed':
            window.location.reload();
            break;
        case 'warnings':
            handleWarnings(message.data);
            break;
        case 'errors':
            handleErrors(message.data);
            break;
        default:
    }
};
function isUpdateAvailable() {
    return mostRecentCompilationHash !== __webpack_hash__;
}
function canApplyUpdates() {
    return module.hot.status() === 'idle';
}
var tryApplyUpdates = function (onHotUpdateSuccess) {
    if (!module.hot) {
        window.location.reload();
        return;
    }
    if (!isUpdateAvailable() || !canApplyUpdates()) {
        return;
    }
    var handleApplyUpdates = function (err, updatedModules) {
        var hasReactRefresh = process.env.FAST_REFRESH;
        var wantsForcedReload = err || !updatedModules || hadRuntimeError;
        if (!hasReactRefresh && wantsForcedReload) {
            window.location.reload();
            return;
        }
        if (typeof onHotUpdateSuccess === 'function') {
            onHotUpdateSuccess();
        }
        if (isUpdateAvailable()) {
            tryApplyUpdates();
        }
    };
    var result = module.hot.check(true, handleApplyUpdates);
    if (result && result.then) {
        result.then(function (mods) { return handleApplyUpdates(null, mods); }, function (err) { return handleApplyUpdates(err, null); });
    }
};
//# sourceMappingURL=index.js.map
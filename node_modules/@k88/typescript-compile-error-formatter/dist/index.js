"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var os_1 = __importDefault(require("os"));
var fs_1 = __importDefault(require("fs"));
var IssueOrigin_1 = require("fork-ts-checker-webpack-plugin/lib/issue/IssueOrigin");
exports.Origin = IssueOrigin_1.IssueOrigin;
var IssueSeverity_1 = require("fork-ts-checker-webpack-plugin/lib/issue/IssueSeverity");
exports.Severity = IssueSeverity_1.IssueSeverity;
var chalk_1 = __importDefault(require("chalk"));
var code_frame_1 = require("@babel/code-frame");
var decomposeIssue = function (issue) {
    if ('getOrigin' in issue && typeof issue.getOrigin === 'function') {
        return {
            origin: issue.getOrigin(),
            severity: issue.getSeverity(),
            code: issue.getCode(),
            message: issue.getMessage(),
            file: issue.getFile && issue.getFile(),
            line: issue.getLine && issue.getLine(),
            character: issue.getCharacter && issue.getCharacter(),
            stack: issue.getStack && issue.getStack(),
        };
    }
    return issue;
};
var types = {
    typescript: 'TypeScript',
    lint: 'Lint',
    internal: 'Internal',
};
exports.default = (function (issue, useColors) {
    if (useColors === void 0) { useColors = true; }
    var _a = decomposeIssue(issue), origin = _a.origin, severity = _a.severity, file = _a.file, line = _a.line, message = _a.message, code = _a.code, character = _a.character;
    var isWarning = severity === IssueSeverity_1.IssueSeverity.WARNING;
    var messageColor = isWarning ? chalk_1.default.yellow : chalk_1.default.red;
    var fileAndNumberColor = chalk_1.default.bold.cyan;
    var source = file && fs_1.default.existsSync(file) && fs_1.default.readFileSync(file, 'utf-8');
    var frame = source
        ? code_frame_1.codeFrameColumns(source, { start: { line: line, column: character } }, { highlightCode: useColors })
            .split('\n')
            .map(function (str) { return "  " + str; })
            .join(os_1.default.EOL)
        : '';
    return [
        messageColor.bold(types[origin] + " " + severity.toLowerCase() + " in ") +
            fileAndNumberColor(file + "(" + line + "," + character + ")") +
            messageColor(':'),
        message + "  " + messageColor.underline((origin === IssueOrigin_1.IssueOrigin.ESLINT ? 'Rule: ' : 'TS') + code),
        '',
        frame,
    ].join(os_1.default.EOL);
});
//# sourceMappingURL=index.js.map
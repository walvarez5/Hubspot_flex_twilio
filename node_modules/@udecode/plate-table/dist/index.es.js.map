{"version":3,"file":"index.es.js","sources":["../src/defaults.ts","../src/getTableDeserialize.ts","../src/queries/getCellInNextTableRow.ts","../src/queries/getNextTableCell.ts","../src/queries/getCellInPreviousTableRow.ts","../src/queries/getPreviousTableCell.ts","../src/queries/getTableCellEntry.ts","../src/getTableOnKeyDown.ts","../src/withTable.ts","../src/createTablePlugin.ts","../src/utils/getEmptyCellNode.ts","../src/transforms/addColumn.ts","../src/utils/getEmptyRowNode.ts","../src/transforms/addRow.ts","../src/transforms/deleteColumn.ts","../src/transforms/deleteRow.ts","../src/transforms/deleteTable.ts","../src/utils/getEmptyTableNode.ts","../src/transforms/insertTable.ts"],"sourcesContent":["import { PlatePluginOptions } from '@udecode/plate-core';\n\nexport const ELEMENT_TABLE = 'table';\nexport const ELEMENT_TH = 'th';\nexport const ELEMENT_TR = 'tr';\nexport const ELEMENT_TD = 'td';\n\nexport const KEYS_TABLE = [ELEMENT_TABLE, ELEMENT_TH, ELEMENT_TR, ELEMENT_TD];\n\nexport const DEFAULTS_TH: Partial<PlatePluginOptions> = {\n  getNodeProps: ({ element }) => ({\n    colSpan: element?.attributes?.colspan,\n    rowSpan: element?.attributes?.rowspan,\n  }),\n};\n\nexport const DEFAULTS_TD: Partial<PlatePluginOptions> = {\n  getNodeProps: ({ element }) => ({\n    colSpan: element?.attributes?.colspan,\n    rowSpan: element?.attributes?.rowspan,\n  }),\n};\n","import { getElementDeserializer } from '@udecode/plate-common';\nimport { Deserialize, getPlatePluginOptions } from '@udecode/plate-core';\nimport { ELEMENT_TABLE, ELEMENT_TD, ELEMENT_TH, ELEMENT_TR } from './defaults';\n\nexport const getTableDeserialize = (): Deserialize => (editor) => {\n  const table = getPlatePluginOptions(editor, ELEMENT_TABLE);\n  const td = getPlatePluginOptions(editor, ELEMENT_TD);\n  const th = getPlatePluginOptions(editor, ELEMENT_TH);\n  const tr = getPlatePluginOptions(editor, ELEMENT_TR);\n\n  return {\n    element: [\n      ...getElementDeserializer({\n        type: table.type,\n        rules: [{ nodeNames: 'TABLE' }],\n        ...table.deserialize,\n      }),\n      ...getElementDeserializer({\n        type: tr.type,\n        rules: [{ nodeNames: 'TR' }],\n        ...tr.deserialize,\n      }),\n      ...getElementDeserializer({\n        type: td.type,\n        attributeNames: ['rowspan', 'colspan'],\n        rules: [{ nodeNames: 'TD' }],\n        ...td.deserialize,\n      }),\n      ...getElementDeserializer({\n        type: th.type,\n        attributeNames: ['rowspan', 'colspan'],\n        rules: [{ nodeNames: 'TH' }],\n        ...th.deserialize,\n      }),\n    ],\n  };\n};\n","import { TEditor } from '@udecode/plate-core';\nimport { Ancestor, Editor, NodeEntry, Path } from 'slate';\n\nexport function getCellInNextTableRow(\n  editor: TEditor,\n  currentRowPath: Path\n): NodeEntry | undefined {\n  try {\n    const nextRow = Editor.node(\n      editor,\n      Path.next(currentRowPath)\n    ) as NodeEntry<Ancestor>;\n    // TODO: Many tables in rich text editors (Google Docs, Word),\n    // add a new row if we're in the last cell. Should we do the same?\n    const [nextRowNode, nextRowPath] = nextRow;\n    const nextCell = nextRowNode?.children?.[0];\n    const nextCellPath = nextRowPath.concat(0);\n    if (nextCell && nextCellPath) {\n      return Editor.node(editor, nextCellPath);\n    }\n  } catch (err) {}\n}\n","import { TEditor } from '@udecode/plate-core';\nimport { Editor, NodeEntry, Path } from 'slate';\nimport { getCellInNextTableRow } from './getCellInNextTableRow';\n\nexport function getNextTableCell(\n  editor: TEditor,\n  currentCell: NodeEntry,\n  currentPath: Path,\n  currentRow: NodeEntry\n): NodeEntry | undefined {\n  try {\n    return Editor.node(editor, Path.next(currentPath));\n  } catch (err) {\n    const [, currentRowPath] = currentRow;\n    return getCellInNextTableRow(editor, currentRowPath);\n  }\n}\n","import { TEditor } from '@udecode/plate-core';\nimport { Ancestor, Editor, NodeEntry, Path } from 'slate';\n\nexport function getCellInPreviousTableRow(\n  editor: TEditor,\n  currentRowPath: Path\n): NodeEntry | undefined {\n  try {\n    const previousRow = Editor.node(\n      editor,\n      Path.previous(currentRowPath)\n    ) as NodeEntry<Ancestor>;\n    const [previousRowNode, previousRowPath] = previousRow;\n    const previousCell =\n      previousRowNode?.children?.[previousRowNode.children.length - 1];\n    const previousCellPath = previousRowPath.concat(\n      previousRowNode.children.length - 1\n    );\n    if (previousCell && previousCellPath) {\n      return Editor.node(editor, previousCellPath);\n    }\n  } catch (err) {}\n}\n","import { TEditor } from '@udecode/plate-core';\nimport { Editor, NodeEntry, Path } from 'slate';\nimport { getCellInPreviousTableRow } from './getCellInPreviousTableRow';\n\nexport function getPreviousTableCell(\n  editor: TEditor,\n  currentCell: NodeEntry,\n  currentPath: Path,\n  currentRow: NodeEntry\n): NodeEntry | undefined {\n  try {\n    return Editor.node(editor, Path.previous(currentPath));\n  } catch (err) {\n    const [, currentRowPath] = currentRow;\n    return getCellInPreviousTableRow(editor, currentRowPath);\n  }\n}\n","import { getAbove, getParent, someNode } from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor } from '@udecode/plate-core';\nimport { Location } from 'slate';\nimport { ELEMENT_TD, ELEMENT_TH, ELEMENT_TR } from '../defaults';\n\n/**\n * If at (default = selection) is in table>tr>td or table>tr>th,\n * return table, tr, and td or th node entries.\n */\nexport const getTableCellEntry = (\n  editor: SPEditor,\n  { at = editor.selection }: { at?: Location | null } = {}\n) => {\n  if (\n    at &&\n    someNode(editor, {\n      at,\n      match: {\n        type: [\n          getPlatePluginType(editor, ELEMENT_TD),\n          getPlatePluginType(editor, ELEMENT_TH),\n        ],\n      },\n    })\n  ) {\n    const selectionParent = getParent(editor, at);\n    if (!selectionParent) return;\n    const [, paragraphPath] = selectionParent;\n\n    const tableCell =\n      getAbove(editor, {\n        at,\n        match: {\n          type: [\n            getPlatePluginType(editor, ELEMENT_TD),\n            getPlatePluginType(editor, ELEMENT_TH),\n          ],\n        },\n      }) || getParent(editor, paragraphPath);\n\n    if (!tableCell) return;\n    const [tableCellNode, tableCellPath] = tableCell;\n\n    if (\n      tableCellNode.type !== getPlatePluginType(editor, ELEMENT_TD) &&\n      tableCellNode.type !== getPlatePluginType(editor, ELEMENT_TH)\n    )\n      return;\n\n    const tableRow = getParent(editor, tableCellPath);\n    if (!tableRow) return;\n    const [tableRowNode, tableRowPath] = tableRow;\n\n    if (tableRowNode.type !== getPlatePluginType(editor, ELEMENT_TR)) return;\n\n    const tableElement = getParent(editor, tableRowPath);\n    if (!tableElement) return;\n\n    return {\n      tableElement,\n      tableRow,\n      tableCell,\n    };\n  }\n};\n","import { getAbove } from '@udecode/plate-common';\nimport {\n  getPlatePluginOptions,\n  KeyboardHandler,\n  SPEditor,\n  TElement,\n} from '@udecode/plate-core';\nimport { Transforms } from 'slate';\nimport { getNextTableCell } from './queries/getNextTableCell';\nimport { getPreviousTableCell } from './queries/getPreviousTableCell';\nimport { getTableCellEntry } from './queries/getTableCellEntry';\nimport { ELEMENT_TABLE } from './defaults';\n\nexport const getTableOnKeyDown = <\n  T extends SPEditor = SPEditor\n>(): KeyboardHandler<T> => (editor) => (e) => {\n  if (e.key === 'Tab') {\n    e.preventDefault();\n    const res = getTableCellEntry(editor, {});\n    if (!res) return;\n    const { tableRow, tableCell } = res;\n    const [, tableCellPath] = tableCell;\n    const shiftTab = e.shiftKey;\n    const tab = !e.shiftKey;\n    if (shiftTab) {\n      // move left with shift+tab\n      const previousCell = getPreviousTableCell(\n        editor,\n        tableCell,\n        tableCellPath,\n        tableRow\n      );\n      if (previousCell) {\n        const [, previousCellPath] = previousCell;\n        Transforms.select(editor, previousCellPath);\n      }\n    } else if (tab) {\n      // move right with tab\n      const nextCell = getNextTableCell(\n        editor,\n        tableCell,\n        tableCellPath,\n        tableRow\n      );\n      if (nextCell) {\n        const [, nextCellPath] = nextCell;\n        Transforms.select(editor, nextCellPath);\n      }\n    }\n  }\n\n  // FIXME: would prefer this as mod+a, but doesn't work\n  if (e.key === 'a' && (e.metaKey || e.ctrlKey)) {\n    const options = getPlatePluginOptions(editor, ELEMENT_TABLE);\n\n    const res = getAbove<TElement>(editor, { match: { type: options.type } });\n    if (!res) return;\n\n    const [, tablePath] = res;\n\n    // select the whole table\n    Transforms.select(editor, tablePath);\n\n    e.preventDefault();\n    e.stopPropagation();\n  }\n};\n","import { isCollapsed } from '@udecode/plate-common';\nimport {\n  getPlatePluginType,\n  isElement,\n  SPEditor,\n  TElement,\n  WithOverride,\n} from '@udecode/plate-core';\nimport { Editor, Node, Point, Transforms } from 'slate';\nimport { ELEMENT_TD, ELEMENT_TH } from './defaults';\n\nexport const withTable = (): WithOverride<SPEditor> => (editor) => {\n  const matchCells = (node: Node) => {\n    return (\n      isElement(node) &&\n      (node.type === getPlatePluginType(editor, ELEMENT_TD) ||\n        node.type === getPlatePluginType(editor, ELEMENT_TH))\n    );\n  };\n\n  const { deleteBackward, deleteForward, deleteFragment, insertText } = editor;\n\n  const preventDeleteCell = (\n    operation: any,\n    pointCallback: any,\n    nextPoint: any\n  ) => (unit: any) => {\n    const { selection } = editor;\n\n    if (isCollapsed(selection)) {\n      const [cell] = Editor.nodes<TElement>(editor, {\n        match: matchCells,\n      });\n      if (cell) {\n        // Prevent deletions within a cell\n        const [, cellPath] = cell;\n        const start = pointCallback(editor, cellPath);\n\n        if (selection && Point.equals(selection.anchor, start)) {\n          return;\n        }\n      } else {\n        // Prevent deleting cell when selection is before or after a table\n        const next = nextPoint(editor, selection, { unit });\n        const [nextCell] = Editor.nodes(editor, {\n          match: matchCells,\n          at: next,\n        });\n        if (nextCell) return;\n      }\n    }\n\n    operation(unit);\n  };\n\n  editor.deleteFragment = () => {\n    const { selection } = editor;\n    const [start] = Editor.nodes(editor, {\n      match: matchCells,\n      at: selection?.anchor.path,\n    });\n    const [end] = Editor.nodes(editor, {\n      match: matchCells,\n      at: selection?.focus.path,\n    });\n    // Skip deletes if they start or end in a table cell, unless start & end in the same cell\n    if ((start || end) && start?.[0] !== end?.[0]) {\n      // Clear cells content\n      const cells = Editor.nodes(editor, {\n        match: matchCells,\n      });\n      for (const [, path] of cells) {\n        for (const [, childPath] of Node.children(editor, path, {\n          reverse: true,\n        })) {\n          Transforms.removeNodes(editor, { at: childPath });\n        }\n      }\n      Transforms.collapse(editor);\n      return;\n    }\n    deleteFragment();\n  };\n\n  editor.insertText = (text) => {\n    const { selection } = editor;\n    const [start] = Editor.nodes(editor, {\n      match: matchCells,\n      at: selection?.anchor.path,\n    });\n    const [end] = Editor.nodes(editor, {\n      match: matchCells,\n      at: selection?.focus.path,\n    });\n    // Collapse selection if multiple cells are selected to avoid breaking the table\n    if (!isCollapsed(selection) && (start || end) && start?.[0] !== end?.[0]) {\n      const [cell] = Editor.nodes(editor, { match: matchCells });\n      if (cell) {\n        Transforms.collapse(editor, { edge: 'end' });\n        insertText(text);\n        return;\n      }\n    }\n    insertText(text);\n  };\n\n  // prevent deleting cells with deleteBackward\n  editor.deleteBackward = preventDeleteCell(\n    deleteBackward,\n    Editor.start,\n    Editor.before\n  );\n\n  // prevent deleting cells with deleteForward\n  editor.deleteForward = preventDeleteCell(\n    deleteForward,\n    Editor.end,\n    Editor.after\n  );\n\n  return editor;\n};\n","import { getRenderElement, PlatePlugin } from '@udecode/plate-core';\nimport { KEYS_TABLE } from './defaults';\nimport { getTableDeserialize } from './getTableDeserialize';\nimport { getTableOnKeyDown } from './getTableOnKeyDown';\nimport { withTable } from './withTable';\n\n/**\n * Enables support for tables.\n */\nexport const createTablePlugin = (): PlatePlugin => ({\n  pluginKeys: KEYS_TABLE,\n  renderElement: getRenderElement(KEYS_TABLE),\n  deserialize: getTableDeserialize(),\n  onKeyDown: getTableOnKeyDown(),\n  withOverrides: withTable(),\n});\n","import { ELEMENT_DEFAULT } from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor } from '@udecode/plate-core';\nimport { ELEMENT_TD, ELEMENT_TH } from '../defaults';\nimport { TablePluginOptions } from '../types';\n\nexport const getEmptyCellNode = (\n  editor: SPEditor,\n  { header }: TablePluginOptions\n) => {\n  return {\n    type: header\n      ? getPlatePluginType(editor, ELEMENT_TH)\n      : getPlatePluginType(editor, ELEMENT_TD),\n    children: [\n      {\n        type: getPlatePluginType(editor, ELEMENT_DEFAULT),\n        children: [{ text: '' }],\n      },\n    ],\n  };\n};\n","import { getAbove, insertNodes, someNode } from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor, TElement } from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { ELEMENT_TABLE, ELEMENT_TD, ELEMENT_TH } from '../defaults';\nimport { TablePluginOptions } from '../types';\nimport { getEmptyCellNode } from '../utils/getEmptyCellNode';\n\nexport const addColumn = (editor: SPEditor, { header }: TablePluginOptions) => {\n  if (\n    someNode(editor, {\n      match: { type: getPlatePluginType(editor, ELEMENT_TABLE) },\n    })\n  ) {\n    const currentCellItem = getAbove(editor, {\n      match: {\n        type: [\n          getPlatePluginType(editor, ELEMENT_TH),\n          getPlatePluginType(editor, ELEMENT_TD),\n        ],\n      },\n    });\n\n    const currentTableItem = getAbove(editor, {\n      match: { type: getPlatePluginType(editor, ELEMENT_TABLE) },\n    });\n\n    if (currentCellItem && currentTableItem) {\n      const nextCellPath = Path.next(currentCellItem[1]);\n      const newCellPath = nextCellPath.slice();\n      const replacePathPos = newCellPath.length - 2;\n      const currentRowIdx = nextCellPath[replacePathPos];\n\n      currentTableItem[0].children.forEach((row: TElement, rowIdx) => {\n        newCellPath[replacePathPos] = rowIdx;\n        const isHeaderRow =\n          header === undefined ? row.children[0].type === ELEMENT_TH : header;\n\n        insertNodes<TElement>(\n          editor,\n          getEmptyCellNode(editor, { header: isHeaderRow }),\n          {\n            at: newCellPath,\n            select: rowIdx === currentRowIdx,\n          }\n        );\n      });\n    }\n  }\n};\n","import { getPlatePluginType, SPEditor } from '@udecode/plate-core';\nimport { ELEMENT_TR } from '../defaults';\nimport { TablePluginOptions } from '../types';\nimport { getEmptyCellNode } from './getEmptyCellNode';\n\nexport const getEmptyRowNode = (\n  editor: SPEditor,\n  { header, colCount }: TablePluginOptions & { colCount: number }\n) => {\n  return {\n    type: getPlatePluginType(editor, ELEMENT_TR),\n    children: Array(colCount)\n      .fill(colCount)\n      .map(() => getEmptyCellNode(editor, { header })),\n  };\n};\n","import { getAbove, insertNodes, someNode } from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor, TElement } from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { ELEMENT_TABLE, ELEMENT_TR } from '../defaults';\nimport { TablePluginOptions } from '../types';\nimport { getEmptyRowNode } from '../utils/getEmptyRowNode';\n\nexport const addRow = (editor: SPEditor, { header }: TablePluginOptions) => {\n  if (\n    someNode(editor, {\n      match: { type: getPlatePluginType(editor, ELEMENT_TABLE) },\n    })\n  ) {\n    const currentRowItem = getAbove(editor, {\n      match: { type: getPlatePluginType(editor, ELEMENT_TR) },\n    });\n    if (currentRowItem) {\n      const [currentRowElem, currentRowPath] = currentRowItem;\n      insertNodes<TElement>(\n        editor,\n        getEmptyRowNode(editor, {\n          header,\n          colCount: currentRowElem.children.length,\n        }),\n        {\n          at: Path.next(currentRowPath),\n          select: true,\n        }\n      );\n    }\n  }\n};\n","import { getAbove, someNode } from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor } from '@udecode/plate-core';\nimport { Transforms } from 'slate';\nimport { ELEMENT_TABLE, ELEMENT_TD, ELEMENT_TH, ELEMENT_TR } from '../defaults';\n\nexport const deleteColumn = (editor: SPEditor) => {\n  if (\n    someNode(editor, {\n      match: { type: getPlatePluginType(editor, ELEMENT_TABLE) },\n    })\n  ) {\n    const currentCellItem = getAbove(editor, {\n      match: {\n        type: [\n          getPlatePluginType(editor, ELEMENT_TD),\n          getPlatePluginType(editor, ELEMENT_TH),\n        ],\n      },\n    });\n    const currentRowItem = getAbove(editor, {\n      match: { type: getPlatePluginType(editor, ELEMENT_TR) },\n    });\n    const currentTableItem = getAbove(editor, {\n      match: { type: getPlatePluginType(editor, ELEMENT_TABLE) },\n    });\n\n    if (\n      currentCellItem &&\n      currentRowItem &&\n      currentTableItem &&\n      // Cannot delete the last cell\n      currentRowItem[0].children.length > 1\n    ) {\n      const currentCellPath = currentCellItem[1];\n      const pathToDelete = currentCellPath.slice();\n      const replacePathPos = pathToDelete.length - 2;\n\n      currentTableItem[0].children.forEach((row, rowIdx) => {\n        pathToDelete[replacePathPos] = rowIdx;\n\n        Transforms.removeNodes(editor, {\n          at: pathToDelete,\n        });\n      });\n    }\n  }\n};\n","import { getAbove, someNode } from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor } from '@udecode/plate-core';\nimport { Transforms } from 'slate';\nimport { ELEMENT_TABLE, ELEMENT_TR } from '../defaults';\n\nexport const deleteRow = (editor: SPEditor) => {\n  if (\n    someNode(editor, {\n      match: { type: getPlatePluginType(editor, ELEMENT_TABLE) },\n    })\n  ) {\n    const currentTableItem = getAbove(editor, {\n      match: { type: getPlatePluginType(editor, ELEMENT_TABLE) },\n    });\n    const currentRowItem = getAbove(editor, {\n      match: { type: getPlatePluginType(editor, ELEMENT_TR) },\n    });\n    if (\n      currentRowItem &&\n      currentTableItem &&\n      // Cannot delete the last row\n      currentTableItem[0].children.length > 1\n    ) {\n      Transforms.removeNodes(editor, {\n        at: currentRowItem[1],\n      });\n    }\n  }\n};\n","import { getAbove, someNode } from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor } from '@udecode/plate-core';\nimport { Transforms } from 'slate';\nimport { ELEMENT_TABLE } from '../defaults';\n\nexport const deleteTable = (editor: SPEditor) => {\n  if (\n    someNode(editor, {\n      match: { type: getPlatePluginType(editor, ELEMENT_TABLE) },\n    })\n  ) {\n    const tableItem = getAbove(editor, {\n      match: { type: getPlatePluginType(editor, ELEMENT_TABLE) },\n    });\n    if (tableItem) {\n      Transforms.removeNodes(editor, {\n        at: tableItem[1],\n      });\n    }\n  }\n};\n","import { getPlatePluginType, SPEditor } from '@udecode/plate-core';\nimport { ELEMENT_TABLE } from '../defaults';\nimport { TablePluginOptions } from '../types';\nimport { getEmptyRowNode } from './getEmptyRowNode';\n\nexport const getEmptyTableNode = (\n  editor: SPEditor,\n  { header }: TablePluginOptions\n) => {\n  return {\n    type: getPlatePluginType(editor, ELEMENT_TABLE),\n    children: [\n      getEmptyRowNode(editor, { header, colCount: 2 }),\n      getEmptyRowNode(editor, { header: false, colCount: 2 }),\n    ],\n  };\n};\n","import { insertNodes, someNode } from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor, TElement } from '@udecode/plate-core';\nimport { ELEMENT_TABLE } from '../defaults';\nimport { TablePluginOptions } from '../types';\nimport { getEmptyTableNode } from '../utils/getEmptyTableNode';\n\nexport const insertTable = (\n  editor: SPEditor,\n  { header }: TablePluginOptions\n) => {\n  if (\n    !someNode(editor, {\n      match: { type: getPlatePluginType(editor, ELEMENT_TABLE) },\n    })\n  ) {\n    insertNodes<TElement>(editor, getEmptyTableNode(editor, { header }));\n  }\n};\n"],"names":["ELEMENT_TABLE","ELEMENT_TH","ELEMENT_TR","ELEMENT_TD","KEYS_TABLE","DEFAULTS_TH","getNodeProps","element","colSpan","attributes","colspan","rowSpan","rowspan","DEFAULTS_TD","getTableDeserialize","editor","table","getPlatePluginOptions","td","th","tr","getElementDeserializer","type","rules","nodeNames","deserialize","attributeNames","getCellInNextTableRow","currentRowPath","nextRow","Editor","node","Path","next","nextRowNode","nextRowPath","nextCell","children","nextCellPath","concat","err","getNextTableCell","currentCell","currentPath","currentRow","getCellInPreviousTableRow","previousRow","previous","previousRowNode","previousRowPath","previousCell","length","previousCellPath","getPreviousTableCell","getTableCellEntry","at","selection","someNode","match","getPlatePluginType","selectionParent","getParent","paragraphPath","tableCell","getAbove","tableCellNode","tableCellPath","tableRow","tableRowNode","tableRowPath","tableElement","getTableOnKeyDown","e","key","preventDefault","res","shiftTab","shiftKey","tab","Transforms","select","metaKey","ctrlKey","options","tablePath","stopPropagation","withTable","matchCells","isElement","deleteBackward","deleteForward","deleteFragment","insertText","preventDeleteCell","operation","pointCallback","nextPoint","unit","isCollapsed","cell","nodes","cellPath","start","Point","equals","anchor","path","end","focus","cells","childPath","Node","reverse","removeNodes","collapse","text","edge","before","after","createTablePlugin","pluginKeys","renderElement","getRenderElement","onKeyDown","withOverrides","getEmptyCellNode","header","ELEMENT_DEFAULT","addColumn","currentCellItem","currentTableItem","newCellPath","slice","replacePathPos","currentRowIdx","forEach","row","rowIdx","isHeaderRow","undefined","insertNodes","getEmptyRowNode","colCount","Array","fill","map","addRow","currentRowItem","currentRowElem","deleteColumn","currentCellPath","pathToDelete","deleteRow","deleteTable","tableItem","getEmptyTableNode","insertTable"],"mappings":"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"}
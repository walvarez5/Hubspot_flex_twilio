{"version":3,"file":"index.es.js","sources":["../src/defaults.ts","../src/getListDeserialize.ts","../../../../node_modules/lodash/isArray.js","../../../../node_modules/lodash/castArray.js","../../../../node_modules/is-hotkey/lib/index.js","../src/queries/isListNested.ts","../src/queries/getListTypes.ts","../src/transforms/moveListItemDown.ts","../src/queries/hasListChild.ts","../src/transforms/moveListItemsToList.ts","../src/transforms/unwrapList.ts","../src/transforms/moveListItemUp.ts","../src/transforms/moveListItems.ts","../src/transforms/indentListItems.ts","../src/transforms/insertListItem.ts","../src/transforms/moveListItemSublistItemsToListItemSublist.ts","../src/transforms/moveListSiblingsAfterCursor.ts","../src/transforms/removeFirstListItem.ts","../src/transforms/removeListItem.ts","../src/transforms/toggleList.ts","../src/transforms/unindentListItems.ts","../src/getListOnKeyDown.ts","../src/queries/getListItemEntry.ts","../src/getListDeleteBackward.ts","../src/queries/getHighestEmptyList.ts","../src/queries/getListRoot.ts","../src/queries/isAcrossListItems.ts","../src/getListDeleteForward.ts","../src/getListDeleteFragment.ts","../src/getListInsertBreak.ts","../src/getListInsertFragment.ts","../src/normalizers/normalizeListItem.ts","../src/normalizers/normalizeNestedList.ts","../src/normalizers/getListNormalizer.ts","../src/withList.ts","../src/createListPlugin.ts","../src/todo-list/constants.ts","../src/todo-list/defaults.ts","../src/todo-list/getTodoListDeserialize.ts","../src/todo-list/createTodoListPlugin.ts"],"sourcesContent":["export const ELEMENT_UL = 'ul';\nexport const ELEMENT_OL = 'ol';\nexport const ELEMENT_LI = 'li';\nexport const ELEMENT_LIC = 'lic';\n\nexport const KEYS_LIST = [ELEMENT_UL, ELEMENT_OL, ELEMENT_LI, ELEMENT_LIC];\n","import { findNode, getElementDeserializer } from '@udecode/plate-common';\nimport { Deserialize, getPlatePluginOptions } from '@udecode/plate-core';\nimport { ELEMENT_LI, ELEMENT_LIC, ELEMENT_OL, ELEMENT_UL } from './defaults';\n\nexport const getListDeserialize = (): Deserialize => (editor) => {\n  const li = getPlatePluginOptions(editor, ELEMENT_LI);\n  const lic = getPlatePluginOptions(editor, ELEMENT_LIC);\n  const ul = getPlatePluginOptions(editor, ELEMENT_UL);\n  const ol = getPlatePluginOptions(editor, ELEMENT_OL);\n\n  return {\n    element: [\n      ...getElementDeserializer({\n        type: ul.type,\n        rules: [{ nodeNames: 'UL' }],\n        ...ul.deserialize,\n      }),\n      ...getElementDeserializer({\n        type: ol.type,\n        rules: [{ nodeNames: 'OL' }],\n        ...ol.deserialize,\n      }),\n      ...getElementDeserializer({\n        type: li.type,\n        rules: [{ nodeNames: 'LI' }],\n        ...li.deserialize,\n      }),\n      ...getElementDeserializer({\n        type: lic.type,\n        rules: [{ nodeNames: 'LIC' }],\n        ...lic.deserialize,\n      }),\n    ],\n    preInsert: () => {\n      const liEntry = findNode(editor, { match: { type: li.type } });\n\n      if (liEntry) {\n        return true;\n      }\n    },\n  };\n};\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var isArray = require('./isArray');\n\n/**\n * Casts `value` as an array if it's not one.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Lang\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast array.\n * @example\n *\n * _.castArray(1);\n * // => [1]\n *\n * _.castArray({ 'a': 1 });\n * // => [{ 'a': 1 }]\n *\n * _.castArray('abc');\n * // => ['abc']\n *\n * _.castArray(null);\n * // => [null]\n *\n * _.castArray(undefined);\n * // => [undefined]\n *\n * _.castArray();\n * // => []\n *\n * var array = [1, 2, 3];\n * console.log(_.castArray(array) === array);\n * // => true\n */\nfunction castArray() {\n  if (!arguments.length) {\n    return [];\n  }\n  var value = arguments[0];\n  return isArray(value) ? value : [value];\n}\n\nmodule.exports = castArray;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n/**\n * Constants.\n */\n\nvar IS_MAC = typeof window != 'undefined' && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\n\nvar MODIFIERS = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey'\n};\n\nvar ALIASES = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta'\n};\n\nvar CODES = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  control: 17,\n  alt: 18,\n  pause: 19,\n  capslock: 20,\n  escape: 27,\n  ' ': 32,\n  pageup: 33,\n  pagedown: 34,\n  end: 35,\n  home: 36,\n  arrowleft: 37,\n  arrowup: 38,\n  arrowright: 39,\n  arrowdown: 40,\n  insert: 45,\n  delete: 46,\n  meta: 91,\n  numlock: 144,\n  scrolllock: 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  '\\'': 222\n};\n\nfor (var f = 1; f < 20; f++) {\n  CODES['f' + f] = 111 + f;\n}\n\n/**\n * Is hotkey?\n */\n\nfunction isHotkey(hotkey, options, event) {\n  if (options && !('byKey' in options)) {\n    event = options;\n    options = null;\n  }\n\n  if (!Array.isArray(hotkey)) {\n    hotkey = [hotkey];\n  }\n\n  var array = hotkey.map(function (string) {\n    return parseHotkey(string, options);\n  });\n  var check = function check(e) {\n    return array.some(function (object) {\n      return compareHotkey(object, e);\n    });\n  };\n  var ret = event == null ? check : check(event);\n  return ret;\n}\n\nfunction isCodeHotkey(hotkey, event) {\n  return isHotkey(hotkey, event);\n}\n\nfunction isKeyHotkey(hotkey, event) {\n  return isHotkey(hotkey, { byKey: true }, event);\n}\n\n/**\n * Parse.\n */\n\nfunction parseHotkey(hotkey, options) {\n  var byKey = options && options.byKey;\n  var ret = {};\n\n  // Special case to handle the `+` key since we use it as a separator.\n  hotkey = hotkey.replace('++', '+add');\n  var values = hotkey.split('+');\n  var length = values.length;\n\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n\n  for (var k in MODIFIERS) {\n    ret[MODIFIERS[k]] = false;\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var value = _step.value;\n\n      var optional = value.endsWith('?') && value.length > 1;\n\n      if (optional) {\n        value = value.slice(0, -1);\n      }\n\n      var name = toKeyName(value);\n      var modifier = MODIFIERS[name];\n\n      if (length === 1 || !modifier) {\n        if (byKey) {\n          ret.key = name;\n        } else {\n          ret.which = toKeyCode(value);\n        }\n      }\n\n      if (modifier) {\n        ret[modifier] = optional ? null : true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Compare.\n */\n\nfunction compareHotkey(object, event) {\n  for (var key in object) {\n    var expected = object[key];\n    var actual = void 0;\n\n    if (expected == null) {\n      continue;\n    }\n\n    if (key === 'key' && event.key != null) {\n      actual = event.key.toLowerCase();\n    } else if (key === 'which') {\n      actual = expected === 91 && event.which === 93 ? 91 : event.which;\n    } else {\n      actual = event[key];\n    }\n\n    if (actual == null && expected === false) {\n      continue;\n    }\n\n    if (actual !== expected) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Utils.\n */\n\nfunction toKeyCode(name) {\n  name = toKeyName(name);\n  var code = CODES[name] || name.toUpperCase().charCodeAt(0);\n  return code;\n}\n\nfunction toKeyName(name) {\n  name = name.toLowerCase();\n  name = ALIASES[name] || name;\n  return name;\n}\n\n/**\n * Export.\n */\n\nexports.default = isHotkey;\nexports.isHotkey = isHotkey;\nexports.isCodeHotkey = isCodeHotkey;\nexports.isKeyHotkey = isKeyHotkey;\nexports.parseHotkey = parseHotkey;\nexports.compareHotkey = compareHotkey;\nexports.toKeyCode = toKeyCode;\nexports.toKeyName = toKeyName;","import { getParent } from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor, TElement } from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { ELEMENT_LI } from '../defaults';\n\n/**\n * Is the list nested, i.e. its parent is a list item.\n */\nexport const isListNested = (editor: SPEditor, listPath: Path) => {\n  const listParentNode = getParent<TElement>(editor, listPath)?.[0];\n\n  return listParentNode?.type === getPlatePluginType(editor, ELEMENT_LI);\n};\n","import { getPlatePluginType, SPEditor } from '@udecode/plate-core';\nimport { ELEMENT_OL, ELEMENT_UL } from '../defaults';\n\nexport const getListTypes = (editor: SPEditor) => {\n  return [\n    getPlatePluginType(editor, ELEMENT_OL),\n    getPlatePluginType(editor, ELEMENT_UL),\n  ];\n};\n","import { match, wrapNodes } from '@udecode/plate-common';\nimport { SPEditor, TElement } from '@udecode/plate-core';\nimport { Ancestor, Editor, Element, NodeEntry, Path, Transforms } from 'slate';\nimport { getListTypes } from '../queries/getListTypes';\n\nexport interface MoveListItemDownOptions {\n  list: NodeEntry<TElement>;\n  listItem: NodeEntry<TElement>;\n}\n\nexport const moveListItemDown = (\n  editor: SPEditor,\n  { list, listItem }: MoveListItemDownOptions\n) => {\n  const [listNode] = list;\n  const [, listItemPath] = listItem;\n\n  let previousListItemPath: Path;\n\n  try {\n    previousListItemPath = Path.previous(listItemPath);\n  } catch (e) {\n    return;\n  }\n\n  // Previous sibling is the new parent\n  const previousSiblingItem = Editor.node(\n    editor,\n    previousListItemPath\n  ) as NodeEntry<Ancestor>;\n\n  if (previousSiblingItem) {\n    const [previousNode, previousPath] = previousSiblingItem;\n\n    const sublist = previousNode.children.find((n) =>\n      match(n, { type: getListTypes(editor) })\n    ) as Element | undefined;\n    const newPath = previousPath.concat(\n      sublist ? [1, sublist.children.length] : [1]\n    );\n\n    if (!sublist) {\n      // Create new sublist\n      wrapNodes(\n        editor,\n        { type: listNode.type, children: [] },\n        { at: listItemPath }\n      );\n    }\n\n    // Move the current item to the sublist\n    Transforms.moveNodes(editor, {\n      at: listItemPath,\n      to: newPath,\n    });\n  }\n};\n","import { match } from '@udecode/plate-common';\nimport { SPEditor } from '@udecode/plate-core';\nimport { Ancestor } from 'slate';\nimport { getListTypes } from './getListTypes';\n\n/**\n * Is there a list child in the node.\n */\nexport const hasListChild = (editor: SPEditor, node: Ancestor) =>\n  node.children.some((n) => match(n, { type: getListTypes(editor) }));\n","import {\n  findDescendant,\n  getLastChildPath,\n  moveChildren,\n  MoveChildrenOptions,\n} from '@udecode/plate-common';\nimport { SPEditor, TElement } from '@udecode/plate-core';\nimport { NodeEntry, Path, Transforms } from 'slate';\nimport { getListTypes } from '../queries/getListTypes';\n\nexport interface MergeListItemIntoListOptions {\n  /**\n   * List items of the sublist of this node will be moved.\n   */\n  fromListItem?: NodeEntry<TElement>;\n\n  /**\n   * List items of the list will be moved.\n   */\n  fromList?: NodeEntry<TElement>;\n\n  /**\n   * List items will be moved in this list.\n   */\n  toList?: NodeEntry<TElement>;\n\n  fromStartIndex?: MoveChildrenOptions['fromStartIndex'];\n\n  /**\n   * List position where to move the list items.\n   */\n  toListIndex?: number | null;\n\n  to?: Path;\n\n  /**\n   * Delete `fromListItem` sublist if true.\n   * @default true\n   */\n  deleteFromList?: boolean;\n}\n\n/**\n * Move the list items of the sublist of `fromListItem` to `toList` (if `fromListItem` is defined).\n * Move the list items of `fromList` to `toList` (if `fromList` is defined).\n */\nexport const moveListItemsToList = (\n  editor: SPEditor,\n  {\n    fromList,\n    fromListItem,\n    fromStartIndex,\n    to: _to,\n    toList,\n    toListIndex = null,\n    deleteFromList = true,\n  }: MergeListItemIntoListOptions\n) => {\n  let fromListPath: Path | undefined;\n\n  if (fromListItem) {\n    const fromListItemSublist = findDescendant(editor, {\n      at: fromListItem[1],\n      match: {\n        type: getListTypes(editor),\n      },\n    });\n    if (!fromListItemSublist) return 0;\n\n    fromListPath = fromListItemSublist?.[1];\n  } else if (fromList) {\n    // eslint-disable-next-line prefer-destructuring\n    fromListPath = fromList[1];\n  } else {\n    return;\n  }\n\n  let to: Path | null = null;\n\n  if (_to) to = _to;\n  if (toList) {\n    if (toListIndex !== null) to = toList[1].concat([toListIndex]);\n    else {\n      const lastChildPath = getLastChildPath(toList);\n      to = Path.next(lastChildPath);\n    }\n  }\n  if (!to) return;\n\n  const moved = moveChildren(editor, {\n    at: fromListPath,\n    to,\n    fromStartIndex,\n  });\n\n  // Remove the empty list\n  if (deleteFromList) {\n    Transforms.delete(editor, { at: fromListPath });\n  }\n\n  return moved;\n};\n","import { ELEMENT_DEFAULT, setNodes, unwrapNodes } from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor } from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { ELEMENT_LI, ELEMENT_OL, ELEMENT_UL } from '../defaults';\n\nexport const unwrapList = (editor: SPEditor, { at }: { at?: Path } = {}) => {\n  setNodes(\n    editor,\n    {\n      type: getPlatePluginType(editor, ELEMENT_DEFAULT),\n    },\n    { at }\n  );\n\n  unwrapNodes(editor, {\n    at,\n    match: { type: getPlatePluginType(editor, ELEMENT_LI) },\n  });\n\n  unwrapNodes(editor, {\n    at,\n    match: {\n      type: [\n        getPlatePluginType(editor, ELEMENT_UL),\n        getPlatePluginType(editor, ELEMENT_OL),\n      ],\n    },\n    split: true,\n  });\n};\n","import {\n  getAbove,\n  getNode,\n  insertNodes,\n  isLastChild,\n} from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor, TElement } from '@udecode/plate-core';\nimport { Editor, NodeEntry, Path, Transforms } from 'slate';\nimport { ELEMENT_LI } from '../defaults';\nimport { hasListChild } from '../queries/hasListChild';\nimport { moveListItemsToList } from './moveListItemsToList';\nimport { unwrapList } from './unwrapList';\n\nexport interface MoveListItemUpOptions {\n  list: NodeEntry<TElement>;\n  listItem: NodeEntry<TElement>;\n}\n\n/**\n * Move a list item up.\n */\nexport const moveListItemUp = (\n  editor: SPEditor,\n  { list, listItem }: MoveListItemUpOptions\n) => {\n  const move = () => {\n    const [listNode, listPath] = list;\n    const [liNode, liPath] = listItem;\n\n    const liParent = getAbove<TElement>(editor, {\n      at: listPath,\n      match: { type: getPlatePluginType(editor, ELEMENT_LI) },\n    });\n    if (!liParent) {\n      let toListPath;\n      try {\n        toListPath = Path.next(listPath);\n      } catch (err) {\n        return;\n      }\n\n      const condA = hasListChild(editor, liNode);\n      const condB = !isLastChild(list, liPath);\n\n      if (condA || condB) {\n        // Insert a new list next to `list`\n        insertNodes<TElement>(\n          editor,\n          {\n            type: listNode.type,\n            children: [],\n          },\n          { at: toListPath }\n        );\n      }\n\n      if (condA) {\n        const toListNode = getNode<TElement>(editor, toListPath);\n        if (!toListNode) return;\n\n        // Move li sub-lis to the new list\n        moveListItemsToList(editor, {\n          fromListItem: listItem,\n          toList: [toListNode, toListPath],\n        });\n      }\n\n      // If there is siblings li, move them to the new list\n      if (condB) {\n        const toListNode = getNode<TElement>(editor, toListPath);\n        if (!toListNode) return;\n\n        // Move next lis to the new list\n        moveListItemsToList(editor, {\n          fromList: list,\n          fromStartIndex: liPath[liPath.length - 1] + 1,\n          toList: [toListNode, toListPath],\n          deleteFromList: false,\n        });\n      }\n\n      // Finally, unwrap the list\n      unwrapList(editor, { at: liPath.concat(0) });\n\n      return true;\n    }\n    const [, liParentPath] = liParent;\n\n    const toListPath = liPath.concat([1]);\n\n    // If li has next siblings, we need to move them.\n    if (!isLastChild(list, liPath)) {\n      // If li has no sublist, insert one.\n      if (!hasListChild(editor, liNode)) {\n        insertNodes<TElement>(\n          editor,\n          {\n            type: listNode.type,\n            children: [],\n          },\n          { at: toListPath }\n        );\n      }\n\n      const toListNode = getNode<TElement>(editor, toListPath);\n      if (!toListNode) return;\n\n      // Move next siblings to li sublist.\n      moveListItemsToList(editor, {\n        fromListItem: liParent,\n        toList: [toListNode, toListPath],\n        fromStartIndex: liPath[liPath.length - 1] + 1,\n        deleteFromList: false,\n      });\n    }\n\n    const movedUpLiPath = Path.next(liParentPath);\n\n    // Move li one level up: next to the li parent.\n    Transforms.moveNodes(editor, {\n      at: liPath,\n      to: movedUpLiPath,\n    });\n\n    return true;\n  };\n\n  let moved: boolean | undefined = false;\n\n  Editor.withoutNormalizing(editor, () => {\n    moved = move();\n  });\n\n  return moved;\n};\n","import { getNodes, getParent } from '@udecode/plate-common';\nimport { EditorNodesOptions } from '@udecode/plate-common/src';\nimport { getPlatePluginType, SPEditor } from '@udecode/plate-core';\nimport { Editor, Path, PathRef } from 'slate';\nimport { ELEMENT_LIC } from '../defaults';\nimport { isListNested } from '../queries/isListNested';\nimport { moveListItemDown } from './moveListItemDown';\nimport { moveListItemUp } from './moveListItemUp';\n\nexport type MoveListItemsOptions = {\n  increase?: boolean;\n  at?: EditorNodesOptions['at'];\n};\n\nexport const moveListItems = (\n  editor: SPEditor,\n  {\n    increase = true,\n    at = editor.selection ?? undefined,\n  }: MoveListItemsOptions = {}\n) => {\n  // Get the selected lic\n  const [...lics] = getNodes(editor, {\n    at,\n    match: {\n      type: getPlatePluginType(editor, ELEMENT_LIC),\n    },\n  });\n\n  if (!lics.length) return;\n\n  const highestLicPaths: Path[] = [];\n  const highestLicPathRefs: PathRef[] = [];\n\n  // Filter out the nested lic, we just need to move the highest ones\n  lics.forEach((lic) => {\n    const licPath = lic[1];\n    const liPath = Path.parent(licPath);\n\n    const isAncestor = highestLicPaths.some((path) => {\n      const highestLiPath = Path.parent(path);\n\n      return Path.isAncestor(highestLiPath, liPath);\n    });\n    if (!isAncestor) {\n      highestLicPaths.push(licPath);\n      highestLicPathRefs.push(Editor.pathRef(editor, licPath));\n    }\n  });\n\n  const licPathRefsToMove = increase\n    ? highestLicPathRefs\n    : highestLicPathRefs.reverse();\n\n  licPathRefsToMove.forEach((licPathRef) => {\n    const licPath = licPathRef.unref();\n    if (!licPath) return;\n\n    const listItem = getParent(editor, licPath);\n    if (!listItem) return;\n    const listEntry = getParent(editor, listItem[1]);\n\n    if (increase) {\n      moveListItemDown(editor, {\n        list: listEntry as any,\n        listItem: listItem as any,\n      });\n    } else if (listEntry && isListNested(editor, listEntry[1])) {\n      moveListItemUp(editor, {\n        list: listEntry as any,\n        listItem: listItem as any,\n      });\n    }\n  });\n};\n","import { SPEditor } from '@udecode/plate-core';\nimport { moveListItems } from './moveListItems';\n\nexport const indentListItems = (editor: SPEditor) => {\n  moveListItems(editor, { increase: true });\n};\n","import {\n  getAbove,\n  getParent,\n  insertNodes,\n  isBlockTextEmptyAfterSelection,\n  wrapNodes,\n} from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor, TElement } from '@udecode/plate-core';\nimport { Editor, Path, Range, Transforms } from 'slate';\nimport { ELEMENT_LI, ELEMENT_LIC } from '../defaults';\n\n/**\n * Insert list item if selection in li>p.\n * TODO: test\n */\nexport const insertListItem = (editor: SPEditor) => {\n  const liType = getPlatePluginType(editor, ELEMENT_LI);\n  const licType = getPlatePluginType(editor, ELEMENT_LIC);\n\n  if (editor.selection) {\n    const licEntry = getAbove(editor, { match: { type: licType } });\n    if (!licEntry) return;\n    const [, paragraphPath] = licEntry;\n\n    const listItemEntry = getParent(editor, paragraphPath);\n    if (!listItemEntry) return;\n    const [listItemNode, listItemPath] = listItemEntry;\n\n    if (listItemNode.type !== liType) return;\n\n    if (!Range.isCollapsed(editor.selection)) {\n      Transforms.delete(editor);\n    }\n\n    const isStart = Editor.isStart(\n      editor,\n      editor.selection.focus,\n      paragraphPath\n    );\n    const isEnd = isBlockTextEmptyAfterSelection(editor);\n\n    const nextParagraphPath = Path.next(paragraphPath);\n    const nextListItemPath = Path.next(listItemPath);\n\n    /**\n     * If start, insert a list item before\n     */\n    if (isStart) {\n      insertNodes<TElement>(\n        editor,\n        {\n          type: liType,\n          children: [{ type: licType, children: [{ text: '' }] }],\n        },\n        { at: listItemPath }\n      );\n      return true;\n    }\n\n    /**\n     * If not end, split nodes, wrap a list item on the new paragraph and move it to the next list item\n     */\n    if (!isEnd) {\n      Editor.withoutNormalizing(editor, () => {\n        Transforms.splitNodes(editor);\n        wrapNodes(\n          editor,\n          {\n            type: liType,\n            children: [],\n          },\n          { at: nextParagraphPath }\n        );\n        Transforms.moveNodes(editor, {\n          at: nextParagraphPath,\n          to: nextListItemPath,\n        });\n        Transforms.select(editor, nextListItemPath);\n        Transforms.collapse(editor, {\n          edge: 'start',\n        });\n      });\n    } else {\n      /**\n       * If end, insert a list item after and select it\n       */\n      const marks = Editor.marks(editor) || {};\n      insertNodes<TElement>(\n        editor,\n        {\n          type: liType,\n          children: [{ type: licType, children: [{ text: '', ...marks }] }],\n        },\n        { at: nextListItemPath }\n      );\n      Transforms.select(editor, nextListItemPath);\n    }\n\n    /**\n     * If there is a list in the list item, move it to the next list item\n     */\n    if (listItemNode.children.length > 1) {\n      Transforms.moveNodes(editor, {\n        at: nextParagraphPath,\n        to: nextListItemPath.concat(1),\n      });\n    }\n\n    return true;\n  }\n};\n","import {\n  findDescendant,\n  getLastChildPath,\n  getParent,\n  insertNodes,\n  moveChildren,\n} from '@udecode/plate-common';\nimport { SPEditor, TElement } from '@udecode/plate-core';\nimport { NodeEntry, Path, Transforms } from 'slate';\nimport { getListTypes } from '../queries/getListTypes';\n\nexport interface MoveListItemSublistItemsToListItemSublistOptions {\n  /**\n   * The list item to merge.\n   */\n  fromListItem: NodeEntry<TElement>;\n\n  /**\n   * The list item where to merge.\n   */\n  toListItem: NodeEntry<TElement>;\n\n  /**\n   * Move to the start of the list instead of the end.\n   */\n  start?: boolean;\n}\n\n/**\n * Move fromListItem sublist list items to the end of `toListItem` sublist.\n * If there is no `toListItem` sublist, insert one.\n */\nexport const moveListItemSublistItemsToListItemSublist = (\n  editor: SPEditor,\n  {\n    fromListItem,\n    toListItem,\n    start,\n  }: MoveListItemSublistItemsToListItemSublistOptions\n) => {\n  const [, fromListItemPath] = fromListItem;\n  const [, toListItemPath] = toListItem;\n\n  const fromListItemSublist = findDescendant<TElement>(editor, {\n    at: fromListItemPath,\n    match: {\n      type: getListTypes(editor),\n    },\n  });\n  if (!fromListItemSublist) return 0;\n\n  const [, fromListItemSublistPath] = fromListItemSublist;\n\n  const toListItemSublist = findDescendant<TElement>(editor, {\n    at: toListItemPath,\n    match: {\n      type: getListTypes(editor),\n    },\n  });\n\n  let to: Path;\n\n  if (!toListItemSublist) {\n    const fromList = getParent(editor, fromListItemPath);\n    if (!fromList) return 0;\n    const [fromListNode] = fromList;\n\n    const fromListType = fromListNode.type;\n\n    const toListItemSublistPath = toListItemPath.concat([1]);\n\n    insertNodes<TElement>(\n      editor,\n      { type: fromListType, children: [] },\n      { at: toListItemSublistPath }\n    );\n\n    to = toListItemSublistPath.concat([0]);\n  } else if (start) {\n    const [, toListItemSublistPath] = toListItemSublist;\n    to = toListItemSublistPath.concat([0]);\n  } else {\n    to = Path.next(getLastChildPath(toListItemSublist));\n  }\n\n  const moved = moveChildren(editor, {\n    at: fromListItemSublistPath,\n    to,\n  });\n\n  // Remove the empty list\n  Transforms.delete(editor, { at: fromListItemSublistPath });\n\n  return moved;\n};\n","import { match, moveChildren } from '@udecode/plate-common';\nimport { SPEditor } from '@udecode/plate-core';\nimport { Node, NodeEntry, Path } from 'slate';\nimport { getListTypes } from '../queries/getListTypes';\n\nexport const moveListSiblingsAfterCursor = (\n  editor: SPEditor,\n  {\n    at,\n    to,\n  }: {\n    at: Path;\n    to: Path;\n  }\n): number => {\n  const offset = at[at.length - 1];\n  at = Path.parent(at);\n  const listNode = Node.get(editor, at);\n  const listEntry: NodeEntry = [listNode, at];\n\n  if (\n    !match(listNode, { type: getListTypes(editor) }) ||\n    Path.isParent(at, to) // avoid moving nodes within its own list\n  ) {\n    return 0;\n  }\n\n  return moveChildren(editor, {\n    at: listEntry,\n    to,\n    fromStartIndex: offset + 1,\n  });\n};\n","import { isFirstChild } from '@udecode/plate-common';\nimport { SPEditor, TElement } from '@udecode/plate-core';\nimport { NodeEntry } from 'slate';\nimport { isListNested } from '../queries/isListNested';\nimport { moveListItemUp } from './moveListItemUp';\n\n/**\n * If list is not nested and if li is not the first child, move li up.\n */\nexport const removeFirstListItem = (\n  editor: SPEditor,\n  {\n    list,\n    listItem,\n  }: {\n    list: NodeEntry<TElement>;\n    listItem: NodeEntry<TElement>;\n  }\n) => {\n  const [, listPath] = list;\n  const [, listItemPath] = listItem;\n\n  if (!isListNested(editor, listPath) && !isFirstChild(listItemPath)) {\n    moveListItemUp(editor, { list, listItem });\n\n    return true;\n  }\n\n  return false;\n};\n","import {\n  deleteFragment,\n  getPreviousPath,\n  insertNodes,\n  isExpanded,\n} from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor, TElement } from '@udecode/plate-core';\nimport { Editor, NodeEntry, Path, Transforms } from 'slate';\nimport { ELEMENT_LI, ELEMENT_LIC } from '../defaults';\nimport { hasListChild } from '../queries/hasListChild';\nimport { moveListItemsToList } from './moveListItemsToList';\nimport { moveListItemSublistItemsToListItemSublist } from './moveListItemSublistItemsToListItemSublist';\n\nexport interface RemoveListItemOptions {\n  list: NodeEntry<TElement>;\n  listItem: NodeEntry<TElement>;\n  reverse?: boolean;\n}\n\n/**\n * Remove list item and move its sublist to list if any.\n */\nexport const removeListItem = (\n  editor: SPEditor,\n  { list, listItem, reverse = true }: RemoveListItemOptions\n) => {\n  const [liNode, liPath] = listItem;\n\n  // Stop if the list item has no sublist\n  if (isExpanded(editor.selection) || !hasListChild(editor, liNode)) {\n    return false;\n  }\n\n  const previousLiPath = getPreviousPath(liPath);\n\n  /**\n   * If there is a previous li, we need to move sub-lis to the previous li.\n   * As we need to delete first, we will:\n   * 1. insert a temporary li: tempLi\n   * 2. move sub-lis to tempLi\n   * 3. delete\n   * 4. move sub-lis from tempLi to the previous li.\n   * 5. remove tempLi\n   */\n  if (previousLiPath) {\n    const previousLi = Editor.node(\n      editor,\n      previousLiPath\n    ) as NodeEntry<TElement>;\n\n    // 1\n    let tempLiPath = Path.next(liPath);\n    insertNodes<TElement>(\n      editor,\n      {\n        type: getPlatePluginType(editor, ELEMENT_LI),\n        children: [\n          {\n            type: getPlatePluginType(editor, ELEMENT_LIC),\n            children: [{ text: '' }],\n          },\n        ],\n      },\n      { at: tempLiPath }\n    );\n\n    const tempLi = Editor.node(editor, tempLiPath) as NodeEntry<TElement>;\n    const tempLiPathRef = Editor.pathRef(editor, tempLi[1]);\n\n    // 2\n    moveListItemSublistItemsToListItemSublist(editor, {\n      fromListItem: listItem,\n      toListItem: tempLi,\n    });\n\n    // 3\n    deleteFragment(editor, {\n      reverse,\n    });\n\n    tempLiPath = tempLiPathRef.unref()!;\n\n    // 4\n    moveListItemSublistItemsToListItemSublist(editor, {\n      fromListItem: [tempLi[0], tempLiPath],\n      toListItem: previousLi,\n    });\n\n    // 5\n    Transforms.removeNodes(editor, { at: tempLiPath });\n\n    return true;\n  }\n\n  // If it's the first li, move the sublist to the parent list\n  moveListItemsToList(editor, {\n    fromListItem: listItem,\n    toList: list,\n    toListIndex: 1,\n  });\n};\n","import {\n  ELEMENT_DEFAULT,\n  getNodes,\n  setNodes,\n  someNode,\n  wrapNodes,\n} from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor, TElement } from '@udecode/plate-core';\nimport { Editor } from 'slate';\nimport { ELEMENT_LI, ELEMENT_LIC } from '../defaults';\nimport { unwrapList } from './unwrapList';\n\nexport const toggleList = (editor: SPEditor, { type }: { type: string }) => {\n  if (!editor.selection) return;\n\n  Editor.withoutNormalizing(editor, () => {\n    const isActive = someNode(editor, { match: { type } });\n\n    unwrapList(editor);\n\n    setNodes<TElement>(editor, {\n      type: getPlatePluginType(editor, ELEMENT_DEFAULT),\n    });\n\n    if (!isActive) {\n      const list = { type, children: [] };\n      wrapNodes(editor, list);\n\n      const nodes = [\n        ...getNodes(editor, {\n          match: { type: getPlatePluginType(editor, ELEMENT_DEFAULT) },\n        }),\n      ];\n      setNodes(editor, { type: getPlatePluginType(editor, ELEMENT_LIC) });\n\n      const listItem = {\n        type: getPlatePluginType(editor, ELEMENT_LI),\n        children: [],\n      };\n\n      for (const [, path] of nodes) {\n        wrapNodes(editor, listItem, {\n          at: path,\n        });\n      }\n    }\n  });\n};\n","import { SPEditor } from '@udecode/plate-core';\nimport { moveListItems, MoveListItemsOptions } from './moveListItems';\n\nexport type UnindentListItemsOptions = Omit<MoveListItemsOptions, 'increase'>;\n\nexport const unindentListItems = (\n  editor: SPEditor,\n  options: UnindentListItemsOptions = {}\n): void => moveListItems(editor, { ...options, increase: false });\n","import { getAbove } from '@udecode/plate-common';\nimport {\n  getPlatePluginTypes,\n  KeyboardHandler,\n  mapPlatePluginKeysToOptions,\n} from '@udecode/plate-core';\nimport isHotkey from 'is-hotkey';\nimport { castArray } from 'lodash';\nimport { ELEMENT_OL, ELEMENT_UL } from './defaults';\nimport { moveListItems, toggleList } from './transforms';\n\nexport const getListOnKeyDown = (\n  pluginKeys?: string | string[]\n): KeyboardHandler => (editor) => (e) => {\n  const listTypes = getPlatePluginTypes([ELEMENT_UL, ELEMENT_OL])(editor);\n\n  if (e.key === 'Tab' && editor.selection) {\n    const listSelected = getAbove(editor, {\n      at: editor.selection,\n      match: { type: listTypes },\n    });\n\n    if (listSelected) {\n      e.preventDefault();\n      moveListItems(editor, { increase: !e.shiftKey });\n      return;\n    }\n  }\n\n  const options = pluginKeys\n    ? mapPlatePluginKeysToOptions(editor, pluginKeys)\n    : [];\n\n  options.forEach(({ type, hotkey }) => {\n    if (!hotkey) return;\n\n    const hotkeys = castArray(hotkey);\n\n    for (const key of hotkeys) {\n      if (isHotkey(key)(e as any) && listTypes.includes(type)) {\n        toggleList(editor, { type });\n      }\n    }\n  });\n};\n","import {\n  getAbove,\n  getParent,\n  isCollapsed,\n  someNode,\n} from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor, TElement } from '@udecode/plate-core';\nimport { Location, NodeEntry, Range } from 'slate';\nimport { ELEMENT_LI } from '../defaults';\n\n/**\n * If at (default = selection) is in ul>li>p, return li and ul node entries.\n */\nexport const getListItemEntry = (\n  editor: SPEditor,\n  { at = editor.selection }: { at?: Location | null } = {}\n): { list: NodeEntry<TElement>; listItem: NodeEntry<TElement> } | undefined => {\n  const liType = getPlatePluginType(editor, ELEMENT_LI);\n  if (at && someNode(editor, { at, match: { type: liType } })) {\n    const selectionParent = getParent(editor, at);\n    if (!selectionParent) return;\n    const [, paragraphPath] = selectionParent;\n\n    // If selection range includes root list item\n    if (Range.isRange(at) && !isCollapsed(at) && paragraphPath.length === 1) {\n      at = at.focus.path;\n    }\n\n    const listItem =\n      getAbove<TElement>(editor, { at, match: { type: liType } }) ||\n      getParent<TElement>(editor, paragraphPath);\n\n    if (!listItem) return;\n    const [listItemNode, listItemPath] = listItem;\n\n    if (listItemNode.type !== liType) return;\n\n    const list = getParent<TElement>(editor, listItemPath);\n    if (!list) return;\n\n    return {\n      list,\n      listItem,\n    };\n  }\n};\n","import {\n  deleteFragment,\n  ELEMENT_DEFAULT,\n  isFirstChild,\n  isSelectionAtBlockStart,\n} from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor } from '@udecode/plate-core';\nimport {\n  getResetNodeOnKeyDown,\n  SIMULATE_BACKSPACE,\n} from '@udecode/plate-reset-node';\nimport { Editor } from 'slate';\nimport { getListItemEntry } from './queries/getListItemEntry';\nimport { isListNested } from './queries/isListNested';\nimport { removeFirstListItem } from './transforms/removeFirstListItem';\nimport { removeListItem } from './transforms/removeListItem';\nimport { unwrapList } from './transforms/unwrapList';\nimport { ELEMENT_LI } from './defaults';\n\nexport const getListDeleteBackward = (\n  editor: SPEditor,\n  unit: 'character' | 'word' | 'line' | 'block'\n) => {\n  const res = getListItemEntry(editor, {});\n\n  let moved: boolean | undefined = false;\n\n  if (res) {\n    const { list, listItem } = res;\n\n    if (isSelectionAtBlockStart(editor)) {\n      Editor.withoutNormalizing(editor, () => {\n        moved = removeFirstListItem(editor, { list, listItem });\n        if (moved) return true;\n\n        moved = removeListItem(editor, { list, listItem });\n        if (moved) return true;\n\n        if (isFirstChild(listItem[1]) && !isListNested(editor, list[1])) {\n          getResetNodeOnKeyDown({\n            rules: [\n              {\n                types: [getPlatePluginType(editor, ELEMENT_LI)],\n                defaultType: getPlatePluginType(editor, ELEMENT_DEFAULT),\n                hotkey: 'backspace',\n                predicate: () => isSelectionAtBlockStart(editor),\n                onReset: (_editor) => unwrapList(_editor as SPEditor),\n              },\n            ],\n          })(editor)(SIMULATE_BACKSPACE);\n          moved = true;\n          return;\n        }\n\n        deleteFragment(editor, {\n          unit,\n          reverse: true,\n        });\n        moved = true;\n      });\n    }\n  }\n\n  return moved;\n};\n","import { getAbove } from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor } from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { ELEMENT_LI } from '../defaults';\nimport { getListTypes } from './getListTypes';\n\n/**\n * Find the highest end list that can be deleted.\n * Its path should be different to diffListPath.\n * If the highest end list 2+ items, return liPath.\n * Get the parent list until:\n * - the list has less than 2 items.\n * - its path is not equals to diffListPath.\n */\nexport const getHighestEmptyList = (\n  editor: SPEditor,\n  {\n    diffListPath,\n    liPath,\n  }: {\n    liPath: Path;\n    diffListPath?: Path;\n  }\n): Path | undefined => {\n  const list = getAbove(editor, {\n    at: liPath,\n    match: { type: getListTypes(editor) },\n  });\n  if (!list) return;\n  const [listNode, listPath] = list;\n\n  if (!diffListPath || !Path.equals(listPath, diffListPath)) {\n    if (listNode.children.length < 2) {\n      const liParent = getAbove(editor, {\n        at: listPath,\n        match: { type: getPlatePluginType(editor, ELEMENT_LI) },\n      });\n\n      if (liParent) {\n        return (\n          getHighestEmptyList(editor, { liPath: liParent[1], diffListPath }) ||\n          listPath\n        );\n      }\n    }\n    return liPath;\n  }\n};\n","import { getAbove } from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor } from '@udecode/plate-core';\nimport { Ancestor, NodeEntry, Path, Point, Range } from 'slate';\nimport { ELEMENT_OL, ELEMENT_UL } from '../defaults';\n\n/**\n * Searches upward for the root list element\n */\nexport const getListRoot = (\n  editor: SPEditor,\n  at: Path | Range | Point | null = editor.selection\n): NodeEntry<Ancestor> | undefined => {\n  if (!at) return;\n\n  const parentList = getAbove(editor, {\n    at,\n    match: {\n      type: [\n        getPlatePluginType(editor, ELEMENT_UL),\n        getPlatePluginType(editor, ELEMENT_OL),\n      ],\n    },\n  });\n\n  if (parentList) {\n    const [, parentListPath] = parentList;\n\n    return getListRoot(editor, parentListPath) ?? parentList;\n  }\n};\n","import {\n  isCollapsed,\n  isRangeAcrossBlocks,\n  someNode,\n} from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor } from '@udecode/plate-core';\nimport { ELEMENT_LI } from '../defaults';\n\n/**\n * Is selection across blocks with list items\n */\nexport const isAcrossListItems = (editor: SPEditor) => {\n  const { selection } = editor;\n\n  if (!selection || isCollapsed(selection)) {\n    return false;\n  }\n\n  const isAcrossBlocks = isRangeAcrossBlocks(editor);\n  if (!isAcrossBlocks) return false;\n\n  return someNode(editor, {\n    match: { type: getPlatePluginType(editor, ELEMENT_LI) },\n  });\n};\n","import {\n  getChildren,\n  getNode,\n  isSelectionAtBlockEnd,\n} from '@udecode/plate-common';\nimport {\n  getPlatePluginOptions,\n  SPEditor,\n  TDescendant,\n} from '@udecode/plate-core';\nimport { Editor, Node, NodeEntry, Path } from 'slate';\nimport { ELEMENT_LI } from './defaults';\nimport { getListItemEntry, hasListChild } from './queries';\nimport { removeFirstListItem, removeListItem } from './transforms';\n\nconst pathToEntry = <T extends Node>(\n  editor: SPEditor,\n  path: Path\n): NodeEntry<T> => Editor.node(editor, path) as NodeEntry<T>;\n\nexport const getListDeleteForward = (editor: SPEditor) => {\n  const res = getListItemEntry(editor, {});\n\n  let moved: boolean | undefined = false;\n  if (!isSelectionAtBlockEnd(editor) || !res) {\n    return moved;\n  }\n\n  Editor.withoutNormalizing(editor, () => {\n    const { listItem } = res;\n\n    if (!hasListChild(editor, listItem[0])) {\n      const li = getPlatePluginOptions(editor, ELEMENT_LI);\n      const liWithSiblings = Array.from(\n        Editor.nodes(editor, {\n          at: listItem[1],\n          mode: 'lowest',\n          match: (node: TDescendant, path) => {\n            if (path.length === 0) {\n              return false;\n            }\n\n            const isNodeLi = node.type === li.type;\n            const isSiblingOfNodeLi =\n              (getNode(editor, Path.next(path)) as TDescendant)?.type ===\n              li.type;\n\n            return isNodeLi && isSiblingOfNodeLi;\n          },\n        }),\n        (entry) => entry[1]\n      )[0];\n\n      if (!liWithSiblings) {\n        return;\n      }\n\n      const siblingListItem: NodeEntry<TDescendant> = pathToEntry(\n        editor,\n        Path.next(liWithSiblings)\n      );\n\n      const siblingList: NodeEntry<TDescendant> = Editor.parent(\n        editor,\n        siblingListItem[1]\n      );\n\n      moved = removeListItem(editor, {\n        list: siblingList,\n        listItem: siblingListItem,\n        reverse: false,\n      });\n      if (moved) return;\n\n      return;\n    }\n\n    const nestedList = pathToEntry<TDescendant>(\n      editor,\n      Path.next([...listItem[1], 0])\n    );\n    const nestedListItem = getChildren<TDescendant>(nestedList)[0];\n\n    moved = removeFirstListItem(editor, {\n      list: nestedList,\n      listItem: nestedListItem,\n    });\n    if (moved) return;\n\n    moved = removeListItem(editor, {\n      list: nestedList,\n      listItem: nestedListItem,\n    });\n  });\n\n  return moved;\n};\n","import { deleteFragment, getAbove, getParent } from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor } from '@udecode/plate-core';\nimport { Editor, Range, Transforms } from 'slate';\nimport { getHighestEmptyList } from './queries/getHighestEmptyList';\nimport { hasListChild } from './queries/hasListChild';\nimport { isAcrossListItems } from './queries/isAcrossListItems';\nimport { ELEMENT_LI } from './defaults';\n\nexport const getListDeleteFragment = (editor: SPEditor) => {\n  let deleted = false;\n\n  Editor.withoutNormalizing(editor, () => {\n    // Selection should be across list items\n    if (!isAcrossListItems(editor)) return;\n\n    /**\n     * Check if the end li can be deleted (if it has no sublist).\n     * Store the path ref to delete it after deleteFragment.\n     */\n    const end = Editor.end(editor, editor.selection as Range);\n    const liEnd = getAbove(editor, {\n      at: end,\n      match: { type: getPlatePluginType(editor, ELEMENT_LI) },\n    });\n    const liEndCanBeDeleted = liEnd && !hasListChild(editor, liEnd[0]);\n    const liEndPathRef = liEndCanBeDeleted\n      ? Editor.pathRef(editor, liEnd![1])\n      : undefined;\n\n    /**\n     * Delete fragment and move end block children to start block\n     */\n    deleteFragment(editor);\n\n    const start = Editor.start(editor, editor.selection as Range);\n    const liStart = getAbove(editor, {\n      at: start,\n      match: { type: getPlatePluginType(editor, ELEMENT_LI) },\n    });\n\n    if (liEndPathRef) {\n      const liEndPath = liEndPathRef.unref()!;\n\n      const listStart = liStart && getParent(editor, liStart[1]);\n\n      const deletePath = getHighestEmptyList(editor, {\n        liPath: liEndPath,\n        diffListPath: listStart?.[1],\n      });\n\n      if (deletePath) {\n        Transforms.removeNodes(editor, { at: deletePath });\n      }\n\n      deleted = true;\n    }\n  });\n\n  return deleted;\n};\n","import { ELEMENT_DEFAULT, isBlockAboveEmpty } from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor } from '@udecode/plate-core';\nimport {\n  getResetNodeOnKeyDown,\n  SIMULATE_BACKSPACE,\n} from '@udecode/plate-reset-node';\nimport { getListItemEntry } from './queries/getListItemEntry';\nimport { insertListItem } from './transforms/insertListItem';\nimport { moveListItemUp } from './transforms/moveListItemUp';\nimport { unwrapList } from './transforms/unwrapList';\nimport { ELEMENT_LI } from './defaults';\n\nexport const getListInsertBreak = (editor: SPEditor) => {\n  if (!editor.selection) return;\n\n  const res = getListItemEntry(editor, {});\n  let moved: boolean | undefined;\n\n  // If selection is in a li\n  if (res) {\n    const { list, listItem } = res;\n\n    // If selected li is empty, move it up.\n    if (isBlockAboveEmpty(editor)) {\n      moved = moveListItemUp(editor, {\n        list,\n        listItem,\n      });\n\n      if (moved) return true;\n    }\n  }\n\n  const didReset = getResetNodeOnKeyDown({\n    rules: [\n      {\n        types: [getPlatePluginType(editor, ELEMENT_LI)],\n        defaultType: getPlatePluginType(editor, ELEMENT_DEFAULT),\n        predicate: () => !moved && isBlockAboveEmpty(editor),\n        onReset: (_editor) => unwrapList(_editor as SPEditor),\n      },\n    ],\n  })(editor)(SIMULATE_BACKSPACE as any);\n  if (didReset) return true;\n\n  /**\n   * If selection is in li > p, insert li.\n   */\n  if (!moved) {\n    const inserted = insertListItem(editor);\n    if (inserted) return true;\n  }\n};\n","import { findNode } from '@udecode/plate-common';\nimport {\n  getPlatePluginOptions,\n  PlatePluginOptions,\n  SPEditor,\n  TDescendant,\n} from '@udecode/plate-core';\nimport { Node, NodeEntry, Path, Transforms } from 'slate';\nimport { ELEMENT_LI, ELEMENT_OL, ELEMENT_UL } from './defaults';\n\nexport const getListInsertFragment = (editor: SPEditor) => {\n  const { insertFragment } = editor;\n\n  const li = getPlatePluginOptions(editor, ELEMENT_LI);\n  const ul = getPlatePluginOptions(editor, ELEMENT_UL);\n  const ol = getPlatePluginOptions(editor, ELEMENT_OL);\n\n  const isListRoot = (node: TDescendant): boolean =>\n    [ul.type, ol.type].includes(node.type);\n\n  const getFirstAncestorOfType = (\n    root: TDescendant,\n    entry: NodeEntry,\n    { type }: PlatePluginOptions\n  ): NodeEntry<TDescendant> => {\n    let ancestor: Path = Path.parent(entry[1]);\n    while ((Node.get(root, ancestor) as TDescendant).type !== type) {\n      ancestor = Path.parent(ancestor);\n    }\n\n    return [Node.get(root, ancestor), ancestor];\n  };\n\n  /**\n   * Removes the \"empty\" leading lis. Empty in this context means lis only with other lis as children.\n   *\n   * @returns If argument is not a list root, returns it, otherwise returns ul[] or li[].\n   */\n  const trimList = <T extends TDescendant>(listRoot: T): T[] => {\n    if (!isListRoot(listRoot)) {\n      return [listRoot];\n    }\n\n    const textEntries = Array.from(Node.texts(listRoot));\n\n    const commonAncestorEntry = textEntries.reduce<NodeEntry<TDescendant>>(\n      (commonAncestor, textEntry) =>\n        Path.isAncestor(commonAncestor[1], textEntry[1])\n          ? commonAncestor\n          : Node.common(listRoot, textEntry[1], commonAncestor[1]),\n      // any list item would do, we grab the first one\n      getFirstAncestorOfType(listRoot, textEntries[0], li)\n    );\n\n    return isListRoot(commonAncestorEntry[0])\n      ? commonAncestorEntry[0].children\n      : [commonAncestorEntry[0]];\n  };\n\n  return (fragment: TDescendant[]) => {\n    const liEntry = findNode(editor, {\n      match: { type: li.type },\n      mode: 'lowest',\n    });\n\n    if (liEntry) {\n      const [, liPath] = liEntry;\n\n      // FIXME: fork insertFragment for edge cases\n      return Transforms.insertNodes(\n        editor,\n        fragment.flatMap((node) => trimList(node)),\n        { at: Path.next(liPath), select: true }\n      );\n    }\n\n    const filtered: TDescendant[] = isListRoot(fragment[0])\n      ? [{ text: '' }, ...fragment]\n      : fragment;\n\n    return insertFragment(filtered);\n  };\n};\n","import {\n  getChildren,\n  insertEmptyElement,\n  match,\n  setNodes,\n} from '@udecode/plate-common';\nimport {\n  getPlatePluginType,\n  SPEditor,\n  TDescendant,\n  TElement,\n} from '@udecode/plate-core';\nimport { Editor, NodeEntry, Path, PathRef, Transforms } from 'slate';\nimport { ELEMENT_LIC, ELEMENT_OL, ELEMENT_UL } from '../defaults';\nimport { ListNormalizerOptions } from '../types';\n\n/**\n * Recursively get all the:\n * - block children\n * - inline children except those at excludeDepth\n */\nexport const getDeepInlineChildren = (\n  editor: SPEditor,\n  {\n    children,\n  }: {\n    children: NodeEntry<TDescendant>[];\n  }\n) => {\n  const inlineChildren: NodeEntry<TDescendant>[] = [];\n\n  for (const child of children) {\n    if (Editor.isBlock(editor, child[0])) {\n      inlineChildren.push(\n        ...getDeepInlineChildren(editor, {\n          children: getChildren(child),\n        })\n      );\n    } else {\n      inlineChildren.push(child);\n    }\n  }\n\n  return inlineChildren;\n};\n\n/**\n * If the list item has no child: insert an empty list item container.\n * Else: move the children that are not valid to the list item container.\n */\nexport const normalizeListItem = (\n  editor: SPEditor,\n  {\n    listItem,\n    validLiChildrenTypes = [],\n  }: { listItem: NodeEntry<TElement> } & ListNormalizerOptions\n) => {\n  let changed = false;\n\n  const allValidLiChildrenTypes = [\n    getPlatePluginType(editor, ELEMENT_UL),\n    getPlatePluginType(editor, ELEMENT_OL),\n    getPlatePluginType(editor, ELEMENT_LIC),\n    ...validLiChildrenTypes,\n  ];\n\n  const [, liPath] = listItem;\n  const liChildren = getChildren(listItem);\n\n  // Get invalid (type) li children path refs to be moved\n  const invalidLiChildrenPathRefs = liChildren\n    .filter(([child]) => !allValidLiChildrenTypes.includes(child.type))\n    .map(([, childPath]) => Editor.pathRef(editor, childPath));\n\n  const firstLiChild: NodeEntry<any> | undefined = liChildren[0];\n  const [firstLiChildNode, firstLiChildPath] = firstLiChild ?? [];\n\n  // If li has no child or inline child, insert lic\n  if (!firstLiChild || !Editor.isBlock(editor, firstLiChildNode)) {\n    insertEmptyElement(editor, getPlatePluginType(editor, ELEMENT_LIC), {\n      at: liPath.concat([0]),\n    });\n    return true;\n  }\n\n  // If first li child is a block but not lic, set it to lic\n  if (\n    Editor.isBlock(editor, firstLiChildNode) &&\n    !match(firstLiChildNode as any, {\n      type: getPlatePluginType(editor, ELEMENT_LIC),\n    })\n  ) {\n    setNodes<TElement>(\n      editor,\n      {\n        type: getPlatePluginType(editor, ELEMENT_LIC),\n      },\n      {\n        at: firstLiChildPath,\n      }\n    );\n    changed = true;\n  }\n\n  const licChildren = getChildren(firstLiChild);\n\n  if (licChildren.length) {\n    Editor.withoutNormalizing(editor, () => {\n      const blockPathRefs: PathRef[] = [];\n      const inlineChildren: NodeEntry[] = [];\n\n      // Check that lic has no block children\n      for (const licChild of licChildren) {\n        if (!Editor.isBlock(editor, licChild[0])) {\n          break;\n        }\n\n        blockPathRefs.push(Editor.pathRef(editor, licChild[1]));\n\n        inlineChildren.push(\n          ...getDeepInlineChildren(editor, {\n            children: getChildren(licChild),\n          })\n        );\n      }\n\n      const to = Path.next(licChildren[licChildren.length - 1]?.[1]);\n\n      // Move lic nested inline children to its children\n      inlineChildren.reverse().forEach(([, path]) => {\n        Transforms.moveNodes(editor, {\n          at: path,\n          to,\n        });\n      });\n\n      // Remove lic block children\n      blockPathRefs.forEach((pathRef) => {\n        const path = pathRef.unref();\n\n        path &&\n          Transforms.removeNodes(editor, {\n            at: path,\n          });\n      });\n\n      if (blockPathRefs.length) {\n        changed = true;\n      }\n    });\n  }\n\n  if (changed) return true;\n\n  // Ensure that any text nodes under the list are inside the list item container\n  invalidLiChildrenPathRefs.reverse().forEach((ref) => {\n    const path = ref.unref();\n\n    path &&\n      Transforms.moveNodes(editor, {\n        at: path,\n        to: firstLiChildPath.concat([0]),\n      });\n  });\n\n  return !!invalidLiChildrenPathRefs.length;\n};\n","import { getParent, match } from '@udecode/plate-common';\nimport { SPEditor, TElement } from '@udecode/plate-core';\nimport { Ancestor, Editor, NodeEntry, Path, Transforms } from 'slate';\nimport { getListTypes } from '../queries';\n\n// When pasting from e.g. Google Docs, the structure of nested lists like \"ul -> ul\"\n// should be normalized to \"ul -> li -> lic + ul\".\n// In other words, a nested list as a direct children of a list should be moved into a previous list item sibling\nexport const normalizeNestedList = (\n  editor: SPEditor,\n  { nestedListItem }: { nestedListItem: NodeEntry<TElement> }\n) => {\n  const [, path] = nestedListItem;\n\n  const parentNode = getParent(editor, path);\n  const hasParentList =\n    parentNode && match(parentNode[0], { type: getListTypes(editor) });\n  if (!hasParentList) {\n    return false;\n  }\n\n  let previousListItemPath: Path;\n  try {\n    previousListItemPath = Path.previous(path);\n  } catch (e) {\n    return false;\n  }\n\n  // Previous sibling is the new parent\n  const previousSiblingItem = Editor.node(\n    editor,\n    previousListItemPath\n  ) as NodeEntry<Ancestor>;\n\n  if (previousSiblingItem) {\n    const [, previousPath] = previousSiblingItem;\n    const newPath = previousPath.concat([1]);\n\n    // Move the current item to the sublist\n    Transforms.moveNodes(editor, {\n      at: path,\n      to: newPath,\n    });\n\n    return true;\n  }\n};\n","import {\n  ELEMENT_DEFAULT,\n  getParent,\n  match,\n  setNodes,\n} from '@udecode/plate-common';\nimport {\n  getPlatePluginType,\n  isElement,\n  SPEditor,\n  TDescendant,\n} from '@udecode/plate-core';\nimport { NodeEntry, Transforms } from 'slate';\nimport { ELEMENT_LI, ELEMENT_LIC } from '../defaults';\nimport { getListTypes } from '../queries/getListTypes';\nimport { ListNormalizerOptions } from '../types';\nimport { normalizeListItem } from './normalizeListItem';\nimport { normalizeNestedList } from './normalizeNestedList';\n\n/**\n * Normalize list node to force the ul>li>p+ul structure.\n */\nexport const getListNormalizer = (\n  editor: SPEditor,\n  { validLiChildrenTypes }: ListNormalizerOptions\n) => {\n  const { normalizeNode } = editor;\n  const liType = getPlatePluginType(editor, ELEMENT_LI);\n  const licType = getPlatePluginType(editor, ELEMENT_LIC);\n  const defaultType = getPlatePluginType(editor, ELEMENT_DEFAULT);\n\n  return ([node, path]: NodeEntry) => {\n    if (!isElement(node)) return;\n\n    if (match(node, { type: getListTypes(editor) })) {\n      if (\n        !node.children.length ||\n        !node.children.find((item) => (item as TDescendant).type === liType)\n      ) {\n        return Transforms.removeNodes(editor, { at: path });\n      }\n\n      if (normalizeNestedList(editor, { nestedListItem: [node, path] })) {\n        return;\n      }\n    }\n\n    if (node.type === getPlatePluginType(editor, ELEMENT_LI)) {\n      if (\n        normalizeListItem(editor, {\n          listItem: [node, path],\n          validLiChildrenTypes,\n        })\n      ) {\n        return;\n      }\n    }\n\n    // LIC should have LI parent. If not, set LIC to DEFAULT type.\n    if (node.type === licType && licType !== defaultType) {\n      if (getParent(editor, path)?.[0].type !== liType) {\n        setNodes(editor, { type: defaultType }, { at: path });\n        return;\n      }\n    }\n\n    normalizeNode([node, path]);\n  };\n};\n","import { SPEditor, WithOverride } from '@udecode/plate-core';\nimport { getListDeleteBackward } from './getListDeleteBackward';\nimport { getListDeleteForward } from './getListDeleteForward';\nimport { getListDeleteFragment } from './getListDeleteFragment';\nimport { getListInsertBreak } from './getListInsertBreak';\nimport { getListInsertFragment } from './getListInsertFragment';\nimport { getListNormalizer } from './normalizers';\nimport { WithListOptions } from './types';\n\nexport const withList = ({\n  validLiChildrenTypes,\n}: WithListOptions = {}): WithOverride<SPEditor> => (editor) => {\n  const { insertBreak, deleteBackward, deleteForward, deleteFragment } = editor;\n\n  editor.insertBreak = () => {\n    if (getListInsertBreak(editor)) return;\n\n    insertBreak();\n  };\n\n  editor.deleteBackward = (unit) => {\n    if (getListDeleteBackward(editor, unit)) return;\n\n    deleteBackward(unit);\n  };\n\n  editor.deleteForward = (unit) => {\n    if (getListDeleteForward(editor)) return;\n\n    deleteForward(unit);\n  };\n\n  editor.deleteFragment = () => {\n    if (getListDeleteFragment(editor)) return;\n\n    deleteFragment();\n  };\n\n  editor.insertFragment = getListInsertFragment(editor);\n\n  editor.normalizeNode = getListNormalizer(editor, { validLiChildrenTypes });\n\n  return editor;\n};\n","import { getRenderElement, PlatePlugin } from '@udecode/plate-core';\nimport { KEYS_LIST } from './defaults';\nimport { getListDeserialize } from './getListDeserialize';\nimport { getListOnKeyDown } from './getListOnKeyDown';\nimport { WithListOptions } from './types';\nimport { withList } from './withList';\n\n/**\n * Enables support for bulleted, numbered and to-do lists.\n */\nexport const createListPlugin = (options?: WithListOptions): PlatePlugin => ({\n  pluginKeys: KEYS_LIST,\n  renderElement: getRenderElement(KEYS_LIST),\n  deserialize: getListDeserialize(),\n  onKeyDown: getListOnKeyDown(KEYS_LIST),\n  withOverrides: withList(options),\n});\n","export const CLASS_TODO_LIST_CHECKED = 'slate-TodoListElement-rootChecked';\n","import { PlatePluginOptions } from '@udecode/plate-core';\n\nexport const ELEMENT_TODO_LI = 'action_item';\n\nexport const DEFAULTS_TODO_LIST: Partial<PlatePluginOptions> = {\n  hotkey: ['mod+opt+4', 'mod+shift+4'],\n};\n","import { getNodeDeserializer } from '@udecode/plate-common';\nimport {\n  Deserialize,\n  getPlatePluginOptions,\n  getSlateClass,\n} from '@udecode/plate-core';\nimport { CLASS_TODO_LIST_CHECKED } from './constants';\nimport { ELEMENT_TODO_LI } from './defaults';\n\nexport const getTodoListDeserialize = (): Deserialize => (editor) => {\n  const options = getPlatePluginOptions(editor, ELEMENT_TODO_LI);\n\n  return {\n    element: getNodeDeserializer({\n      type: options.type,\n      getNode: (el) => ({\n        type: options.type,\n        checked: el.classList.contains(CLASS_TODO_LIST_CHECKED),\n      }),\n      rules: [{ className: getSlateClass(options.type) }],\n    }),\n  };\n};\n","import { getToggleElementOnKeyDown } from '@udecode/plate-common';\nimport { getRenderElement, PlatePlugin } from '@udecode/plate-core';\nimport { ELEMENT_TODO_LI } from './defaults';\nimport { getTodoListDeserialize } from './getTodoListDeserialize';\n\nexport const createTodoListPlugin = (): PlatePlugin => ({\n  pluginKeys: ELEMENT_TODO_LI,\n  renderElement: getRenderElement(ELEMENT_TODO_LI),\n  deserialize: getTodoListDeserialize(),\n  onKeyDown: getToggleElementOnKeyDown(ELEMENT_TODO_LI),\n});\n"],"names":["ELEMENT_UL","ELEMENT_OL","ELEMENT_LI","ELEMENT_LIC","KEYS_LIST","getListDeserialize","editor","li","getPlatePluginOptions","lic","ul","ol","element","getElementDeserializer","type","rules","nodeNames","deserialize","preInsert","liEntry","findNode","match","isArray","isListNested","listPath","listParentNode","getParent","getPlatePluginType","getListTypes","moveListItemDown","list","listItem","listNode","listItemPath","previousListItemPath","Path","previous","e","previousSiblingItem","Editor","node","previousNode","previousPath","sublist","children","find","n","newPath","concat","length","wrapNodes","at","Transforms","moveNodes","to","hasListChild","some","moveListItemsToList","fromList","fromListItem","fromStartIndex","_to","toList","toListIndex","deleteFromList","fromListPath","fromListItemSublist","findDescendant","lastChildPath","getLastChildPath","next","moved","moveChildren","delete","unwrapList","setNodes","ELEMENT_DEFAULT","unwrapNodes","split","moveListItemUp","move","liNode","liPath","liParent","getAbove","toListPath","err","condA","condB","isLastChild","insertNodes","toListNode","getNode","liParentPath","movedUpLiPath","withoutNormalizing","moveListItems","increase","selection","undefined","lics","getNodes","highestLicPaths","highestLicPathRefs","forEach","licPath","parent","isAncestor","path","highestLiPath","push","pathRef","licPathRefsToMove","reverse","licPathRef","unref","listEntry","indentListItems","insertListItem","liType","licType","licEntry","paragraphPath","listItemEntry","listItemNode","Range","isCollapsed","isStart","focus","isEnd","isBlockTextEmptyAfterSelection","nextParagraphPath","nextListItemPath","text","splitNodes","select","collapse","edge","marks","moveListItemSublistItemsToListItemSublist","toListItem","start","fromListItemPath","toListItemPath","fromListItemSublistPath","toListItemSublist","fromListNode","fromListType","toListItemSublistPath","moveListSiblingsAfterCursor","offset","Node","get","isParent","removeFirstListItem","isFirstChild","removeListItem","isExpanded","previousLiPath","getPreviousPath","previousLi","tempLiPath","tempLi","tempLiPathRef","deleteFragment","removeNodes","toggleList","isActive","someNode","nodes","unindentListItems","options","getListOnKeyDown","pluginKeys","listTypes","getPlatePluginTypes","key","listSelected","preventDefault","shiftKey","mapPlatePluginKeysToOptions","hotkey","hotkeys","_castArray","isHotkey","includes","getListItemEntry","selectionParent","isRange","getListDeleteBackward","unit","res","isSelectionAtBlockStart","getResetNodeOnKeyDown","types","defaultType","predicate","onReset","_editor","SIMULATE_BACKSPACE","getHighestEmptyList","diffListPath","equals","getListRoot","parentList","parentListPath","isAcrossListItems","isAcrossBlocks","isRangeAcrossBlocks","pathToEntry","getListDeleteForward","isSelectionAtBlockEnd","liWithSiblings","Array","from","mode","isNodeLi","isSiblingOfNodeLi","entry","siblingListItem","siblingList","nestedList","nestedListItem","getChildren","getListDeleteFragment","deleted","end","liEnd","liEndCanBeDeleted","liEndPathRef","liStart","liEndPath","listStart","deletePath","getListInsertBreak","isBlockAboveEmpty","didReset","inserted","getListInsertFragment","insertFragment","isListRoot","getFirstAncestorOfType","root","ancestor","trimList","listRoot","textEntries","texts","commonAncestorEntry","reduce","commonAncestor","textEntry","common","fragment","flatMap","filtered","getDeepInlineChildren","inlineChildren","child","isBlock","normalizeListItem","validLiChildrenTypes","changed","allValidLiChildrenTypes","liChildren","invalidLiChildrenPathRefs","filter","map","childPath","firstLiChild","firstLiChildNode","firstLiChildPath","insertEmptyElement","licChildren","blockPathRefs","licChild","ref","normalizeNestedList","parentNode","hasParentList","getListNormalizer","normalizeNode","isElement","item","withList","insertBreak","deleteBackward","deleteForward","createListPlugin","renderElement","getRenderElement","onKeyDown","withOverrides","CLASS_TODO_LIST_CHECKED","ELEMENT_TODO_LI","DEFAULTS_TODO_LIST","getTodoListDeserialize","getNodeDeserializer","el","checked","classList","contains","className","getSlateClass","createTodoListPlugin","getToggleElementOnKeyDown"],"mappings":"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"}
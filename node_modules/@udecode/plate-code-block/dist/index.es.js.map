{"version":3,"file":"index.es.js","sources":["../src/defaults.ts","../src/getCodeBlockDecorate.ts","../src/getCodeBlockDeserialize.ts","../src/queries/getCodeLineEntry.ts","../src/queries/getCodeLines.ts","../src/transforms/indentCodeLine.ts","../src/transforms/deleteStartSpace.ts","../src/transforms/outdentCodeLine.ts","../src/getCodeBlockOnKeyDown.ts","../src/getCodeBlockRenderLeaf.tsx","../src/queries/getIndentDepth.ts","../src/transforms/insertCodeLine.ts","../src/withCodeBlock.ts","../src/createCodeBlockPlugin.ts","../src/transforms/insertCodeBlock.ts","../src/transforms/insertEmptyCodeBlock.ts","../src/transforms/unwrapCodeBlock.ts","../src/transforms/toggleCodeBlock.ts"],"sourcesContent":["import { PlatePluginOptions } from '@udecode/plate-core';\n\nexport const ELEMENT_CODE_BLOCK = 'code_block';\nexport const ELEMENT_CODE_LINE = 'code_line';\n\nexport const KEYS_CODE_BLOCK = [ELEMENT_CODE_BLOCK, ELEMENT_CODE_LINE];\n\nexport const DEFAULTS_CODE_BLOCK: Partial<PlatePluginOptions> = {\n  hotkey: ['mod+opt+8', 'mod+shift+8'],\n};\n\n// `\n// javascript:\n// abap: ABAP\n// arduino: Arduino\n// bash: Bash\n// basic: BASIC\n// c: C\n// clojure: Clojure\n// coffeescript: CoffeeScript\n// cpp: C++\n// csharp: C#\n// css: CSS\n// dart: Dart\n// diff: Diff\n// docker: Docker\n// elixir: Elixir\n// elm: Elm\n// erlang: Erlang\n// flow: Flow\n// fortran: Fortran\n// fsharp: F#\n// gherkin: Gherkin\n// glsl: GLSL\n// go: Go\n// graphql: GraphQL\n// groovy: Groovy\n// haskell\n// less\n// livescript\n// lua\n// makefile\n// match\n// matlab\n// nix\n// objectivec\n// ocaml\n// pascal\n// perl\n// prolog\n// purebasic\n// r\n// reason\n// scss\n// scala\n// scheme\n// sql\n// swift\n// vbnet\n// verilog\n// vhdl\n// visual-basic\n// wasm\n// `;\n\nexport const CODE_BLOCK_LANGUAGES: Record<string, string> = {\n  antlr4: 'ANTLR4',\n  bash: 'Bash',\n  c: 'C',\n  csharp: 'C#',\n  css: 'CSS',\n  coffeescript: 'CoffeeScript',\n  cmake: 'CMake',\n  django: 'Django',\n  docker: 'Docker',\n  ejs: 'EJS',\n  erlang: 'Erlang',\n  git: 'Git',\n  go: 'Go',\n  graphql: 'GraphQL',\n  groovy: 'Groovy',\n  html: 'HTML',\n  java: 'Java',\n  javascript: 'JavaScript',\n  json: 'JSON',\n  kotlin: 'Kotlin',\n  latex: 'LaTeX',\n  less: 'Less',\n  lua: 'Lua',\n  makefile: 'Makefile',\n  markdown: 'Markdown',\n  matlab: 'MATLAB',\n  markup: 'Markup',\n  objectivec: 'Objective-C',\n  perl: 'Perl',\n  php: 'PHP',\n  powershell: 'PowerShell',\n  properties: '.properties',\n  protobuf: 'Protocol Buffers',\n  python: 'Python',\n  r: 'R',\n  jsx: 'React JSX',\n  tsx: 'React TSX',\n  ruby: 'Ruby',\n  sass: 'Sass (Sass)',\n  scss: 'Sass (Scss)',\n  scala: 'Scala',\n  scheme: 'Scheme',\n  sql: 'SQL',\n  shell: 'Shell',\n  swift: 'Swift',\n  svg: 'SVG',\n  typescript: 'TypeScript',\n  wasm: 'WebAssembly',\n  yaml: 'YAML',\n  xml: 'XML',\n};\n","// import 'prismjs/components/prism-antlr4';\n// import 'prismjs/components/prism-bash';\n// import 'prismjs/components/prism-c';\n// import 'prismjs/components/prism-cmake';\n// import 'prismjs/components/prism-coffeescript';\n// import 'prismjs/components/prism-cpp';\n// import 'prismjs/components/prism-csharp';\n// import 'prismjs/components/prism-css';\n// import 'prismjs/components/prism-django';\n// import 'prismjs/components/prism-docker';\n// import 'prismjs/components/prism-ejs';\n// import 'prismjs/components/prism-erlang';\n// import 'prismjs/components/prism-git';\n// import 'prismjs/components/prism-go';\n// import 'prismjs/components/prism-graphql';\n// import 'prismjs/components/prism-groovy';\n// import 'prismjs/components/prism-java';\n// import 'prismjs/components/prism-json';\n// import 'prismjs/components/prism-jsx';\n// import 'prismjs/components/prism-kotlin';\n// import 'prismjs/components/prism-latex';\n// import 'prismjs/components/prism-less';\n// import 'prismjs/components/prism-lua';\n// import 'prismjs/components/prism-makefile';\n// import 'prismjs/components/prism-markdown';\n// import 'prismjs/components/prism-matlab';\n// import 'prismjs/components/prism-objectivec';\n// import 'prismjs/components/prism-perl';\n// import 'prismjs/components/prism-php';\n// import 'prismjs/components/prism-powershell';\n// import 'prismjs/components/prism-properties';\n// import 'prismjs/components/prism-protobuf';\n// import 'prismjs/components/prism-python';\n// import 'prismjs/components/prism-r';\n// import 'prismjs/components/prism-ruby';\n// import 'prismjs/components/prism-sass';\n// import 'prismjs/components/prism-scala';\n// import 'prismjs/components/prism-scheme';\n// import 'prismjs/components/prism-scss';\n// import 'prismjs/components/prism-sql';\n// import 'prismjs/components/prism-swift';\n// import 'prismjs/components/prism-tsx';\n// import 'prismjs/components/prism-typescript';\n// import 'prismjs/components/prism-wasm';\n// import 'prismjs/components/prism-yaml';\nimport {\n  Decorate,\n  getPlatePluginOptions,\n  isElement,\n} from '@udecode/plate-core';\nimport { languages, Token, tokenize } from 'prismjs';\nimport { Node, NodeEntry } from 'slate';\nimport { ELEMENT_CODE_BLOCK } from './defaults';\n\nexport const getCodeBlockDecorate = (): Decorate => (editor) => {\n  const code_block = getPlatePluginOptions(editor, ELEMENT_CODE_BLOCK);\n\n  return (entry: NodeEntry) => {\n    const ranges: any = [];\n    const [node, path] = entry;\n\n    if (isElement(node) && node.type === code_block.type) {\n      const text = Node.string(node);\n      // const langName: any = parent.lang || 'markup';\n      const langName: any = '';\n      const lang = languages[langName];\n\n      if (lang) {\n        const tokens = tokenize(text, lang);\n        let offset = 0;\n\n        for (const element of tokens) {\n          if (typeof element === 'string') {\n            offset += element.length;\n          } else {\n            const token: Token = element;\n            ranges.push({\n              anchor: { path, offset },\n              focus: { path, offset: offset + token.length },\n              className: `prism-token token ${token.type} `,\n              prism: true,\n            });\n            offset += token.length;\n          }\n        }\n      }\n    }\n    return ranges;\n  };\n};\n","import { getElementDeserializer } from '@udecode/plate-common';\nimport {\n  Deserialize,\n  getPlatePluginOptions,\n  getSlateClass,\n} from '@udecode/plate-core';\nimport { ELEMENT_CODE_BLOCK, ELEMENT_CODE_LINE } from './defaults';\n\nexport const getCodeBlockDeserialize = (): Deserialize => (editor) => {\n  const code_block = getPlatePluginOptions(editor, ELEMENT_CODE_BLOCK);\n  const code_line = getPlatePluginOptions(editor, ELEMENT_CODE_LINE);\n\n  return {\n    element: [\n      ...getElementDeserializer({\n        type: code_block.type,\n        rules: [\n          { nodeNames: 'PRE' },\n          { className: getSlateClass(code_block.type) },\n        ],\n        ...code_block.deserialize,\n      }),\n      ...getElementDeserializer({\n        type: code_line.type,\n        rules: [{ className: getSlateClass(code_line.type) }],\n        ...code_line.deserialize,\n      }),\n    ],\n  };\n};\n","import { getAbove, getParent, someNode } from '@udecode/plate-common';\nimport { getPlatePluginType, isElement, SPEditor } from '@udecode/plate-core';\nimport { Location } from 'slate';\nimport { ELEMENT_CODE_LINE } from '../defaults';\n\n/**\n * If at (default = selection) is in ul>li>p, return li and ul node entries.\n */\nexport const getCodeLineEntry = (\n  editor: SPEditor,\n  { at = editor.selection }: { at?: Location | null } = {}\n) => {\n  if (\n    at &&\n    someNode(editor, {\n      at,\n      match: { type: getPlatePluginType(editor, ELEMENT_CODE_LINE) },\n    })\n  ) {\n    const selectionParent = getParent(editor, at);\n    if (!selectionParent) return;\n    const [, parentPath] = selectionParent;\n\n    const codeLine =\n      getAbove(editor, {\n        at,\n        match: { type: getPlatePluginType(editor, ELEMENT_CODE_LINE) },\n      }) || getParent(editor, parentPath);\n\n    if (!codeLine) return;\n    const [codeLineNode, codeLinePath] = codeLine;\n\n    if (\n      isElement(codeLineNode) &&\n      codeLineNode.type !== getPlatePluginType(editor, ELEMENT_CODE_LINE)\n    )\n      return;\n\n    const codeBlock = getParent(editor, codeLinePath);\n    if (!codeBlock) return;\n\n    return {\n      codeBlock,\n      codeLine,\n    };\n  }\n};\n","import { getNodes } from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor } from '@udecode/plate-core';\nimport { Location } from 'slate';\nimport { ELEMENT_CODE_LINE } from '../defaults';\n\n/**\n * Get code line entries\n */\nexport const getCodeLines = (\n  editor: SPEditor,\n  { at = editor.selection }: { at?: Location | null } = {}\n) => {\n  if (!at) return;\n\n  return [\n    ...getNodes(editor, {\n      at,\n      match: { type: getPlatePluginType(editor, ELEMENT_CODE_LINE) },\n    }),\n  ];\n};\n","import { isExpanded } from '@udecode/plate-common';\nimport { TEditor } from '@udecode/plate-core';\nimport { Ancestor, Editor, Node, NodeEntry, Transforms } from 'slate';\n\nexport interface IndentCodeLineOptions {\n  codeBlock: NodeEntry<Ancestor>;\n  codeLine: NodeEntry<Ancestor | Node>;\n}\n\n/**\n * Indent if:\n * - the selection is expanded\n * - the selected code line has no whitespace character\n * Indentation = 2 spaces.\n */\nexport const indentCodeLine = (\n  editor: TEditor,\n  { codeLine }: IndentCodeLineOptions\n) => {\n  const [, codeLinePath] = codeLine;\n  const codeLineStart = Editor.start(editor, codeLinePath);\n  if (!isExpanded(editor.selection)) {\n    const cursor = editor.selection?.anchor;\n    const range = Editor.range(editor, codeLineStart, cursor);\n    const text = Editor.string(editor, range);\n\n    if (/\\S/.test(text)) {\n      Transforms.insertText(editor, '  ', { at: editor.selection! });\n      return;\n    }\n  }\n\n  Transforms.insertText(editor, '  ', { at: codeLineStart });\n};\n","import { getText } from '@udecode/plate-common';\nimport { TEditor } from '@udecode/plate-core';\nimport { Editor, Transforms } from 'slate';\nimport { OutdentCodeLineOptions } from './outdentCodeLine';\n\n/**\n * If there is a whitespace character at the start of the code line,\n * delete it.\n */\nexport const deleteStartSpace = (\n  editor: TEditor,\n  { codeLine }: OutdentCodeLineOptions\n) => {\n  const [, codeLinePath] = codeLine;\n  const codeLineStart = Editor.start(editor, codeLinePath);\n  const codeLineEnd = codeLineStart && Editor.after(editor, codeLineStart);\n  const spaceRange =\n    codeLineEnd && Editor.range(editor, codeLineStart, codeLineEnd);\n  const spaceText = getText(editor, spaceRange);\n\n  if (/\\s/.test(spaceText)) {\n    Transforms.delete(editor, { at: spaceRange });\n    return true;\n  }\n\n  return false;\n};\n","import { TEditor } from '@udecode/plate-core';\nimport { Ancestor, Node, NodeEntry } from 'slate';\nimport { deleteStartSpace } from './deleteStartSpace';\n\nexport interface OutdentCodeLineOptions {\n  codeBlock: NodeEntry<Ancestor>;\n  codeLine: NodeEntry<Ancestor | Node>;\n}\n\n/**\n * Outdent the code line.\n * Remove 2 whitespace characters if any.\n */\nexport const outdentCodeLine = (\n  editor: TEditor,\n  { codeBlock, codeLine }: OutdentCodeLineOptions\n) => {\n  const deleted = deleteStartSpace(editor, { codeBlock, codeLine });\n  deleted && deleteStartSpace(editor, { codeBlock, codeLine });\n};\n","import { getParent } from '@udecode/plate-common';\nimport { KeyboardHandler } from '@udecode/plate-core';\nimport { Transforms } from 'slate';\nimport { getCodeLineEntry } from './queries/getCodeLineEntry';\nimport { getCodeLines } from './queries/getCodeLines';\nimport { indentCodeLine } from './transforms/indentCodeLine';\nimport { outdentCodeLine } from './transforms/outdentCodeLine';\n\n/**\n * - Shift+Tab: outdent code line.\n * - Tab: indent code line.\n */\nexport const getCodeBlockOnKeyDown = (): KeyboardHandler => (editor) => (e) => {\n  if (e.key === 'Tab') {\n    const shiftTab = e.shiftKey;\n    const res = getCodeLineEntry(editor, {});\n    if (res) {\n      const { codeBlock, codeLine } = res;\n\n      e.preventDefault();\n\n      // outdent with shift+tab\n\n      if (shiftTab) {\n        // TODO: outdent multiple lines\n        outdentCodeLine(editor, { codeBlock, codeLine });\n      }\n\n      // indent with tab\n      const tab = !e.shiftKey;\n      if (tab) {\n        // TODO: indent multiple lines\n        indentCodeLine(editor, { codeBlock, codeLine });\n      }\n      return;\n    }\n    const codeLines = getCodeLines(editor, {});\n    if (codeLines && codeLines?.[0]) {\n      e.preventDefault();\n      const [, firstLinePath] = codeLines[0];\n      const codeBlock = getParent(editor, firstLinePath)!;\n      for (const codeLine of codeLines) {\n        if (shiftTab) {\n          // TODO: outdent multiple lines\n          outdentCodeLine(editor, { codeBlock, codeLine });\n        }\n\n        // indent with tab\n        const tab = !e.shiftKey;\n        if (tab) {\n          // TODO: indent multiple lines\n          indentCodeLine(editor, { codeBlock, codeLine });\n        }\n      }\n    }\n  }\n\n  // FIXME: would prefer this as mod+a, but doesn't work\n  if (e.key === 'a' && (e.metaKey || e.ctrlKey)) {\n    const res = getCodeLineEntry(editor, {});\n    if (!res) return;\n\n    const { codeBlock } = res;\n    const [, codeBlockPath] = codeBlock;\n\n    // select the whole code block\n    Transforms.select(editor, codeBlockPath);\n\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  // Note: rather than handling mod+enter/mod+shift+enter here, we recommend\n  // using the exit-break plugin/ If not using exit-break, follow similar logic\n  // to exit-break to add behavior to exit the code-block\n};\n","import * as React from 'react';\nimport { RenderLeaf } from '@udecode/plate-core';\n\nexport const MARK_PRISM = 'prism';\n\nexport const getCodeBlockRenderLeaf = (): RenderLeaf => () => ({\n  leaf,\n  children,\n}) => {\n  if (leaf[MARK_PRISM] && !!leaf.text) {\n    return <span className={leaf?.className as string}>{children}</span>;\n  }\n  return children;\n};\n","import { getText } from '@udecode/plate-common';\nimport { TEditor } from '@udecode/plate-core';\nimport { IndentCodeLineOptions } from '../transforms/indentCodeLine';\n\nexport const getIndentDepth = (\n  editor: TEditor,\n  { codeLine }: IndentCodeLineOptions\n) => {\n  const [, codeLinePath] = codeLine;\n  const text = getText(editor, codeLinePath);\n  return text.search(/\\S|$/);\n};\n","import { insertNodes } from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor, TElement } from '@udecode/plate-core';\nimport { ELEMENT_CODE_LINE } from '../defaults';\n\n/**\n * Insert a code line starting with indentation.\n */\nexport const insertCodeLine = (editor: SPEditor, indentDepth = 0) => {\n  if (editor.selection) {\n    const indent = ' '.repeat(indentDepth);\n\n    insertNodes<TElement>(editor, {\n      type: getPlatePluginType(editor, ELEMENT_CODE_LINE),\n      children: [{ text: indent }],\n    });\n  }\n};\n","import { SPEditor, WithOverride } from '@udecode/plate-core';\nimport { ReactEditor } from 'slate-react';\nimport { getCodeLineEntry } from './queries/getCodeLineEntry';\nimport { getIndentDepth } from './queries/getIndentDepth';\nimport { insertCodeLine } from './transforms/insertCodeLine';\n\nexport const withCodeBlock = (): WithOverride<ReactEditor & SPEditor> => (\n  editor\n) => {\n  const { insertBreak } = editor;\n\n  const insertBreakCodeBlock = () => {\n    if (!editor.selection) return;\n\n    const res = getCodeLineEntry(editor, {});\n    if (!res) return;\n\n    const { codeBlock, codeLine } = res;\n    const indentDepth = getIndentDepth(editor, {\n      codeBlock,\n      codeLine,\n    });\n    insertCodeLine(editor, indentDepth);\n\n    return true;\n  };\n\n  editor.insertBreak = () => {\n    if (insertBreakCodeBlock()) return;\n\n    insertBreak();\n  };\n\n  return editor;\n};\n","import { getRenderElement, PlatePlugin } from '@udecode/plate-core';\nimport { KEYS_CODE_BLOCK } from './defaults';\nimport { getCodeBlockDecorate } from './getCodeBlockDecorate';\nimport { getCodeBlockDeserialize } from './getCodeBlockDeserialize';\nimport { getCodeBlockOnKeyDown } from './getCodeBlockOnKeyDown';\nimport { getCodeBlockRenderLeaf } from './getCodeBlockRenderLeaf';\nimport { withCodeBlock } from './withCodeBlock';\n\n/**\n * Enables support for pre-formatted code blocks.\n */\nexport const createCodeBlockPlugin = (): PlatePlugin => ({\n  pluginKeys: KEYS_CODE_BLOCK,\n  renderElement: getRenderElement(KEYS_CODE_BLOCK),\n  renderLeaf: getCodeBlockRenderLeaf(),\n  deserialize: getCodeBlockDeserialize(),\n  decorate: getCodeBlockDecorate(),\n  onKeyDown: getCodeBlockOnKeyDown(),\n  withOverrides: withCodeBlock(),\n});\n","import {\n  InsertNodesOptions,\n  isExpanded,\n  isSelectionAtBlockStart,\n  setNodes,\n  someNode,\n  wrapNodes,\n} from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor, TElement } from '@udecode/plate-core';\nimport { ELEMENT_CODE_BLOCK, ELEMENT_CODE_LINE } from '../defaults';\n\n/**\n * Insert a code block: set the node to code line and wrap it with a code block.\n * If the cursor is not at the block start, insert break before.\n */\nexport const insertCodeBlock = (\n  editor: SPEditor,\n  insertNodesOptions: Omit<InsertNodesOptions, 'match'> = {}\n) => {\n  if (!editor.selection || isExpanded(editor.selection)) return;\n\n  const matchCodeElements = (node: TElement) =>\n    node.type === getPlatePluginType(editor, ELEMENT_CODE_BLOCK) ||\n    node.type === getPlatePluginType(editor, ELEMENT_CODE_LINE);\n\n  if (\n    someNode(editor, {\n      match: matchCodeElements,\n    })\n  ) {\n    return;\n  }\n\n  if (!isSelectionAtBlockStart(editor)) {\n    editor.insertBreak();\n  }\n\n  setNodes<TElement>(\n    editor,\n    {\n      type: getPlatePluginType(editor, ELEMENT_CODE_LINE),\n      children: [{ text: '' }],\n    },\n    insertNodesOptions\n  );\n\n  wrapNodes(\n    editor,\n    {\n      type: getPlatePluginType(editor, ELEMENT_CODE_BLOCK),\n      children: [],\n    },\n    insertNodesOptions\n  );\n};\n","import {\n  ELEMENT_DEFAULT,\n  insertNodes,\n  isBlockAboveEmpty,\n  isExpanded,\n} from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor, TElement } from '@udecode/plate-core';\nimport { Editor, Path } from 'slate';\nimport { CodeBlockInsertOptions } from '../types';\nimport { insertCodeBlock } from './insertCodeBlock';\n\n/**\n * Called by toolbars to make sure a code-block gets inserted below a paragraph\n * rather than awkwardly splitting the current selection.\n */\nexport const insertEmptyCodeBlock = (\n  editor: SPEditor,\n  {\n    defaultType = getPlatePluginType(editor, ELEMENT_DEFAULT),\n    insertNodesOptions,\n    level = 0,\n  }: CodeBlockInsertOptions\n) => {\n  if (!editor.selection) return;\n\n  if (isExpanded(editor.selection) || !isBlockAboveEmpty(editor)) {\n    const selectionPath = Editor.path(editor, editor.selection);\n    const insertPath = Path.next(selectionPath.slice(0, level + 1));\n    insertNodes<TElement>(\n      editor,\n      { type: defaultType, children: [{ text: '' }] },\n      {\n        at: insertPath,\n        select: true,\n      }\n    );\n  }\n  insertCodeBlock(editor, insertNodesOptions);\n};\n","import { unwrapNodes } from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor } from '@udecode/plate-core';\nimport { ELEMENT_CODE_BLOCK, ELEMENT_CODE_LINE } from '../defaults';\n\nexport const unwrapCodeBlock = (editor: SPEditor) => {\n  unwrapNodes(editor, {\n    match: { type: getPlatePluginType(editor, ELEMENT_CODE_LINE) },\n  });\n  unwrapNodes(editor, {\n    match: { type: getPlatePluginType(editor, ELEMENT_CODE_BLOCK) },\n    split: true,\n  });\n};\n","import { getNodes, setNodes, someNode, wrapNodes } from '@udecode/plate-common';\nimport { getPlatePluginType, SPEditor, TElement } from '@udecode/plate-core';\nimport { ELEMENT_CODE_BLOCK, ELEMENT_CODE_LINE } from '../defaults';\nimport { unwrapCodeBlock } from './unwrapCodeBlock';\n\nexport const toggleCodeBlock = (editor: SPEditor) => {\n  if (!editor.selection) return;\n\n  const isActive = someNode(editor, {\n    match: { type: getPlatePluginType(editor, ELEMENT_CODE_BLOCK) },\n  });\n\n  unwrapCodeBlock(editor);\n\n  setNodes<TElement>(editor, {\n    type: getPlatePluginType(editor, ELEMENT_CODE_LINE),\n  });\n\n  if (!isActive) {\n    const codeBlock = {\n      type: getPlatePluginType(editor, ELEMENT_CODE_BLOCK),\n      children: [],\n    };\n    wrapNodes(editor, codeBlock);\n\n    const nodes = [\n      ...getNodes(editor, {\n        match: { type: getPlatePluginType(editor, ELEMENT_CODE_LINE) },\n      }),\n    ];\n\n    const codeLine = {\n      type: getPlatePluginType(editor, ELEMENT_CODE_BLOCK),\n      children: [],\n    };\n\n    for (const [, path] of nodes) {\n      // Transforms.wrapNodes(editor, codeLine, {\n      setNodes<TElement>(editor, codeLine, {\n        at: path,\n      });\n    }\n  }\n};\n"],"names":["ELEMENT_CODE_BLOCK","ELEMENT_CODE_LINE","KEYS_CODE_BLOCK","DEFAULTS_CODE_BLOCK","hotkey","CODE_BLOCK_LANGUAGES","antlr4","bash","c","csharp","css","coffeescript","cmake","django","docker","ejs","erlang","git","go","graphql","groovy","html","java","javascript","json","kotlin","latex","less","lua","makefile","markdown","matlab","markup","objectivec","perl","php","powershell","properties","protobuf","python","r","jsx","tsx","ruby","sass","scss","scala","scheme","sql","shell","swift","svg","typescript","wasm","yaml","xml","getCodeBlockDecorate","editor","code_block","getPlatePluginOptions","entry","ranges","node","path","isElement","type","text","Node","string","langName","lang","languages","tokens","tokenize","offset","element","length","token","push","anchor","focus","className","prism","getCodeBlockDeserialize","code_line","getElementDeserializer","rules","nodeNames","getSlateClass","deserialize","getCodeLineEntry","at","selection","someNode","match","getPlatePluginType","selectionParent","getParent","parentPath","codeLine","getAbove","codeLineNode","codeLinePath","codeBlock","getCodeLines","getNodes","indentCodeLine","codeLineStart","Editor","start","isExpanded","cursor","range","test","Transforms","insertText","deleteStartSpace","codeLineEnd","after","spaceRange","spaceText","getText","delete","outdentCodeLine","deleted","getCodeBlockOnKeyDown","e","key","shiftTab","shiftKey","res","preventDefault","tab","codeLines","firstLinePath","metaKey","ctrlKey","codeBlockPath","select","stopPropagation","MARK_PRISM","getCodeBlockRenderLeaf","leaf","children","_jsx","getIndentDepth","search","insertCodeLine","indentDepth","indent","repeat","insertNodes","withCodeBlock","insertBreak","insertBreakCodeBlock","createCodeBlockPlugin","pluginKeys","renderElement","getRenderElement","renderLeaf","decorate","onKeyDown","withOverrides","insertCodeBlock","insertNodesOptions","matchCodeElements","isSelectionAtBlockStart","setNodes","wrapNodes","insertEmptyCodeBlock","defaultType","ELEMENT_DEFAULT","level","isBlockAboveEmpty","selectionPath","insertPath","Path","next","slice","unwrapCodeBlock","unwrapNodes","split","toggleCodeBlock","isActive","nodes"],"mappings":"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"}
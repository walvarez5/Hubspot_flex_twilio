var __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames,__getOwnPropSymbols=Object.getOwnPropertySymbols,__getProtoOf=Object.getPrototypeOf,__hasOwnProp=Object.prototype.hasOwnProperty,__propIsEnum=Object.prototype.propertyIsEnumerable;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:!0,configurable:!0,writable:!0,value}):obj[key]=value,__spreadValues=(a,b)=>{for(var prop in b||(b={}))__hasOwnProp.call(b,prop)&&__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(b))__propIsEnum.call(b,prop)&&__defNormalProp(a,prop,b[prop]);return a};var __objRest=(source,exclude)=>{var target={};for(var prop in source)__hasOwnProp.call(source,prop)&&exclude.indexOf(prop)<0&&(target[prop]=source[prop]);if(source!=null&&__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(source))exclude.indexOf(prop)<0&&__propIsEnum.call(source,prop)&&(target[prop]=source[prop]);return target};var __commonJS=(cb,mod)=>function(){return mod||(0,cb[__getOwnPropNames(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports};var __copyProps=(to,from,except,desc)=>{if(from&&typeof from=="object"||typeof from=="function")for(let key of __getOwnPropNames(from))!__hasOwnProp.call(to,key)&&key!==except&&__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to};var __toESM=(mod,isNodeMode,target)=>(target=mod!=null?__create(__getProtoOf(mod)):{},__copyProps(isNodeMode||!mod||!mod.__esModule?__defProp(target,"default",{value:mod,enumerable:!0}):target,mod));var require_cjs=__commonJS({"../../../../node_modules/deepmerge/dist/cjs.js"(exports,module){"use strict";var isMergeableObject=function(value){return isNonNullObject(value)&&!isSpecial(value)};function isNonNullObject(value){return!!value&&typeof value=="object"}function isSpecial(value){var stringValue=Object.prototype.toString.call(value);return stringValue==="[object RegExp]"||stringValue==="[object Date]"||isReactElement(value)}var canUseSymbol=typeof Symbol=="function"&&Symbol.for,REACT_ELEMENT_TYPE=canUseSymbol?Symbol.for("react.element"):60103;function isReactElement(value){return value.$$typeof===REACT_ELEMENT_TYPE}function emptyTarget(val){return Array.isArray(val)?[]:{}}function cloneUnlessOtherwiseSpecified(value,options){return options.clone!==!1&&options.isMergeableObject(value)?deepmerge(emptyTarget(value),value,options):value}function defaultArrayMerge(target,source,options){return target.concat(source).map(function(element){return cloneUnlessOtherwiseSpecified(element,options)})}function getMergeFunction(key,options){if(!options.customMerge)return deepmerge;var customMerge=options.customMerge(key);return typeof customMerge=="function"?customMerge:deepmerge}function getEnumerableOwnPropertySymbols(target){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(target).filter(function(symbol){return target.propertyIsEnumerable(symbol)}):[]}function getKeys(target){return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))}function propertyIsOnObject(object,property){try{return property in object}catch(_){return!1}}function propertyIsUnsafe(target,key){return propertyIsOnObject(target,key)&&!(Object.hasOwnProperty.call(target,key)&&Object.propertyIsEnumerable.call(target,key))}function mergeObject(target,source,options){var destination={};return options.isMergeableObject(target)&&getKeys(target).forEach(function(key){destination[key]=cloneUnlessOtherwiseSpecified(target[key],options)}),getKeys(source).forEach(function(key){propertyIsUnsafe(target,key)||(propertyIsOnObject(target,key)&&options.isMergeableObject(source[key])?destination[key]=getMergeFunction(key,options)(target[key],source[key],options):destination[key]=cloneUnlessOtherwiseSpecified(source[key],options))}),destination}function deepmerge(target,source,options){options=options||{},options.arrayMerge=options.arrayMerge||defaultArrayMerge,options.isMergeableObject=options.isMergeableObject||isMergeableObject,options.cloneUnlessOtherwiseSpecified=cloneUnlessOtherwiseSpecified;var sourceIsArray=Array.isArray(source),targetIsArray=Array.isArray(target),sourceAndTargetTypesMatch=sourceIsArray===targetIsArray;return sourceAndTargetTypesMatch?sourceIsArray?options.arrayMerge(target,source,options):mergeObject(target,source,options):cloneUnlessOtherwiseSpecified(source,options)}deepmerge.all=function(array,options){if(!Array.isArray(array))throw new Error("first argument should be an array");return array.reduce(function(prev,next){return deepmerge(prev,next,options)},{})};var deepmerge_1=deepmerge;module.exports=deepmerge_1}});import*as React from"react";import{boxShadow,compose,display,overflow,position,space,styled,typography,verticalAlign,createShouldForwardProp,props as stylingProps}from"@twilio-paste/styling-library";import{isDeprecatedBoxShadowTokenProp,isDeprecatedTextColorTokenProp}from"@twilio-paste/style-props";var import_deepmerge=__toESM(require_cjs());import{css,system}from"@twilio-paste/styling-library";var PseudoPropStyles={_hover:"&:hover",_active:"&:active, &[data-active=true]",_focus:"&:focus",_visited:"&:visited",_even:"&:nth-of-type(even)",_odd:"&:nth-of-type(odd)",_disabled:"&:disabled, &:disabled:focus, &:disabled:hover, &[aria-disabled=true], &[aria-disabled=true]:focus, &[aria-disabled=true]:hover",_checked:"&:checked, &[aria-checked=true]",_mixed:"&:indeterminate, &[aria-checked=mixed]",_selected:"&[aria-selected=true]",_selected_hover:"&[aria-selected=true]:hover",_selected_focus:"&[aria-selected=true]:focus",_selected_focusVisible:"&[aria-selected=true]:focus-visible",_invalid:"&:invalid, &[aria-invalid=true]",_pressed:"&[aria-pressed=true]",_readOnly:"&[aria-readonly=true], &[readonly]",_first:"&:first-of-type",_last:"&:last-of-type",_expanded:"&[aria-expanded=true]",_grabbed:"&[aria-grabbed=true]",_notFirst:"&:not(:first-of-type)",_notLast:"&:not(:last-of-type)",_before:"&:before",_after:"&:after",_focusWithin:"&:focus-within"};var customStyleProps={color:{property:"color",scale:"textColors"},cursor:!0,outline:!0,transition:!0,textDecoration:!0,textTransform:!0,whiteSpace:!0,wordBreak:!0,wordWrap:!0,fontVariantNumeric:!0};var PasteStyleProps=system(customStyleProps),getPseudoStyles=props=>{let pseudoProps=Object.keys(props).filter(propName=>propName.startsWith("_"));if(pseudoProps.length===0)return{};let pseudoStyles={};return pseudoProps.forEach(pseudoProp=>{PseudoPropStyles[pseudoProp]!=null&&(pseudoStyles[PseudoPropStyles[pseudoProp]]=props[pseudoProp])}),css(pseudoStyles)},getCustomElementStyles=props=>{if(props!=null&&props.theme!=null&&props.theme.elements!=null){let themeElements=props.theme.elements,targetElement=props["data-paste-element"];if(themeElements[targetElement]!=null){let elementOverrides=themeElements[targetElement],_a=css(elementOverrides)(props),{variants}=_a,elementStyles=__objRest(_a,["variants"]),variantStyles={};return props.variant!=null&&variants!=null&&variants[props.variant]!=null&&(variantStyles=variants[props.variant]),()=>(0,import_deepmerge.default)(elementStyles,variantStyles)}}return{}};import{SHADOW_PROPS,SPACE_PROPS,TYPOGRAPHY_PROPS,OVERFLOW_PROPS}from"@twilio-paste/style-props";var TEXT_PROPS_TO_BLOCK=[...SHADOW_PROPS,...SPACE_PROPS,...TYPOGRAPHY_PROPS,...OVERFLOW_PROPS,...Object.keys(PseudoPropStyles),"display","verticalAlign","className","style"],safelySpreadTextProps=props=>Object.keys(props).reduce((newProps,key)=>(TEXT_PROPS_TO_BLOCK.includes(key)||(newProps[key]=props[key]),newProps),{});var shouldForwardProp=createShouldForwardProp([...stylingProps,...Object.keys(__spreadValues(__spreadValues({},customStyleProps),PseudoPropStyles))]),StyledText=styled("div",{shouldForwardProp})({margin:0,padding:0},compose(boxShadow,display,overflow,position,space,typography,verticalAlign,PasteStyleProps),getPseudoStyles,getCustomElementStyles),Text=React.forwardRef((_a,ref)=>{var _b=_a,{children,color="colorText",fontSize="fontSize30",lineHeight="lineHeight30",element="TEXT"}=_b,props=__objRest(_b,["children","color","fontSize","lineHeight","element"]);return React.createElement(StyledText,__spreadValues({"data-paste-element":element,ref,color,fontSize,lineHeight},props),children)});Text.displayName="Text";Text.propTypes={boxShadow:isDeprecatedBoxShadowTokenProp,color:isDeprecatedTextColorTokenProp};export{StyledText,TEXT_PROPS_TO_BLOCK,Text,safelySpreadTextProps};

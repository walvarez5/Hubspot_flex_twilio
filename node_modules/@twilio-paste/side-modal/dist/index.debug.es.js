var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/SideModal.tsx
import * as React2 from "react";
import PropTypes from "prop-types";
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { StyledBase } from "@twilio-paste/theme";
import { NonModalDialogPrimitive } from "@twilio-paste/non-modal-dialog-primitive";

// src/SideModalContext.tsx
import * as React from "react";
var SideModalContext = React.createContext({});

// src/SideModal.tsx
var StyledSideModal = React2.forwardRef((_a, ref) => {
  var _b = _a, { style } = _b, props = __objRest(_b, ["style"]);
  return /* @__PURE__ */ React2.createElement(
    Box,
    __spreadProps(__spreadValues({}, safelySpreadBoxProps(props)), {
      ref,
      style,
      boxShadow: "shadow",
      width: "size60",
      zIndex: "zIndex80",
      transform: "none!important",
      inset: "0rem 0rem 0rem auto!important",
      _focus: {
        outline: "none"
      }
    })
  );
});
StyledSideModal.displayName = "StyledSideModal";
var SideModal = React2.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, element = "SIDE_MODAL" } = _b, props = __objRest(_b, ["children", "element"]);
    const dialog = React2.useContext(SideModalContext);
    return /* @__PURE__ */ React2.createElement(
      NonModalDialogPrimitive,
      __spreadProps(__spreadValues(__spreadValues({}, dialog), safelySpreadBoxProps(props)), {
        as: StyledSideModal,
        element: `${element}_CONTAINER`,
        ref,
        preventBodyScroll: false,
        hideOnClickOutside: false
      }),
      /* @__PURE__ */ React2.createElement(StyledBase, null, /* @__PURE__ */ React2.createElement(
        Box,
        {
          element,
          display: "grid",
          gridTemplateRows: "auto 1fr auto",
          height: "100vh",
          backgroundColor: "colorBackgroundBody"
        },
        children
      ))
    );
  }
);
SideModal.displayName = "SideModal";
SideModal.propTypes = {
  "aria-label": PropTypes.string.isRequired,
  children: PropTypes.node.isRequired,
  element: PropTypes.string
};

// src/SideModalButton.tsx
import * as React3 from "react";
import PropTypes2 from "prop-types";
import { Button } from "@twilio-paste/button";
import { NonModalDialogDisclosurePrimitive } from "@twilio-paste/non-modal-dialog-primitive";
var SideModalButton = React3.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, element = "SIDE_MODAL_BUTTON" } = _b, props = __objRest(_b, ["children", "element"]);
    const dialog = React3.useContext(SideModalContext);
    return /* @__PURE__ */ React3.createElement(NonModalDialogDisclosurePrimitive, __spreadProps(__spreadValues(__spreadValues({ element }, dialog), props), { as: Button, ref }), children);
  }
);
SideModalButton.propTypes = {
  id: PropTypes2.string,
  children: PropTypes2.node.isRequired,
  element: PropTypes2.string
};
SideModalButton.displayName = "SideModalButton";

// src/SideModalHeader.tsx
import * as React4 from "react";
import PropTypes3 from "prop-types";
import { Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import { Button as Button2 } from "@twilio-paste/button";
import { CloseIcon } from "@twilio-paste/icons/esm/CloseIcon";
import { ScreenReaderOnly } from "@twilio-paste/screen-reader-only";
var SideModalHeader = React4.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, element = "SIDE_MODAL_HEADER", i18nDismissLabel = "close" } = _b, props = __objRest(_b, ["children", "element", "i18nDismissLabel"]);
    const { hide } = React4.useContext(SideModalContext);
    return /* @__PURE__ */ React4.createElement(
      Box2,
      __spreadProps(__spreadValues({}, safelySpreadBoxProps2(props)), {
        ref,
        paddingRight: "space90",
        paddingLeft: "space90",
        paddingTop: "space90",
        element,
        display: "flex",
        flexDirection: "row"
      }),
      /* @__PURE__ */ React4.createElement(Box2, { display: "flex", flexGrow: 1, marginRight: "space70", alignItems: "center" }, children),
      /* @__PURE__ */ React4.createElement(Button2, { element: `${element}_CLOSE_BUTTON`, variant: "secondary_icon", size: "reset", onClick: hide }, /* @__PURE__ */ React4.createElement(CloseIcon, { element: `${element}_CLOSE_ICON`, decorative: true, size: "sizeIcon20" }), /* @__PURE__ */ React4.createElement(ScreenReaderOnly, null, i18nDismissLabel))
    );
  }
);
SideModalHeader.displayName = "SideModalHeader";
SideModalHeader.propTypes = {
  children: PropTypes3.node,
  i18nDismissLabel: PropTypes3.string,
  element: PropTypes3.string
};

// src/SideModalHeading.tsx
import * as React5 from "react";
import PropTypes4 from "prop-types";
import { Heading } from "@twilio-paste/heading";
var SideModalHeading = React5.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, as = "h2", element = "SIDE_MODAL_HEADING" } = _b, props = __objRest(_b, ["children", "as", "element"]);
    return /* @__PURE__ */ React5.createElement(Heading, __spreadProps(__spreadValues({}, props), { as, element, marginBottom: "space0", variant: "heading30", ref }), children);
  }
);
SideModalHeading.displayName = "SideModalHeading";
SideModalHeading.propTypes = {
  children: PropTypes4.node.isRequired,
  as: PropTypes4.oneOf(["h1", "h2", "h3", "h4", "h5", "h6"]),
  element: PropTypes4.string
};

// src/SideModalContainer.tsx
import * as React6 from "react";
import { useNonModalDialogPrimitiveState } from "@twilio-paste/non-modal-dialog-primitive";
import { useNonModalDialogPrimitiveState as useNonModalDialogPrimitiveState2 } from "@twilio-paste/non-modal-dialog-primitive";
var BaseSideModalContainer = (_a) => {
  var _b = _a, {
    gutter,
    children,
    placement,
    modal,
    state
  } = _b, initialState = __objRest(_b, [
    "gutter",
    "children",
    "placement",
    "modal",
    "state"
  ]);
  const dialog = state || useNonModalDialogPrimitiveState(__spreadValues({
    modal: true
  }, initialState));
  return /* @__PURE__ */ React6.createElement(SideModalContext.Provider, { value: __spreadValues({}, dialog) }, children);
};
BaseSideModalContainer.displayName = "BaseSideModalContainer";
var SideModalContainer = React6.memo(BaseSideModalContainer);
SideModalContainer.displayName = "SideModalContainer";

// src/SideModalBody.tsx
import * as React7 from "react";
import PropTypes5 from "prop-types";
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps3 } from "@twilio-paste/box";
var SideModalBody = React7.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, element = "SIDE_MODAL_BODY" } = _b, props = __objRest(_b, ["children", "element"]);
    return /* @__PURE__ */ React7.createElement(Box3, __spreadProps(__spreadValues({}, safelySpreadBoxProps3(props)), { element, ref, overflowY: "auto", padding: "space90" }), children);
  }
);
SideModalBody.propTypes = {
  children: PropTypes5.node,
  element: PropTypes5.string
};
SideModalBody.displayName = "SideModalBody";

// src/SideModalFooter.tsx
import * as React8 from "react";
import PropTypes6 from "prop-types";
import { Box as Box4, safelySpreadBoxProps as safelySpreadBoxProps4 } from "@twilio-paste/box";
var SideModalFooter = React8.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, element = "SIDE_MODAL_FOOTER" } = _b, props = __objRest(_b, ["children", "element"]);
    return /* @__PURE__ */ React8.createElement(
      Box4,
      __spreadProps(__spreadValues({}, safelySpreadBoxProps4(props)), {
        as: "div",
        element,
        ref,
        paddingRight: "space90",
        paddingLeft: "space90",
        paddingBottom: "space90",
        display: "flex"
      }),
      children
    );
  }
);
SideModalFooter.displayName = "SideModalFooter";
SideModalFooter.propTypes = {
  children: PropTypes6.node.isRequired,
  element: PropTypes6.string
};

// src/SideModalFooterActions.tsx
import * as React9 from "react";
import PropTypes7 from "prop-types";
import { Box as Box5, safelySpreadBoxProps as safelySpreadBoxProps5 } from "@twilio-paste/box";
var SideModalFooterActions = React9.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, element = "SIDE_MODAL_FOOTER_ACTIONS", justifyContent = "flex-end" } = _b, props = __objRest(_b, ["children", "element", "justifyContent"]);
    return /* @__PURE__ */ React9.createElement(
      Box5,
      __spreadProps(__spreadValues({}, safelySpreadBoxProps5(props)), {
        display: "flex",
        justifyContent,
        flexWrap: "wrap",
        flexGrow: 1,
        element,
        columnGap: "space50",
        alignItems: "center",
        ref
      }),
      children
    );
  }
);
SideModalFooterActions.displayName = "SideModalFooterActions";
SideModalFooterActions.propTypes = {
  children: PropTypes7.node.isRequired,
  element: PropTypes7.string,
  justifyContent: PropTypes7.oneOf(["flex-start", "flex-end", "space-between"])
};
export {
  SideModal,
  SideModalBody,
  SideModalButton,
  SideModalContainer,
  SideModalFooter,
  SideModalFooterActions,
  SideModalHeader,
  SideModalHeading,
  useNonModalDialogPrimitiveState2 as useSideModalState
};

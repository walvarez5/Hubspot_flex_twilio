var __defProp=Object.defineProperty,__defProps=Object.defineProperties;var __getOwnPropDescs=Object.getOwnPropertyDescriptors;var __getOwnPropSymbols=Object.getOwnPropertySymbols;var __hasOwnProp=Object.prototype.hasOwnProperty,__propIsEnum=Object.prototype.propertyIsEnumerable;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:!0,configurable:!0,writable:!0,value}):obj[key]=value,__spreadValues=(a,b)=>{for(var prop in b||(b={}))__hasOwnProp.call(b,prop)&&__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(b))__propIsEnum.call(b,prop)&&__defNormalProp(a,prop,b[prop]);return a},__spreadProps=(a,b)=>__defProps(a,__getOwnPropDescs(b));var __objRest=(source,exclude)=>{var target={};for(var prop in source)__hasOwnProp.call(source,prop)&&exclude.indexOf(prop)<0&&(target[prop]=source[prop]);if(source!=null&&__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(source))exclude.indexOf(prop)<0&&__propIsEnum.call(source,prop)&&(target[prop]=source[prop]);return target};import*as React2 from"react";import"prop-types";import{useUID}from"@twilio-paste/uid-library";import{Box,safelySpreadBoxProps}from"@twilio-paste/box";import{StyledBase}from"@twilio-paste/theme";import{Text}from"@twilio-paste/text";import{useTooltipPrimitiveState,TooltipPrimitive,TooltipPrimitiveReference}from"@twilio-paste/tooltip-primitive";import*as React from"react";import{TooltipPrimitiveArrow}from"@twilio-paste/tooltip-primitive";import{useTheme}from"@twilio-paste/theme";var TooltipArrow=props=>{let theme=useTheme();return React.createElement(TooltipPrimitiveArrow,__spreadProps(__spreadValues({},props),{size:theme.fontSizes.fontSize50,stroke:theme.borderColors.colorBorderInverseWeaker,fill:theme.backgroundColors.colorBackgroundBodyInverse}))};TooltipArrow.displayName="TooltipArrow";var StyledTooltip=React2.forwardRef((_a,ref)=>{var _b=_a,{style,element}=_b,props=__objRest(_b,["style","element"]);return React2.createElement(Box,__spreadProps(__spreadValues({},safelySpreadBoxProps(props)),{backgroundColor:"colorBackgroundBodyInverse",borderColor:"colorBorderInverseWeaker",borderRadius:"borderRadius20",borderStyle:"solid",borderWidth:"borderWidth10",boxShadow:"shadow",element,maxWidth:"size30",padding:"space30",paddingBottom:"space20",paddingTop:"space20",zIndex:"zIndex90",_focus:{outline:"none"},style,ref}))});StyledTooltip.displayName="StyledTooltip";var Tooltip=React2.forwardRef((_a,ref)=>{var _b=_a,{baseId,children,element="TOOLTIP",state,text}=_b,props=__objRest(_b,["baseId","children","element","state","text"]);let tooltip=state||useTooltipPrimitiveState(__spreadValues({baseId:`paste-tooltip-${useUID()}`},props));return React2.createElement(React2.Fragment,null,React2.Children.only(React2.createElement(TooltipPrimitiveReference,__spreadValues(__spreadProps(__spreadValues({},tooltip),{ref}),children.props),referenceProps=>React2.cloneElement(children,referenceProps))),React2.createElement(TooltipPrimitive,__spreadProps(__spreadValues(__spreadValues({element},tooltip),props),{as:StyledTooltip}),React2.createElement(StyledBase,null,React2.createElement(TooltipArrow,__spreadValues({},tooltip)),React2.createElement(Text,{element:`${element}_TEXT`,as:"span",color:"colorTextInverse"},text))))});Tooltip.displayName="Tooltip";export{Tooltip,useTooltipPrimitiveState as useTooltipState};

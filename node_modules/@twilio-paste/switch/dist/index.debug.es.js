var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/SwitchContainer.tsx
import * as React from "react";
import * as PropTypes from "prop-types";
import { Text } from "@twilio-paste/text";
import { useUID } from "@twilio-paste/uid-library";
import { Label } from "@twilio-paste/label";
import { MediaObject, MediaBody, MediaFigure } from "@twilio-paste/media-object";
import { HelpText } from "@twilio-paste/help-text";
var SwitchContainer = React.forwardRef((_a, ref) => {
  var _b = _a, { element = "SWITCH_CONTAINER", children, disabled, helpText, label, id, required = false } = _b, props = __objRest(_b, ["element", "children", "disabled", "helpText", "label", "id", "required"]);
  const switchId = id ? id : useUID();
  const helpTextId = useUID();
  const labelId = useUID();
  return /* @__PURE__ */ React.createElement(MediaObject, __spreadProps(__spreadValues({}, props), {
    element,
    ref
  }), /* @__PURE__ */ React.createElement(MediaFigure, {
    spacing: "space30"
  }, React.cloneElement(children, {
    id: switchId,
    labelId,
    helpTextId,
    disabled
  })), /* @__PURE__ */ React.createElement(MediaBody, null, /* @__PURE__ */ React.createElement(Label, {
    as: "div",
    htmlFor: switchId,
    marginBottom: "space0",
    disabled,
    ref,
    id: labelId,
    element: `${element}_LABEL`,
    required
  }, /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    color: "currentColor",
    fontWeight: "fontWeightMedium"
  }, label != null ? label : /* @__PURE__ */ React.createElement(React.Fragment, null))), helpText ? /* @__PURE__ */ React.createElement(HelpText, {
    element: `${element}_HELP_TEXT`,
    marginTop: "space0",
    id: helpTextId
  }, helpText) : null));
});
SwitchContainer.displayName = "SwitchContainer";
SwitchContainer.propTypes = {
  children: PropTypes.node.isRequired,
  id: PropTypes.string,
  disabled: PropTypes.bool,
  element: PropTypes.string,
  helpText: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,
  required: PropTypes.bool
};

// src/Switch.tsx
import * as React3 from "react";
import * as PropTypes3 from "prop-types";

// src/constants.ts
var SWITCH_WIDTH = "2.375rem";
var SWITCH_HEIGHT = "1rem";

// src/SwitchKnob.tsx
import * as React2 from "react";
import * as PropTypes2 from "prop-types";
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { CheckboxCheckIcon } from "@twilio-paste/icons/esm/CheckboxCheckIcon";
import { useTheme } from "@twilio-paste/theme";
var getSwitchKnobTransformValue = (disabled, switchIsOn, isHovering) => {
  if (!disabled) {
    if (!switchIsOn && isHovering)
      return "translateX(5%)";
    if (switchIsOn && !isHovering)
      return "translateX(100%)";
    if (switchIsOn && isHovering)
      return "translateX(95%)";
  } else if (disabled) {
    if (!switchIsOn)
      return "translate(0%)";
    if (switchIsOn)
      return "translateX(100%)";
  }
  return "translate(0%)";
};
var SwitchKnob = React2.forwardRef((_a, ref) => {
  var _b = _a, { element, disabled = false, switchIsOn, isHovering, height } = _b, props = __objRest(_b, ["element", "disabled", "switchIsOn", "isHovering", "height"]);
  const theme = useTheme();
  const SWITCH_PADDING = theme.space ? theme.space.space20 : "4px";
  const transformValue = React2.useMemo(() => getSwitchKnobTransformValue(disabled, switchIsOn, isHovering), [disabled, switchIsOn, isHovering]);
  return /* @__PURE__ */ React2.createElement(Box, {
    width: `calc(100% - ${SWITCH_PADDING})`,
    height: "100%",
    position: "absolute",
    transform: transformValue,
    transition: "transform .2s ease-in-out"
  }, /* @__PURE__ */ React2.createElement(Box, __spreadProps(__spreadValues({}, safelySpreadBoxProps(props)), {
    "aria-disabled": disabled,
    element: `${element}_KNOB`,
    ref,
    height,
    width: height,
    transform: switchIsOn ? "translateX(-100%)" : "translateX(0%)",
    transition: "transform .2s ease-in-out",
    borderColor: "colorBorder",
    borderWidth: "borderWidth10",
    borderRadius: "borderRadiusCircle",
    backgroundColor: "colorBackgroundBody",
    boxShadow: "shadowLow",
    _disabled: {
      boxShadow: "none"
    }
  }), /* @__PURE__ */ React2.createElement(Box, {
    display: "flex",
    height: "100%",
    alignItems: "center",
    justifyContent: "center",
    opacity: switchIsOn ? "1" : "0",
    transition: "opacity .2s ease-in-out, color .2s ease-in-out"
  }, /* @__PURE__ */ React2.createElement(CheckboxCheckIcon, {
    decorative: true,
    size: "sizeIcon05",
    element: `${element}_ICON`
  }))));
});
SwitchKnob.displayName = "SwitchKnob";
SwitchKnob.propTypes = {
  disabled: PropTypes2.bool,
  element: PropTypes2.string,
  switchIsOn: PropTypes2.bool.isRequired,
  isHovering: PropTypes2.bool.isRequired,
  height: PropTypes2.string.isRequired
};

// src/Switch.tsx
import { Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
var styles = {
  backgroundColor: "colorBackgroundStronger",
  _checked_hover: {
    backgroundColor: "colorBackgroundPrimary",
    color: "colorTextLink"
  },
  _checked: {
    backgroundColor: "colorBackgroundPrimaryStronger",
    color: "colorTextLinkStronger"
  },
  _hover: {
    backgroundColor: "colorBackgroundStrongest",
    cursor: "pointer"
  },
  _disabled: {
    backgroundColor: "colorBackgroundStrong",
    color: "colorTextIcon",
    cursor: "not-allowed"
  },
  _focus: { boxShadow: "shadowFocus" }
};
var Switch = React3.forwardRef((_a, ref) => {
  var _b = _a, { element = "SWITCH", id, labelId, helpTextId, disabled = false, on = false, onClick } = _b, props = __objRest(_b, ["element", "id", "labelId", "helpTextId", "disabled", "on", "onClick"]);
  const [switchIsOn, setSwitchIsOn] = React3.useState(on);
  const [isHovering, setIsHovering] = React3.useState(false);
  const handleClick = React3.useCallback(() => {
    if (!disabled) {
      setSwitchIsOn(!switchIsOn);
      if (onClick)
        onClick();
    }
  }, [onClick, disabled, switchIsOn]);
  const handleKeyDown = React3.useCallback((event) => {
    if (event.key === " " || event.key === "Enter")
      setSwitchIsOn((prev) => !prev);
  }, []);
  return /* @__PURE__ */ React3.createElement(Box2, __spreadProps(__spreadValues(__spreadValues({}, safelySpreadBoxProps2(props)), styles), {
    as: "div",
    role: "switch",
    "aria-checked": switchIsOn,
    "aria-disabled": disabled,
    "aria-labelledby": labelId,
    "aria-describedby": helpTextId,
    element,
    id,
    ref,
    tabIndex: 0,
    outline: "none",
    position: "relative",
    display: "inline-block",
    boxSizing: "content-box",
    height: SWITCH_HEIGHT,
    width: SWITCH_WIDTH,
    overflow: "hidden",
    padding: "space10",
    borderColor: "colorBorder",
    borderWidth: "borderWidth10",
    borderRadius: "borderRadiusPill",
    transition: "background-color .2s ease-in-out, box-shadow .2s ease-in-out",
    onClick: handleClick,
    onKeyDown: handleKeyDown,
    onMouseEnter: () => {
      setIsHovering(true);
    },
    onMouseLeave: () => {
      setIsHovering(false);
    }
  }), /* @__PURE__ */ React3.createElement(SwitchKnob, {
    element,
    disabled,
    switchIsOn,
    isHovering,
    height: SWITCH_HEIGHT
  }));
});
Switch.displayName = "Switch";
Switch.propTypes = {
  disabled: PropTypes3.bool,
  element: PropTypes3.string,
  labelId: PropTypes3.string,
  id: PropTypes3.string,
  on: PropTypes3.bool,
  onClick: PropTypes3.func
};
export {
  Switch,
  SwitchContainer
};

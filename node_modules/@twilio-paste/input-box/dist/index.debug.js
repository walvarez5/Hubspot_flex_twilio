"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  InputBox: () => InputBox,
  InputChevronWrapper: () => InputChevronWrapper,
  Prefix: () => Prefix,
  Suffix: () => Suffix,
  getInputChevronIconColor: () => getInputChevronIconColor
});
module.exports = __toCommonJS(src_exports);

// src/InputBox.tsx
var React7 = __toESM(require("react"));
var import_prop_types4 = __toESM(require("prop-types"));

// src/FauxInput/index.tsx
var React3 = __toESM(require("react"));

// src/FauxInput/DefaultFauxInput.tsx
var React = __toESM(require("react"));
var import_box = require("@twilio-paste/box");

// src/types.ts
var import_prop_types = __toESM(require("prop-types"));
var FauxInputPropTypes = {
  children: import_prop_types.default.node.isRequired,
  disabled: import_prop_types.default.bool,
  element: import_prop_types.default.string.isRequired,
  hasError: import_prop_types.default.bool,
  readOnly: import_prop_types.default.bool,
  type: import_prop_types.default.oneOf(["text", "email", "hidden", "number", "password", "search", "tel", "date", "time"]),
  variant: import_prop_types.default.oneOf(["default", "inverse"])
};

// src/FauxInput/DefaultFauxInput.tsx
var DefaultFauxInput = React.forwardRef(
  ({ disabled, element, hasError, readOnly, children, type, variant }, ref) => {
    let backgroundColor = "colorBackgroundBody";
    let boxShadow = "shadowBorder";
    let boxShadowHover = "shadowBorderPrimaryStronger";
    let boxShadowActive = "shadowBorderPrimaryStronger";
    if (disabled && type !== "hidden") {
      boxShadow = "shadowBorderWeak";
      boxShadowHover = "shadowBorderWeak";
      backgroundColor = "colorBackground";
      boxShadowActive = "shadowBorderWeak";
    } else if (readOnly && type !== "hidden") {
      boxShadowHover = "shadowBorder";
      backgroundColor = "colorBackground";
    } else if (hasError && type !== "hidden") {
      boxShadow = "shadowBorderError";
      boxShadowHover = "shadowBorderErrorStronger";
    } else if (type === "hidden") {
      boxShadow = null;
      boxShadowHover = null;
      backgroundColor = null;
      boxShadowActive = null;
    }
    return /* @__PURE__ */ React.createElement(
      import_box.Box,
      {
        element,
        ref,
        display: "flex",
        width: "100%",
        backgroundColor,
        boxShadow,
        borderRadius: "borderRadius20",
        transition: "box-shadow 100ms ease-in",
        cursor: disabled ? "not-allowed" : "text",
        variant,
        _hover: {
          boxShadow: boxShadowHover
        },
        _focusWithin: {
          boxShadow: disabled ? boxShadow : "shadowFocus"
        },
        _active: {
          boxShadow: boxShadowActive
        }
      },
      children
    );
  }
);
DefaultFauxInput.displayName = "DefaultFauxInput";
DefaultFauxInput.propTypes = FauxInputPropTypes;

// src/FauxInput/InverseFauxInput.tsx
var React2 = __toESM(require("react"));
var import_box2 = require("@twilio-paste/box");
var InverseFauxInput = React2.forwardRef(
  ({ disabled, element, hasError, readOnly, children, type, variant }, ref) => {
    let backgroundColor = "colorBackgroundInverse";
    let boxShadow = "shadowBorderInverse";
    let boxShadowHover = "shadowBorderInverseStrongest";
    if (disabled && type !== "hidden") {
      backgroundColor = "colorBackgroundInverse";
      boxShadow = "shadowBorderInverseWeaker";
      boxShadowHover = "shadowBorderInverseWeaker";
    } else if (readOnly && type !== "hidden") {
      backgroundColor = "colorBackgroundInverseStrong";
      boxShadowHover = "shadowBorderInverse";
    } else if (hasError && type !== "hidden") {
      boxShadow = "shadowBorderErrorWeak";
    } else if (type === "hidden") {
      backgroundColor = null;
      boxShadow = null;
      boxShadowHover = null;
    }
    return /* @__PURE__ */ React2.createElement(
      import_box2.Box,
      {
        element,
        ref,
        display: "flex",
        width: "100%",
        backgroundColor,
        boxShadow,
        borderRadius: "borderRadius20",
        color: "colorTextInverse",
        transition: "box-shadow 100ms ease-in",
        cursor: disabled ? "not-allowed" : "text",
        variant,
        _hover: {
          boxShadow: boxShadowHover
        },
        _focusWithin: {
          backgroundColor: "colorBackgroundInverse",
          boxShadow: disabled ? boxShadow : "shadowFocusInverse"
        },
        _active: {
          boxShadow: boxShadowHover
        }
      },
      children
    );
  }
);
InverseFauxInput.displayName = "InverseFauxInput";
InverseFauxInput.propTypes = FauxInputPropTypes;

// src/FauxInput/index.tsx
var FauxInputVariants = {
  default: DefaultFauxInput,
  inverse: InverseFauxInput
};
var FieldWrapper = React3.forwardRef(
  ({ children, disabled, element, hasError, readOnly, type, variant = "default" }, ref) => {
    const FieldWrapperComponent = FauxInputVariants[variant];
    return /* @__PURE__ */ React3.createElement(
      FieldWrapperComponent,
      {
        disabled,
        element,
        hasError,
        readOnly,
        type,
        variant,
        ref
      },
      children
    );
  }
);
FieldWrapper.displayName = "FieldWrapper";
FieldWrapper.propTypes = FauxInputPropTypes;

// src/Prefix.tsx
var React4 = __toESM(require("react"));
var import_prop_types2 = __toESM(require("prop-types"));
var import_box3 = require("@twilio-paste/box");
var Prefix = React4.forwardRef(
  ({ children, disabled, element = "PREFIX", variant }, ref) => {
    let backgroundColor = "colorBackground";
    let borderColor = "colorBorderWeaker";
    if (disabled && variant === "inverse") {
      backgroundColor = "none";
      borderColor = "colorBorderInverseWeaker";
    } else if (variant === "inverse") {
      backgroundColor = "colorBackgroundInverseStrong";
      borderColor = "colorBorderInverse";
    }
    if (children == null)
      return null;
    return /* @__PURE__ */ React4.createElement(
      import_box3.Box,
      {
        alignItems: "flex-start",
        backgroundColor,
        borderBottomLeftRadius: "borderRadius20",
        borderRightColor: borderColor,
        borderRightStyle: "solid",
        borderRightWidth: "borderWidth10",
        borderTopLeftRadius: "borderRadius20",
        display: "flex",
        element: `${element}_PREFIX`,
        lineHeight: "lineHeight20",
        padding: "space30",
        variant,
        ref
      },
      children
    );
  }
);
Prefix.displayName = "Prefix";
Prefix.propTypes = {
  children: import_prop_types2.default.node.isRequired,
  element: import_prop_types2.default.string.isRequired,
  variant: import_prop_types2.default.oneOf(["default", "inverse"])
};

// src/Suffix.tsx
var React5 = __toESM(require("react"));
var import_prop_types3 = __toESM(require("prop-types"));
var import_box4 = require("@twilio-paste/box");
var Suffix = React5.forwardRef(
  ({ children, disabled, element = "SUFFIX", variant }, ref) => {
    let backgroundColor = "colorBackground";
    let borderColor = "colorBorderWeaker";
    if (disabled && variant === "inverse") {
      backgroundColor = "none";
      borderColor = "colorBorderInverseWeaker";
    } else if (variant === "inverse") {
      backgroundColor = "colorBackgroundInverseStrong";
      borderColor = "colorBorderInverse";
    }
    if (children == null)
      return null;
    return /* @__PURE__ */ React5.createElement(
      import_box4.Box,
      {
        alignItems: "flex-start",
        backgroundColor,
        borderBottomRightRadius: "borderRadius20",
        borderLeftColor: borderColor,
        borderLeftStyle: "solid",
        borderLeftWidth: "borderWidth10",
        borderTopRightRadius: "borderRadius20",
        display: "flex",
        element: `${element}_SUFFIX`,
        lineHeight: "lineHeight20",
        padding: "space30",
        variant,
        ref
      },
      children
    );
  }
);
Suffix.displayName = "Suffix";
Suffix.propTypes = {
  children: import_prop_types3.default.node.isRequired,
  element: import_prop_types3.default.string.isRequired,
  variant: import_prop_types3.default.oneOf(["default", "inverse"])
};

// src/InputBoxContext.tsx
var React6 = __toESM(require("react"));
var InputBoxContext = React6.createContext(null);
var useInputBoxContext = () => {
  const context = React6.useContext(InputBoxContext);
  if (!context) {
    throw new Error("useInputBoxContext must be used within a <InputBox> component.");
  }
  return context;
};

// src/InputBox.tsx
var InputBox = React7.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      children,
      disabled = false,
      readOnly = false,
      element = "INPUT_BOX",
      hasError,
      insertAfter,
      insertBefore,
      type,
      variant = "default"
    } = _b, props = __objRest(_b, [
      "children",
      "disabled",
      "readOnly",
      "element",
      "hasError",
      "insertAfter",
      "insertBefore",
      "type",
      "variant"
    ]);
    return /* @__PURE__ */ React7.createElement(InputBoxContext.Provider, { value: { disabled, readOnly, variant } }, /* @__PURE__ */ React7.createElement(
      FieldWrapper,
      __spreadValues({
        disabled,
        element,
        hasError,
        readOnly,
        type,
        variant,
        ref
      }, props),
      insertBefore && /* @__PURE__ */ React7.createElement(Prefix, { disabled, element, variant }, insertBefore),
      children,
      insertAfter && /* @__PURE__ */ React7.createElement(Suffix, { disabled, element, variant }, insertAfter)
    ));
  }
);
InputBox.displayName = "InputBox";
InputBox.propTypes = {
  children: import_prop_types4.default.node.isRequired,
  element: import_prop_types4.default.string.isRequired,
  disabled: import_prop_types4.default.bool,
  hasError: import_prop_types4.default.bool,
  insertAfter: import_prop_types4.default.node,
  insertBefore: import_prop_types4.default.node,
  readOnly: import_prop_types4.default.bool,
  type: import_prop_types4.default.oneOf(["text", "email", "hidden", "number", "password", "search", "tel", "date", "time"]),
  variant: import_prop_types4.default.oneOf(["default", "inverse"])
};

// src/InputChevronWrapper.tsx
var React8 = __toESM(require("react"));
var import_prop_types5 = __toESM(require("prop-types"));
var import_box5 = require("@twilio-paste/box");
var getChevronWrapperState = (disabled, readOnly) => disabled ? "disabled" : readOnly ? "readOnly" : "default";
var IconColors = {
  default: {
    default: "colorTextIcon",
    disabled: "colorTextWeaker",
    readOnly: "colorTextWeaker"
  },
  inverse: {
    default: "colorTextIconInverse",
    disabled: "colorTextInverseWeaker",
    readOnly: "colorTextInverseWeaker"
  }
};
var getInputChevronIconColor = (variant = "default", disabled = false, readOnly = false) => {
  return IconColors[variant][getChevronWrapperState(disabled, readOnly)];
};
var BackgroundColorStyles = {
  default: {
    default: "colorBackground",
    disabled: "colorBackground",
    readOnly: "colorBackground"
  },
  inverse: {
    default: "colorBackgroundInverseStrong",
    disabled: "colorBackgroundInverse",
    readOnly: "colorBackgroundInverseStrong"
  }
};
var InputChevronWrapper = React8.forwardRef(
  ({ children, element = "CHEVRON_WRAPPER" }, ref) => {
    const { disabled, readOnly, variant } = useInputBoxContext();
    return /* @__PURE__ */ React8.createElement(
      import_box5.Box,
      {
        backgroundColor: BackgroundColorStyles[variant][getChevronWrapperState(disabled, readOnly)],
        borderRadius: "borderRadius20",
        cursor: "pointer",
        alignItems: "center",
        display: "inline-flex",
        position: "absolute",
        pointerEvents: "none",
        right: "space30",
        top: "50%",
        transform: "translateY(-50%)",
        zIndex: "zIndex10",
        element,
        ref
      },
      children
    );
  }
);
InputChevronWrapper.displayName = "InputChevronWrapper";
InputChevronWrapper.propTypes = {
  children: import_prop_types5.default.node.isRequired,
  element: import_prop_types5.default.string.isRequired
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  InputBox,
  InputChevronWrapper,
  Prefix,
  Suffix,
  getInputChevronIconColor
});

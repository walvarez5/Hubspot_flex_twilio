var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/InputBox.tsx
import * as React7 from "react";
import PropTypes4 from "prop-types";

// src/FauxInput/index.tsx
import * as React3 from "react";

// src/FauxInput/DefaultFauxInput.tsx
import * as React from "react";
import { Box } from "@twilio-paste/box";

// src/types.ts
import PropTypes from "prop-types";
var FauxInputPropTypes = {
  children: PropTypes.node.isRequired,
  disabled: PropTypes.bool,
  element: PropTypes.string.isRequired,
  hasError: PropTypes.bool,
  readOnly: PropTypes.bool,
  type: PropTypes.oneOf(["text", "email", "hidden", "number", "password", "search", "tel", "date", "time"]),
  variant: PropTypes.oneOf(["default", "inverse"])
};

// src/FauxInput/DefaultFauxInput.tsx
var DefaultFauxInput = React.forwardRef(
  ({ disabled, element, hasError, readOnly, children, type, variant }, ref) => {
    let backgroundColor = "colorBackgroundBody";
    let boxShadow = "shadowBorder";
    let boxShadowHover = "shadowBorderPrimaryStronger";
    let boxShadowActive = "shadowBorderPrimaryStronger";
    if (disabled && type !== "hidden") {
      boxShadow = "shadowBorderWeak";
      boxShadowHover = "shadowBorderWeak";
      backgroundColor = "colorBackground";
      boxShadowActive = "shadowBorderWeak";
    } else if (readOnly && type !== "hidden") {
      boxShadowHover = "shadowBorder";
      backgroundColor = "colorBackground";
    } else if (hasError && type !== "hidden") {
      boxShadow = "shadowBorderError";
      boxShadowHover = "shadowBorderErrorStronger";
    } else if (type === "hidden") {
      boxShadow = null;
      boxShadowHover = null;
      backgroundColor = null;
      boxShadowActive = null;
    }
    return /* @__PURE__ */ React.createElement(
      Box,
      {
        element,
        ref,
        display: "flex",
        width: "100%",
        backgroundColor,
        boxShadow,
        borderRadius: "borderRadius20",
        transition: "box-shadow 100ms ease-in",
        cursor: disabled ? "not-allowed" : "text",
        variant,
        _hover: {
          boxShadow: boxShadowHover
        },
        _focusWithin: {
          boxShadow: disabled ? boxShadow : "shadowFocus"
        },
        _active: {
          boxShadow: boxShadowActive
        }
      },
      children
    );
  }
);
DefaultFauxInput.displayName = "DefaultFauxInput";
DefaultFauxInput.propTypes = FauxInputPropTypes;

// src/FauxInput/InverseFauxInput.tsx
import * as React2 from "react";
import { Box as Box2 } from "@twilio-paste/box";
var InverseFauxInput = React2.forwardRef(
  ({ disabled, element, hasError, readOnly, children, type, variant }, ref) => {
    let backgroundColor = "colorBackgroundInverse";
    let boxShadow = "shadowBorderInverse";
    let boxShadowHover = "shadowBorderInverseStrongest";
    if (disabled && type !== "hidden") {
      backgroundColor = "colorBackgroundInverse";
      boxShadow = "shadowBorderInverseWeaker";
      boxShadowHover = "shadowBorderInverseWeaker";
    } else if (readOnly && type !== "hidden") {
      backgroundColor = "colorBackgroundInverseStrong";
      boxShadowHover = "shadowBorderInverse";
    } else if (hasError && type !== "hidden") {
      boxShadow = "shadowBorderErrorWeak";
    } else if (type === "hidden") {
      backgroundColor = null;
      boxShadow = null;
      boxShadowHover = null;
    }
    return /* @__PURE__ */ React2.createElement(
      Box2,
      {
        element,
        ref,
        display: "flex",
        width: "100%",
        backgroundColor,
        boxShadow,
        borderRadius: "borderRadius20",
        color: "colorTextInverse",
        transition: "box-shadow 100ms ease-in",
        cursor: disabled ? "not-allowed" : "text",
        variant,
        _hover: {
          boxShadow: boxShadowHover
        },
        _focusWithin: {
          backgroundColor: "colorBackgroundInverse",
          boxShadow: disabled ? boxShadow : "shadowFocusInverse"
        },
        _active: {
          boxShadow: boxShadowHover
        }
      },
      children
    );
  }
);
InverseFauxInput.displayName = "InverseFauxInput";
InverseFauxInput.propTypes = FauxInputPropTypes;

// src/FauxInput/index.tsx
var FauxInputVariants = {
  default: DefaultFauxInput,
  inverse: InverseFauxInput
};
var FieldWrapper = React3.forwardRef(
  ({ children, disabled, element, hasError, readOnly, type, variant = "default" }, ref) => {
    const FieldWrapperComponent = FauxInputVariants[variant];
    return /* @__PURE__ */ React3.createElement(
      FieldWrapperComponent,
      {
        disabled,
        element,
        hasError,
        readOnly,
        type,
        variant,
        ref
      },
      children
    );
  }
);
FieldWrapper.displayName = "FieldWrapper";
FieldWrapper.propTypes = FauxInputPropTypes;

// src/Prefix.tsx
import * as React4 from "react";
import PropTypes2 from "prop-types";
import { Box as Box3 } from "@twilio-paste/box";
var Prefix = React4.forwardRef(
  ({ children, disabled, element = "PREFIX", variant }, ref) => {
    let backgroundColor = "colorBackground";
    let borderColor = "colorBorderWeaker";
    if (disabled && variant === "inverse") {
      backgroundColor = "none";
      borderColor = "colorBorderInverseWeaker";
    } else if (variant === "inverse") {
      backgroundColor = "colorBackgroundInverseStrong";
      borderColor = "colorBorderInverse";
    }
    if (children == null)
      return null;
    return /* @__PURE__ */ React4.createElement(
      Box3,
      {
        alignItems: "flex-start",
        backgroundColor,
        borderBottomLeftRadius: "borderRadius20",
        borderRightColor: borderColor,
        borderRightStyle: "solid",
        borderRightWidth: "borderWidth10",
        borderTopLeftRadius: "borderRadius20",
        display: "flex",
        element: `${element}_PREFIX`,
        lineHeight: "lineHeight20",
        padding: "space30",
        variant,
        ref
      },
      children
    );
  }
);
Prefix.displayName = "Prefix";
Prefix.propTypes = {
  children: PropTypes2.node.isRequired,
  element: PropTypes2.string.isRequired,
  variant: PropTypes2.oneOf(["default", "inverse"])
};

// src/Suffix.tsx
import * as React5 from "react";
import PropTypes3 from "prop-types";
import { Box as Box4 } from "@twilio-paste/box";
var Suffix = React5.forwardRef(
  ({ children, disabled, element = "SUFFIX", variant }, ref) => {
    let backgroundColor = "colorBackground";
    let borderColor = "colorBorderWeaker";
    if (disabled && variant === "inverse") {
      backgroundColor = "none";
      borderColor = "colorBorderInverseWeaker";
    } else if (variant === "inverse") {
      backgroundColor = "colorBackgroundInverseStrong";
      borderColor = "colorBorderInverse";
    }
    if (children == null)
      return null;
    return /* @__PURE__ */ React5.createElement(
      Box4,
      {
        alignItems: "flex-start",
        backgroundColor,
        borderBottomRightRadius: "borderRadius20",
        borderLeftColor: borderColor,
        borderLeftStyle: "solid",
        borderLeftWidth: "borderWidth10",
        borderTopRightRadius: "borderRadius20",
        display: "flex",
        element: `${element}_SUFFIX`,
        lineHeight: "lineHeight20",
        padding: "space30",
        variant,
        ref
      },
      children
    );
  }
);
Suffix.displayName = "Suffix";
Suffix.propTypes = {
  children: PropTypes3.node.isRequired,
  element: PropTypes3.string.isRequired,
  variant: PropTypes3.oneOf(["default", "inverse"])
};

// src/InputBoxContext.tsx
import * as React6 from "react";
var InputBoxContext = React6.createContext(null);
var useInputBoxContext = () => {
  const context = React6.useContext(InputBoxContext);
  if (!context) {
    throw new Error("useInputBoxContext must be used within a <InputBox> component.");
  }
  return context;
};

// src/InputBox.tsx
var InputBox = React7.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      children,
      disabled = false,
      readOnly = false,
      element = "INPUT_BOX",
      hasError,
      insertAfter,
      insertBefore,
      type,
      variant = "default"
    } = _b, props = __objRest(_b, [
      "children",
      "disabled",
      "readOnly",
      "element",
      "hasError",
      "insertAfter",
      "insertBefore",
      "type",
      "variant"
    ]);
    return /* @__PURE__ */ React7.createElement(InputBoxContext.Provider, { value: { disabled, readOnly, variant } }, /* @__PURE__ */ React7.createElement(
      FieldWrapper,
      __spreadValues({
        disabled,
        element,
        hasError,
        readOnly,
        type,
        variant,
        ref
      }, props),
      insertBefore && /* @__PURE__ */ React7.createElement(Prefix, { disabled, element, variant }, insertBefore),
      children,
      insertAfter && /* @__PURE__ */ React7.createElement(Suffix, { disabled, element, variant }, insertAfter)
    ));
  }
);
InputBox.displayName = "InputBox";
InputBox.propTypes = {
  children: PropTypes4.node.isRequired,
  element: PropTypes4.string.isRequired,
  disabled: PropTypes4.bool,
  hasError: PropTypes4.bool,
  insertAfter: PropTypes4.node,
  insertBefore: PropTypes4.node,
  readOnly: PropTypes4.bool,
  type: PropTypes4.oneOf(["text", "email", "hidden", "number", "password", "search", "tel", "date", "time"]),
  variant: PropTypes4.oneOf(["default", "inverse"])
};

// src/InputChevronWrapper.tsx
import * as React8 from "react";
import PropTypes5 from "prop-types";
import { Box as Box5 } from "@twilio-paste/box";
var getChevronWrapperState = (disabled, readOnly) => disabled ? "disabled" : readOnly ? "readOnly" : "default";
var IconColors = {
  default: {
    default: "colorTextIcon",
    disabled: "colorTextWeaker",
    readOnly: "colorTextWeaker"
  },
  inverse: {
    default: "colorTextIconInverse",
    disabled: "colorTextInverseWeaker",
    readOnly: "colorTextInverseWeaker"
  }
};
var getInputChevronIconColor = (variant = "default", disabled = false, readOnly = false) => {
  return IconColors[variant][getChevronWrapperState(disabled, readOnly)];
};
var BackgroundColorStyles = {
  default: {
    default: "colorBackground",
    disabled: "colorBackground",
    readOnly: "colorBackground"
  },
  inverse: {
    default: "colorBackgroundInverseStrong",
    disabled: "colorBackgroundInverse",
    readOnly: "colorBackgroundInverseStrong"
  }
};
var InputChevronWrapper = React8.forwardRef(
  ({ children, element = "CHEVRON_WRAPPER" }, ref) => {
    const { disabled, readOnly, variant } = useInputBoxContext();
    return /* @__PURE__ */ React8.createElement(
      Box5,
      {
        backgroundColor: BackgroundColorStyles[variant][getChevronWrapperState(disabled, readOnly)],
        borderRadius: "borderRadius20",
        cursor: "pointer",
        alignItems: "center",
        display: "inline-flex",
        position: "absolute",
        pointerEvents: "none",
        right: "space30",
        top: "50%",
        transform: "translateY(-50%)",
        zIndex: "zIndex10",
        element,
        ref
      },
      children
    );
  }
);
InputChevronWrapper.displayName = "InputChevronWrapper";
InputChevronWrapper.propTypes = {
  children: PropTypes5.node.isRequired,
  element: PropTypes5.string.isRequired
};
export {
  InputBox,
  InputChevronWrapper,
  Prefix,
  Suffix,
  getInputChevronIconColor
};

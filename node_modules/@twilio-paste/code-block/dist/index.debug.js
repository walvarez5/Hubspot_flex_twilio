"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  CodeBlock: () => CodeBlock,
  CodeBlockHeader: () => CodeBlockHeader,
  CodeBlockTab: () => CodeBlockTab,
  CodeBlockTabList: () => CodeBlockTabList,
  CodeBlockTabPanel: () => CodeBlockTabPanel,
  CodeBlockWrapper: () => CodeBlockWrapper
});
module.exports = __toCommonJS(src_exports);

// src/CodeBlock.tsx
var React3 = __toESM(require("react"));
var import_prop_types = __toESM(require("prop-types"));
var import_syntax_highlighter_library = require("@twilio-paste/syntax-highlighter-library");
var import_box2 = require("@twilio-paste/box");

// src/CodeBlockTheme.ts
var import_styling_library = require("@twilio-paste/styling-library");
var import_theme = require("@twilio-paste/theme");
var getPasteSyntaxTheme = (maxLines) => {
  const theme = (0, import_theme.useTheme)();
  return (0, import_styling_library.css)({
    'code[class*="language-"]': {
      color: "#d6deeb",
      fontFamily: "fontFamilyCode",
      textAlign: "left",
      whiteSpace: "pre",
      wordSpacing: "normal",
      wordBreak: "normal",
      wordWrap: "normal",
      lineHeight: "1.5",
      fontSize: "1em",
      MozTabSize: "4",
      OTabSize: "4",
      tabSize: "4",
      WebkitHyphens: "none",
      MozHyphens: "none",
      msHyphens: "none",
      hyphens: "none"
    },
    'pre[class*="language-"]': {
      color: "white",
      fontFamily: "fontFamilyCode",
      textAlign: "left",
      whiteSpace: "pre",
      wordSpacing: "normal",
      wordBreak: "normal",
      wordWrap: "normal",
      lineHeight: "1.5",
      fontSize: "1em",
      MozTabSize: "4",
      OTabSize: "4",
      tabSize: "4",
      WebkitHyphens: "none",
      MozHyphens: "none",
      msHyphens: "none",
      hyphens: "none",
      margin: "0",
      overflow: "auto",
      background: "#121C2D",
      display: "-webkit-box",
      WebkitLineClamp: `${maxLines}`,
      WebkitBoxOrient: "vertical",
      width: "100%"
    },
    'pre[class*="language-"]::-moz-selection': {
      textShadow: "none",
      background: "rgba(29, 59, 83, 0.99)"
    },
    'pre[class*="language-"] ::-moz-selection': {
      textShadow: "none",
      background: "rgba(29, 59, 83, 0.99)"
    },
    'code[class*="language-"]::-moz-selection': {
      textShadow: "none",
      background: "rgba(29, 59, 83, 0.99)"
    },
    'code[class*="language-"] ::-moz-selection': {
      textShadow: "none",
      background: "rgba(29, 59, 83, 0.99)"
    },
    'pre[class*="language-"]::selection': {
      textShadow: "none",
      background: "rgba(29, 59, 83, 0.99)"
    },
    'pre[class*="language-"] ::selection': {
      textShadow: "none",
      background: "rgba(29, 59, 83, 0.99)"
    },
    'code[class*="language-"]::selection': {
      textShadow: "none",
      background: "rgba(29, 59, 83, 0.99)"
    },
    'code[class*="language-"] ::selection': {
      textShadow: "none",
      background: "rgba(29, 59, 83, 0.99)"
    },
    ':not(pre) > code[class*="language-"]': {
      color: "white",
      background: "#011627",
      padding: "0.1em",
      borderRadius: "0.3em",
      whiteSpace: "normal"
    },
    comment: {
      color: "rgb(136, 145, 170)",
      fontStyle: "italic"
    },
    prolog: {
      color: "rgb(99, 119, 119)",
      fontStyle: "italic"
    },
    cdata: {
      color: "rgb(99, 119, 119)",
      fontStyle: "italic"
    },
    punctuation: {
      color: "rgb(199, 146, 234)"
    },
    ".namespace": {
      color: "rgb(178, 204, 214)"
    },
    deleted: {
      color: "rgba(239, 83, 80, 0.56)",
      fontStyle: "italic"
    },
    symbol: {
      color: "rgb(128, 203, 196)"
    },
    property: {
      color: "rgb(128, 203, 196)"
    },
    tag: {
      color: "rgb(127, 219, 202)"
    },
    operator: {
      color: "rgb(127, 219, 202)"
    },
    keyword: {
      color: "rgb(127, 219, 202)"
    },
    boolean: {
      color: "rgb(255, 88, 116)"
    },
    number: {
      color: "rgb(247, 140, 108)"
    },
    constant: {
      color: "rgb(130, 170, 255)"
    },
    function: {
      color: "rgb(130, 170, 255)"
    },
    builtin: {
      color: "rgb(130, 170, 255)"
    },
    char: {
      color: "rgb(130, 170, 255)"
    },
    selector: {
      color: "rgb(199, 146, 234)",
      fontStyle: "italic"
    },
    doctype: {
      color: "rgb(199, 146, 234)",
      fontStyle: "italic"
    },
    "attr-name": {
      color: "rgb(173, 219, 103)",
      fontStyle: "italic"
    },
    inserted: {
      color: "rgb(173, 219, 103)",
      fontStyle: "italic"
    },
    string: {
      color: "rgb(173, 219, 103)"
    },
    url: {
      color: "rgb(173, 219, 103)"
    },
    entity: {
      color: "rgb(173, 219, 103)"
    },
    ".language-css .token.string": {
      color: "rgb(173, 219, 103)"
    },
    ".style .token.string": {
      color: "rgb(173, 219, 103)"
    },
    "class-name": {
      color: "rgb(255, 203, 139)"
    },
    atrule: {
      color: "rgb(255, 203, 139)"
    },
    "attr-value": {
      color: "rgb(255, 203, 139)"
    },
    regex: {
      color: "rgb(214, 222, 235)"
    },
    important: {
      color: "rgb(214, 222, 235)",
      fontWeight: "bold"
    },
    variable: {
      color: "rgb(214, 222, 235)"
    },
    bold: {
      fontWeight: "bold"
    },
    italic: {
      fontStyle: "italic"
    }
  })(theme);
};

// src/CopyButton.tsx
var React = __toESM(require("react"));
var import_button = require("@twilio-paste/button");
var import_box = require("@twilio-paste/box");
var import_clipboard_copy_library = require("@twilio-paste/clipboard-copy-library");
var import_screen_reader_only = require("@twilio-paste/screen-reader-only");
var import_CopyIcon = require("@twilio-paste/icons/cjs/CopyIcon");
var import_tooltip = require("@twilio-paste/tooltip");
var getCopyButtonText = (labelBefore, labelAfter) => {
  return (copied) => {
    return copied ? labelAfter : labelBefore;
  };
};
var CopyButton = ({
  text,
  i18nCopyLabelBefore = "Copy code block",
  i18nCopyLabelAfter = "Copied!",
  element = "COPY_BUTTON",
  copyTextFormatter
}) => {
  const tooltipState = (0, import_tooltip.useTooltipState)();
  const [tooltipText, setTooltipText] = React.useState(i18nCopyLabelBefore);
  const isFirstRender = React.useRef(true);
  const getText = React.useMemo(() => {
    return getCopyButtonText(i18nCopyLabelBefore, i18nCopyLabelAfter);
  }, [i18nCopyLabelBefore, i18nCopyLabelAfter]);
  const clipboard = (0, import_clipboard_copy_library.useClipboard)({ copiedTimeout: 1500 });
  const handleCopy = React.useCallback(() => {
    const formattedText = copyTextFormatter ? copyTextFormatter(text) : text;
    clipboard.copy(formattedText);
  }, [text]);
  React.useEffect(() => {
    setTooltipText(getText(clipboard.copied));
  }, [clipboard.copied]);
  React.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    tooltipState.hide();
    setTimeout(() => tooltipState.show(), 0);
  }, [tooltipText]);
  return /* @__PURE__ */ React.createElement(import_tooltip.Tooltip, { text: tooltipText, state: tooltipState, element: `${element}_TOOLTIP` }, /* @__PURE__ */ React.createElement(import_button.Button, { variant: "inverse", size: "icon_small", onClick: handleCopy, element }, /* @__PURE__ */ React.createElement(import_box.Box, { as: "span" }, /* @__PURE__ */ React.createElement(import_CopyIcon.CopyIcon, { decorative: true }), /* @__PURE__ */ React.createElement(import_box.Box, { as: "span", "aria-live": "polite" }, /* @__PURE__ */ React.createElement(import_screen_reader_only.ScreenReaderOnly, null, tooltipText)))));
};
CopyButton.displayName = "CopyButton";

// src/ExternalLinkButton.tsx
var React2 = __toESM(require("react"));
var import_button2 = require("@twilio-paste/button");
var import_screen_reader_only2 = require("@twilio-paste/screen-reader-only");
var import_LinkExternalIcon = require("@twilio-paste/icons/cjs/LinkExternalIcon");
var import_tooltip2 = require("@twilio-paste/tooltip");
var ExternalLinkButton = ({
  i18nLinkLabel = "Open code block in new page",
  href,
  element = "EXTERNAL_LINK"
}) => {
  const tooltipState = (0, import_tooltip2.useTooltipState)();
  const tooltipText = i18nLinkLabel;
  const isFirstRender = React2.useRef(true);
  React2.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    tooltipState.hide();
    setTimeout(() => tooltipState.show(), 0);
  }, [tooltipText]);
  return /* @__PURE__ */ React2.createElement(import_tooltip2.Tooltip, { text: tooltipText, element: `${element}_TOOLTIP` }, /* @__PURE__ */ React2.createElement(import_button2.Button, { as: "a", variant: "inverse", size: "icon_small", href, element, target: "_blank" }, /* @__PURE__ */ React2.createElement(import_LinkExternalIcon.LinkExternalIcon, { decorative: true }), /* @__PURE__ */ React2.createElement(import_screen_reader_only2.ScreenReaderOnly, null, i18nLinkLabel)));
};
ExternalLinkButton.displayName = "ExternalLinkButton";

// src/CodeBlock.tsx
var CodeBlockVariantStyles = {
  "single-line": {
    gridTemplateColumns: "1fr auto",
    gridTemplateAreas: '"code-block button-group"',
    columnGap: "space40"
  },
  "multi-line": {
    gridTemplateRows: "auto 1fr",
    gridTemplateAreas: '"button-group" "code-block"',
    rowGap: "space20"
  }
};
var CodeBlock = React3.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      element = "CODE_BLOCK",
      language,
      code,
      variant = "multi-line",
      showLineNumbers,
      wrapLines,
      maxLines,
      externalLink,
      i18nCopyLabelAfter,
      i18nCopyLabelBefore,
      i18nLinkLabel,
      copyTextFormatter
    } = _b, props = __objRest(_b, [
      "element",
      "language",
      "code",
      "variant",
      "showLineNumbers",
      "wrapLines",
      "maxLines",
      "externalLink",
      "i18nCopyLabelAfter",
      "i18nCopyLabelBefore",
      "i18nLinkLabel",
      "copyTextFormatter"
    ]);
    return /* @__PURE__ */ React3.createElement(
      import_box2.Box,
      __spreadValues(__spreadProps(__spreadValues({
        ref,
        element,
        variant
      }, (0, import_box2.safelySpreadBoxProps)(props)), {
        backgroundColor: "colorBackgroundBodyInverse",
        padding: "space50",
        display: "grid"
      }), CodeBlockVariantStyles[variant]),
      /* @__PURE__ */ React3.createElement(
        import_box2.Box,
        {
          display: "flex",
          flexDirection: "row",
          alignItems: "center",
          columnGap: "space30",
          justifyContent: variant === "multi-line" ? "flex-end" : void 0,
          gridArea: "button-group"
        },
        /* @__PURE__ */ React3.createElement(import_box2.Box, null, /* @__PURE__ */ React3.createElement(
          CopyButton,
          {
            element: `${element}_COPY_BUTTON`,
            text: code,
            i18nCopyLabelAfter,
            i18nCopyLabelBefore,
            copyTextFormatter
          }
        )),
        externalLink && /* @__PURE__ */ React3.createElement(import_box2.Box, null, /* @__PURE__ */ React3.createElement(
          ExternalLinkButton,
          {
            href: externalLink,
            element: `${element}_EXTERNAL_LINK`,
            i18nLinkLabel
          }
        ))
      ),
      /* @__PURE__ */ React3.createElement(import_box2.Box, { element: `${element}_CONTENT`, display: "flex", alignItems: "center", overflowX: "auto", gridArea: "code-block" }, /* @__PURE__ */ React3.createElement(
        import_syntax_highlighter_library.SyntaxHighlighter,
        {
          language,
          style: getPasteSyntaxTheme(maxLines),
          showLineNumbers,
          wrapLongLines: wrapLines,
          wrapLines: true
        },
        code
      ))
    );
  }
);
CodeBlock.displayName = "CodeBlock";
CodeBlock.propTypes = {
  code: import_prop_types.default.string.isRequired,
  element: import_prop_types.default.string,
  language: import_prop_types.default.oneOf([
    "javascript",
    "jsx",
    "csharp",
    "php",
    "ruby",
    "python",
    "java",
    "json",
    "c",
    "bash",
    "shell-session",
    "go",
    "groovy"
  ]).isRequired,
  showLineNumbers: import_prop_types.default.bool,
  wrapLines: import_prop_types.default.bool,
  maxLines: import_prop_types.default.number,
  externalLink: import_prop_types.default.string,
  i18nCopyLabelBefore: import_prop_types.default.string,
  i18nCopyLabelAfter: import_prop_types.default.string,
  i18nLinkLabel: import_prop_types.default.string,
  variant: import_prop_types.default.oneOf(["multi-line", "single-line"]),
  copyTextFormatter: import_prop_types.default.func
};

// src/CodeBlockHeader.tsx
var React4 = __toESM(require("react"));
var import_box3 = require("@twilio-paste/box");
var CodeBlockHeader = React4.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, element = "CODE_BLOCK_HEADER", as = "h3" } = _b, props = __objRest(_b, ["children", "element", "as"]);
    return /* @__PURE__ */ React4.createElement(
      import_box3.Box,
      __spreadProps(__spreadValues({}, (0, import_box3.safelySpreadBoxProps)(props)), {
        ref,
        element,
        as,
        backgroundColor: "colorBackgroundInverse",
        color: "colorTextInverse",
        paddingY: "space40",
        paddingX: "space60",
        margin: "space0",
        borderTopLeftRadius: "borderRadius20",
        borderTopRightRadius: "borderRadius20",
        fontWeight: "fontWeightSemibold",
        fontSize: "fontSize30"
      }),
      children
    );
  }
);
CodeBlockHeader.displayName = "CodeBlockHeader";

// src/CodeBlockTab.tsx
var React6 = __toESM(require("react"));
var import_prop_types2 = __toESM(require("prop-types"));
var import_box4 = require("@twilio-paste/box");
var import_tabs_primitive = require("@twilio-paste/tabs-primitive");

// src/CodeBlockTabsContext.tsx
var React5 = __toESM(require("react"));
var CodeBlockTabsContext = React5.createContext({});

// src/CodeBlockTab.tsx
var StyledCodeBlockTab = React6.forwardRef((_a, ref) => {
  var _b = _a, { children } = _b, props = __objRest(_b, ["children"]);
  return /* @__PURE__ */ React6.createElement(
    import_box4.Box,
    __spreadProps(__spreadValues({
      ref,
      as: "button"
    }, (0, import_box4.safelySpreadBoxProps)(props)), {
      transition: "background-color 150ms ease-in, color 150ms ease-in, border-color 150ms ease-in, box-shadow 150ms ease-in",
      backgroundColor: "colorBackgroundInverse",
      color: "colorTextInverseWeak",
      fontSize: "fontSize30",
      lineHeight: "lineHeight30",
      paddingY: "space30",
      paddingX: "space40",
      margin: "space0",
      borderStyle: "solid",
      borderWidth: "borderWidth10",
      borderColor: "transparent",
      borderRadius: "borderRadius20",
      _focus: { outline: "none", boxShadow: "shadowFocusInverse" },
      _hover: { backgroundColor: "colorBackgroundPrimary", color: "colorTextInverse" },
      _selected: {
        backgroundColor: "colorBackgroundBodyInverse",
        color: "colorTextBrandInverse",
        borderColor: "colorBorderInverseWeaker"
      },
      _selected_focus: { borderColor: "transparent" },
      _selected_hover: {
        backgroundColor: "colorBackgroundPrimaryStronger",
        color: "colorTextWeakest",
        borderColor: "transparent"
      }
    }),
    children
  );
});
StyledCodeBlockTab.displayName = "StyledCodeBlockTab";
var CodeBlockTab = React6.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, element = "CODE_BLOCK_TAB" } = _b, props = __objRest(_b, ["children", "element"]);
    const tabState = React6.useContext(CodeBlockTabsContext);
    return /* @__PURE__ */ React6.createElement(import_tabs_primitive.TabPrimitive, __spreadValues(__spreadProps(__spreadValues({}, tabState), { as: StyledCodeBlockTab, element, ref }), props), children);
  }
);
CodeBlockTab.displayName = "CodeBlockTab";
CodeBlockTab.propTypes = {
  children: import_prop_types2.default.node,
  element: import_prop_types2.default.string
};

// src/CodeBlockTabList.tsx
var React7 = __toESM(require("react"));
var import_prop_types3 = __toESM(require("prop-types"));
var import_box5 = require("@twilio-paste/box");
var import_tabs_primitive2 = require("@twilio-paste/tabs-primitive");
var CodeBlockTabList = React7.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, element = "CODE_BLOCK_TAB_LIST" } = _b, props = __objRest(_b, ["children", "element"]);
    const tabState = React7.useContext(CodeBlockTabsContext);
    return /* @__PURE__ */ React7.createElement(
      import_tabs_primitive2.TabPrimitiveList,
      __spreadProps(__spreadValues(__spreadValues({}, (0, import_box5.safelySpreadBoxProps)(props)), tabState), {
        as: import_box5.Box,
        ref,
        element,
        display: "flex",
        columnGap: "space50",
        backgroundColor: "colorBackgroundInverse",
        paddingBottom: "space40",
        paddingX: "space60"
      }),
      children
    );
  }
);
CodeBlockTabList.displayName = "CodeBlockTabList";
CodeBlockTabList.propTypes = {
  children: import_prop_types3.default.node,
  element: import_prop_types3.default.string
};

// src/CodeBlockTabPanel.tsx
var React8 = __toESM(require("react"));
var import_prop_types4 = __toESM(require("prop-types"));
var import_box6 = require("@twilio-paste/box");
var import_tabs_primitive3 = require("@twilio-paste/tabs-primitive");
var CodeBlockTabPanel = React8.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, element = "CODE_BLOCK_TAB_PANEL" } = _b, props = __objRest(_b, ["children", "element"]);
    const tabState = React8.useContext(CodeBlockTabsContext);
    return /* @__PURE__ */ React8.createElement(import_tabs_primitive3.TabPrimitivePanel, __spreadProps(__spreadValues(__spreadValues({}, (0, import_box6.safelySpreadBoxProps)(props)), tabState), { as: import_box6.Box, element, ref }), children);
  }
);
CodeBlockTabPanel.displayName = "CodeBlockTabPanel";
CodeBlockTabPanel.propTypes = {
  children: import_prop_types4.default.node,
  element: import_prop_types4.default.string
};

// src/CodeBlockWrapper.tsx
var React9 = __toESM(require("react"));
var import_prop_types5 = __toESM(require("prop-types"));
var import_box7 = require("@twilio-paste/box");
var import_tabs_primitive4 = require("@twilio-paste/tabs-primitive");
var CodeBlockWrapper = React9.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, state, element = "CODE_BLOCK_WRAPPER" } = _b, initialState = __objRest(_b, ["children", "state", "element"]);
    const tabState = state || (0, import_tabs_primitive4.useTabPrimitiveState)(__spreadValues({ orientation: "horizontal" }, initialState));
    return /* @__PURE__ */ React9.createElement(CodeBlockTabsContext.Provider, { value: tabState }, /* @__PURE__ */ React9.createElement(import_box7.Box, { element, ref }, children));
  }
);
CodeBlockWrapper.displayName = "CodeBlockWrapper";
CodeBlockWrapper.propTypes = {
  children: import_prop_types5.default.node,
  element: import_prop_types5.default.string
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CodeBlock,
  CodeBlockHeader,
  CodeBlockTab,
  CodeBlockTabList,
  CodeBlockTabPanel,
  CodeBlockWrapper
});

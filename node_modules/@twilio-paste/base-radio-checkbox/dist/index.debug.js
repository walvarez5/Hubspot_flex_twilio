"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  BaseRadioCheckboxControl: () => BaseRadioCheckboxControl,
  BaseRadioCheckboxHelpText: () => BaseRadioCheckboxHelpText,
  BaseRadioCheckboxLabel: () => BaseRadioCheckboxLabel,
  BaseRadioCheckboxLabelText: () => BaseRadioCheckboxLabelText
});
module.exports = __toCommonJS(src_exports);

// src/BaseRadioCheckbox.tsx
var React = __toESM(require("react"));
var import_prop_types = __toESM(require("prop-types"));
var import_box = require("@twilio-paste/box");
var import_text = require("@twilio-paste/text");
var import_sibling_box = require("@twilio-paste/sibling-box");
var import_label = require("@twilio-paste/label");
var import_help_text = require("@twilio-paste/help-text");
var BaseRadioCheckboxControl = React.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, disabled, element = "BASE_RADIO_CHECKBOX_CONTROL" } = _b, props = __objRest(_b, ["children", "disabled", "element"]);
    return /* @__PURE__ */ React.createElement(
      import_sibling_box.SiblingBox,
      __spreadValues({
        as: "span",
        ref,
        display: "flex",
        element,
        backgroundColor: "colorBackgroundBody",
        borderColor: "colorBorder",
        borderStyle: "solid",
        borderWidth: "borderWidth10",
        height: "sizeSquare50",
        marginX: "space20",
        marginY: "space10",
        width: "sizeSquare50",
        color: "colorTextWeakest",
        _hoverSibling: {
          borderColor: "colorBorderPrimaryStronger",
          color: "colorTextWeakest"
        },
        _focusSibling: {
          borderColor: "colorBorderPrimaryStronger",
          boxShadow: "shadowFocus",
          color: "colorTextWeakest"
        },
        _activeSibling: !disabled ? {
          borderColor: "colorBorderPrimaryStronger",
          backgroundColor: "colorBackgroundPrimaryStronger",
          color: "colorTextWeakest"
        } : void 0,
        _checkedSibling: {
          borderColor: "colorBorderPrimary",
          backgroundColor: "colorBackgroundPrimary",
          color: "colorTextInverse"
        },
        _disabledSibling: {
          borderColor: "colorBorderWeaker"
        },
        _invalidSibling: {
          borderColor: "colorBorderError"
        },
        _invalidAndHoverSibling: {
          borderColor: "colorBorderErrorStronger"
        },
        _invalidAndDisabledSibling: {
          borderColor: "colorBorderWeaker"
        },
        _checkedAndHoverSibling: {
          borderColor: "colorBorderPrimaryStronger",
          backgroundColor: "colorBackgroundPrimaryStronger",
          color: "colorTextWeakest"
        },
        _checkedAndFocusSibling: {
          borderColor: "colorBorderPrimaryStronger",
          backgroundColor: "colorBackgroundPrimaryStronger",
          color: "colorTextWeakest"
        },
        _checkedAndActiveSibling: !disabled ? {
          borderColor: "colorBorderPrimaryStronger",
          backgroundColor: "colorBackgroundPrimaryStronger"
        } : void 0,
        _checkedAndDisabledSibling: {
          borderColor: "colorBorderWeaker",
          backgroundColor: "colorBackgroundStrong",
          color: "colorTextWeakest"
        },
        _checkedAndInvalidSibling: {
          borderColor: "colorBorderError",
          backgroundColor: "colorBackgroundError",
          color: "colorTextInverse"
        },
        _checkedAndInvalidAndHoverSibling: {
          borderColor: "colorBorderErrorStronger",
          backgroundColor: "colorBackgroundErrorStronger"
        },
        _checkedAndInvalidAndDisabledSibling: {
          borderColor: "colorBorderWeaker",
          backgroundColor: "colorBackgroundStrong",
          color: "colorTextWeakest"
        }
      }, props),
      children
    );
  }
);
BaseRadioCheckboxControl.displayName = "BaseRadioCheckboxControl";
BaseRadioCheckboxControl.propTypes = {
  children: import_prop_types.default.node.isRequired,
  disabled: import_prop_types.default.bool
};
var BaseRadioCheckboxLabel = React.forwardRef(
  (_a, ref) => {
    var _b = _a, { children } = _b, props = __objRest(_b, ["children"]);
    return /* @__PURE__ */ React.createElement(import_label.Label, __spreadProps(__spreadValues({}, props), { marginBottom: "space0", ref }), /* @__PURE__ */ React.createElement(import_box.Box, { as: "span", display: "flex" }, children));
  }
);
BaseRadioCheckboxLabel.displayName = "BaseRadioCheckboxLabel";
BaseRadioCheckboxLabel.propTypes = {
  children: import_prop_types.default.node.isRequired
};
var BaseRadioCheckboxLabelText = React.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, element = "BASE_RADIO_CHECKBOX_LABEL_TEXT" } = _b, props = __objRest(_b, ["children", "element"]);
    return /* @__PURE__ */ React.createElement(
      import_text.Text,
      __spreadValues({
        as: "span",
        color: "currentColor",
        marginLeft: "space20",
        fontWeight: "fontWeightMedium",
        element,
        ref
      }, props),
      children
    );
  }
);
BaseRadioCheckboxLabelText.displayName = "BaseRadioCheckboxLabelText";
BaseRadioCheckboxLabelText.propTypes = {
  children: import_prop_types.default.node.isRequired,
  element: import_prop_types.default.string
};
var BaseRadioCheckboxHelpText = React.forwardRef(
  ({ children, helpTextId, element = "BASE_RADIO_CHECKBOX_HELP_TEXT_WRAPPER" }, ref) => {
    return /* @__PURE__ */ React.createElement(import_box.Box, { as: "span", display: "block", element, marginLeft: "space80", ref }, /* @__PURE__ */ React.createElement(import_help_text.HelpText, { id: helpTextId, marginTop: "space0" }, children));
  }
);
BaseRadioCheckboxHelpText.displayName = "BaseRadioCheckboxHelpText";
BaseRadioCheckboxHelpText.propTypes = {
  children: import_prop_types.default.node.isRequired,
  helpTextId: import_prop_types.default.string.isRequired,
  element: import_prop_types.default.string
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BaseRadioCheckboxControl,
  BaseRadioCheckboxHelpText,
  BaseRadioCheckboxLabel,
  BaseRadioCheckboxLabelText
});

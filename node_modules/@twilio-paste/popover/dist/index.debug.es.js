var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/PopoverContainer.tsx
import * as React2 from "react";
import { useNonModalDialogPrimitiveState } from "@twilio-paste/non-modal-dialog-primitive";

// src/PopoverContext.tsx
import * as React from "react";
var PopoverContext = React.createContext({});

// src/PopoverContainer.tsx
var BasePopoverContainer = (_a) => {
  var _b = _a, {
    children,
    gutter,
    placement,
    state
  } = _b, initialState = __objRest(_b, [
    "children",
    "gutter",
    "placement",
    "state"
  ]);
  const popover = state || useNonModalDialogPrimitiveState(__spreadValues({ gutter, modal: true, placement }, initialState));
  return /* @__PURE__ */ React2.createElement(PopoverContext.Provider, { value: popover }, children);
};
BasePopoverContainer.displayName = "BasePopoverContainer";
var PopoverContainer = React2.memo(BasePopoverContainer);
PopoverContainer.displayName = "PopoverContainer";

// src/Popover.tsx
import * as React5 from "react";
import PropTypes from "prop-types";
import { Box as Box2, safelySpreadBoxProps } from "@twilio-paste/box";
import { Button } from "@twilio-paste/button";
import { CloseIcon } from "@twilio-paste/icons/esm/CloseIcon";
import { StyledBase } from "@twilio-paste/theme";
import { NonModalDialogPrimitive } from "@twilio-paste/non-modal-dialog-primitive";

// ../screen-reader-only/dist/index.es.js
import * as React3 from "react";
import "prop-types";
import { Box } from "@twilio-paste/box";
var __defProp2 = Object.defineProperty;
var __defProps2 = Object.defineProperties;
var __getOwnPropDescs2 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols2 = Object.getOwnPropertySymbols;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __propIsEnum2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues2 = (a, b) => {
  for (var prop in b || (b = {}))
    __hasOwnProp2.call(b, prop) && __defNormalProp2(a, prop, b[prop]);
  if (__getOwnPropSymbols2)
    for (var prop of __getOwnPropSymbols2(b))
      __propIsEnum2.call(b, prop) && __defNormalProp2(a, prop, b[prop]);
  return a;
};
var __spreadProps2 = (a, b) => __defProps2(a, __getOwnPropDescs2(b));
var __objRest2 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    __hasOwnProp2.call(source, prop) && exclude.indexOf(prop) < 0 && (target[prop] = source[prop]);
  if (source != null && __getOwnPropSymbols2)
    for (var prop of __getOwnPropSymbols2(source))
      exclude.indexOf(prop) < 0 && __propIsEnum2.call(source, prop) && (target[prop] = source[prop]);
  return target;
};
var ScreenReaderOnly = React3.forwardRef((_a, ref) => {
  var _b = _a, { as = "span", children } = _b, props = __objRest2(_b, ["as", "children"]);
  return React3.createElement(Box, __spreadProps2(__spreadValues2({}, props), { as, border: "none", clip: "rect(0 0 0 0)", height: "1px", margin: "spaceNegative10", overflow: "hidden", padding: "space0", position: "absolute", ref, textTransform: "none", whiteSpace: "nowrap", width: "1px" }), children);
});
ScreenReaderOnly.displayName = "ScreenReaderOnly";

// src/PopoverArrow.tsx
import * as React4 from "react";
import { NonModalDialogArrowPrimitive } from "@twilio-paste/non-modal-dialog-primitive";
import { useTheme } from "@twilio-paste/theme";
var PopoverArrow = (props) => {
  const theme = useTheme();
  return /* @__PURE__ */ React4.createElement(
    NonModalDialogArrowPrimitive,
    __spreadProps(__spreadValues({}, props), {
      size: theme.fontSizes.fontSize70,
      stroke: theme.borderColors.colorBorderWeaker,
      fill: theme.backgroundColors.colorBackgroundBody
    })
  );
};
PopoverArrow.displayName = "PopoverArrow";

// src/Popover.tsx
var StyledPopover = React5.forwardRef((_a, ref) => {
  var _b = _a, { style } = _b, props = __objRest(_b, ["style"]);
  return /* @__PURE__ */ React5.createElement(
    Box2,
    __spreadProps(__spreadValues({}, safelySpreadBoxProps(props)), {
      backgroundColor: "colorBackgroundBody",
      borderStyle: "solid",
      borderWidth: "borderWidth10",
      borderColor: "colorBorderWeaker",
      borderRadius: "borderRadius20",
      boxShadow: "shadowCard",
      maxWidth: "size50",
      zIndex: "zIndex80",
      _focus: { outline: "none" },
      style,
      ref
    })
  );
});
StyledPopover.displayName = "StyledPopover";
var Popover = React5.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, element = "POPOVER", i18nDismissLabel = "Close popover" } = _b, props = __objRest(_b, ["children", "element", "i18nDismissLabel"]);
    const popover = React5.useContext(PopoverContext);
    return /* @__PURE__ */ React5.createElement(NonModalDialogPrimitive, __spreadProps(__spreadValues(__spreadValues({}, popover), props), { as: StyledPopover, ref, preventBodyScroll: false }), /* @__PURE__ */ React5.createElement(StyledBase, null, /* @__PURE__ */ React5.createElement(PopoverArrow, __spreadValues({}, popover)), /* @__PURE__ */ React5.createElement(Box2, { element, paddingX: "space80", paddingY: "space70" }, /* @__PURE__ */ React5.createElement(Box2, { position: "absolute", right: 8, top: 8 }, /* @__PURE__ */ React5.createElement(
      Button,
      {
        element: `${element}_CLOSE_BUTTON`,
        variant: "secondary_icon",
        size: "reset",
        onClick: popover.hide
      },
      /* @__PURE__ */ React5.createElement(CloseIcon, { element: `${element}_CLOSE_ICON`, decorative: true, size: "sizeIcon10" }),
      /* @__PURE__ */ React5.createElement(ScreenReaderOnly, null, i18nDismissLabel)
    )), children)));
  }
);
Popover.propTypes = {
  "aria-label": PropTypes.string.isRequired,
  children: PropTypes.node.isRequired,
  element: PropTypes.string,
  i18nDismissLabel: PropTypes.string
};
Popover.displayName = "Popover";

// src/PopoverButton.tsx
import * as React6 from "react";
import PropTypes2 from "prop-types";
import { Button as Button2 } from "@twilio-paste/button";
import { NonModalDialogDisclosurePrimitive } from "@twilio-paste/non-modal-dialog-primitive";
var PopoverButton = React6.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, element = "POPOVER_BUTTON" } = _b, popoverButtonProps = __objRest(_b, ["children", "element"]);
    const popover = React6.useContext(PopoverContext);
    return /* @__PURE__ */ React6.createElement(
      NonModalDialogDisclosurePrimitive,
      __spreadProps(__spreadValues(__spreadValues({
        element
      }, popover), popoverButtonProps), {
        as: Button2,
        ref
      }),
      children
    );
  }
);
PopoverButton.propTypes = {
  id: PropTypes2.string,
  children: PropTypes2.node.isRequired,
  toggle: PropTypes2.func,
  element: PropTypes2.string
};
PopoverButton.displayName = "PopoverButton";

// src/PopoverBadgeButton.tsx
import * as React7 from "react";
import PropTypes3 from "prop-types";
import { Badge } from "@twilio-paste/badge";
import { NonModalDialogDisclosurePrimitive as NonModalDialogDisclosurePrimitive2 } from "@twilio-paste/non-modal-dialog-primitive";
var ButtonBadge = React7.forwardRef(function ButtonBadge2(_a, ref) {
  var _b = _a, { children } = _b, props = __objRest(_b, ["children"]);
  return /* @__PURE__ */ React7.createElement(Badge, __spreadProps(__spreadValues({}, props), { as: "button", ref }), children);
});
ButtonBadge.displayName = "ButtonBadge";
var PopoverBadgeButton = React7.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, element = "POPOVER_BADGE" } = _b, popoverButtonProps = __objRest(_b, ["children", "element"]);
    const popover = React7.useContext(PopoverContext);
    return /* @__PURE__ */ React7.createElement(
      NonModalDialogDisclosurePrimitive2,
      __spreadProps(__spreadValues(__spreadValues({
        element
      }, popover), popoverButtonProps), {
        as: ButtonBadge,
        ref
      }),
      children
    );
  }
);
PopoverBadgeButton.propTypes = {
  id: PropTypes3.string,
  toggle: PropTypes3.func,
  element: PropTypes3.string
};
PopoverBadgeButton.displayName = "PopoverBadgeButton";
export {
  Popover,
  PopoverBadgeButton,
  PopoverButton,
  PopoverContainer,
  useNonModalDialogPrimitiveState as usePopoverState
};

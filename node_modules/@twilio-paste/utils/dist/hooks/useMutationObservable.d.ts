declare type Options = {
    config?: {
        attribute?: boolean;
        childList?: boolean;
        subtree?: boolean;
    };
    debounceTime?: number;
};
declare type Callback = (mutations: MutationRecord[]) => void;
/**
 * This custom hooks abstracts the usage of the MutationObserver with React components.
 * Watch for changes being made to the DOM tree and trigger a custom callback.
 * @param {Element} targetEl DOM element to be observed
 * @param {Function} cb callback that will run when there's a change in targetEl or any
 * child element (depending on the provided options)
 * @param {Object} options
 * @param {Object} options.config check \[options\](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe)
 * @param {number} [options.debounceTime=0] a number that represents the amount of time in ms
 * that you which to debounce the call to the provided callback function
 */
export declare function useMutationObservable(targetEl: Element, cb: Callback, options?: Options): void;
export {};
//# sourceMappingURL=useMutationObservable.d.ts.map
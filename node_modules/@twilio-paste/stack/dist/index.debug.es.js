var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/index.tsx
import * as React from "react";
import PropTypes from "prop-types";
import { useUIDSeed } from "@twilio-paste/uid-library";
import { isSpaceTokenProp, ResponsiveProp } from "@twilio-paste/style-props";
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
var getStackDisplay = (orientation) => {
  if (Array.isArray(orientation)) {
    return orientation.map((value) => {
      if (value === "horizontal") {
        return "flex";
      }
      return "block";
    });
  }
  if (orientation === "horizontal") {
    return "flex";
  }
  return "block";
};
var getStackStyles = (orientation) => {
  const styles = {
    display: getStackDisplay(orientation),
    alignItems: "center",
    flexWrap: "wrap"
  };
  return styles;
};
var getStackChildMargins = (orientation, spacing) => {
  let styles = {};
  if (Array.isArray(orientation)) {
    const marginRight = [];
    const marginBottom = [];
    orientation.forEach((value, i) => {
      marginRight[i] = value === "horizontal" ? spacing : "space0";
      marginBottom[i] = value === "horizontal" ? "space0" : spacing;
    });
    styles = {
      marginRight,
      marginBottom
    };
  }
  if (orientation === "horizontal") {
    styles = { marginRight: spacing };
  }
  if (orientation === "vertical") {
    styles = { marginBottom: spacing };
  }
  return styles;
};
var Stack = React.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, orientation, spacing, element = "STACK" } = _b, props = __objRest(_b, ["children", "orientation", "spacing", "element"]);
    const [childrenCount, validChildren] = React.useMemo(() => {
      const filteredChildren = React.Children.toArray(children).filter(
        (child) => React.isValidElement(child) || typeof child === "string"
      );
      return [filteredChildren.length, filteredChildren];
    }, [children]);
    const stackStyles = React.useMemo(() => getStackStyles(orientation), [orientation]);
    const childMargins = React.useMemo(() => getStackChildMargins(orientation, spacing), [orientation, spacing]);
    const keySeed = useUIDSeed();
    return /* @__PURE__ */ React.createElement(Box, __spreadProps(__spreadValues(__spreadValues({ element }, safelySpreadBoxProps(props)), stackStyles), { ref }), validChildren.map((child, index) => {
      return /* @__PURE__ */ React.createElement(
        Box,
        __spreadProps(__spreadValues({
          element: `${element}_CHILD`
        }, childrenCount !== index + 1 ? childMargins : null), {
          key: keySeed(`stack-${index}`)
        }),
        child
      );
    }));
  }
);
Stack.displayName = "Stack";
Stack.propTypes = {
  orientation: ResponsiveProp(PropTypes.oneOf(["horizontal", "vertical"])).isRequired,
  spacing: isSpaceTokenProp,
  element: PropTypes.string
};
export {
  Stack,
  getStackChildMargins,
  getStackDisplay,
  getStackStyles
};

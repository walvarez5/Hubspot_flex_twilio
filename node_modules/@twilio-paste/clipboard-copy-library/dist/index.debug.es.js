var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../../node_modules/clipboard-copy/index.js
var require_clipboard_copy = __commonJS({
  "../../../node_modules/clipboard-copy/index.js"(exports, module) {
    module.exports = clipboardCopy;
    function clipboardCopy(text) {
      if (navigator.clipboard) {
        return navigator.clipboard.writeText(text).catch(function(err) {
          throw err !== void 0 ? err : new DOMException("The request is not allowed", "NotAllowedError");
        });
      }
      var span = document.createElement("span");
      span.textContent = text;
      span.style.whiteSpace = "pre";
      document.body.appendChild(span);
      var selection = window.getSelection();
      var range = window.document.createRange();
      selection.removeAllRanges();
      range.selectNode(span);
      selection.addRange(range);
      var success = false;
      try {
        success = window.document.execCommand("copy");
      } catch (err) {
        console.log("error", err);
      }
      selection.removeAllRanges();
      window.document.body.removeChild(span);
      return success ? Promise.resolve() : Promise.reject(new DOMException("The request is not allowed", "NotAllowedError"));
    }
  }
});

// esm-externals:react
var react_exports = {};
__export(react_exports, {
  default: () => default2
});
import * as default2 from "react";
import * as react_star from "react";
var init_react = __esm({
  "esm-externals:react"() {
    __reExport(react_exports, react_star);
  }
});

// ../../../node_modules/use-clipboard-copy/dist/useTimedToggle.js
var require_useTimedToggle = __commonJS({
  "../../../node_modules/use-clipboard-copy/dist/useTimedToggle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useTimedToggle = void 0;
    var react_1 = (init_react(), __toCommonJS(react_exports));
    function useTimedToggle(initialValue) {
      var _a = react_1.useState(false), value = _a[0], setValue = _a[1];
      var timeoutRef = react_1.useRef();
      var initialValueRef = react_1.useRef(initialValue);
      var toggleValue = function(timeout) {
        clearTimeout(timeoutRef.current);
        setValue(!initialValueRef.current);
        timeoutRef.current = window.setTimeout(function() {
          return setValue(initialValueRef.current);
        }, timeout);
      };
      react_1.useEffect(function() {
        return function() {
          return clearTimeout(timeoutRef.current);
        };
      }, []);
      return [value, toggleValue];
    }
    exports.useTimedToggle = useTimedToggle;
  }
});

// ../../../node_modules/use-clipboard-copy/dist/index.js
var require_dist = __commonJS({
  "../../../node_modules/use-clipboard-copy/dist/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useClipboard = void 0;
    var clipboard_copy_1 = __importDefault(require_clipboard_copy());
    var react_1 = (init_react(), __toCommonJS(react_exports));
    var useTimedToggle_1 = require_useTimedToggle();
    function isInputLike(node) {
      return node && (node.nodeName === "TEXTAREA" || node.nodeName === "INPUT");
    }
    function useClipboard2(options) {
      if (options === void 0) {
        options = {};
      }
      var _a = useTimedToggle_1.useTimedToggle(false), copied = _a[0], toggleCopied = _a[1];
      var targetRef = react_1.useRef(null);
      var optionsRef = react_1.useRef(options);
      optionsRef.current = options;
      function isSupported() {
        return !!navigator.clipboard || typeof document.execCommand === "function" && typeof document.queryCommandSupported === "function" && document.queryCommandSupported("copy");
      }
      var copyHandler = react_1.useCallback(function(text) {
        var opts = optionsRef.current;
        var target = targetRef.current;
        function handleSuccess() {
          if (opts.onSuccess) {
            opts.onSuccess();
          }
          if (opts.copiedTimeout) {
            toggleCopied(opts.copiedTimeout);
          }
          if (opts.selectOnCopy && isInputLike(target)) {
            target.select();
          }
        }
        function handleError() {
          if (opts.onError) {
            opts.onError();
          }
          if (opts.selectOnError !== false && isInputLike(target)) {
            target.select();
          }
        }
        function copy(value) {
          clipboard_copy_1.default(value).then(handleSuccess).catch(handleError);
        }
        if (typeof text === "string") {
          copy(text);
        } else if (target) {
          copy(target.value);
        }
      }, []);
      return {
        copied,
        copy: copyHandler,
        isSupported,
        target: targetRef
      };
    }
    exports.useClipboard = useClipboard2;
  }
});

// src/index.tsx
var import_use_clipboard_copy = __toESM(require_dist());
var export_useClipboard = import_use_clipboard_copy.useClipboard;
export {
  export_useClipboard as useClipboard
};

var __defProp=Object.defineProperty,__defProps=Object.defineProperties;var __getOwnPropDescs=Object.getOwnPropertyDescriptors;var __getOwnPropSymbols=Object.getOwnPropertySymbols;var __hasOwnProp=Object.prototype.hasOwnProperty,__propIsEnum=Object.prototype.propertyIsEnumerable;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:!0,configurable:!0,writable:!0,value}):obj[key]=value,__spreadValues=(a,b)=>{for(var prop in b||(b={}))__hasOwnProp.call(b,prop)&&__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(b))__propIsEnum.call(b,prop)&&__defNormalProp(a,prop,b[prop]);return a},__spreadProps=(a,b)=>__defProps(a,__getOwnPropDescs(b));var __objRest=(source,exclude)=>{var target={};for(var prop in source)__hasOwnProp.call(source,prop)&&exclude.indexOf(prop)<0&&(target[prop]=source[prop]);if(source!=null&&__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(source))exclude.indexOf(prop)<0&&__propIsEnum.call(source,prop)&&(target[prop]=source[prop]);return target};import*as React from"react";import PropTypes from"prop-types";import TextareaAutosize from"@twilio-paste/react-textarea-autosize-library";import{styled,css}from"@twilio-paste/styling-library";import{safelySpreadBoxProps,getCustomElementStyles}from"@twilio-paste/box";import{InputBox}from"@twilio-paste/input-box";var TextAreaElement=styled(TextareaAutosize)(props=>css({appearance:"none",background:"transparent",border:"none",borderRadius:"borderRadius20",boxShadow:"none",color:"inherit",display:"block",fontFamily:"inherit",fontSize:"fontSize30",fontWeight:"fontWeightMedium",lineHeight:"lineHeight20",maxHeight:props.resize==="vertical"?"none":"size30",outline:"none",paddingBottom:"space30",paddingLeft:"space40",paddingRight:"space40",paddingTop:"space30",resize:props.resize,width:"100%","&::placeholder":{color:props.variant==="inverse"?"colorTextInverseWeak":"colorTextWeak",fontStyle:"italic"},"&:focus::placeholder":{color:props.variant==="inverse"?"colorTextInverseWeak":"colorTextWeak"},"&:disabled":{color:props.variant==="inverse"?"colorTextInverseWeaker":"colorTextWeaker",cursor:"not-allowed","-webkit-text-fill-color":props.variant==="inverse"?"colorTextInverseWeaker":"colorTextWeaker","-webkit-opacity":"1"}}),getCustomElementStyles),TextArea=React.forwardRef((_a,ref)=>{var _b=_a,{children,disabled,element="TEXTAREA",hasError,insertBefore,insertAfter,readOnly,variant,resize="none",size,height,width}=_b,props=__objRest(_b,["children","disabled","element","hasError","insertBefore","insertAfter","readOnly","variant","resize","size","height","width"]);return React.createElement(InputBox,{disabled,element,hasError,insertAfter,insertBefore,readOnly,variant},React.createElement(TextAreaElement,__spreadProps(__spreadValues({},safelySpreadBoxProps(props)),{"aria-invalid":hasError,"aria-readonly":readOnly,disabled,"data-paste-element":`${element}_ELEMENT`,readOnly,ref,rows:3,minRows:3,spellCheck:!0,resize,variant}),children))});TextArea.displayName="TextArea";TextArea.propTypes={disabled:PropTypes.bool,element:PropTypes.string,hasError:PropTypes.bool,id:PropTypes.string,name:PropTypes.string,onBlur:PropTypes.func,onChange:PropTypes.func,onFocus:PropTypes.func,placeholder:PropTypes.string,readOnly:PropTypes.bool,required:PropTypes.bool};export{TextArea};

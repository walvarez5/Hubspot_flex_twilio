var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/FilePicker.tsx
import * as React from "react";
import PropTypes from "prop-types";
import { Text } from "@twilio-paste/text";
import { useUID } from "@twilio-paste/uid-library";
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { SiblingBox } from "@twilio-paste/sibling-box";
var FilePicker = React.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      element = "FILEPICKER",
      accept,
      id = useUID(),
      children,
      disabled = false,
      i18nNoSelectionText = "No file uploaded",
      required = false,
      onChange
    } = _b, props = __objRest(_b, [
      "element",
      "accept",
      "id",
      "children",
      "disabled",
      "i18nNoSelectionText",
      "required",
      "onChange"
    ]);
    const [fileDescription, setFileDescription] = React.useState(i18nNoSelectionText);
    const textId = useUID();
    const handleChange = (evt) => {
      if (onChange)
        onChange(evt);
      if (evt.currentTarget.files && evt.currentTarget.files.length > 0) {
        const file = evt.currentTarget.files[0].name;
        setFileDescription(file);
      } else {
        setFileDescription(i18nNoSelectionText);
      }
    };
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      Box,
      __spreadProps(__spreadValues({}, safelySpreadBoxProps(props)), {
        id,
        ref,
        as: "input",
        type: "file",
        accept,
        "aria-disabled": disabled,
        disabled,
        "aria-required": required,
        "aria-describedby": textId,
        size: "size0",
        border: "none",
        overflow: "hidden",
        padding: "space0",
        margin: "space0",
        whiteSpace: "nowrap",
        textTransform: "none",
        position: "absolute",
        clip: "rect(0 0 0 0)",
        onChange: handleChange
      })
    ), /* @__PURE__ */ React.createElement("label", { htmlFor: id }, /* @__PURE__ */ React.createElement(
      SiblingBox,
      {
        element,
        as: "span",
        type: "file",
        borderRadius: "borderRadius10",
        padding: "space20",
        paddingLeft: "space30",
        boxShadow: "shadowBorderWeak",
        _focusSibling: {
          borderRadius: "borderRadius10",
          padding: "space20",
          paddingLeft: "space30",
          boxShadow: "shadowFocus"
        }
      },
      /* @__PURE__ */ React.createElement(
        Text,
        {
          id: textId,
          as: "span",
          color: disabled ? "colorTextWeaker" : "currentColor",
          marginRight: "space40",
          fontWeight: "fontWeightMedium",
          element: `${element}_TEXT`
        },
        fileDescription
      ),
      React.cloneElement(children, { disabled, element: `${element}_BUTTON` })
    )));
  }
);
FilePicker.displayName = "FilePicker";
FilePicker.propTypes = {
  accept: PropTypes.string,
  children: PropTypes.element.isRequired,
  element: PropTypes.string,
  disabled: PropTypes.bool,
  i18nNoSelectionText: PropTypes.string,
  required: PropTypes.bool,
  onChange: PropTypes.func,
  name: PropTypes.string
};

// src/FilePickerButton.tsx
import * as React2 from "react";
import PropTypes2 from "prop-types";
import { Button } from "@twilio-paste/button";
import { Box as Box2 } from "@twilio-paste/box";
var FilePickerButton = React2.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, element, disabled } = _b, props = __objRest(_b, ["children", "element", "disabled"]);
    return /* @__PURE__ */ React2.createElement(Box2, { whiteSpace: "nowrap" }, /* @__PURE__ */ React2.createElement(Button, __spreadProps(__spreadValues({}, props), { element, ref, size: "small", disabled, as: "span", type: "button" }), children));
  }
);
FilePickerButton.displayName = "FilePickerButton";
FilePickerButton.propTypes = {
  element: PropTypes2.string,
  children: PropTypes2.node.isRequired,
  disabled: PropTypes2.bool
};
export {
  FilePicker,
  FilePickerButton
};

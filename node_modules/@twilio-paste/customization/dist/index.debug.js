"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS({
  "../../node_modules/deepmerge/dist/cjs.js"(exports, module2) {
    "use strict";
    var isMergeableObject = function isMergeableObject2(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value === "object";
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
    }
    var canUseSymbol = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
      return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
    }
    function defaultArrayMerge(target, source, options) {
      return target.concat(source).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
      });
    }
    function getMergeFunction(key, options) {
      if (!options.customMerge) {
        return deepmerge;
      }
      var customMerge = options.customMerge(key);
      return typeof customMerge === "function" ? customMerge : deepmerge;
    }
    function getEnumerableOwnPropertySymbols(target) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
        return target.propertyIsEnumerable(symbol);
      }) : [];
    }
    function getKeys(target) {
      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function propertyIsOnObject(object, property) {
      try {
        return property in object;
      } catch (_) {
        return false;
      }
    }
    function propertyIsUnsafe(target, key) {
      return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
    }
    function mergeObject(target, source, options) {
      var destination = {};
      if (options.isMergeableObject(target)) {
        getKeys(target).forEach(function(key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
        });
      }
      getKeys(source).forEach(function(key) {
        if (propertyIsUnsafe(target, key)) {
          return;
        }
        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
          destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
        } else {
          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
        }
      });
      return destination;
    }
    function deepmerge(target, source, options) {
      options = options || {};
      options.arrayMerge = options.arrayMerge || defaultArrayMerge;
      options.isMergeableObject = options.isMergeableObject || isMergeableObject;
      options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options);
      } else if (sourceIsArray) {
        return options.arrayMerge(target, source, options);
      } else {
        return mergeObject(target, source, options);
      }
    }
    deepmerge.all = function deepmergeAll(array, options) {
      if (!Array.isArray(array)) {
        throw new Error("first argument should be an array");
      }
      return array.reduce(function(prev, next) {
        return deepmerge(prev, next, options);
      }, {});
    };
    var deepmerge_1 = deepmerge;
    module2.exports = deepmerge_1;
  }
});

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  CustomizationConsumer: () => CustomizationConsumer,
  CustomizationProvider: () => CustomizationProvider
});
module.exports = __toCommonJS(src_exports);

// src/CustomizationProvider.tsx
var React = __toESM(require("react"));
var import_animation_library = require("@twilio-paste/animation-library");
var import_styling_library = require("@twilio-paste/styling-library");
var import_theme = require("@twilio-paste/theme");

// src/utils.ts
var import_deepmerge = __toESM(require_cjs());
var createCustomTheme = ({
  baseTheme,
  overrides,
  customBreakpoints,
  elements
}) => {
  const breakpoints = customBreakpoints || baseTheme.breakpoints;
  const mergedTheme = (0, import_deepmerge.default)(baseTheme, overrides);
  if (elements != null) {
    const uniqueElements = [...new Set(Object.keys(elements).map((element) => element.toLowerCase()))];
    if (uniqueElements.length !== Object.keys(elements).length) {
      throw new Error(
        "[CustomizationProvider]: duplicate element names, even when using a different casing, is not supported with Paste."
      );
    }
  }
  return __spreadProps(__spreadValues({}, mergedTheme), {
    breakpoints,
    elements
  });
};

// src/CustomizationProvider.tsx
var CustomizationProvider = (_a) => {
  var _b = _a, {
    baseTheme = "default",
    customBreakpoints,
    elements,
    theme,
    disableAnimations = false
  } = _b, props = __objRest(_b, [
    "baseTheme",
    "customBreakpoints",
    "elements",
    "theme",
    "disableAnimations"
  ]);
  const prefersReducedMotion = (0, import_animation_library.useReducedMotion)();
  React.useMemo(() => {
    import_animation_library.Globals.assign({
      skipAnimation: disableAnimations || prefersReducedMotion
    });
  }, [disableAnimations, prefersReducedMotion]);
  const customTheme = React.useMemo(
    () => createCustomTheme({
      baseTheme: baseTheme === "dark" ? import_theme.DarkTheme : import_theme.DefaultTheme,
      overrides: theme || {},
      elements: elements || {},
      customBreakpoints
    }),
    [baseTheme, customBreakpoints, elements, theme]
  );
  return /* @__PURE__ */ React.createElement(import_styling_library.ThemeProvider, { theme: customTheme }, /* @__PURE__ */ React.createElement(import_styling_library.StylingGlobals, { styles: (0, import_theme.pasteGlobalStyles)({ theme: customTheme }) }), /* @__PURE__ */ React.createElement(import_theme.StyledBase, __spreadValues({}, props)));
};
CustomizationProvider.displayName = "PasteCustomizationProvider";

// src/CustomizationConsumer.tsx
var React2 = __toESM(require("react"));
var import_theme2 = require("@twilio-paste/theme");
var CustomizationConsumer = (props) => {
  return /* @__PURE__ */ React2.createElement(import_theme2.Theme.Consumer, __spreadValues({}, props));
};
CustomizationConsumer.displayName = "PasteCustomizationConsumer";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CustomizationConsumer,
  CustomizationProvider
});

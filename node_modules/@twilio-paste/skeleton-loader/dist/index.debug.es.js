var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/index.tsx
import * as React from "react";
import { styled, themeGet } from "@twilio-paste/styling-library";
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";

// src/keyframes.tsx
import { keyframes } from "@twilio-paste/styling-library";
var SkeletonLoaderKeyframes = keyframes`
  0% {
    transform: translateX(-100%) skew(155deg);
  }
  50%,
  100% {
    transform: translateX(100%) skew(155deg);
  }
`;

// src/index.tsx
var SkeletonLoaderInner = styled.div`
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background: linear-gradient(
    90deg,
    transparent,
    ${themeGet("backgroundColors.colorBackground")} 40%,
    ${themeGet("backgroundColors.colorBackground")} 60%,
    transparent
  );
  transform: translateX(-100%) skew(155deg);
  animation-timing-function: cubic-bezier(0.06, 0.42, 0.57, 0.89);
  animation-name: ${SkeletonLoaderKeyframes};
  animation-duration: 4.5s;
  animation-iteration-count: infinite;
`;
var SkeletonLoader = React.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      borderBottomLeftRadius,
      borderBottomRightRadius,
      borderRadius = "borderRadius20",
      borderTopLeftRadius,
      borderTopRightRadius,
      element = "SKELETON_LOADER",
      display,
      height = "sizeIcon20",
      maxHeight,
      maxWidth,
      minHeight,
      minWidth,
      size = null,
      width = null
    } = _b, props = __objRest(_b, [
      "borderBottomLeftRadius",
      "borderBottomRightRadius",
      "borderRadius",
      "borderTopLeftRadius",
      "borderTopRightRadius",
      "element",
      "display",
      "height",
      "maxHeight",
      "maxWidth",
      "minHeight",
      "minWidth",
      "size",
      "width"
    ]);
    return /* @__PURE__ */ React.createElement(
      Box,
      __spreadProps(__spreadValues({}, safelySpreadBoxProps(props)), {
        "aria-busy": "true",
        backgroundColor: "colorBackgroundStrong",
        borderBottomLeftRadius,
        borderBottomRightRadius,
        borderRadius,
        borderTopLeftRadius,
        borderTopRightRadius,
        display,
        element,
        height,
        maxHeight,
        maxWidth,
        minHeight,
        minWidth,
        overflow: "hidden",
        pointerEvents: "none",
        position: "relative",
        userSelect: "none",
        size,
        width,
        ref
      }),
      /* @__PURE__ */ React.createElement(SkeletonLoaderInner, null)
    );
  }
);
SkeletonLoader.displayName = "SkeletonLoader";
export {
  SkeletonLoader
};

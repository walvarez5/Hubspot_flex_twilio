import * as React from 'react';
import type { BoxElementProps } from '@twilio-paste/box';
declare type Sizes = 'default' | 'wide';
export declare const ModalDialogOverlay: import("@react-spring/web").AnimatedComponent<import("@twilio-paste/styling-library").StyledComponent<Omit<Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof React.HTMLAttributes<HTMLDivElement>> & {
    ref?: ((instance: HTMLDivElement | null) => void) | React.RefObject<HTMLDivElement> | null | undefined;
}, "as" | keyof import("@reach/dialog/dist/declarations/src").DialogOverlayProps> & import("@reach/dialog/dist/declarations/src").DialogOverlayProps & {
    as?: "div" | undefined;
} & {
    theme?: import("@emotion/react").Theme | undefined;
} & {
    variant?: Sizes | undefined;
}, {}, {}>>;
export interface ModalDialogContentProps {
    size?: Sizes;
    children: React.ReactNode;
    element?: BoxElementProps['element'];
}
export declare const ModalDialogContent: import("@react-spring/web").AnimatedComponent<import("@twilio-paste/styling-library").StyledComponent<Omit<Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof React.HTMLAttributes<HTMLDivElement>> & {
    ref?: ((instance: HTMLDivElement | null) => void) | React.RefObject<HTMLDivElement> | null | undefined;
}, "children" | "as"> & import("@reach/dialog/dist/declarations/src").DialogContentProps & {
    as?: "div" | undefined;
} & {
    theme?: import("@emotion/react").Theme | undefined;
} & ModalDialogContentProps, {}, {}>>;
export interface ModalProps extends React.HTMLAttributes<HTMLDivElement> {
    children: NonNullable<React.ReactNode>;
    element?: BoxElementProps['element'];
    isOpen: boolean;
    onDismiss: VoidFunction;
    allowPinchZoom?: boolean;
    size: Sizes;
    initialFocusRef?: React.RefObject<any>;
    ariaLabelledby: string;
    __console_patch?: boolean;
}
declare const Modal: React.ForwardRefExoticComponent<ModalProps & React.RefAttributes<HTMLDivElement>>;
export { Modal };
//# sourceMappingURL=Modal.d.ts.map
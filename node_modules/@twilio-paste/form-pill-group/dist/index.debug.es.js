var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// ../../../../node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS({
  "../../../../node_modules/deepmerge/dist/cjs.js"(exports, module) {
    "use strict";
    var isMergeableObject = function isMergeableObject2(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value === "object";
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
    }
    var canUseSymbol = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
      return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
    }
    function defaultArrayMerge(target, source, options) {
      return target.concat(source).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
      });
    }
    function getMergeFunction(key, options) {
      if (!options.customMerge) {
        return deepmerge;
      }
      var customMerge = options.customMerge(key);
      return typeof customMerge === "function" ? customMerge : deepmerge;
    }
    function getEnumerableOwnPropertySymbols(target) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
        return target.propertyIsEnumerable(symbol);
      }) : [];
    }
    function getKeys(target) {
      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function propertyIsOnObject(object, property) {
      try {
        return property in object;
      } catch (_) {
        return false;
      }
    }
    function propertyIsUnsafe(target, key) {
      return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
    }
    function mergeObject(target, source, options) {
      var destination = {};
      if (options.isMergeableObject(target)) {
        getKeys(target).forEach(function(key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
        });
      }
      getKeys(source).forEach(function(key) {
        if (propertyIsUnsafe(target, key)) {
          return;
        }
        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
          destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
        } else {
          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
        }
      });
      return destination;
    }
    function deepmerge(target, source, options) {
      options = options || {};
      options.arrayMerge = options.arrayMerge || defaultArrayMerge;
      options.isMergeableObject = options.isMergeableObject || isMergeableObject;
      options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options);
      } else if (sourceIsArray) {
        return options.arrayMerge(target, source, options);
      } else {
        return mergeObject(target, source, options);
      }
    }
    deepmerge.all = function deepmergeAll(array, options) {
      if (!Array.isArray(array)) {
        throw new Error("first argument should be an array");
      }
      return array.reduce(function(prev, next) {
        return deepmerge(prev, next, options);
      }, {});
    };
    var deepmerge_1 = deepmerge;
    module.exports = deepmerge_1;
  }
});

// src/FormPill.tsx
import * as React3 from "react";
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import { CompositeItem } from "@twilio-paste/reakit-library";

// src/PillCloseIcon.tsx
var import_deepmerge = __toESM(require_cjs());
import * as React from "react";
import { Box } from "@twilio-paste/box";
import { CloseIcon } from "@twilio-paste/icons/esm/CloseIcon";

// src/FormPill.styles.ts
var wrapperStyles = {
  default: {
    color: "colorTextIcon",
    _hover: {
      color: "colorTextLinkStronger"
    }
  },
  error: {
    color: "colorTextIcon",
    _hover: {
      color: "colorTextErrorStronger"
    }
  }
};
var selectedWrapperStyles = {
  default: {
    color: "colorTextWeakest",
    _hover: {
      color: "colorTextInverse"
    }
  },
  error: {
    color: "colorTextInverse",
    _hover: {
      color: "colorTextWeakest"
    }
  }
};
var pillStyles = {
  default: {
    color: "colorText",
    backgroundColor: "colorBackgroundPrimaryWeakest",
    _focus: {
      boxShadow: "shadowFocus",
      color: "colorText"
    },
    _selected: {
      backgroundColor: "colorBackgroundPrimaryStronger",
      color: "colorTextWeakest"
    },
    _selected_focus: {
      boxShadow: "shadowFocus",
      color: "colorTextWeakest"
    },
    _disabled: {
      backgroundColor: "colorBackgroundStrong",
      cursor: "not-allowed",
      color: "colorText"
    }
  },
  error: {
    backgroundColor: "colorBackgroundErrorWeakest",
    color: "colorTextErrorStrong",
    _focus: {
      boxShadow: "shadowFocus",
      color: "colorTextErrorStrong"
    },
    _selected: {
      backgroundColor: "colorBackgroundError",
      color: "colorTextInverse"
    },
    _selected_focus: {
      boxShadow: "shadowFocus",
      color: "colorTextInverse"
    },
    _disabled: {
      backgroundColor: "colorBackgroundStrong",
      cursor: "not-allowed",
      color: "colorText"
    }
  }
};
var hoverPillStyles = {
  default: {
    cursor: "pointer",
    color: "colorText",
    _hover: {
      borderColor: "colorBorderPrimaryStronger",
      color: "colorTextLinkStronger"
    },
    _selected_hover: {
      backgroundColor: "colorBackgroundPrimary",
      borderColor: "transparent",
      color: "colorTextInverse"
    },
    _focus_hover: {
      borderColor: "transparent"
    }
  },
  error: {
    cursor: "pointer",
    color: "colorTextErrorStrong",
    _hover: {
      borderColor: "colorBorderErrorStronger",
      color: "colorTextErrorStronger"
    },
    _selected_hover: {
      backgroundColor: "colorBackgroundErrorStrongest",
      borderColor: "transparent",
      color: "colorTextWeakest"
    },
    _focus_hover: {
      borderColor: "transparent"
    }
  }
};
var baseCloseStyles = {
  default: {
    _hover: {
      cursor: "pointer",
      borderColor: "colorBorderPrimaryStronger"
    }
  },
  error: {
    _hover: {
      cursor: "pointer",
      borderColor: "colorBorderErrorStronger"
    }
  }
};
var selectedBaseCloseStyles = {
  default: {
    _hover: {
      cursor: "pointer",
      borderColor: "transparent",
      backgroundColor: "colorBackgroundPrimary"
    }
  },
  error: {
    _hover: {
      cursor: "pointer",
      borderColor: "transparent",
      backgroundColor: "colorBackgroundErrorStrongest"
    }
  }
};
var closeInheritColorStyles = {
  color: "inherit",
  _hover: {
    color: "inherit"
  }
};
var closeColorStyles = {
  default: {
    color: "colorTextIcon",
    _hover: {
      color: "colorTextLinkStronger"
    }
  },
  error: {
    color: "colorTextIcon",
    _hover: {
      color: "colorTextErrorStronger"
    }
  }
};
var selectedCloseColorStyles = {
  default: {
    color: "colorTextWeakest",
    _hover: {
      color: "colorTextInverse"
    }
  },
  error: {
    color: "colorTextInverse",
    _hover: {
      color: "colorTextWeakest"
    }
  }
};

// src/PillCloseIcon.tsx
var PillCloseIcon = ({
  element = "FORM_PILL_CLOSE",
  onClick = () => {
  },
  selected = false,
  variant = "default",
  pillIsHoverable = false
}) => {
  const baseStyles = selected ? selectedBaseCloseStyles[variant] : baseCloseStyles[variant];
  let colorStyles = selected ? selectedCloseColorStyles[variant] : closeColorStyles[variant];
  if (pillIsHoverable) {
    colorStyles = closeInheritColorStyles;
  }
  const computedStyles = (0, import_deepmerge.default)(baseStyles, colorStyles);
  return /* @__PURE__ */ React.createElement(
    Box,
    __spreadProps(__spreadValues({
      element,
      onClick
    }, computedStyles), {
      position: "absolute",
      right: 0,
      top: 0,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      height: "sizeIcon40",
      width: "sizeIcon40",
      borderRadius: "borderRadiusCircle",
      borderWidth: "borderWidth10",
      borderStyle: "solid",
      borderColor: "transparent",
      transition: "color 150ms ease-in, border-color 150ms ease-in, background-color 150ms ease-in"
    }),
    /* @__PURE__ */ React.createElement(CloseIcon, { decorative: true, size: "sizeIcon10", color: "inherit" })
  );
};
PillCloseIcon.displayName = "PillCloseIcon";

// src/FormPillButton.tsx
import * as React2 from "react";
import { Box as Box2, safelySpreadBoxProps } from "@twilio-paste/box";
import { ScreenReaderOnly } from "@twilio-paste/screen-reader-only";
import { ErrorIcon } from "@twilio-paste/icons/esm/ErrorIcon";
var FormPillButton = React2.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      element = "FORM_PILL",
      selected = false,
      variant = "default",
      isHoverable = false,
      isDisabled = false,
      isDismissable = false,
      i18nErrorLabel = "(error)"
    } = _b, props = __objRest(_b, [
      "element",
      "selected",
      "variant",
      "isHoverable",
      "isDisabled",
      "isDismissable",
      "i18nErrorLabel"
    ]);
    const computedStyles = React2.useMemo(() => {
      const hasHoverStyles = isHoverable && !isDisabled;
      return hasHoverStyles ? __spreadValues(__spreadValues({}, pillStyles[variant]), hoverPillStyles[variant]) : pillStyles[variant];
    }, [isHoverable, isDisabled, variant]);
    return /* @__PURE__ */ React2.createElement(
      Box2,
      __spreadValues(__spreadProps(__spreadValues({}, safelySpreadBoxProps(props)), {
        element,
        ref,
        "aria-selected": selected,
        "aria-disabled": isDisabled,
        role: "option",
        type: "button",
        as: "button",
        margin: "space0",
        position: "relative",
        borderRadius: "borderRadiusPill",
        borderWidth: "borderWidth10",
        borderColor: "transparent",
        borderStyle: "solid",
        cursor: "default",
        height: "sizeIcon40",
        fontFamily: "inherit",
        fontSize: "fontSize20",
        fontWeight: "fontWeightSemibold",
        outline: "none",
        paddingLeft: "space30",
        paddingRight: isDismissable ? "space80" : "space30",
        transition: "background-color 150ms ease-in, border-color 150ms ease-in, box-shadow 150ms ease-in, color 150ms ease-in"
      }), computedStyles),
      /* @__PURE__ */ React2.createElement(Box2, { display: "flex", alignItems: "center", columnGap: "space20", opacity: isDisabled ? 0.3 : 1 }, variant === "error" ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(ErrorIcon, { decorative: true, size: "sizeIcon10" }), /* @__PURE__ */ React2.createElement(ScreenReaderOnly, null, i18nErrorLabel)) : null, props.children)
    );
  }
);
FormPillButton.displayName = "FormPillButton";

// src/FormPill.tsx
var FormPill = React3.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      element = "FORM_PILL",
      onDismiss,
      onSelect,
      next,
      selected,
      variant = "default",
      disabled = false,
      i18nErrorLabel
    } = _b, props = __objRest(_b, [
      "element",
      "onDismiss",
      "onSelect",
      "next",
      "selected",
      "variant",
      "disabled",
      "i18nErrorLabel"
    ]);
    if (selected && disabled) {
      throw new Error("[Paste FormPill] FormPills cannot be selected and disabled at the same time.");
    }
    const isHoverable = onSelect != null;
    const isDismissable = onDismiss != null;
    let computedStyles = {};
    if (isHoverable) {
      computedStyles = selected ? selectedWrapperStyles[variant] : wrapperStyles[variant];
    }
    const handleKeydown = React3.useCallback(
      (event) => {
        if ((event.key === "Backspace" || event.key === "Delete") && typeof onDismiss === "function") {
          onDismiss(event);
          if (typeof next === "function") {
            next();
          }
        }
      },
      [onDismiss, next]
    );
    return /* @__PURE__ */ React3.createElement(
      Box3,
      __spreadValues({
        element: `${element}_WRAPPER`,
        position: "relative",
        display: "inline-block",
        borderRadius: "borderRadiusPill"
      }, computedStyles),
      /* @__PURE__ */ React3.createElement(
        CompositeItem,
        __spreadProps(__spreadValues({}, safelySpreadBoxProps2(props)), {
          element,
          ref,
          as: FormPillButton,
          focusable: disabled,
          onKeyDown: disabled ? void 0 : handleKeydown,
          onClick: disabled ? void 0 : onSelect,
          next,
          isDisabled: disabled,
          isDismissable,
          isHoverable,
          selected,
          variant,
          i18nErrorLabel
        }),
        props.children
      ),
      isDismissable && !disabled ? /* @__PURE__ */ React3.createElement(
        PillCloseIcon,
        {
          element: `${element}_CLOSE`,
          onClick: onDismiss,
          selected,
          variant,
          pillIsHoverable: isHoverable
        }
      ) : null
    );
  }
);
FormPill.displayName = "FormPill";

// src/FormPillGroup.tsx
import * as React4 from "react";
import { Box as Box4, safelySpreadBoxProps as safelySpreadBoxProps3 } from "@twilio-paste/box";
import { ScreenReaderOnly as ScreenReaderOnly2 } from "@twilio-paste/screen-reader-only";
import { useUID } from "@twilio-paste/uid-library";
import { Composite } from "@twilio-paste/reakit-library";
var FormPillGroupStyles = React4.forwardRef(
  (_a, ref) => {
    var _b = _a, { element = "FORM_PILL_GROUP", display = "flex" } = _b, props = __objRest(_b, ["element", "display"]);
    return /* @__PURE__ */ React4.createElement(
      Box4,
      __spreadProps(__spreadValues({}, safelySpreadBoxProps3(props)), {
        element,
        ref,
        role: "listbox",
        margin: "space0",
        padding: "space0",
        display,
        flexWrap: "wrap",
        rowGap: "space20",
        columnGap: "space20"
      }),
      props.children
    );
  }
);
FormPillGroupStyles.displayName = "StyledFormPillGroup";
var FormPillGroup = React4.forwardRef(
  (_a, ref) => {
    var _b = _a, { i18nKeyboardControls = "Press Delete or Backspace to remove. Press Enter to toggle selection." } = _b, props = __objRest(_b, ["i18nKeyboardControls"]);
    const keyboardControlsId = useUID();
    return /* @__PURE__ */ React4.createElement(React4.Fragment, null, /* @__PURE__ */ React4.createElement(Composite, __spreadValues({ as: FormPillGroupStyles, ref, "aria-describedby": keyboardControlsId }, props), props.children), /* @__PURE__ */ React4.createElement(ScreenReaderOnly2, { id: keyboardControlsId }, i18nKeyboardControls));
  }
);
FormPillGroup.displayName = "FormPillGroup";

// src/useFormPillState.tsx
import { useCompositeState } from "@twilio-paste/reakit-library";
var useFormPillState = (config = {}) => {
  return __spreadValues({}, useCompositeState(__spreadProps(__spreadValues({}, config), {
    orientation: "horizontal",
    loop: true
  })));
};
export {
  FormPill,
  FormPillGroup,
  useFormPillState
};

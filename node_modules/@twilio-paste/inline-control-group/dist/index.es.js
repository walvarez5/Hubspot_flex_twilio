var __defProp=Object.defineProperty,__defProps=Object.defineProperties;var __getOwnPropDescs=Object.getOwnPropertyDescriptors;var __getOwnPropSymbols=Object.getOwnPropertySymbols;var __hasOwnProp=Object.prototype.hasOwnProperty,__propIsEnum=Object.prototype.propertyIsEnumerable;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:!0,configurable:!0,writable:!0,value}):obj[key]=value,__spreadValues=(a,b)=>{for(var prop in b||(b={}))__hasOwnProp.call(b,prop)&&__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(b))__propIsEnum.call(b,prop)&&__defNormalProp(a,prop,b[prop]);return a},__spreadProps=(a,b)=>__defProps(a,__getOwnPropDescs(b));var __objRest=(source,exclude)=>{var target={};for(var prop in source)__hasOwnProp.call(source,prop)&&exclude.indexOf(prop)<0&&(target[prop]=source[prop]);if(source!=null&&__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(source))exclude.indexOf(prop)<0&&__propIsEnum.call(source,prop)&&(target[prop]=source[prop]);return target};import*as React from"react";import"prop-types";import{Box,safelySpreadBoxProps}from"@twilio-paste/box";import{Label}from"@twilio-paste/label";import{HelpText}from"@twilio-paste/help-text";var InlineControlGroup=React.forwardRef((_a,ref)=>{var _b=_a,{children,disabled,element="INLINE_CONTROL_GROUP",errorText,helpText,legend,orientation="vertical",required,i18nRequiredLabel}=_b,props=__objRest(_b,["children","disabled","element","errorText","helpText","legend","orientation","required","i18nRequiredLabel"]);return React.createElement(Box,__spreadProps(__spreadValues({},safelySpreadBoxProps(props)),{as:"fieldset",element,margin:"space0",padding:"space0",minWidth:"0px",borderWidth:"borderWidth0",ref}),React.createElement(Label,{as:"legend",element:"LEGEND",htmlFor:void 0,required,marginBottom:"space0",disabled,i18nRequiredLabel},legend),helpText&&React.createElement(HelpText,{marginTop:"space0"},helpText),React.createElement(Box,{element:`${element}_SET`,marginLeft:"space20",marginRight:"space20"},React.Children.map(children,child=>React.createElement(Box,{element:`${element}_FIELD`,display:orientation==="horizontal"?"inline-block":"block",marginTop:"space40",marginRight:orientation==="horizontal"?"space70":null},child)),errorText&&React.createElement(Box,{element:`${element}_ERROR_TEXT_WRAPPER`,marginTop:"space40"},React.createElement(HelpText,{variant:"error"},errorText))))});InlineControlGroup.displayName="InlineControlGroup";export{InlineControlGroup};

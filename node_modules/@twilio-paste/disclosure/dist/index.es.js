var __defProp=Object.defineProperty,__defProps=Object.defineProperties;var __getOwnPropDescs=Object.getOwnPropertyDescriptors;var __getOwnPropSymbols=Object.getOwnPropertySymbols;var __hasOwnProp=Object.prototype.hasOwnProperty,__propIsEnum=Object.prototype.propertyIsEnumerable;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:!0,configurable:!0,writable:!0,value}):obj[key]=value,__spreadValues=(a,b)=>{for(var prop in b||(b={}))__hasOwnProp.call(b,prop)&&__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(b))__propIsEnum.call(b,prop)&&__defNormalProp(a,prop,b[prop]);return a},__spreadProps=(a,b)=>__defProps(a,__getOwnPropDescs(b));var __objRest=(source,exclude)=>{var target={};for(var prop in source)__hasOwnProp.call(source,prop)&&exclude.indexOf(prop)<0&&(target[prop]=source[prop]);if(source!=null&&__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(source))exclude.indexOf(prop)<0&&__propIsEnum.call(source,prop)&&(target[prop]=source[prop]);return target};import*as React2 from"react";import PropTypes from"prop-types";import{useDisclosurePrimitiveState}from"@twilio-paste/disclosure-primitive";import{Box,safelySpreadBoxProps}from"@twilio-paste/box";import*as React from"react";var DisclosureContext=React.createContext({});var Disclosure=React2.forwardRef((_a,ref)=>{var _b=_a,{children,element="DISCLOSURE",variant="default",state}=_b,props=__objRest(_b,["children","element","variant","state"]);let disclosure=state||useDisclosurePrimitiveState(__spreadValues({animated:!0},props)),[isDisabled,setIsDisabled]=React2.useState(!1),[isHeadingHovered,setIsHeadingHovered]=React2.useState(!1),disclosureContext={disclosure,variant,isHeadingHovered,setIsHeadingHovered,isDisabled,setIsDisabled};return React2.createElement(DisclosureContext.Provider,{value:disclosureContext},React2.createElement(Box,__spreadProps(__spreadValues({},safelySpreadBoxProps(props)),{variant,element,ref}),children))});Disclosure.displayName="Disclosure";Disclosure.propTypes={children:PropTypes.node.isRequired,element:PropTypes.string,variant:PropTypes.oneOf(["default","contained"])};import*as React3 from"react";import{useTheme}from"@twilio-paste/theme";import{Box as Box2,safelySpreadBoxProps as safelySpreadBoxProps2}from"@twilio-paste/box";import{Heading,HeadingPropTypes}from"@twilio-paste/heading";import{ChevronDisclosureIcon}from"@twilio-paste/icons/esm/ChevronDisclosureIcon";import{DisclosurePrimitive}from"@twilio-paste/disclosure-primitive";var IconSizeFromHeading={heading10:"sizeIcon90",heading20:"sizeIcon70",heading30:"sizeIcon60",heading40:"sizeIcon40",heading50:"sizeIcon30",heading60:"sizeIcon20"};var baseContainedStyles={borderWidth:"borderWidth10",borderStyle:"solid",borderRadius:"borderRadius20"},containedStyles=__spreadProps(__spreadValues({},baseContainedStyles),{borderColor:"colorBorderWeaker"}),containedHoverStyles=__spreadProps(__spreadValues({},baseContainedStyles),{borderColor:"colorBorderWeak"}),StyledDisclosureHeading=React3.forwardRef((_a,ref)=>{var _b=_a,{children,element,marginBottom,renderAs,disclosureVariant,customDisabled,customFocusable,variant,isHovered,isDisabled,setIsDisabled,setIsHovered}=_b,props=__objRest(_b,["children","element","marginBottom","renderAs","disclosureVariant","customDisabled","customFocusable","variant","isHovered","isDisabled","setIsDisabled","setIsHovered"]);let theme=useTheme(),disabledProp=props["aria-disabled"],isExpanded=props["aria-expanded"],iconSize=IconSizeFromHeading[variant]||"sizeIcon20",shouldIconMove=isHovered&&!isDisabled,buttonRef=React3.useRef(null);React3.useEffect(()=>{setIsDisabled(!!disabledProp)},[disabledProp,setIsDisabled]),React3.useEffect(()=>{let handleMouseOver=()=>setIsHovered(!0),handleMouseOut=()=>setIsHovered(!1),node=buttonRef.current;if(node)return node.addEventListener("mouseover",handleMouseOver),node.addEventListener("mouseout",handleMouseOut),()=>{node.removeEventListener("mouseover",handleMouseOver),node.removeEventListener("mouseout",handleMouseOut)}},[buttonRef,setIsHovered]);let variantStyles={};return disclosureVariant==="contained"&&(variantStyles=containedStyles,isHovered&&!isDisabled&&(variantStyles=containedHoverStyles),isExpanded&&(variantStyles=__spreadProps(__spreadValues({},variantStyles),{borderBottomLeftRadius:"borderRadius0",borderBottomRightRadius:"borderRadius0",borderBottom:"none"}))),React3.createElement(Heading,{as:renderAs,marginBottom:"space0",variant,ref},React3.createElement(Box2,__spreadValues(__spreadProps(__spreadValues({},safelySpreadBoxProps2(props)),{as:"div",backgroundColor:isExpanded?"colorBackgroundWeak":"colorBackgroundBody",borderRadius:"borderRadius20",cursor:"pointer",display:"flex",element,outline:"none",padding:"space30",position:"relative",ref:buttonRef,role:"button",zIndex:"zIndex10",transition:"background-color, border-color, border-radius 100ms ease",_hover:{backgroundColor:"colorBackground"},_focus:{boxShadow:"shadowFocus"},_disabled:{backgroundColor:"colorBackgroundStrong",color:"colorTextWeaker",cursor:"not-allowed"}}),variantStyles),React3.createElement(Box2,{as:"span",element:`${element}_ICON`,display:"flex",color:isDisabled?"colorTextWeaker":"colorTextIcon",transition:"transform 170ms ease",height:iconSize,width:iconSize,transform:`
             ${shouldIconMove?`translateX(${theme.space.space10})`:"translateX(0)"}
             ${isExpanded?"rotate(90deg)":"rotate(0deg)"}`},React3.createElement(ChevronDisclosureIcon,{color:"inherit",decorative:!0,size:iconSize})),children))});StyledDisclosureHeading.displayName="StyledDisclosureHeading";var DisclosureHeading=_a=>{var _b=_a,{children,as,element="DISCLOSURE_HEADING",disabled,focusable}=_b,props=__objRest(_b,["children","as","element","disabled","focusable"]);let{disclosure,variant,setIsDisabled,setIsHeadingHovered,isHeadingHovered,isDisabled}=React3.useContext(DisclosureContext);return React3.createElement(DisclosurePrimitive,__spreadProps(__spreadValues(__spreadValues({},disclosure),props),{as:StyledDisclosureHeading,customDisabled:disabled,customFocusable:focusable,disabled,disclosureVariant:variant,element,focusable,renderAs:as,isHovered:isHeadingHovered,setIsDisabled,setIsHovered:setIsHeadingHovered,isDisabled}),children)};DisclosureHeading.displayName="DisclosureHeading";DisclosureHeading.propTypes=HeadingPropTypes;import*as React4 from"react";import PropTypes2 from"prop-types";import{useSpring,animated}from"@twilio-paste/animation-library";import{Box as Box3,safelySpreadBoxProps as safelySpreadBoxProps3}from"@twilio-paste/box";import{DisclosurePrimitiveContent}from"@twilio-paste/disclosure-primitive";var AnimatedDisclosureContent=animated(Box3),baseContainedStyles2={borderWidth:"borderWidth10",borderStyle:"solid",borderBottomLeftRadius:"borderRadius20",borderBottomRightRadius:"borderRadius20",borderTop:"none",transition:"border-color 100ms ease-out"},containedStyles2=__spreadProps(__spreadValues({},baseContainedStyles2),{borderColor:"colorBorderWeaker"}),containedHoverStyles2=__spreadProps(__spreadValues({},baseContainedStyles2),{borderColor:"colorBorderWeak"}),DisclosureContent=React4.forwardRef((_a,ref)=>{var _b=_a,{children,element="DISCLOSURE_CONTENT",visible}=_b,props=__objRest(_b,["children","element","visible"]);let{disclosure,variant,isHeadingHovered,isDisabled}=React4.useContext(DisclosureContext),{opacity}=useSpring({opacity:disclosure.visible?1:0,onRest:disclosure.stopAnimation,config:{mass:1,tension:150,friction:20,duration:100}}),variantStyles={};return variant==="contained"&&(variantStyles=containedStyles2,isHeadingHovered&&!isDisabled&&(variantStyles=containedHoverStyles2)),React4.createElement(DisclosurePrimitiveContent,__spreadValues(__spreadProps(__spreadValues(__spreadValues({},disclosure),safelySpreadBoxProps3(props)),{as:AnimatedDisclosureContent,element,backgroundColor:"colorBackgroundBody",padding:"space50",ref,style:{opacity}}),variantStyles),children)});DisclosureContent.displayName="DisclosureContent";DisclosureContent.propTypes={children:PropTypes2.node.isRequired,element:PropTypes2.string};export{AnimatedDisclosureContent,Disclosure,DisclosureContent,DisclosureHeading,useDisclosurePrimitiveState as useDisclosureState};

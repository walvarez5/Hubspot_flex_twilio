var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/Input.tsx
import * as React from "react";
import PropTypes from "prop-types";
import { Box } from "@twilio-paste/box";
import { InputBox } from "@twilio-paste/input-box";

// src/utils.ts
var PROPS_TO_BLOCK = ["className", "style", "size", "height", "width"];
var safelySpreadFormControlProps = (props) => {
  return Object.keys(props).reduce((newProps, key) => {
    if (!PROPS_TO_BLOCK.includes(key)) {
      newProps[key] = props[key];
    }
    return newProps;
  }, {});
};

// src/Input.tsx
var InputElement = React.forwardRef((_a, ref) => {
  var _b = _a, { element } = _b, props = __objRest(_b, ["element"]);
  return /* @__PURE__ */ React.createElement(
    Box,
    __spreadValues({
      appearance: "none",
      as: "input",
      backgroundColor: "transparent",
      border: "none",
      borderRadius: "borderRadius20",
      boxShadow: "none",
      color: "inherit",
      cursor: (props.type === "date" || props.type === "time") && !props.readOnly && !props.disabled ? "text" : "auto",
      display: "block",
      element,
      fontFamily: "inherit",
      fontSize: "fontSize30",
      fontWeight: "fontWeightMedium",
      lineHeight: "lineHeight20",
      margin: "space0",
      outline: "none",
      paddingBottom: "space30",
      paddingLeft: "space40",
      paddingRight: "space40",
      paddingTop: "space30",
      resize: "none",
      width: "100%",
      variant: props.variant,
      ref,
      _placeholder: {
        color: props.variant === "inverse" ? "colorTextInverseWeak" : "colorTextWeak",
        fontStyle: "italic"
      },
      _focus_placeholder: {
        color: props.variant === "inverse" ? "colorTextInverseWeak" : "colorTextWeak"
      },
      _disabled: {
        color: props.variant === "inverse" ? "colorTextInverseWeaker" : "colorTextWeaker",
        cursor: "not-allowed",
        "-webkit-text-fill-color": props.variant === "inverse" ? "colorTextInverseWeaker" : "colorTextWeaker",
        "-webkit-opacity": "1"
      },
      __webkit_datetime_edit: {
        display: "flex"
      },
      __webkit_calendar_picker_indicator_hover: {
        cursor: props.readOnly || props.disabled ? "default" : "pointer"
      }
    }, props)
  );
});
InputElement.displayName = "InputElement";
var Input = React.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      disabled,
      element = "INPUT",
      hasError,
      id,
      insertAfter,
      insertBefore,
      name,
      placeholder,
      readOnly,
      required,
      type,
      value,
      variant
    } = _b, props = __objRest(_b, [
      "disabled",
      "element",
      "hasError",
      "id",
      "insertAfter",
      "insertBefore",
      "name",
      "placeholder",
      "readOnly",
      "required",
      "type",
      "value",
      "variant"
    ]);
    const typeProps = { type };
    if (type === "number") {
      typeProps.type = "text";
      typeProps.inputmode = "numeric";
      typeProps.pattern = "[0-9]*";
    }
    return /* @__PURE__ */ React.createElement(
      InputBox,
      {
        disabled,
        element,
        hasError,
        insertAfter,
        insertBefore,
        readOnly,
        type,
        variant
      },
      /* @__PURE__ */ React.createElement(
        InputElement,
        __spreadProps(__spreadValues(__spreadValues({
          "aria-invalid": hasError,
          "aria-readonly": readOnly
        }, safelySpreadFormControlProps(props)), typeProps), {
          disabled,
          element: `${element}_ELEMENT`,
          id,
          name,
          placeholder,
          readOnly,
          ref,
          required,
          value,
          variant
        })
      )
    );
  }
);
Input.displayName = "Input";
Input.propTypes = {
  disabled: PropTypes.bool,
  element: PropTypes.string,
  hasError: PropTypes.bool,
  id: PropTypes.string,
  name: PropTypes.string,
  onBlur: PropTypes.func,
  onChange: PropTypes.func,
  onFocus: PropTypes.func,
  placeholder: PropTypes.string,
  readOnly: PropTypes.bool,
  required: PropTypes.bool,
  type: PropTypes.oneOf(["text", "email", "hidden", "number", "password", "search", "tel", "date", "time"]).isRequired,
  value: PropTypes.string
};
export {
  Input,
  InputElement
};

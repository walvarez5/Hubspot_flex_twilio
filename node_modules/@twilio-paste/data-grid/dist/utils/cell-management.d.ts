/**
 * Sets the correct tabindex for elements based on whether actionable
 * mode is on or off.
 *
 * @param {HTMLElement} cellElement - the wrapping cell element
 * @param {boolean} actionable - are we turning actionable on or off
 */
export declare const updateTabIndexForActionable: (cellElement: HTMLElement, actionable: boolean) => void;
/**
 * Sets the tabindex to 0 after a delay
 *
 * @example
 * delayedSetFocusable(document.querySelector('#my-div'))
 */
export declare const delayedSetFocusable: (element?: HTMLElement) => void;
/**
 * Determines if the element provided is a data grid cell.
 *
 * @example
 * if (isCell(el)) { ... }
 *
 * @returns {boolean}.
 */
export declare const isCell: (element: Element) => boolean;
/**
 * Returns the closest parent cell (th or td element) within the data grid from a given element.
 *
 * @example
 * const element = document.querySelector("my-data-grid-input");
 * const closestCell = getClosestCellFrom(element, 'grid-10'); // returns the td element
 * ensureFocus(closestCell); // focuses the td element
 *
 * @returns {HTMLELEMENT|null} cell element.
 */
export declare const getClosestCellFrom: (element: Element, dataGridId: string) => HTMLElement | null;
/**
 * Returns the closest parent cell (th or td element) within the data grid from the current focused element.
 *
 * @example
 * const closestCell = getClosestGridCellFromCurrentFocus('grid-10'); // returns the td element
 * ensureFocus(closestCell); // focuses the td element
 *
 * @returns {HTMLELEMENT|null} cell element.
 */
export declare const getClosestGridCellFromCurrentFocus: (dataGridId: string) => HTMLElement | null;
//# sourceMappingURL=cell-management.d.ts.map
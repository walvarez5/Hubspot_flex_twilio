var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../../../node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "../../../../node_modules/lodash/isObjectLike.js"(exports, module2) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module2.exports = isObjectLike;
  }
});

// ../../../../node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "../../../../node_modules/lodash/_freeGlobal.js"(exports, module2) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module2.exports = freeGlobal;
  }
});

// ../../../../node_modules/lodash/_root.js
var require_root = __commonJS({
  "../../../../node_modules/lodash/_root.js"(exports, module2) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module2.exports = root;
  }
});

// ../../../../node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "../../../../node_modules/lodash/_Symbol.js"(exports, module2) {
    var root = require_root();
    var Symbol = root.Symbol;
    module2.exports = Symbol;
  }
});

// ../../../../node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "../../../../node_modules/lodash/_getRawTag.js"(exports, module2) {
    var Symbol = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol ? Symbol.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module2.exports = getRawTag;
  }
});

// ../../../../node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "../../../../node_modules/lodash/_objectToString.js"(exports, module2) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module2.exports = objectToString;
  }
});

// ../../../../node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "../../../../node_modules/lodash/_baseGetTag.js"(exports, module2) {
    var Symbol = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol ? Symbol.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module2.exports = baseGetTag;
  }
});

// ../../../../node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "../../../../node_modules/lodash/_overArg.js"(exports, module2) {
    function overArg(func4, transform) {
      return function(arg) {
        return func4(transform(arg));
      };
    }
    module2.exports = overArg;
  }
});

// ../../../../node_modules/lodash/_getPrototype.js
var require_getPrototype = __commonJS({
  "../../../../node_modules/lodash/_getPrototype.js"(exports, module2) {
    var overArg = require_overArg();
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    module2.exports = getPrototype;
  }
});

// ../../../../node_modules/lodash/isPlainObject.js
var require_isPlainObject = __commonJS({
  "../../../../node_modules/lodash/isPlainObject.js"(exports, module2) {
    var baseGetTag = require_baseGetTag();
    var getPrototype = require_getPrototype();
    var isObjectLike = require_isObjectLike();
    var objectTag = "[object Object]";
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    module2.exports = isPlainObject;
  }
});

// ../../../../node_modules/lodash/isElement.js
var require_isElement = __commonJS({
  "../../../../node_modules/lodash/isElement.js"(exports, module2) {
    var isObjectLike = require_isObjectLike();
    var isPlainObject = require_isPlainObject();
    function isElement2(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }
    module2.exports = isElement2;
  }
});

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  DataGrid: () => DataGrid,
  DataGridBody: () => DataGridBody,
  DataGridCell: () => DataGridCell,
  DataGridFoot: () => DataGridFoot,
  DataGridHead: () => DataGridHead,
  DataGridHeader: () => DataGridHeader,
  DataGridHeaderSort: () => DataGridHeaderSort,
  DataGridRow: () => DataGridRow
});
module.exports = __toCommonJS(src_exports);

// src/DataGrid.tsx
var React2 = __toESM(require("react"));
var PropTypes = __toESM(require("prop-types"));
var import_uid_library = require("@twilio-paste/uid-library");
var import_reakit_library = require("@twilio-paste/reakit-library");
var import_table = require("@twilio-paste/table");

// src/DataGridContext.tsx
var React = __toESM(require("react"));
var DataGridContext = React.createContext({
  actionable: false,
  striped: false
});

// src/utils/reakit/reakit-matches.ts
function matches(element, selectors) {
  if ("matches" in element) {
    return element.matches(selectors);
  }
  if ("msMatchesSelector" in element) {
    return element.msMatchesSelector(selectors);
  }
  return element.webkitMatchesSelector(selectors);
}

// src/utils/reakit/reakit-tabbable-modded.ts
var selector = "input:not([type='hidden']):not([disabled]), select:not([disabled]), textarea:not([disabled]), a[href], button:not([disabled]), [tabindex], iframe, object, embed, area[href], audio[controls], video[controls], [contenteditable]:not([contenteditable='false'])";
function isFocusable(element) {
  return matches(element, selector);
}
function getAllFocusableIn(container) {
  const allFocusable = Array.from(container.querySelectorAll(selector));
  return allFocusable.filter(isFocusable);
}
function getFirstFocusableIn(container) {
  const [first] = getAllFocusableIn(container);
  return first || null;
}

// src/utils/reakit/reakit-getDocument.ts
function getDocument(element) {
  return element ? element.ownerDocument || element : document;
}

// src/utils/reakit/reakit-getActiveElement-modded.ts
function getActiveElement(element) {
  const { activeElement } = getDocument(element);
  if (!(activeElement == null ? void 0 : activeElement.nodeName)) {
    return null;
  }
  return activeElement;
}

// src/utils/reakit/reakit-hasFocus.ts
function hasFocus(element) {
  const activeElement = getActiveElement(element);
  if (!activeElement)
    return false;
  if (activeElement === element)
    return true;
  const activeDescendant = activeElement.getAttribute("aria-activedescendant");
  if (!activeDescendant)
    return false;
  return activeDescendant === element.id;
}

// src/utils/reakit/reakit-ensureFocus.ts
function ensureFocus(element, { preventScroll, isActive = hasFocus } = {}) {
  if (isActive(element))
    return -1;
  element.focus({ preventScroll });
  if (isActive(element))
    return -1;
  return requestAnimationFrame(() => {
    element.focus({ preventScroll });
  });
}

// src/utils/cell-management.ts
var updateTabIndexForActionable = (cellElement, actionable) => {
  getAllFocusableIn(cellElement).forEach((element) => {
    element.tabIndex = actionable ? 0 : -1;
  });
};
var delayedSetFocusable = (element) => {
  setTimeout(() => {
    if (element != null) {
      element.tabIndex = 0;
    }
  }, 150);
};
var isCell = (element) => {
  return element.tagName === "TD" || element.tagName === "TH";
};
var getClosestCellFrom = (element, dataGridId) => {
  if (element == null)
    return null;
  if (!dataGridId)
    return null;
  return element.closest(`#${dataGridId} th, #${dataGridId} td`);
};
var getClosestGridCellFromCurrentFocus = (dataGridId) => {
  const focusedElement = getActiveElement();
  if (!focusedElement) {
    return null;
  }
  if (isCell(focusedElement)) {
    return focusedElement;
  }
  return getClosestCellFrom(focusedElement, dataGridId);
};

// src/DataGrid.tsx
var DataGrid = React2.forwardRef((_a, ref) => {
  var _b = _a, { element = "DATA_GRID", striped = false } = _b, props = __objRest(_b, ["element", "striped"]);
  const dataGridId = `data-grid-${(0, import_uid_library.useUID)()}`;
  const lastFocusedElement = React2.useRef(null);
  const compositeState = (0, import_reakit_library.useCompositeState)({ unstable_virtual: false });
  const [actionable, setActionable] = React2.useState(false);
  const handleMouseDown = React2.useCallback(() => {
    setActionable(true);
  }, []);
  const handleFocus = React2.useCallback((e) => {
    if (e.target != null) {
      lastFocusedElement.current = e.target;
    }
  }, []);
  const handleBlur = React2.useCallback((event) => {
    const isDataGridBlurred = !event.currentTarget.contains(event.relatedTarget);
    if (isDataGridBlurred) {
      setActionable(false);
      if (lastFocusedElement.current != null) {
        const closestCell = getClosestCellFrom(lastFocusedElement.current, dataGridId);
        if (closestCell) {
          delayedSetFocusable(closestCell);
        }
      }
    }
  }, [dataGridId]);
  const handleKeypress = React2.useCallback((event) => {
    switch (event.key) {
      case "Enter": {
        setActionable(true);
        const activeElement = getActiveElement();
        if (isCell(activeElement)) {
          const firstFocusableElement = getFirstFocusableIn(activeElement);
          if (firstFocusableElement) {
            ensureFocus(firstFocusableElement);
            activeElement.tabIndex = actionable ? 0 : -1;
          }
        }
        break;
      }
      case "Escape": {
        setActionable(false);
        const closestCell = getClosestGridCellFromCurrentFocus(dataGridId);
        if (closestCell) {
          ensureFocus(closestCell);
          delayedSetFocusable(closestCell);
        }
        break;
      }
      default:
        break;
    }
  }, [actionable, dataGridId]);
  const dataGridState = __spreadProps(__spreadValues({}, compositeState), {
    actionable,
    striped
  });
  return /* @__PURE__ */ React2.createElement(DataGridContext.Provider, {
    value: dataGridState
  }, /* @__PURE__ */ React2.createElement(import_reakit_library.Composite, __spreadProps(__spreadValues(__spreadValues({}, props), compositeState), {
    id: dataGridId,
    ref,
    as: import_table.Table,
    element,
    role: "grid",
    onKeyDown: handleKeypress,
    onMouseDown: handleMouseDown,
    onFocus: handleFocus,
    onBlur: handleBlur,
    isActionable: actionable,
    "data-actionable": actionable
  })));
});
DataGrid.displayName = "DataGrid";
DataGrid.propTypes = {
  "aria-label": PropTypes.string.isRequired,
  element: PropTypes.string
};

// src/DataGridHead.tsx
var React3 = __toESM(require("react"));
var PropTypes2 = __toESM(require("prop-types"));
var import_table2 = require("@twilio-paste/table");
var DataGridHead = React3.forwardRef((_a, ref) => {
  var _b = _a, { element = "DATA_GRID_HEAD" } = _b, props = __objRest(_b, ["element"]);
  return /* @__PURE__ */ React3.createElement(import_table2.THead, __spreadProps(__spreadValues({}, props), {
    element,
    ref
  }));
});
DataGridHead.displayName = "DataGridHead";
DataGridHead.propTypes = {
  element: PropTypes2.string
};

// src/DataGridRow.tsx
var React5 = __toESM(require("react"));
var PropTypes4 = __toESM(require("prop-types"));
var import_reakit_library2 = require("@twilio-paste/reakit-library");

// src/table/Tr.tsx
var React4 = __toESM(require("react"));
var PropTypes3 = __toESM(require("prop-types"));
var import_styling_library = require("@twilio-paste/styling-library");
var import_box = require("@twilio-paste/box");
var StyledTr = import_styling_library.styled.tr((0, import_styling_library.css)({
  "&[aria-selected=true] > td": {
    borderColor: "colorBorderWeak"
  },
  "&[aria-selected=true] > th": {
    borderColor: "colorBorderWeak"
  }
}));
var Tr = React4.forwardRef((_a, ref) => {
  var _b = _a, { element = "DATA_GRID_TR", striped } = _b, props = __objRest(_b, ["element", "striped"]);
  return /* @__PURE__ */ React4.createElement(import_box.Box, __spreadProps(__spreadValues({}, (0, import_box.safelySpreadBoxProps)(props)), {
    ref,
    element,
    as: StyledTr,
    "aria-selected": props.selected,
    _even: { backgroundColor: striped ? "colorBackgroundRowStriped" : "transparent" },
    _last: { borderWidth: "borderWidth0" },
    _selected: {
      backgroundColor: "colorBackgroundPrimaryWeakest"
    }
  }));
});
Tr.displayName = "Tr";
Tr.propTypes = {
  role: PropTypes3.string.isRequired,
  selected: PropTypes3.bool,
  element: PropTypes3.string
};

// src/DataGridRow.tsx
var DataGridRow = React5.forwardRef((_a, ref) => {
  var _b = _a, { element = "DATA_GRID_ROW" } = _b, props = __objRest(_b, ["element"]);
  const dataGridState = React5.useContext(DataGridContext);
  return /* @__PURE__ */ React5.createElement(import_reakit_library2.CompositeGroup, __spreadProps(__spreadValues(__spreadProps(__spreadValues({
    as: Tr
  }, props), {
    element
  }), dataGridState), {
    ref,
    role: "row"
  }));
});
DataGridRow.displayName = "DataGridRow";
DataGridRow.propTypes = {
  selected: PropTypes4.bool,
  element: PropTypes4.string
};

// src/DataGridHeader.tsx
var React9 = __toESM(require("react"));
var PropTypes8 = __toESM(require("prop-types"));

// src/DataGridCell.tsx
var React8 = __toESM(require("react"));
var PropTypes7 = __toESM(require("prop-types"));
var import_reakit_library3 = require("@twilio-paste/reakit-library");
var import_utils2 = require("@twilio-paste/utils");

// src/table/Td.tsx
var React6 = __toESM(require("react"));
var PropTypes5 = __toESM(require("prop-types"));
var import_box2 = require("@twilio-paste/box");
var Td = React6.forwardRef((_a, ref) => {
  var _b = _a, { textAlign = "left", element = "DATA_GRID_TD" } = _b, props = __objRest(_b, ["textAlign", "element"]);
  return /* @__PURE__ */ React6.createElement(import_box2.Box, __spreadProps(__spreadValues({}, (0, import_box2.safelySpreadBoxProps)(props)), {
    ref,
    as: "td",
    element,
    borderStyle: "solid",
    borderColor: "colorBorderWeaker",
    borderWidth: "borderWidth0",
    borderBottomWidth: "borderWidth10",
    fontSize: "fontSize30",
    lineHeight: "lineHeight30",
    paddingY: "space40",
    paddingX: "space50",
    position: "relative",
    textAlign,
    verticalAlign: "inherit",
    wordWrap: "break-word",
    _first: {
      paddingLeft: "space50"
    },
    _last: {
      paddingRight: "space50"
    },
    _focus: {
      outline: "none",
      boxShadow: "shadowFocusInset"
    }
  }));
});
Td.displayName = "Td";
Td.propTypes = {
  onClick: PropTypes5.func,
  element: PropTypes5.string
};

// src/table/Th.tsx
var React7 = __toESM(require("react"));
var PropTypes6 = __toESM(require("prop-types"));
var import_box3 = require("@twilio-paste/box");
var Th = React7.forwardRef((_a, ref) => {
  var _b = _a, { width, textAlign = "left", element = "DATA_GRID_TH" } = _b, props = __objRest(_b, ["width", "textAlign", "element"]);
  return /* @__PURE__ */ React7.createElement(import_box3.Box, __spreadProps(__spreadValues({}, (0, import_box3.safelySpreadBoxProps)(props)), {
    ref,
    element,
    as: "th",
    borderBottomStyle: "solid",
    borderBottomColor: "colorBorderWeaker",
    borderBottomWidth: "borderWidth10",
    fontSize: "fontSize30",
    lineHeight: "lineHeight30",
    fontWeight: "fontWeightSemibold",
    paddingY: "space40",
    paddingX: "space50",
    width,
    position: "relative",
    textAlign,
    verticalAlign: "inherit",
    _first: {
      paddingLeft: "space50"
    },
    _last: {
      paddingRight: "space50"
    },
    _focus: {
      outline: "none",
      boxShadow: "shadowFocusInset"
    }
  }));
});
Th.displayName = "Th";
Th.propTypes = {
  onClick: PropTypes6.func,
  width: PropTypes6.string,
  element: PropTypes6.string,
  colSpan: PropTypes6.number
};

// src/DataGridCell.tsx
var import_isElement = __toESM(require_isElement());
var DataGridCell = (_a) => {
  var _b = _a, { element = "DATA_GRID_CELL", as = "td" } = _b, props = __objRest(_b, ["element", "as"]);
  const dataGridState = React8.useContext(DataGridContext);
  const cellRef = React8.useRef();
  const handleMouseDown = React8.useCallback(() => {
    ensureFocus(cellRef.current);
  }, []);
  const onListMutation = React8.useCallback((mutationList) => {
    if (mutationList.length === 0) {
      return;
    }
    mutationList.forEach((mutation) => {
      if (!(0, import_isElement.default)(mutation.target)) {
        return;
      }
      const target = mutation.target;
      if (mutation.attributeName === "tabindex" && dataGridState.actionable && target.tabIndex === 0 && isCell(target)) {
        target.tabIndex = -1;
      }
    });
  }, [dataGridState.actionable]);
  (0, import_utils2.useMutationObservable)(cellRef.current, onListMutation);
  React8.useEffect(() => {
    if (cellRef.current) {
      updateTabIndexForActionable(cellRef.current, dataGridState.actionable);
    }
  }, [dataGridState.actionable]);
  return /* @__PURE__ */ React8.createElement(import_reakit_library3.CompositeItem, __spreadProps(__spreadValues(__spreadValues({}, props), dataGridState), {
    element,
    ref: cellRef,
    as: as === "td" ? Td : Th,
    onClick: handleMouseDown
  }));
};
DataGridCell.displayName = "DataGridCell";
DataGridCell.propTypes = {
  as: PropTypes7.oneOf(["th", "td"]),
  element: PropTypes7.string,
  colSpan: PropTypes7.number
};

// src/DataGridHeader.tsx
var DataGridHeader = (_a) => {
  var _b = _a, { element = "DATA_GRID_HEADER" } = _b, props = __objRest(_b, ["element"]);
  return /* @__PURE__ */ React9.createElement(DataGridCell, __spreadProps(__spreadValues({
    element
  }, props), {
    as: "th"
  }));
};
DataGridHeader.displayName = "DataGridHeader";
DataGridHeader.propTypes = {
  element: PropTypes8.string,
  colSpan: PropTypes8.number
};

// src/DataGridHeaderSort.tsx
var React11 = __toESM(require("react"));
var PropTypes10 = __toESM(require("prop-types"));
var import_button = require("@twilio-paste/button");

// ../screen-reader-only/dist/index.es.js
var React10 = __toESM(require("react"));
var PropTypes9 = __toESM(require("prop-types"));
var import_box4 = require("@twilio-paste/box");
var __defProp2 = Object.defineProperty;
var __defProps2 = Object.defineProperties;
var __getOwnPropDescs2 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols2 = Object.getOwnPropertySymbols;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __propIsEnum2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues2 = (a, b) => {
  for (var prop in b || (b = {}))
    __hasOwnProp2.call(b, prop) && __defNormalProp2(a, prop, b[prop]);
  if (__getOwnPropSymbols2)
    for (var prop of __getOwnPropSymbols2(b))
      __propIsEnum2.call(b, prop) && __defNormalProp2(a, prop, b[prop]);
  return a;
};
var __spreadProps2 = (a, b) => __defProps2(a, __getOwnPropDescs2(b));
var __objRest2 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    __hasOwnProp2.call(source, prop) && exclude.indexOf(prop) < 0 && (target[prop] = source[prop]);
  if (source != null && __getOwnPropSymbols2)
    for (var prop of __getOwnPropSymbols2(source))
      exclude.indexOf(prop) < 0 && __propIsEnum2.call(source, prop) && (target[prop] = source[prop]);
  return target;
};
var ScreenReaderOnly = React10.forwardRef((_a, ref) => {
  var _b = _a, { as = "span", children } = _b, props = __objRest2(_b, ["as", "children"]);
  return React10.createElement(import_box4.Box, __spreadProps2(__spreadValues2({}, props), { as, border: "none", clip: "rect(0 0 0 0)", height: "1px", margin: "spaceNegative10", overflow: "hidden", padding: "space0", position: "absolute", ref, textTransform: "none", whiteSpace: "nowrap", width: "1px" }), children);
});
ScreenReaderOnly.displayName = "ScreenReaderOnly";

// src/DataGridHeaderSort.tsx
var import_ArrowDownIcon = require("@twilio-paste/icons/cjs/ArrowDownIcon");
var import_ArrowUpIcon = require("@twilio-paste/icons/cjs/ArrowUpIcon");
var import_UnsortedIcon = require("@twilio-paste/icons/cjs/UnsortedIcon");
var DataGridHeaderSortIcon = ({ direction, element }) => {
  switch (direction) {
    case "ascending":
      return /* @__PURE__ */ React11.createElement(import_ArrowUpIcon.ArrowUpIcon, {
        decorative: true,
        element
      });
    case "descending":
      return /* @__PURE__ */ React11.createElement(import_ArrowDownIcon.ArrowDownIcon, {
        decorative: true,
        element
      });
    case "none":
      return /* @__PURE__ */ React11.createElement(import_UnsortedIcon.UnsortedIcon, {
        decorative: true,
        element
      });
    default:
      return null;
  }
};
var DataGridHeaderSort = (_a) => {
  var _b = _a, {
    direction,
    onClick,
    element = "DATA_GRID_HEADER_SORT",
    i18nAscendingLabel = "Sort ascending",
    i18nDescendingLabel = "Sort descending",
    i18nUnsortedLabel = "Unsorted"
  } = _b, props = __objRest(_b, [
    "direction",
    "onClick",
    "element",
    "i18nAscendingLabel",
    "i18nDescendingLabel",
    "i18nUnsortedLabel"
  ]);
  const i18nLabelDirectionMap = {
    ascending: i18nAscendingLabel,
    descending: i18nDescendingLabel,
    none: i18nUnsortedLabel
  };
  return /* @__PURE__ */ React11.createElement(import_button.Button, __spreadValues({
    element,
    variant: "reset",
    size: "reset",
    onClick
  }, props), /* @__PURE__ */ React11.createElement(DataGridHeaderSortIcon, {
    element: `${element}_ICON`,
    direction
  }), /* @__PURE__ */ React11.createElement(ScreenReaderOnly, null, i18nLabelDirectionMap[direction]));
};
DataGridHeaderSort.displayName = "DataGridHeaderSort";
DataGridHeaderSort.propTypes = {
  direction: PropTypes10.oneOf(["ascending", "descending", "none"]).isRequired,
  onClick: PropTypes10.func,
  element: PropTypes10.string
};

// src/DataGridBody.tsx
var React12 = __toESM(require("react"));
var PropTypes11 = __toESM(require("prop-types"));
var import_table3 = require("@twilio-paste/table");
var DataGridBody = React12.forwardRef((_a, ref) => {
  var _b = _a, { element = "DATA_GRID_BODY" } = _b, props = __objRest(_b, ["element"]);
  return /* @__PURE__ */ React12.createElement(import_table3.TBody, __spreadProps(__spreadValues({}, props), {
    element,
    ref
  }));
});
DataGridBody.displayName = "DataGridBody";
DataGridBody.propTypes = {
  element: PropTypes11.string
};

// src/DataGridFoot.tsx
var React13 = __toESM(require("react"));
var PropTypes12 = __toESM(require("prop-types"));
var import_table4 = require("@twilio-paste/table");
var DataGridFoot = React13.forwardRef((_a, ref) => {
  var _b = _a, { element = "DATA_GRID_FOOT" } = _b, props = __objRest(_b, ["element"]);
  return /* @__PURE__ */ React13.createElement(import_table4.TFoot, __spreadProps(__spreadValues({}, props), {
    element,
    ref
  }));
});
DataGridFoot.displayName = "DataGridFoot";
DataGridFoot.propTypes = {
  element: PropTypes12.string
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DataGrid,
  DataGridBody,
  DataGridCell,
  DataGridFoot,
  DataGridHead,
  DataGridHeader,
  DataGridHeaderSort,
  DataGridRow
});

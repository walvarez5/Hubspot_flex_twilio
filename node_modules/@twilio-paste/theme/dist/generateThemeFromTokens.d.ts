import type { GenericThemeShape, ColorsKeys, BackgroundColorsKeys, BorderColorsKeys, BorderWidthsKeys, DataVisualizationKeys, FontSizesKeys, FontWeightsKeys, FontsKeys, SizingKeys, LineHeightsKeys, RadiiKeys, BoxShadowsKeys, SpacingsKeys, TextColorsKeys, ZIndicesKeys } from './types/GenericThemeShape';
interface GenerateThemeFromTokensArgs {
    backgroundColors: Partial<{
        [key in BackgroundColorsKeys]: any;
    }>;
    borderColors: Partial<{
        [key in BorderColorsKeys]: any;
    }>;
    borderWidths: Partial<{
        [key in BorderWidthsKeys]: any;
    }>;
    radii: Partial<{
        [key in RadiiKeys]: any;
    }>;
    fonts: Partial<{
        [key in FontsKeys]: any;
    }>;
    fontSizes: Partial<{
        [key in FontSizesKeys]: any;
    }>;
    fontWeights: Partial<{
        [key in FontWeightsKeys]: any;
    }>;
    lineHeights: Partial<{
        [key in LineHeightsKeys]: any;
    }>;
    boxShadows: Partial<{
        [key in BoxShadowsKeys]: any;
    }>;
    sizings: {
        [key in SizingKeys]: any;
    };
    spacings: Partial<{
        [key in SpacingsKeys]: any;
    }>;
    textColors: Partial<{
        [key in TextColorsKeys]: any;
    }>;
    zIndices: Partial<{
        [key in ZIndicesKeys]: any;
    }>;
    colors: Partial<{
        [key in ColorsKeys]: any;
    }>;
    dataVisualization: Partial<{
        [key in DataVisualizationKeys]: any;
    }>;
}
export declare const generateThemeFromTokens: ({ backgroundColors, borderColors, borderWidths, radii, fonts, fontSizes, fontWeights, lineHeights, boxShadows, sizings, spacings, textColors, zIndices, dataVisualization, }: GenerateThemeFromTokensArgs) => GenericThemeShape;
export {};
//# sourceMappingURL=generateThemeFromTokens.d.ts.map
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Flex: () => Flex
});
module.exports = __toCommonJS(src_exports);
var React = __toESM(require("react"));
var import_prop_types = __toESM(require("prop-types"));
var import_box = require("@twilio-paste/box");
var import_style_props = require("@twilio-paste/style-props");

// src/helpers.tsx
var getGrow = ({ grow }) => {
  if (Array.isArray(grow)) {
    return grow.map((value) => {
      return Number(value);
    });
  }
  if (typeof grow === "number") {
    return grow;
  }
  if (grow) {
    return 1;
  }
  return 0;
};
var getShrink = ({ shrink, basis }) => {
  if (Array.isArray(shrink)) {
    return shrink.map((value) => {
      return Number(value);
    });
  }
  if (typeof shrink === "number") {
    return shrink;
  }
  if (typeof shrink === "boolean") {
    return shrink ? 1 : 0;
  }
  if (basis && basis !== "auto") {
    return 0;
  }
  return 1;
};
var getSuffix = (item) => {
  const suffix = typeof item === "number" || String(Number.parseInt(item, 10)) === item ? "px" : "";
  return item + suffix;
};
var getBasis = ({ basis }) => {
  if (Array.isArray(basis)) {
    return basis.map((value) => {
      return getSuffix(value);
    });
  }
  if (basis) {
    return getSuffix(basis);
  }
  return "auto";
};
var getVertical = ({ vertical }) => {
  if (Array.isArray(vertical)) {
    return vertical.map((value) => {
      if (typeof value === "boolean") {
        return value === true ? "column" : "row";
      }
      return value;
    });
  }
  if (vertical) {
    return "column";
  }
  return "row";
};
var getWrap = ({ wrap }) => {
  if (Array.isArray(wrap)) {
    return wrap.map((value) => {
      if (typeof value === "boolean") {
        return value === true ? "wrap" : "nowrap";
      }
      return value;
    });
  }
  if (wrap) {
    return "wrap";
  }
  return "nowrap";
};
var RemapedVerticalAlignments = {
  top: "flex-start",
  center: "center",
  bottom: "flex-end",
  stretch: "stretch"
};
var vAlignToProps = ({
  vAlignContent
}) => {
  if (Array.isArray(vAlignContent)) {
    return vAlignContent.map((value) => RemapedVerticalAlignments[value]);
  }
  if (vAlignContent) {
    return RemapedVerticalAlignments[vAlignContent];
  }
  return "flex-start";
};
var RemapedHorizontalAlignments = {
  left: "flex-start",
  center: "center",
  right: "flex-end",
  around: "space-around",
  between: "space-between"
};
var hAlignToProps = ({ hAlignContent }) => {
  if (Array.isArray(hAlignContent)) {
    return hAlignContent.map((value) => RemapedHorizontalAlignments[value]);
  }
  if (hAlignContent) {
    return RemapedHorizontalAlignments[hAlignContent];
  }
  return "flex-start";
};

// src/index.tsx
var getFlexStyles = (props) => {
  const styles = {
    justifyContent: props.vertical ? vAlignToProps(props) : hAlignToProps(props),
    alignItems: props.vertical ? hAlignToProps(props) : vAlignToProps(props)
  };
  if (props.grow || props.shrink || props.basis) {
    styles.flexGrow = getGrow(props);
    styles.flexShrink = getShrink(props);
    styles.flexBasis = getBasis(props);
  }
  if (props.vertical) {
    styles.flexDirection = getVertical(props);
  }
  if (props.wrap) {
    styles.flexWrap = getWrap(props);
  }
  return styles;
};
var Flex = React.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      as,
      basis,
      children,
      display,
      element = "FLEX",
      hAlignContent,
      grow,
      marginTop,
      marginRight,
      marginBottom,
      marginLeft,
      margin,
      marginX,
      marginY,
      paddingTop,
      paddingRight,
      paddingBottom,
      paddingLeft,
      padding,
      paddingX,
      paddingY,
      maxWidth,
      minWidth = "size0",
      width,
      height,
      minHeight,
      maxHeight,
      size,
      shrink,
      vertical,
      vAlignContent,
      wrap
    } = _b, props = __objRest(_b, [
      "as",
      "basis",
      "children",
      "display",
      "element",
      "hAlignContent",
      "grow",
      "marginTop",
      "marginRight",
      "marginBottom",
      "marginLeft",
      "margin",
      "marginX",
      "marginY",
      "paddingTop",
      "paddingRight",
      "paddingBottom",
      "paddingLeft",
      "padding",
      "paddingX",
      "paddingY",
      "maxWidth",
      "minWidth",
      "width",
      "height",
      "minHeight",
      "maxHeight",
      "size",
      "shrink",
      "vertical",
      "vAlignContent",
      "wrap"
    ]);
    const FlexStyles = React.useMemo(
      () => getFlexStyles({ basis, hAlignContent, grow, shrink, vertical, vAlignContent, wrap }),
      [basis, hAlignContent, grow, shrink, vertical, vAlignContent, wrap]
    );
    if (size && (width || height)) {
      console.error("[Paste Flex]: you cannot set a height or width when using the size attribute");
    }
    if (marginX && (margin || marginBottom || marginLeft || marginRight || marginTop) || marginY && (margin || marginBottom || marginLeft || marginRight || marginTop)) {
      console.error(
        "[Paste Flex]: you cannot set a top, right, bottom or left margin when using the marginX or marginY attributes."
      );
    }
    if (paddingX && (padding || paddingBottom || paddingLeft || paddingRight || paddingTop) || paddingY && (padding || paddingBottom || paddingLeft || paddingRight || paddingTop)) {
      console.error(
        "[Paste Flex]: you cannot set a top, right, bottom or left padding when using the paddingX or paddingY attributes."
      );
    }
    const margins = marginX || marginY ? { marginX, marginY } : { margin, marginBottom, marginLeft, marginRight, marginTop };
    const paddings = paddingX || paddingY ? { paddingX, paddingY } : { padding, paddingBottom, paddingLeft, paddingRight, paddingTop };
    const widths = size ? { size } : { height, width };
    return /* @__PURE__ */ React.createElement(
      import_box.Box,
      __spreadValues(__spreadProps(__spreadValues(__spreadValues(__spreadProps(__spreadValues(__spreadValues({}, FlexStyles), (0, import_box.safelySpreadBoxProps)(props)), {
        ref,
        as,
        display,
        element
      }), margins), paddings), {
        minHeight,
        maxHeight,
        maxWidth,
        minWidth
      }), widths),
      children
    );
  }
);
Flex.displayName = "Flex";
Flex.defaultProps = {
  display: "flex"
};
Flex.propTypes = {
  as: import_prop_types.default.string,
  display: (0, import_style_props.ResponsiveProp)(import_prop_types.default.oneOf(["flex", "inline-flex"])),
  element: import_prop_types.default.string,
  vertical: (0, import_style_props.ResponsiveProp)(import_prop_types.default.bool),
  vAlignContent: (0, import_style_props.ResponsiveProp)(import_prop_types.default.oneOf(["top", "center", "bottom", "stretch"])),
  hAlignContent: (0, import_style_props.ResponsiveProp)(import_prop_types.default.oneOf(["left", "center", "right", "around", "between"])),
  grow: (0, import_style_props.ResponsiveProp)(import_prop_types.default.oneOfType([import_prop_types.default.bool, import_prop_types.default.number])),
  shrink: (0, import_style_props.ResponsiveProp)(import_prop_types.default.oneOfType([import_prop_types.default.bool, import_prop_types.default.number])),
  basis: (0, import_style_props.ResponsiveProp)(import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.number])),
  wrap: (0, import_style_props.ResponsiveProp)(import_prop_types.default.bool),
  width: import_style_props.isWidthTokenProp,
  minWidth: import_style_props.isMinWidthTokenProp,
  maxWidth: import_style_props.isMaxWidthTokenProp,
  height: import_style_props.isHeightTokenProp,
  minHeight: import_style_props.isMinHeightTokenProp,
  maxHeight: import_style_props.isMaxHeightTokenProp,
  size: import_style_props.isWidthTokenProp,
  margin: import_style_props.isMarginTokenProp,
  marginTop: import_style_props.isMarginTokenProp,
  marginRight: import_style_props.isMarginTokenProp,
  marginBottom: import_style_props.isMarginTokenProp,
  marginLeft: import_style_props.isMarginTokenProp,
  marginX: import_style_props.isMarginTokenProp,
  marginY: import_style_props.isMarginTokenProp,
  padding: import_style_props.isPaddingTokenProp,
  paddingTop: import_style_props.isPaddingTokenProp,
  paddingRight: import_style_props.isPaddingTokenProp,
  paddingBottom: import_style_props.isPaddingTokenProp,
  paddingLeft: import_style_props.isPaddingTokenProp,
  paddingX: import_style_props.isPaddingTokenProp,
  paddingY: import_style_props.isPaddingTokenProp
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Flex
});

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/Table.tsx
import * as React2 from "react";
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";

// src/TableContext.tsx
import * as React from "react";
var TableContext = React.createContext({ striped: false });

// src/proptypes.ts
import PropTypes from "prop-types";
import { isWidthTokenProp } from "@twilio-paste/style-props";

// src/constants.ts
var TableAlignmentObject = {
  LEFT: "left",
  CENTER: "center",
  RIGHT: "right"
};
var TableLayoutObject = {
  AUTO: "auto",
  FIXED: "fixed"
};
var TableVariantObject = {
  DEFAULT: "default",
  BORDERLESS: "borderless"
};
var TableVerticalAlignmentObject = {
  TOP: "top",
  MIDDLE: "middle",
  BOTTOM: "bottom"
};

// src/proptypes.ts
var TablePropTypes = {
  children: PropTypes.node.isRequired,
  element: PropTypes.string,
  isActionable: PropTypes.bool,
  scrollHorizontally: PropTypes.bool,
  noWrap: PropTypes.bool,
  striped: PropTypes.bool,
  tableLayout: PropTypes.oneOf(Object.values(TableLayoutObject)),
  variant: PropTypes.oneOf(Object.values(TableVariantObject))
};
var THeadPropTypes = {
  children: PropTypes.node.isRequired,
  element: PropTypes.string
};
var TBodyPropTypes = {
  children: PropTypes.node.isRequired,
  element: PropTypes.string
};
var TrPropTypes = {
  children: PropTypes.node.isRequired,
  element: PropTypes.string,
  verticalAlign: PropTypes.oneOf(Object.values(TableVerticalAlignmentObject))
};
var ThPropTypes = {
  children: PropTypes.node,
  element: PropTypes.string,
  textAlign: PropTypes.oneOf(Object.values(TableAlignmentObject)),
  width: isWidthTokenProp
};
var TdPropTypes = {
  children: PropTypes.node,
  element: PropTypes.string,
  textAlign: PropTypes.oneOf(Object.values(TableAlignmentObject))
};
var TFootPropTypes = {
  children: PropTypes.node.isRequired,
  element: PropTypes.string
};

// src/Table.tsx
var Table = React2.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      element = "TABLE",
      id,
      isActionable,
      scrollHorizontally,
      noWrap,
      striped = false,
      tableLayout = "auto",
      variant = "default"
    } = _b, props = __objRest(_b, [
      "element",
      "id",
      "isActionable",
      "scrollHorizontally",
      "noWrap",
      "striped",
      "tableLayout",
      "variant"
    ]);
    const tableContext = {
      striped
    };
    return /* @__PURE__ */ React2.createElement(TableContext.Provider, { value: tableContext }, /* @__PURE__ */ React2.createElement(
      Box,
      {
        id,
        element: `${element}_WRAPPER`,
        overflowX: scrollHorizontally ? "auto" : null,
        whiteSpace: noWrap ? "nowrap" : null,
        boxShadow: isActionable ? "shadowFocus" : null
      },
      /* @__PURE__ */ React2.createElement(
        Box,
        __spreadProps(__spreadValues({}, safelySpreadBoxProps(props)), {
          ref,
          as: "table",
          borderCollapse: "separate",
          borderColor: "colorBorderWeaker",
          borderSpacing: "0",
          borderStyle: "solid",
          borderWidth: variant === "borderless" ? "borderWidth0" : "borderWidth10",
          element,
          tableLayout: tableLayout === "fixed" ? "fixed" : "auto",
          width: "100%"
        })
      )
    ));
  }
);
Table.displayName = "Table";
Table.propTypes = TablePropTypes;

// src/THead.tsx
import * as React3 from "react";
import { Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import { styled, css } from "@twilio-paste/styling-library";
var getStickyStyles = ({ stickyHeader }) => {
  if (!stickyHeader)
    return {};
  return {
    position: "sticky",
    zIndex: "zIndex10"
  };
};
var StyledTHead = styled.thead(
  css({
    backgroundColor: "colorBackground",
    top: (props) => props.top,
    "& > tr > th": {
      borderBottomWidth: "borderWidth20"
    }
  })
);
var THead = React3.forwardRef(
  (_a, ref) => {
    var _b = _a, { element = "THEAD", stickyHeader = false, top = stickyHeader ? "-1px" : null } = _b, props = __objRest(_b, ["element", "stickyHeader", "top"]);
    return /* @__PURE__ */ React3.createElement(
      Box2,
      __spreadValues(__spreadProps(__spreadValues({}, safelySpreadBoxProps2(props)), {
        ref,
        as: StyledTHead,
        element,
        top
      }), getStickyStyles({ stickyHeader }))
    );
  }
);
THead.displayName = "THead";
THead.propTypes = THeadPropTypes;

// src/TBody.tsx
import * as React4 from "react";
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps3 } from "@twilio-paste/box";
import { styled as styled2, css as css2 } from "@twilio-paste/styling-library";
var StyledTBody = styled2.tbody(
  css2({
    backgroundColor: "colorBackgroundBody",
    "& > tr:last-of-type > td": {
      borderBottomWidth: "borderWidth0"
    }
  })
);
var TBody = React4.forwardRef((_a, ref) => {
  var _b = _a, { element = "TBODY", children } = _b, props = __objRest(_b, ["element", "children"]);
  return /* @__PURE__ */ React4.createElement(Box3, __spreadProps(__spreadValues({ as: StyledTBody }, safelySpreadBoxProps3(props)), { ref, element }), children);
});
TBody.displayName = "TBody";
TBody.propTypes = TBodyPropTypes;

// src/TFoot.tsx
import * as React5 from "react";
import { Box as Box4, safelySpreadBoxProps as safelySpreadBoxProps4 } from "@twilio-paste/box";
import { styled as styled3, css as css3 } from "@twilio-paste/styling-library";
var StyledTFoot = styled3.tfoot(
  css3({
    "& > tr > td": {
      borderBottomWidth: "borderWidth0",
      borderTopWidth: "borderWidth20"
    },
    "& > tr > th": {
      borderBottomWidth: "borderWidth0"
    }
  })
);
var TFoot = React5.forwardRef((_a, ref) => {
  var _b = _a, { element = "TFOOT" } = _b, props = __objRest(_b, ["element"]);
  return /* @__PURE__ */ React5.createElement(
    Box4,
    __spreadProps(__spreadValues({}, safelySpreadBoxProps4(props)), {
      ref,
      as: StyledTFoot,
      backgroundColor: "colorBackground",
      borderTopStyle: "solid",
      borderTopWidth: "borderWidth20",
      borderTopColor: "colorBorderWeaker",
      element
    })
  );
});
TFoot.displayName = "TFoot";
TFoot.propTypes = TFootPropTypes;

// src/Tr.tsx
import * as React6 from "react";
import { Box as Box5, safelySpreadBoxProps as safelySpreadBoxProps5 } from "@twilio-paste/box";
var Tr = React6.forwardRef(
  (_a, ref) => {
    var _b = _a, { element = "TR", verticalAlign = "middle" } = _b, props = __objRest(_b, ["element", "verticalAlign"]);
    const { striped } = React6.useContext(TableContext);
    return /* @__PURE__ */ React6.createElement(
      Box5,
      __spreadProps(__spreadValues({}, safelySpreadBoxProps5(props)), {
        ref,
        as: "tr",
        element,
        verticalAlign,
        _even: { backgroundColor: striped ? "colorBackgroundRowStriped" : "transparent" },
        _last: { borderWidth: "borderWidth0" }
      })
    );
  }
);
Tr.displayName = "Tr";
Tr.propTypes = TrPropTypes;

// src/Td.tsx
import * as React7 from "react";
import { Box as Box6, safelySpreadBoxProps as safelySpreadBoxProps6 } from "@twilio-paste/box";
var Td = React7.forwardRef((_a, ref) => {
  var _b = _a, { element = "TD", textAlign = "left" } = _b, props = __objRest(_b, ["element", "textAlign"]);
  return /* @__PURE__ */ React7.createElement(
    Box6,
    __spreadProps(__spreadValues({}, safelySpreadBoxProps6(props)), {
      ref,
      as: "td",
      borderStyle: "solid",
      borderColor: "colorBorderWeaker",
      borderWidth: "borderWidth0",
      borderBottomWidth: "borderWidth10",
      element,
      fontSize: "fontSize30",
      lineHeight: "lineHeight30",
      paddingBottom: "space40",
      paddingLeft: "space50",
      paddingRight: "space50",
      paddingTop: "space40",
      position: "relative",
      textAlign,
      verticalAlign: "inherit",
      wordWrap: "break-word"
    })
  );
});
Td.displayName = "Td";
Td.propTypes = TdPropTypes;

// src/Th.tsx
import * as React8 from "react";
import { Box as Box7, safelySpreadBoxProps as safelySpreadBoxProps7 } from "@twilio-paste/box";
var Th = React8.forwardRef(
  (_a, ref) => {
    var _b = _a, { element = "TH", textAlign = "left", width } = _b, props = __objRest(_b, ["element", "textAlign", "width"]);
    return /* @__PURE__ */ React8.createElement(
      Box7,
      __spreadProps(__spreadValues({}, safelySpreadBoxProps7(props)), {
        ref,
        as: "th",
        borderBottomStyle: "solid",
        borderBottomColor: "colorBorderWeaker",
        borderBottomWidth: "borderWidth10",
        element,
        fontSize: "fontSize30",
        lineHeight: "lineHeight30",
        fontWeight: "fontWeightSemibold",
        paddingBottom: "space40",
        paddingLeft: "space50",
        paddingRight: "space50",
        paddingTop: "space40",
        position: "relative",
        textAlign,
        verticalAlign: "inherit",
        width,
        wordWrap: "break-word"
      })
    );
  }
);
Th.displayName = "Th";
Th.propTypes = ThPropTypes;
export {
  TBody,
  TBodyPropTypes,
  TFoot,
  TFootPropTypes,
  THead,
  THeadPropTypes,
  Table,
  TablePropTypes,
  Td,
  TdPropTypes,
  Th,
  ThPropTypes,
  Tr,
  TrPropTypes
};

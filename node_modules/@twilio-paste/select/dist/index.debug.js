var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Option: () => Option,
  OptionGroup: () => OptionGroup,
  Select: () => Select,
  SelectElement: () => SelectElement
});
module.exports = __toCommonJS(src_exports);

// src/Option.tsx
var React = __toESM(require("react"));
var PropTypes = __toESM(require("prop-types"));
var import_box = require("@twilio-paste/box");
var Option = React.forwardRef((_a, ref) => {
  var _b = _a, { children, element = "OPTION" } = _b, props = __objRest(_b, ["children", "element"]);
  if (props.selected) {
    console.warn('"selected" is a blocked prop on this component, please use "value" on the select element.');
  }
  return /* @__PURE__ */ React.createElement(import_box.Box, __spreadProps(__spreadValues({
    as: "option",
    ref
  }, (0, import_box.safelySpreadBoxProps)(props)), {
    element,
    size: void 0,
    height: void 0,
    width: void 0,
    backgroundColor: "inherit",
    color: "inherit",
    fontFamily: "inherit",
    lineHeight: "lineHeight50",
    paddingTop: "space30",
    paddingBottom: "space30",
    paddingLeft: "space20"
  }), children);
});
Option.displayName = "Option";
if (false) {
  Option.propTypes = {
    value: PropTypes.string.isRequired,
    children: PropTypes.node.isRequired,
    element: PropTypes.string
  };
}

// src/OptionGroup.tsx
var React2 = __toESM(require("react"));
var PropTypes2 = __toESM(require("prop-types"));
var import_box2 = require("@twilio-paste/box");
var OptionGroup = React2.forwardRef((_a, ref) => {
  var _b = _a, { label, children, element = "OPTION_GROUP" } = _b, props = __objRest(_b, ["label", "children", "element"]);
  return /* @__PURE__ */ React2.createElement(import_box2.Box, __spreadProps(__spreadValues({
    ref,
    label
  }, (0, import_box2.safelySpreadBoxProps)(props)), {
    element,
    as: "optgroup",
    backgroundColor: "inherit",
    color: "inherit",
    fontFamily: "inherit",
    fontWeight: "fontWeightMedium",
    fontStyle: "normal",
    margin: "space20"
  }), children);
});
OptionGroup.displayName = "OptionGroup";
if (false) {
  OptionGroup.propTypes = {
    label: PropTypes2.string.isRequired,
    children: PropTypes2.node.isRequired,
    element: PropTypes2.string
  };
}

// src/Select.tsx
var React3 = __toESM(require("react"));
var PropTypes3 = __toESM(require("prop-types"));
var import_box3 = require("@twilio-paste/box");
var import_ChevronDownIcon = require("@twilio-paste/icons/cjs/ChevronDownIcon");
var import_input_box = require("@twilio-paste/input-box");
var SelectElement = React3.forwardRef((_a, ref) => {
  var _b = _a, { element = "SELECT_ELEMENT", variant, size } = _b, props = __objRest(_b, ["element", "variant", "size"]);
  return /* @__PURE__ */ React3.createElement(import_box3.Box, __spreadProps(__spreadValues({}, (0, import_box3.safelySpreadBoxProps)(props)), {
    element,
    as: "select",
    ref,
    size,
    height: void 0,
    appearance: "none",
    backgroundColor: variant === "inverse" ? "colorBackgroundInverse" : "colorBackgroundBody",
    border: "none",
    borderRadius: "borderRadius20",
    boxShadow: "none",
    color: "inherit",
    cursor: "pointer",
    display: "block",
    fontFamily: "inherit",
    fontSize: "fontSize30",
    fontWeight: "fontWeightMedium",
    lineHeight: "lineHeight20",
    margin: "space0",
    outline: "none",
    paddingBottom: "space30",
    paddingLeft: "space40",
    paddingRight: "space100",
    paddingTop: "space30",
    resize: "none",
    width: "100%",
    _disabled: {
      color: variant === "inverse" ? "colorTextInverseWeaker" : "colorTextWeaker",
      cursor: "not-allowed",
      opacity: 1
    },
    variant
  }));
});
SelectElement.displayName = "SelectElement";
var Select = React3.forwardRef((_a, ref) => {
  var _b = _a, {
    disabled,
    element = "SELECT",
    hasError,
    insertBefore,
    insertAfter,
    children,
    size,
    multiple,
    variant = "default"
  } = _b, props = __objRest(_b, [
    "disabled",
    "element",
    "hasError",
    "insertBefore",
    "insertAfter",
    "children",
    "size",
    "multiple",
    "variant"
  ]);
  return /* @__PURE__ */ React3.createElement(import_input_box.InputBox, {
    disabled,
    element,
    hasError,
    insertAfter,
    insertBefore,
    variant
  }, /* @__PURE__ */ React3.createElement(import_box3.Box, {
    display: "flex",
    width: "100%",
    position: "relative"
  }, /* @__PURE__ */ React3.createElement(SelectElement, __spreadProps(__spreadValues({
    "aria-invalid": hasError,
    "data-not-selectize": "true",
    disabled,
    ref,
    element: `${element}_ELEMENT`
  }, props), {
    multiple,
    size: multiple ? size : 0,
    variant
  }), children), !multiple && /* @__PURE__ */ React3.createElement(import_input_box.InputChevronWrapper, {
    element: `${element}_CHEVRON_WRAPPER`
  }, /* @__PURE__ */ React3.createElement(import_ChevronDownIcon.ChevronDownIcon, {
    "aria-hidden": "true",
    decorative: true,
    element: `${element}_ICON`,
    color: (0, import_input_box.getInputChevronIconColor)(variant, disabled, false),
    size: "sizeIcon30"
  }))));
});
Select.displayName = "Select";
if (false) {
  Select.propTypes = {
    id: PropTypes3.string,
    hasError: PropTypes3.bool,
    onChange: PropTypes3.func,
    element: PropTypes3.string
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Option,
  OptionGroup,
  Select,
  SelectElement
});

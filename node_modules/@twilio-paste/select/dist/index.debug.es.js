var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/Option.tsx
import * as React from "react";
import * as PropTypes from "prop-types";
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
var Option = React.forwardRef((_a, ref) => {
  var _b = _a, { children, element = "OPTION" } = _b, props = __objRest(_b, ["children", "element"]);
  if (props.selected) {
    console.warn('"selected" is a blocked prop on this component, please use "value" on the select element.');
  }
  return /* @__PURE__ */ React.createElement(Box, __spreadProps(__spreadValues({
    as: "option",
    ref
  }, safelySpreadBoxProps(props)), {
    element,
    size: void 0,
    height: void 0,
    width: void 0,
    backgroundColor: "inherit",
    color: "inherit",
    fontFamily: "inherit",
    lineHeight: "lineHeight50",
    paddingTop: "space30",
    paddingBottom: "space30",
    paddingLeft: "space20"
  }), children);
});
Option.displayName = "Option";
if (false) {
  Option.propTypes = {
    value: PropTypes.string.isRequired,
    children: PropTypes.node.isRequired,
    element: PropTypes.string
  };
}

// src/OptionGroup.tsx
import * as React2 from "react";
import * as PropTypes2 from "prop-types";
import { Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
var OptionGroup = React2.forwardRef((_a, ref) => {
  var _b = _a, { label, children, element = "OPTION_GROUP" } = _b, props = __objRest(_b, ["label", "children", "element"]);
  return /* @__PURE__ */ React2.createElement(Box2, __spreadProps(__spreadValues({
    ref,
    label
  }, safelySpreadBoxProps2(props)), {
    element,
    as: "optgroup",
    backgroundColor: "inherit",
    color: "inherit",
    fontFamily: "inherit",
    fontWeight: "fontWeightMedium",
    fontStyle: "normal",
    margin: "space20"
  }), children);
});
OptionGroup.displayName = "OptionGroup";
if (false) {
  OptionGroup.propTypes = {
    label: PropTypes2.string.isRequired,
    children: PropTypes2.node.isRequired,
    element: PropTypes2.string
  };
}

// src/Select.tsx
import * as React3 from "react";
import * as PropTypes3 from "prop-types";
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps3 } from "@twilio-paste/box";
import { ChevronDownIcon } from "@twilio-paste/icons/esm/ChevronDownIcon";
import { InputBox, InputChevronWrapper, getInputChevronIconColor } from "@twilio-paste/input-box";
var SelectElement = React3.forwardRef((_a, ref) => {
  var _b = _a, { element = "SELECT_ELEMENT", variant, size } = _b, props = __objRest(_b, ["element", "variant", "size"]);
  return /* @__PURE__ */ React3.createElement(Box3, __spreadProps(__spreadValues({}, safelySpreadBoxProps3(props)), {
    element,
    as: "select",
    ref,
    size,
    height: void 0,
    appearance: "none",
    backgroundColor: variant === "inverse" ? "colorBackgroundInverse" : "colorBackgroundBody",
    border: "none",
    borderRadius: "borderRadius20",
    boxShadow: "none",
    color: "inherit",
    cursor: "pointer",
    display: "block",
    fontFamily: "inherit",
    fontSize: "fontSize30",
    fontWeight: "fontWeightMedium",
    lineHeight: "lineHeight20",
    margin: "space0",
    outline: "none",
    paddingBottom: "space30",
    paddingLeft: "space40",
    paddingRight: "space100",
    paddingTop: "space30",
    resize: "none",
    width: "100%",
    _disabled: {
      color: variant === "inverse" ? "colorTextInverseWeaker" : "colorTextWeaker",
      cursor: "not-allowed",
      opacity: 1
    },
    variant
  }));
});
SelectElement.displayName = "SelectElement";
var Select = React3.forwardRef((_a, ref) => {
  var _b = _a, {
    disabled,
    element = "SELECT",
    hasError,
    insertBefore,
    insertAfter,
    children,
    size,
    multiple,
    variant = "default"
  } = _b, props = __objRest(_b, [
    "disabled",
    "element",
    "hasError",
    "insertBefore",
    "insertAfter",
    "children",
    "size",
    "multiple",
    "variant"
  ]);
  return /* @__PURE__ */ React3.createElement(InputBox, {
    disabled,
    element,
    hasError,
    insertAfter,
    insertBefore,
    variant
  }, /* @__PURE__ */ React3.createElement(Box3, {
    display: "flex",
    width: "100%",
    position: "relative"
  }, /* @__PURE__ */ React3.createElement(SelectElement, __spreadProps(__spreadValues({
    "aria-invalid": hasError,
    "data-not-selectize": "true",
    disabled,
    ref,
    element: `${element}_ELEMENT`
  }, props), {
    multiple,
    size: multiple ? size : 0,
    variant
  }), children), !multiple && /* @__PURE__ */ React3.createElement(InputChevronWrapper, {
    element: `${element}_CHEVRON_WRAPPER`
  }, /* @__PURE__ */ React3.createElement(ChevronDownIcon, {
    "aria-hidden": "true",
    decorative: true,
    element: `${element}_ICON`,
    color: getInputChevronIconColor(variant, disabled, false),
    size: "sizeIcon30"
  }))));
});
Select.displayName = "Select";
if (false) {
  Select.propTypes = {
    id: PropTypes3.string,
    hasError: PropTypes3.bool,
    onChange: PropTypes3.func,
    element: PropTypes3.string
  };
}
export {
  Option,
  OptionGroup,
  Select,
  SelectElement
};

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/HelpText.tsx
import * as React from "react";
import PropTypes from "prop-types";
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { ErrorIcon } from "@twilio-paste/icons/esm/ErrorIcon";
import { SuccessIcon } from "@twilio-paste/icons/esm/SuccessIcon";
import { WarningIcon } from "@twilio-paste/icons/esm/WarningIcon";
var HelpTextVariants = {
  DEFAULT: "default",
  ERROR: "error",
  ERROR_INVERSE: "error_inverse",
  INVERSE: "inverse",
  SUCCESS: "success",
  WARNING: "warning"
};
var VariantOptions = {
  [HelpTextVariants.DEFAULT]: {
    textColor: "colorTextWeak",
    icon: null
  },
  [HelpTextVariants.INVERSE]: {
    textColor: "colorTextInverseWeak",
    icon: null
  },
  [HelpTextVariants.ERROR]: {
    textColor: "colorTextError",
    icon: /* @__PURE__ */ React.createElement(Box, { flexShrink: 0 }, /* @__PURE__ */ React.createElement(ErrorIcon, { color: "colorTextError", decorative: true, size: "sizeIcon20" }))
  },
  [HelpTextVariants.ERROR_INVERSE]: {
    textColor: "colorTextErrorWeak",
    icon: /* @__PURE__ */ React.createElement(Box, { flexShrink: 0 }, /* @__PURE__ */ React.createElement(ErrorIcon, { color: "colorTextErrorWeak", decorative: true, size: "sizeIcon20" }))
  },
  [HelpTextVariants.SUCCESS]: {
    textColor: "colorTextSuccess",
    icon: /* @__PURE__ */ React.createElement(Box, { flexShrink: 0 }, /* @__PURE__ */ React.createElement(SuccessIcon, { color: "colorTextIconSuccess", decorative: true, size: "sizeIcon20" }))
  },
  [HelpTextVariants.WARNING]: {
    textColor: "colorTextWarning",
    icon: /* @__PURE__ */ React.createElement(Box, { flexShrink: 0 }, /* @__PURE__ */ React.createElement(WarningIcon, { color: "colorTextWarning", decorative: true, size: "sizeIcon20" }))
  }
};
var HelpText = React.forwardRef(
  (_a, ref) => {
    var _b = _a, { marginTop, children, variant = "default", element = "HELP_TEXT" } = _b, props = __objRest(_b, ["marginTop", "children", "variant", "element"]);
    const { textColor, icon } = VariantOptions[variant];
    return /* @__PURE__ */ React.createElement(
      Box,
      __spreadProps(__spreadValues({}, safelySpreadBoxProps(props)), {
        display: "flex",
        columnGap: "space20",
        marginTop: marginTop || "space30",
        ref,
        element,
        variant,
        as: "div",
        color: textColor,
        fontSize: "fontSize30",
        lineHeight: "lineHeight30"
      }),
      icon,
      /* @__PURE__ */ React.createElement("span", null, children)
    );
  }
);
HelpText.displayName = "HelpText";
HelpText.propTypes = {
  marginTop: PropTypes.oneOf(["space0"]),
  element: PropTypes.string
};
export {
  HelpText,
  HelpTextVariants
};

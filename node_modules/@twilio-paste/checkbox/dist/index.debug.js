"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Checkbox: () => Checkbox,
  CheckboxDisclaimer: () => CheckboxDisclaimer,
  CheckboxGroup: () => CheckboxGroup
});
module.exports = __toCommonJS(src_exports);

// src/Checkbox.tsx
var React2 = __toESM(require("react"));
var import_prop_types = __toESM(require("prop-types"));
var import_uid_library = require("@twilio-paste/uid-library");
var import_box = require("@twilio-paste/box");
var import_CheckboxCheckIcon = require("@twilio-paste/icons/cjs/CheckboxCheckIcon");
var import_MinusIcon = require("@twilio-paste/icons/cjs/MinusIcon");
var import_base_radio_checkbox = require("@twilio-paste/base-radio-checkbox");
var import_media_object = require("@twilio-paste/media-object");
var import_label = require("@twilio-paste/label");

// src/CheckboxContext.tsx
var React = __toESM(require("react"));
var CheckboxContext = React.createContext({
  disabled: false,
  name: void 0,
  hasError: void 0,
  onChange: () => {
  }
});

// src/Checkbox.tsx
var selectAllStyleProps = {
  paddingTop: "space20",
  paddingRight: "space30",
  paddingBottom: "space20",
  paddingLeft: "space20",
  borderRadius: "borderRadius10",
  backgroundColor: "colorBackground"
};
var selectAllActiveStyleProps = __spreadProps(__spreadValues({}, selectAllStyleProps), {
  backgroundColor: "colorBackgroundPrimaryWeakest"
});
var selectAllChildStyleProps = {
  paddingLeft: "space30",
  paddingRight: "space30"
};
var HiddenCheckbox = React2.forwardRef((props, ref) => /* @__PURE__ */ React2.createElement(
  import_box.Box,
  __spreadProps(__spreadValues({}, props), {
    ref,
    as: "input",
    type: "checkbox",
    size: "size0",
    border: "none",
    overflow: "hidden",
    padding: "space0",
    margin: "space0",
    whiteSpace: "nowrap",
    textTransform: "none",
    position: "absolute",
    clip: "rect(0 0 0 0)"
  })
));
HiddenCheckbox.displayName = "HiddenCheckbox";
var CheckboxIcon = ({ checked, element, indeterminate }) => {
  if (indeterminate) {
    return /* @__PURE__ */ React2.createElement(import_MinusIcon.MinusIcon, { element, decorative: true, color: "inherit", size: "sizeIcon10" });
  }
  return /* @__PURE__ */ React2.createElement(
    import_CheckboxCheckIcon.CheckboxCheckIcon,
    {
      element,
      display: !checked ? "none" : "block",
      decorative: true,
      color: "inherit",
      size: "sizeIcon10"
    }
  );
};
CheckboxIcon.displayName = "CheckboxIcon";
var Checkbox = React2.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      checked,
      defaultChecked,
      element = "CHECKBOX",
      children,
      helpText,
      id,
      indeterminate,
      isSelectAll,
      isSelectAllChild,
      required,
      onChange
    } = _b, props = __objRest(_b, [
      "checked",
      "defaultChecked",
      "element",
      "children",
      "helpText",
      "id",
      "indeterminate",
      "isSelectAll",
      "isSelectAllChild",
      "required",
      "onChange"
    ]);
    if (checked != null && defaultChecked != null) {
      throw new Error(
        `[Paste Checkbox] Do not provide both 'defaultChecked' and 'checked' to Checkbox at the same time. Please consider if you want this component to be controlled or uncontrolled.`
      );
    }
    const [checkedState, setCheckedState] = React2.useState(defaultChecked);
    const checkboxGroupContext = React2.useContext(CheckboxContext);
    const helpTextId = (0, import_uid_library.useUID)();
    const checkboxId = id ? id : (0, import_uid_library.useUID)();
    const isControlled = React2.useMemo(() => checked !== void 0, []);
    const mergedChecked = isControlled ? checked : checkedState;
    const handleChange = React2.useCallback(
      (event) => {
        if (!isControlled) {
          setCheckedState(event.target.checked);
        } else if (onChange) {
          onChange(event);
        } else {
          checkboxGroupContext.onChange(event);
        }
      },
      [onChange, checkboxGroupContext.onChange]
    );
    const disabled = props.disabled != null ? props.disabled : checkboxGroupContext.disabled;
    const name = props.name != null ? props.name : checkboxGroupContext.name;
    const hasError = props.hasError != null ? props.hasError : checkboxGroupContext.hasError;
    let selectAllStyles = {};
    if (isSelectAll) {
      selectAllStyles = !disabled && (mergedChecked || indeterminate) ? selectAllActiveStyleProps : selectAllStyleProps;
    }
    if (isSelectAllChild) {
      selectAllStyles = selectAllChildStyleProps;
    }
    return /* @__PURE__ */ React2.createElement(import_box.Box, __spreadValues({ element, display: "inline-flex", position: "relative", flexDirection: "column" }, selectAllStyles), /* @__PURE__ */ React2.createElement(
      HiddenCheckbox,
      __spreadProps(__spreadValues({}, (0, import_box.safelySpreadBoxProps)(props)), {
        checked,
        defaultChecked,
        disabled,
        name,
        onChange: handleChange,
        "aria-describedby": helpTextId,
        "aria-checked": indeterminate ? "mixed" : checked,
        "aria-invalid": hasError,
        id: checkboxId,
        required,
        ref
      })
    ), /* @__PURE__ */ React2.createElement(import_base_radio_checkbox.BaseRadioCheckboxLabel, { disabled, htmlFor: checkboxId }, /* @__PURE__ */ React2.createElement(
      import_base_radio_checkbox.BaseRadioCheckboxControl,
      {
        alignItems: "center",
        borderRadius: "borderRadius10",
        element: `${element}_CONTROL`,
        disabled,
        position: "relative",
        type: "checkbox"
      },
      /* @__PURE__ */ React2.createElement(CheckboxIcon, { element: `${element}_ICON`, checked: mergedChecked, indeterminate })
    ), /* @__PURE__ */ React2.createElement(
      import_base_radio_checkbox.BaseRadioCheckboxLabelText,
      {
        element: `${element}_LABEL_TEXT`,
        fontWeight: isSelectAll ? null : "fontWeightMedium"
      },
      /* @__PURE__ */ React2.createElement(import_media_object.MediaObject, { verticalAlign: "top" }, required && /* @__PURE__ */ React2.createElement(import_media_object.MediaFigure, { spacing: "space20" }, /* @__PURE__ */ React2.createElement(import_label.RequiredDot, null)), /* @__PURE__ */ React2.createElement(import_media_object.MediaBody, null, children))
    )), helpText && /* @__PURE__ */ React2.createElement(import_base_radio_checkbox.BaseRadioCheckboxHelpText, { element: `${element}_HELP_TEXT_WRAPPER`, helpTextId }, helpText));
  }
);
Checkbox.displayName = "Checkbox";
Checkbox.propTypes = {
  children: import_prop_types.default.node.isRequired,
  disabled: import_prop_types.default.bool,
  name: import_prop_types.default.string,
  onChange: import_prop_types.default.func,
  hasError: import_prop_types.default.bool,
  helpText: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.node]),
  id: import_prop_types.default.string,
  indeterminate: import_prop_types.default.bool,
  isSelectAll: import_prop_types.default.bool,
  isSelectAllChild: import_prop_types.default.bool,
  element: import_prop_types.default.string,
  defaultChecked: import_prop_types.default.bool
};

// src/CheckboxGroup.tsx
var React3 = __toESM(require("react"));
var import_prop_types2 = require("prop-types");
var import_inline_control_group = require("@twilio-paste/inline-control-group");
var CheckboxGroup = React3.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      children,
      element = "CHECKBOX_GROUP",
      disabled = false,
      errorText,
      isSelectAll = false,
      name,
      onChange,
      orientation = "vertical",
      i18nRequiredLabel = "(required)"
    } = _b, props = __objRest(_b, [
      "children",
      "element",
      "disabled",
      "errorText",
      "isSelectAll",
      "name",
      "onChange",
      "orientation",
      "i18nRequiredLabel"
    ]);
    const onChangeHandler = React3.useCallback(
      (event) => {
        if (onChange != null) {
          onChange(event.target.checked);
        }
      },
      [onChange]
    );
    const contextValue = React3.useMemo(() => {
      return {
        disabled,
        name,
        onChange: onChangeHandler,
        hasError: errorText ? true : void 0
      };
    }, [disabled, name, onChangeHandler]);
    return /* @__PURE__ */ React3.createElement(CheckboxContext.Provider, { value: contextValue }, /* @__PURE__ */ React3.createElement(
      import_inline_control_group.InlineControlGroup,
      __spreadProps(__spreadValues({}, props), {
        element,
        disabled,
        errorText,
        name,
        orientation,
        ref,
        i18nRequiredLabel
      }),
      React3.Children.map(children, (child, index) => {
        return React3.isValidElement(child) ? React3.cloneElement(child, {
          isSelectAll: isSelectAll && index === 0,
          isSelectAllChild: isSelectAll && orientation === "vertical" && index !== 0
        }) : child;
      })
    ));
  }
);
CheckboxGroup.displayName = "CheckboxGroup";
if (false) {
  CheckboxGroup.propTypes = {
    isSelectAll: PropTypes2.bool,
    name: PropTypes2.string.isRequired,
    element: PropTypes2.string,
    onChange: PropTypes2.func,
    disabled: PropTypes2.bool,
    errorText: PropTypes2.string,
    helpText: PropTypes2.string,
    orientation: PropTypes2.oneOf(["vertical", "horizontal"]),
    i18nRequiredLabel: PropTypes2.string
  };
}

// src/CheckboxDisclaimer.tsx
var React4 = __toESM(require("react"));
var import_prop_types3 = __toESM(require("prop-types"));
var import_box2 = require("@twilio-paste/box");
var import_help_text = require("@twilio-paste/help-text");
var CheckboxDisclaimer = React4.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, element = "CHECKBOX_DISCLAIMER", errorText } = _b, props = __objRest(_b, ["children", "element", "errorText"]);
    return /* @__PURE__ */ React4.createElement(React4.Fragment, null, /* @__PURE__ */ React4.createElement(import_box2.Box, { element, backgroundColor: "colorBackground", borderRadius: "borderRadius20", padding: "space50" }, /* @__PURE__ */ React4.createElement(Checkbox, __spreadProps(__spreadValues({}, props), { hasError: errorText != null, ref }), children)), errorText && /* @__PURE__ */ React4.createElement(import_box2.Box, { marginTop: "space30", element: `${element}_ERROR_TEXT_WRAPPER`, marginLeft: "space50" }, /* @__PURE__ */ React4.createElement(import_help_text.HelpText, { variant: "error" }, errorText)));
  }
);
CheckboxDisclaimer.displayName = "CheckboxDisclaimer";
CheckboxDisclaimer.propTypes = {
  children: import_prop_types3.default.node.isRequired,
  errorText: import_prop_types3.default.oneOfType([import_prop_types3.default.string, import_prop_types3.default.node]),
  element: import_prop_types3.default.string
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Checkbox,
  CheckboxDisclaimer,
  CheckboxGroup
});

var __defProp=Object.defineProperty,__defProps=Object.defineProperties;var __getOwnPropDescs=Object.getOwnPropertyDescriptors;var __getOwnPropSymbols=Object.getOwnPropertySymbols;var __hasOwnProp=Object.prototype.hasOwnProperty,__propIsEnum=Object.prototype.propertyIsEnumerable;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:!0,configurable:!0,writable:!0,value}):obj[key]=value,__spreadValues=(a,b)=>{for(var prop in b||(b={}))__hasOwnProp.call(b,prop)&&__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(b))__propIsEnum.call(b,prop)&&__defNormalProp(a,prop,b[prop]);return a},__spreadProps=(a,b)=>__defProps(a,__getOwnPropDescs(b));var __objRest=(source,exclude)=>{var target={};for(var prop in source)__hasOwnProp.call(source,prop)&&exclude.indexOf(prop)<0&&(target[prop]=source[prop]);if(source!=null&&__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(source))exclude.indexOf(prop)<0&&__propIsEnum.call(source,prop)&&(target[prop]=source[prop]);return target};import*as React2 from"react";import PropTypes from"prop-types";import{useUID}from"@twilio-paste/uid-library";import{Box,safelySpreadBoxProps}from"@twilio-paste/box";import{CheckboxCheckIcon}from"@twilio-paste/icons/esm/CheckboxCheckIcon";import{MinusIcon}from"@twilio-paste/icons/esm/MinusIcon";import{BaseRadioCheckboxControl,BaseRadioCheckboxLabel,BaseRadioCheckboxLabelText,BaseRadioCheckboxHelpText}from"@twilio-paste/base-radio-checkbox";import{MediaObject,MediaFigure,MediaBody}from"@twilio-paste/media-object";import{RequiredDot}from"@twilio-paste/label";import*as React from"react";var CheckboxContext=React.createContext({disabled:!1,name:void 0,hasError:void 0,onChange:()=>{}});var selectAllStyleProps={paddingTop:"space20",paddingRight:"space30",paddingBottom:"space20",paddingLeft:"space20",borderRadius:"borderRadius10",backgroundColor:"colorBackground"},selectAllActiveStyleProps=__spreadProps(__spreadValues({},selectAllStyleProps),{backgroundColor:"colorBackgroundPrimaryWeakest"}),selectAllChildStyleProps={paddingLeft:"space30",paddingRight:"space30"},HiddenCheckbox=React2.forwardRef((props,ref)=>React2.createElement(Box,__spreadProps(__spreadValues({},props),{ref,as:"input",type:"checkbox",size:"size0",border:"none",overflow:"hidden",padding:"space0",margin:"space0",whiteSpace:"nowrap",textTransform:"none",position:"absolute",clip:"rect(0 0 0 0)"})));HiddenCheckbox.displayName="HiddenCheckbox";var CheckboxIcon=({checked,element,indeterminate})=>indeterminate?React2.createElement(MinusIcon,{element,decorative:!0,color:"inherit",size:"sizeIcon10"}):React2.createElement(CheckboxCheckIcon,{element,display:checked?"block":"none",decorative:!0,color:"inherit",size:"sizeIcon10"});CheckboxIcon.displayName="CheckboxIcon";var Checkbox=React2.forwardRef((_a,ref)=>{var _b=_a,{checked,defaultChecked,element="CHECKBOX",children,helpText,id,indeterminate,isSelectAll,isSelectAllChild,required,onChange}=_b,props=__objRest(_b,["checked","defaultChecked","element","children","helpText","id","indeterminate","isSelectAll","isSelectAllChild","required","onChange"]);if(checked!=null&&defaultChecked!=null)throw new Error("[Paste Checkbox] Do not provide both 'defaultChecked' and 'checked' to Checkbox at the same time. Please consider if you want this component to be controlled or uncontrolled.");let[checkedState,setCheckedState]=React2.useState(defaultChecked),checkboxGroupContext=React2.useContext(CheckboxContext),helpTextId=useUID(),checkboxId=id||useUID(),isControlled=React2.useMemo(()=>checked!==void 0,[]),mergedChecked=isControlled?checked:checkedState,handleChange=React2.useCallback(event=>{isControlled?onChange?onChange(event):checkboxGroupContext.onChange(event):setCheckedState(event.target.checked)},[onChange,checkboxGroupContext.onChange]),disabled=props.disabled!=null?props.disabled:checkboxGroupContext.disabled,name=props.name!=null?props.name:checkboxGroupContext.name,hasError=props.hasError!=null?props.hasError:checkboxGroupContext.hasError,selectAllStyles={};return isSelectAll&&(selectAllStyles=!disabled&&(mergedChecked||indeterminate)?selectAllActiveStyleProps:selectAllStyleProps),isSelectAllChild&&(selectAllStyles=selectAllChildStyleProps),React2.createElement(Box,__spreadValues({element,display:"inline-flex",position:"relative",flexDirection:"column"},selectAllStyles),React2.createElement(HiddenCheckbox,__spreadProps(__spreadValues({},safelySpreadBoxProps(props)),{checked,defaultChecked,disabled,name,onChange:handleChange,"aria-describedby":helpTextId,"aria-checked":indeterminate?"mixed":checked,"aria-invalid":hasError,id:checkboxId,required,ref})),React2.createElement(BaseRadioCheckboxLabel,{disabled,htmlFor:checkboxId},React2.createElement(BaseRadioCheckboxControl,{alignItems:"center",borderRadius:"borderRadius10",element:`${element}_CONTROL`,disabled,position:"relative",type:"checkbox"},React2.createElement(CheckboxIcon,{element:`${element}_ICON`,checked:mergedChecked,indeterminate})),React2.createElement(BaseRadioCheckboxLabelText,{element:`${element}_LABEL_TEXT`,fontWeight:isSelectAll?null:"fontWeightMedium"},React2.createElement(MediaObject,{verticalAlign:"top"},required&&React2.createElement(MediaFigure,{spacing:"space20"},React2.createElement(RequiredDot,null)),React2.createElement(MediaBody,null,children)))),helpText&&React2.createElement(BaseRadioCheckboxHelpText,{element:`${element}_HELP_TEXT_WRAPPER`,helpTextId},helpText))});Checkbox.displayName="Checkbox";Checkbox.propTypes={children:PropTypes.node.isRequired,disabled:PropTypes.bool,name:PropTypes.string,onChange:PropTypes.func,hasError:PropTypes.bool,helpText:PropTypes.oneOfType([PropTypes.string,PropTypes.node]),id:PropTypes.string,indeterminate:PropTypes.bool,isSelectAll:PropTypes.bool,isSelectAllChild:PropTypes.bool,element:PropTypes.string,defaultChecked:PropTypes.bool};import*as React3 from"react";import"prop-types";import{InlineControlGroup}from"@twilio-paste/inline-control-group";var CheckboxGroup=React3.forwardRef((_a,ref)=>{var _b=_a,{children,element="CHECKBOX_GROUP",disabled=!1,errorText,isSelectAll=!1,name,onChange,orientation="vertical",i18nRequiredLabel="(required)"}=_b,props=__objRest(_b,["children","element","disabled","errorText","isSelectAll","name","onChange","orientation","i18nRequiredLabel"]);let onChangeHandler=React3.useCallback(event=>{onChange!=null&&onChange(event.target.checked)},[onChange]),contextValue=React3.useMemo(()=>({disabled,name,onChange:onChangeHandler,hasError:errorText?!0:void 0}),[disabled,name,onChangeHandler]);return React3.createElement(CheckboxContext.Provider,{value:contextValue},React3.createElement(InlineControlGroup,__spreadProps(__spreadValues({},props),{element,disabled,errorText,name,orientation,ref,i18nRequiredLabel}),React3.Children.map(children,(child,index)=>React3.isValidElement(child)?React3.cloneElement(child,{isSelectAll:isSelectAll&&index===0,isSelectAllChild:isSelectAll&&orientation==="vertical"&&index!==0}):child)))});CheckboxGroup.displayName="CheckboxGroup";import*as React4 from"react";import PropTypes3 from"prop-types";import{Box as Box2}from"@twilio-paste/box";import{HelpText}from"@twilio-paste/help-text";var CheckboxDisclaimer=React4.forwardRef((_a,ref)=>{var _b=_a,{children,element="CHECKBOX_DISCLAIMER",errorText}=_b,props=__objRest(_b,["children","element","errorText"]);return React4.createElement(React4.Fragment,null,React4.createElement(Box2,{element,backgroundColor:"colorBackground",borderRadius:"borderRadius20",padding:"space50"},React4.createElement(Checkbox,__spreadProps(__spreadValues({},props),{hasError:errorText!=null,ref}),children)),errorText&&React4.createElement(Box2,{marginTop:"space30",element:`${element}_ERROR_TEXT_WRAPPER`,marginLeft:"space50"},React4.createElement(HelpText,{variant:"error"},errorText)))});CheckboxDisclaimer.displayName="CheckboxDisclaimer";CheckboxDisclaimer.propTypes={children:PropTypes3.node.isRequired,errorText:PropTypes3.oneOfType([PropTypes3.string,PropTypes3.node]),element:PropTypes3.string};export{Checkbox,CheckboxDisclaimer,CheckboxGroup};

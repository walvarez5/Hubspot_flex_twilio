var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/Toast.tsx
import * as React6 from "react";
import { Button } from "@twilio-paste/button";
import { CloseIcon } from "@twilio-paste/icons/esm/CloseIcon";
import { ErrorIcon } from "@twilio-paste/icons/esm/ErrorIcon";
import { NeutralIcon } from "@twilio-paste/icons/esm/NeutralIcon";
import { SuccessIcon } from "@twilio-paste/icons/esm/SuccessIcon";
import { WarningIcon } from "@twilio-paste/icons/esm/WarningIcon";
import { MediaObject, MediaFigure, MediaBody } from "@twilio-paste/media-object";

// ../screen-reader-only/dist/index.es.js
import * as React from "react";
import "prop-types";
import { Box } from "@twilio-paste/box";
var __defProp2 = Object.defineProperty;
var __defProps2 = Object.defineProperties;
var __getOwnPropDescs2 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols2 = Object.getOwnPropertySymbols;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __propIsEnum2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues2 = (a, b) => {
  for (var prop in b || (b = {}))
    __hasOwnProp2.call(b, prop) && __defNormalProp2(a, prop, b[prop]);
  if (__getOwnPropSymbols2)
    for (var prop of __getOwnPropSymbols2(b))
      __propIsEnum2.call(b, prop) && __defNormalProp2(a, prop, b[prop]);
  return a;
};
var __spreadProps2 = (a, b) => __defProps2(a, __getOwnPropDescs2(b));
var __objRest2 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    __hasOwnProp2.call(source, prop) && exclude.indexOf(prop) < 0 && (target[prop] = source[prop]);
  if (source != null && __getOwnPropSymbols2)
    for (var prop of __getOwnPropSymbols2(source))
      exclude.indexOf(prop) < 0 && __propIsEnum2.call(source, prop) && (target[prop] = source[prop]);
  return target;
};
var ScreenReaderOnly = React.forwardRef((_a, ref) => {
  var _b = _a, { as = "span", children } = _b, props = __objRest2(_b, ["as", "children"]);
  return React.createElement(Box, __spreadProps2(__spreadValues2({}, props), { as, border: "none", clip: "rect(0 0 0 0)", height: "1px", margin: "spaceNegative10", overflow: "hidden", padding: "space0", position: "absolute", ref, textTransform: "none", whiteSpace: "nowrap", width: "1px" }), children);
});
ScreenReaderOnly.displayName = "ScreenReaderOnly";

// src/ErrorToast.tsx
import * as React2 from "react";
import { Box as Box2, safelySpreadBoxProps } from "@twilio-paste/box";

// src/propTypes.ts
import PropTypes from "prop-types";

// src/constants.ts
var ToastVariantObject = {
  ERROR: "error",
  NEUTRAL: "neutral",
  SUCCESS: "success",
  WARNING: "warning"
};

// src/propTypes.ts
var ToastPropTypes = {
  children: PropTypes.node.isRequired,
  onDismiss: PropTypes.func,
  variant: PropTypes.oneOf(["error", "neutral", "success", "warning"]),
  i18nDismissLabel: PropTypes.string,
  i18nErrorLabel: PropTypes.string,
  i18nNeutralLabel: PropTypes.string,
  i18nSuccessLabel: PropTypes.string,
  i18nWarningLabel: PropTypes.string
};
var ToastPortalPropTypes = {
  children: PropTypes.node.isRequired,
  __console_patch: PropTypes.bool
};
var ToastContainerPropTypes = {
  children: PropTypes.node.isRequired,
  __console_patch: PropTypes.bool
};
var ToasterPropTypes = {
  toasts: PropTypes.arrayOf(
    PropTypes.shape({
      id: PropTypes.string.isRequired,
      message: PropTypes.node.isRequired,
      setFocus: PropTypes.bool,
      variant: PropTypes.oneOf(Object.values(ToastVariantObject)).isRequired
    })
  ).isRequired,
  pop: PropTypes.func.isRequired,
  __console_patch: PropTypes.bool
};

// src/ErrorToast.tsx
var ErrorToast = React2.forwardRef((_a, ref) => {
  var _b = _a, { element = "TOAST", variant } = _b, props = __objRest(_b, ["element", "variant"]);
  return /* @__PURE__ */ React2.createElement(
    Box2,
    __spreadProps(__spreadValues({}, safelySpreadBoxProps(props)), {
      ref,
      backgroundColor: "colorBackgroundBody",
      borderColor: "colorBorderWeaker",
      borderRadius: "borderRadius20",
      borderStyle: "solid",
      borderWidth: "borderWidth10",
      borderLeftWidth: "borderWidth30",
      borderLeftColor: "colorBorderErrorWeak",
      boxShadow: "shadowHigh",
      element,
      padding: "space60",
      variant,
      width: "size40"
    }),
    props.children
  );
});
ErrorToast.displayName = "ErrorToast";
ErrorToast.propTypes = ToastPropTypes;

// src/NeutralToast.tsx
import * as React3 from "react";
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
var NeutralToast = React3.forwardRef((_a, ref) => {
  var _b = _a, { element = "TOAST", variant } = _b, props = __objRest(_b, ["element", "variant"]);
  return /* @__PURE__ */ React3.createElement(
    Box3,
    __spreadProps(__spreadValues({}, safelySpreadBoxProps2(props)), {
      ref,
      backgroundColor: "colorBackgroundBody",
      borderColor: "colorBorderWeaker",
      borderRadius: "borderRadius20",
      borderStyle: "solid",
      borderWidth: "borderWidth10",
      borderLeftWidth: "borderWidth30",
      borderLeftColor: "colorBorderNeutralWeak",
      boxShadow: "shadowHigh",
      element,
      padding: "space60",
      variant,
      width: "size40"
    }),
    props.children
  );
});
NeutralToast.displayName = "NeutralToast";
NeutralToast.propTypes = ToastPropTypes;

// src/SuccessToast.tsx
import * as React4 from "react";
import { Box as Box4, safelySpreadBoxProps as safelySpreadBoxProps3 } from "@twilio-paste/box";
var SuccessToast = React4.forwardRef((_a, ref) => {
  var _b = _a, { element = "TOAST", variant } = _b, props = __objRest(_b, ["element", "variant"]);
  return /* @__PURE__ */ React4.createElement(
    Box4,
    __spreadProps(__spreadValues({}, safelySpreadBoxProps3(props)), {
      ref,
      backgroundColor: "colorBackgroundBody",
      borderColor: "colorBorderWeaker",
      borderRadius: "borderRadius20",
      borderStyle: "solid",
      borderWidth: "borderWidth10",
      borderLeftWidth: "borderWidth30",
      borderLeftColor: "colorBorderSuccessWeak",
      boxShadow: "shadowHigh",
      element,
      padding: "space60",
      variant,
      width: "size40"
    }),
    props.children
  );
});
SuccessToast.displayName = "SuccessToast";
SuccessToast.propTypes = ToastPropTypes;

// src/WarningToast.tsx
import * as React5 from "react";
import { Box as Box5, safelySpreadBoxProps as safelySpreadBoxProps4 } from "@twilio-paste/box";
var WarningToast = React5.forwardRef((_a, ref) => {
  var _b = _a, { element = "TOAST", variant } = _b, props = __objRest(_b, ["element", "variant"]);
  return /* @__PURE__ */ React5.createElement(
    Box5,
    __spreadProps(__spreadValues({}, safelySpreadBoxProps4(props)), {
      ref,
      backgroundColor: "colorBackgroundBody",
      borderColor: "colorBorderWeaker",
      borderRadius: "borderRadius20",
      borderStyle: "solid",
      borderWidth: "borderWidth10",
      borderLeftWidth: "borderWidth30",
      borderLeftColor: "colorBorderWarningWeak",
      boxShadow: "shadowHigh",
      element,
      padding: "space60",
      variant,
      width: "size40"
    }),
    props.children
  );
});
WarningToast.displayName = "WarningToast";
WarningToast.propTypes = ToastPropTypes;

// src/Toast.tsx
var ToastComponentVariants = {
  error: ErrorToast,
  neutral: NeutralToast,
  success: SuccessToast,
  warning: WarningToast
};
var renderToastIcon = (variant, title, element) => {
  switch (variant) {
    case ToastVariantObject.ERROR:
      return /* @__PURE__ */ React6.createElement(
        ErrorIcon,
        {
          color: "colorTextIconError",
          decorative: false,
          title,
          element: `${element}_ICON`,
          size: "sizeIcon20"
        }
      );
    case ToastVariantObject.SUCCESS:
      return /* @__PURE__ */ React6.createElement(
        SuccessIcon,
        {
          color: "colorTextIconSuccess",
          decorative: false,
          title,
          element: `${element}_ICON`,
          size: "sizeIcon20"
        }
      );
    case ToastVariantObject.WARNING:
      return /* @__PURE__ */ React6.createElement(
        WarningIcon,
        {
          color: "colorTextIconWarning",
          decorative: false,
          title,
          element: `${element}_ICON`,
          size: "sizeIcon20"
        }
      );
    case ToastVariantObject.NEUTRAL:
    default:
      return /* @__PURE__ */ React6.createElement(
        NeutralIcon,
        {
          color: "colorTextIconNeutral",
          decorative: false,
          title,
          element: `${element}_ICON`,
          size: "sizeIcon20"
        }
      );
  }
};
var Toast = React6.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      children,
      onDismiss,
      variant = "neutral",
      element = "TOAST",
      setFocus,
      i18nDismissLabel = "Dismiss toast",
      i18nErrorLabel = "(error)",
      i18nNeutralLabel = "(information)",
      i18nSuccessLabel = "(success)",
      i18nWarningLabel = "(warning)"
    } = _b, props = __objRest(_b, [
      "children",
      "onDismiss",
      "variant",
      "element",
      "setFocus",
      "i18nDismissLabel",
      "i18nErrorLabel",
      "i18nNeutralLabel",
      "i18nSuccessLabel",
      "i18nWarningLabel"
    ]);
    const ToastComponent = ToastComponentVariants[variant];
    const buttonRef = React6.useRef(null);
    React6.useEffect(() => {
      if (setFocus && buttonRef.current) {
        buttonRef.current.focus({ preventScroll: true });
      }
    }, [setFocus]);
    const i18nVariants = {
      error: i18nErrorLabel,
      neutral: i18nNeutralLabel,
      success: i18nSuccessLabel,
      warning: i18nWarningLabel
    };
    return /* @__PURE__ */ React6.createElement(ToastComponent, __spreadValues({ role: "status", variant, element, ref }, props), /* @__PURE__ */ React6.createElement(MediaObject, { as: "div" }, /* @__PURE__ */ React6.createElement(MediaFigure, { as: "div", spacing: "space60" }, renderToastIcon(variant, i18nVariants[variant], element)), /* @__PURE__ */ React6.createElement(MediaBody, { as: "div" }, children), onDismiss && typeof onDismiss === "function" && /* @__PURE__ */ React6.createElement(MediaFigure, { align: "end", spacing: "space40" }, /* @__PURE__ */ React6.createElement(
      Button,
      {
        onClick: onDismiss,
        variant: "secondary_icon",
        ref: buttonRef,
        size: "reset",
        element: `${element}_CLOSE_BUTTON`
      },
      /* @__PURE__ */ React6.createElement(CloseIcon, { decorative: true, size: "sizeIcon20", element: `${element}_CLOSE_ICON` }),
      /* @__PURE__ */ React6.createElement(ScreenReaderOnly, null, i18nDismissLabel)
    ))));
  }
);
Toast.displayName = "Toast";
Toast.propTypes = ToastPropTypes;

// src/ToastContainer.tsx
import * as React8 from "react";
import { Stack } from "@twilio-paste/stack";

// src/ToastPortal.tsx
import * as React7 from "react";
import { StyledBase } from "@twilio-paste/theme";
import { Portal } from "@twilio-paste/reakit-library";
import { Box as Box6, safelySpreadBoxProps as safelySpreadBoxProps5 } from "@twilio-paste/box";
var ToastPortal = React7.forwardRef((_a, ref) => {
  var _b = _a, { children, __console_patch } = _b, props = __objRest(_b, ["children", "__console_patch"]);
  return /* @__PURE__ */ React7.createElement(Portal, null, /* @__PURE__ */ React7.createElement(StyledBase, null, /* @__PURE__ */ React7.createElement(
    Box6,
    __spreadProps(__spreadValues({}, safelySpreadBoxProps5(props)), {
      position: "fixed",
      right: "space40",
      top: "space90",
      zIndex: "zIndex90",
      ref,
      style: __console_patch ? { zIndex: 1999 } : void 0
    }),
    children
  )));
});
ToastPortal.displayName = "ToastPortal";
if (false) {
  ToastPortal.propTypes = ToastPortalPropTypes;
}

// src/ToastContainer.tsx
var ToastContainer = React8.forwardRef((_a, ref) => {
  var _b = _a, { children } = _b, props = __objRest(_b, ["children"]);
  return /* @__PURE__ */ React8.createElement(ToastPortal, __spreadValues({}, props), /* @__PURE__ */ React8.createElement(Stack, { orientation: "vertical", spacing: "space40", ref }, children));
});
ToastContainer.displayName = "ToastContainer";
ToastContainer.propTypes = ToastContainerPropTypes;

// src/Toaster.tsx
import * as React9 from "react";
import { useTransition, animated, useReducedMotion } from "@twilio-paste/animation-library";
import { useTheme } from "@twilio-paste/theme";
import { Box as Box7 } from "@twilio-paste/box";
var AnimatedToast = animated(Box7);
var Toaster = (_a) => {
  var _b = _a, { toasts, pop } = _b, props = __objRest(_b, ["toasts", "pop"]);
  const prefersReducedMotion = useReducedMotion();
  const [refMap] = React9.useState(() => /* @__PURE__ */ new WeakMap());
  const [returnTarget, setReturnTarget] = React9.useState({ trigger: null });
  const theme = useTheme();
  const transitions = useTransition(toasts, {
    from: {
      marginBottom: "0rem",
      opacity: 0,
      transform: "translateX(100%) scale(1)",
      height: prefersReducedMotion ? "auto" : 0
    },
    enter: prefersReducedMotion ? { marginBottom: theme.space.space40, opacity: 1, transform: "translateX(0px) scale(1)" } : (item) => async (next) => {
      await next({
        marginBottom: theme.space.space40,
        opacity: 1,
        transform: "translateX(0px) scale(1)",
        height: refMap.get(item).offsetHeight
      });
    },
    leave: {
      marginBottom: "0rem",
      opacity: 0,
      transform: "translateX(0px) scale(0.8)",
      height: prefersReducedMotion ? "auto" : 0
    },
    config: {
      mass: 1,
      tension: 150,
      friction: 20
    }
  });
  const clearReturnTarget = React9.useCallback(() => {
    setReturnTarget({ trigger: null });
  }, [returnTarget]);
  React9.useEffect(() => {
    if (returnTarget.trigger != null && toasts.length === 0) {
      returnTarget.trigger.focus();
      clearReturnTarget();
    }
  }, [toasts]);
  return /* @__PURE__ */ React9.createElement(ToastPortal, __spreadValues({}, props), transitions((styles, item, state, index) => {
    return /* @__PURE__ */ React9.createElement(AnimatedToast, { as: "div", key: state.key, style: styles }, /* @__PURE__ */ React9.createElement(
      Toast,
      __spreadProps(__spreadValues({
        key: item.id
      }, item), {
        onDismiss: () => {
          if (item.onDismiss != null) {
            item.onDismiss();
          }
          pop(item.id);
        },
        ref: (ref) => {
          if (ref != null) {
            refMap.set(item, ref);
          }
        },
        setFocus: index === 0,
        onFocus: (e) => {
          if (e.relatedTarget && !returnTarget.trigger) {
            setReturnTarget({ trigger: e.relatedTarget });
          }
        }
      }),
      item.message
    ));
  }));
};
Toaster.displayName = "Toaster";
if (false) {
  Toaster.propTypes = ToasterPropTypes;
}

// src/useToaster.ts
import * as React10 from "react";
import { uid } from "@twilio-paste/uid-library";
var useToaster = () => {
  const isMounted = React10.useRef(null);
  const [toasts, setToasts] = React10.useState([]);
  React10.useEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
      toasts.forEach((toast) => {
        if (toast.timeOutId) {
          window.clearTimeout(toast.timeOutId);
        }
      });
    };
  }, []);
  const pop = (id) => {
    if (!isMounted.current) {
      return;
    }
    setToasts(
      (currentToasts) => currentToasts.filter((toast) => {
        if (toast.id === id) {
          if (toast.timeOutId) {
            window.clearTimeout(toast.timeOutId);
          }
          if (toast.onDismiss) {
            toast.onDismiss();
          }
        }
        return toast.id !== id;
      })
    );
  };
  const push = (newToast) => {
    if (!isMounted.current) {
      return;
    }
    const generatedID = uid(newToast);
    let timeOutId;
    if (newToast.dismissAfter != null && Number.isInteger(newToast.dismissAfter)) {
      timeOutId = window.setTimeout(pop, newToast.dismissAfter, newToast.id || generatedID);
    }
    const existingToasts = toasts.map((toast) => {
      const tmpToast = toast;
      tmpToast.setFocus = false;
      return tmpToast;
    });
    setToasts([__spreadValues({ id: generatedID, timeOutId, setFocus: true }, newToast), ...existingToasts]);
  };
  return { toasts, push, pop };
};
export {
  AnimatedToast,
  Toast,
  ToastContainer,
  Toaster,
  useToaster
};

var __defProp=Object.defineProperty;var __getOwnPropSymbols=Object.getOwnPropertySymbols;var __hasOwnProp=Object.prototype.hasOwnProperty,__propIsEnum=Object.prototype.propertyIsEnumerable;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:!0,configurable:!0,writable:!0,value}):obj[key]=value,__spreadValues=(a,b)=>{for(var prop in b||(b={}))__hasOwnProp.call(b,prop)&&__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(b))__propIsEnum.call(b,prop)&&__defNormalProp(a,prop,b[prop]);return a};var __objRest=(source,exclude)=>{var target={};for(var prop in source)__hasOwnProp.call(source,prop)&&exclude.indexOf(prop)<0&&(target[prop]=source[prop]);if(source!=null&&__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(source))exclude.indexOf(prop)<0&&__propIsEnum.call(source,prop)&&(target[prop]=source[prop]);return target};import*as React from"react";import PropTypes from"prop-types";import{styled,css}from"@twilio-paste/styling-library";import{Box}from"@twilio-paste/box";var StyledSiblingBox=styled(Box)(({_activeSibling,_boxChild,_checkedAndActiveSibling,_checkedAndDisabledSibling,_checkedAndFocusSibling,_checkedAndHoverSibling,_checkedAndInvalidSibling,_checkedAndInvalidAndDisabledSibling,_checkedAndInvalidAndHoverSibling,_checkedSibling,_checkedSiblingAndBoxChild,_disabledSibling,_focusSibling,_hoverSibling,_invalidSibling,_invalidAndHoverSibling,_invalidAndDisabledSibling,type="checkbox"})=>{let active=`input[type=${type}]:active + label &`,checked=`input[type=${type}]:checked + label &, input[type=${type}][aria-checked=mixed] + label &`,checkedAndActive=`input[type=${type}]:checked:active + label &, input[type=${type}][aria-checked=mixed]:active + label &`,checkedAndChild=`input[type=${type}]:checked + label & > *, input[type=${type}][aria-checked=mixed] + label & > *`,checkedAndDisabled=`input[type=${type}]:checked:disabled + label &, input[type=${type}][aria-checked=mixed]:disabled + label &`,checkedAndFocus=`input[type=${type}]:checked:focus + label &, input[type=${type}][aria-checked=mixed]:focus + label &`,checkedAndHover=`input[type=${type}]:checked:hover:not(:disabled) + label &, input[type=${type}][aria-checked=mixed]:hover:not(:disabled) + label &`,checkedAndInvalid=`input[type=${type}][aria-invalid=true]:checked + label &`,checkedAndInvalidAndDisabled=`input[type=${type}][aria-invalid=true]:checked:disabled + label &`,checkedAndInvalidAndHover=`input[type=${type}][aria-invalid=true]:checked:hover:not(:disabled) + label &`,child=`input[type=${type}] + label & > *`,disabled=`input[type=${type}]:disabled + label &`,focus=`input[type=${type}]:focus + label &`,hover=`input[type=${type}]:hover:not(:disabled):not(:checked) + label &`,invalid=`input[type=${type}][aria-invalid=true] + label &`,invalidAndHover=`input[type=${type}][aria-invalid=true]:hover:not(:disabled) + label &`,invalidAndDisabled=`input[type=${type}][aria-invalid=true]:disabled + label &`;return css({[active]:_activeSibling,[checked]:_checkedSibling,[checkedAndActive]:_checkedAndActiveSibling,[checkedAndChild]:_checkedSiblingAndBoxChild,[checkedAndDisabled]:_checkedAndDisabledSibling,[checkedAndFocus]:_checkedAndFocusSibling,[checkedAndHover]:_checkedAndHoverSibling,[checkedAndInvalid]:_checkedAndInvalidSibling,[checkedAndInvalidAndDisabled]:_checkedAndInvalidAndDisabledSibling,[checkedAndInvalidAndHover]:_checkedAndInvalidAndHoverSibling,[child]:_boxChild,[disabled]:_disabledSibling,[focus]:_focusSibling,[hover]:_hoverSibling,[invalid]:_invalidSibling,[invalidAndHover]:_invalidAndHoverSibling,[invalidAndDisabled]:_invalidAndDisabledSibling})}),SiblingBox=_a=>{var _b=_a,{"aria-hidden":ariaHidden="true",alignItems="center",display="inline-flex",element="SIBLING_BOX",flexShrink=0,justifyContent="center",transition="all 120ms"}=_b,props=__objRest(_b,["aria-hidden","alignItems","display","element","flexShrink","justifyContent","transition"]);return React.createElement(StyledSiblingBox,__spreadValues({alignItems,"aria-hidden":ariaHidden,display,element,flexShrink,justifyContent,transition},props))};SiblingBox.displayName="SiblingBox";SiblingBox.propTypes={type:PropTypes.oneOf(["checkbox","radio","file"])};export{SiblingBox};

"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Badge: () => Badge
});
module.exports = __toCommonJS(src_exports);
var React2 = __toESM(require("react"));
var import_prop_types = __toESM(require("prop-types"));
var import_box = require("@twilio-paste/box");
var import_anchor = require("@twilio-paste/anchor");
var import_ErrorIcon = require("@twilio-paste/icons/cjs/ErrorIcon");

// src/hooks.tsx
var React = __toESM(require("react"));
var import_uid_library = require("@twilio-paste/uid-library");
var DEFAULT_ICON_SIZE = "sizeIcon10";
var useResizeChildIcons = (children) => {
  const seed = (0, import_uid_library.useUIDSeed)();
  if (!Array.isArray(children)) {
    return children;
  }
  return React.Children.map(children, (child) => {
    var _a, _b;
    if (typeof child === "object" && !Array.isArray(child) && typeof ((_a = child == null ? void 0 : child.type) == null ? void 0 : _a.displayName) === "string" && ((_b = child == null ? void 0 : child.type) == null ? void 0 : _b.displayName.includes("Icon"))) {
      return React.cloneElement(child, __spreadProps(__spreadValues({}, child.props), {
        key: seed(child),
        size: DEFAULT_ICON_SIZE
      }));
    }
    return /* @__PURE__ */ React.createElement(React.Fragment, { key: seed(child) }, child);
  });
};

// src/styles.ts
var badgeVariantStyles = {
  success: {
    backgroundColor: "colorBackgroundSuccessWeakest",
    color: "colorTextSuccess"
  },
  error: {
    backgroundColor: "colorBackgroundErrorWeakest",
    color: "colorTextErrorStrong"
  },
  warning: {
    backgroundColor: "colorBackgroundWarningWeakest",
    color: "colorTextWarningStrong"
  },
  new: {
    backgroundColor: "colorBackgroundNew",
    color: "colorTextNew"
  },
  neutral: {
    backgroundColor: "colorBackgroundNeutralWeakest",
    color: "colorTextNeutral"
  },
  decorative10: {
    backgroundColor: "colorBackgroundDecorative10Weakest",
    color: "colorTextDecorative10"
  },
  decorative20: {
    backgroundColor: "colorBackgroundDecorative20Weakest",
    color: "colorTextDecorative20"
  },
  decorative30: {
    backgroundColor: "colorBackgroundDecorative30Weakest",
    color: "colorTextDecorative30"
  },
  decorative40: {
    backgroundColor: "colorBackgroundDecorative40Weakest",
    color: "colorTextDecorative40"
  },
  neutral_counter: {
    backgroundColor: "colorBackgroundNeutralWeakest",
    color: "colorTextNeutral",
    borderRadius: "borderRadiusPill"
  },
  error_counter: {
    backgroundColor: "colorBackgroundErrorWeakest",
    color: "colorTextErrorStrong",
    borderRadius: "borderRadiusPill"
  },
  default: {
    backgroundColor: "colorBackground",
    color: "colorTextWeak"
  },
  info: {
    backgroundColor: "colorBackgroundNeutralWeakest",
    color: "colorTextNeutral"
  }
};
var badgeButtonStyles = {
  success: {
    boxShadow: "shadowBorderBottomSuccessWeaker"
  },
  error: {
    boxShadow: "shadowBorderBottomErrorWeaker"
  },
  warning: {
    boxShadow: "shadowBorderBottomWarningWeaker"
  },
  new: {
    boxShadow: "shadowBorderBottomNewWeaker"
  },
  neutral: {
    boxShadow: "shadowBorderBottomNeutralWeaker"
  },
  decorative10: {
    boxShadow: "shadowBorderBottomDecorative10Weaker"
  },
  decorative20: {
    boxShadow: "shadowBorderBottomDecorative20Weaker"
  },
  decorative30: {
    boxShadow: "shadowBorderBottomDecorative30Weaker"
  },
  decorative40: {
    boxShadow: "shadowBorderBottomDecorative40Weaker"
  },
  neutral_counter: {
    boxShadow: "shadowBorderBottomNeutralWeaker"
  },
  error_counter: {
    boxShadow: "shadowBorderBottomErrorWeaker"
  },
  default: {
    boxShadow: "shadowBorderBottomDecorative10Weaker"
  },
  info: {
    boxShadow: "shadowBorderBottomNeutralWeaker"
  }
};
var getBadgeAnchorStyles = () => {
  return {
    textDecoration: "underline",
    cursor: "pointer",
    _hover: { textDecoration: "none" },
    _focus: { textDecoration: "none", boxShadow: "shadowFocus" }
  };
};
var getBadgeButtonStyles = (variant) => {
  const variantButtonStyle = badgeButtonStyles[variant];
  return __spreadProps(__spreadValues({}, variantButtonStyle), {
    cursor: "pointer",
    _hover: { top: "1px", boxShadow: "none" },
    _focus: { top: "1px", boxShadow: "shadowFocus" }
  });
};

// src/index.tsx
var handlePropValidation = ({ as, href, onClick }) => {
  if (as === "a") {
    if (href === null || href === void 0)
      throw new Error('[Paste: Badge] Badge is being used as an anchor (`as="a"`). Provide an href.');
    if (onClick != null)
      throw new Error('[Paste: Badge] An onClick was provided. To use as a button, use `as="button"`.');
  }
  if (as === "button") {
    if (onClick === null || onClick === void 0)
      throw new Error('[Paste: Badge] Badge is being used as an button (`as="button"`). Provide an onClick.');
    if (href === null)
      throw new Error('[Paste: Badge] An href was provided. To use as an anchor, use `as="a"`.');
  }
};
var Badge = React2.forwardRef(
  (_a, ref) => {
    var _b = _a, { as, href, variant, children, element = "BADGE" } = _b, props = __objRest(_b, ["as", "href", "variant", "children", "element"]);
    handlePropValidation(__spreadValues({ as, href }, props));
    const resizedChildren = useResizeChildIcons(children);
    let badgeStyles = badgeVariantStyles[variant];
    if (as === "a") {
      badgeStyles = __spreadValues(__spreadValues({}, badgeStyles), getBadgeAnchorStyles());
    }
    if (as === "button") {
      badgeStyles = __spreadValues(__spreadValues({}, badgeStyles), getBadgeButtonStyles(variant));
    }
    return /* @__PURE__ */ React2.createElement(
      import_box.Box,
      __spreadValues(__spreadProps(__spreadValues(__spreadValues({}, (0, import_box.safelySpreadBoxProps)(props)), href ? (0, import_anchor.secureExternalLink)(href) : {}), {
        href,
        alignItems: "center",
        as,
        border: "unset",
        borderRadius: "borderRadius30",
        columnGap: "space20",
        display: "flex",
        element,
        fontSize: "fontSize20",
        fontWeight: "fontWeightSemibold",
        lineHeight: "lineHeight10",
        maxWidth: "max-content",
        paddingX: "space30",
        paddingY: "space20",
        appearance: "none",
        background: "none",
        outline: "none",
        fontFamily: "inherit",
        position: "relative",
        variant,
        ref
      }), badgeStyles),
      variant === "error_counter" ? /* @__PURE__ */ React2.createElement(import_ErrorIcon.ErrorIcon, { element: `${element}_ICON`, decorative: true, size: "sizeIcon10" }) : null,
      resizedChildren
    );
  }
);
Badge.displayName = "Badge";
Badge.propTypes = {
  children: import_prop_types.default.node.isRequired,
  element: import_prop_types.default.string,
  variant: import_prop_types.default.oneOf([
    "neutral",
    "warning",
    "error",
    "success",
    "new",
    "decorative10",
    "decorative20",
    "decorative30",
    "decorative40",
    "neutral_counter",
    "error_counter",
    "default",
    "info"
  ]).isRequired,
  as: import_prop_types.default.oneOf(["span", "button", "a"]).isRequired,
  href: import_prop_types.default.string,
  onClick: import_prop_types.default.func
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Badge
});

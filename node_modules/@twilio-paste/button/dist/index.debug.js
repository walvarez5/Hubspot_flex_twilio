"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../../../node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS({
  "../../../../node_modules/deepmerge/dist/cjs.js"(exports, module2) {
    "use strict";
    var isMergeableObject = function isMergeableObject2(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value === "object";
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
    }
    var canUseSymbol = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
      return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
    }
    function defaultArrayMerge(target, source, options) {
      return target.concat(source).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
      });
    }
    function getMergeFunction(key, options) {
      if (!options.customMerge) {
        return deepmerge;
      }
      var customMerge = options.customMerge(key);
      return typeof customMerge === "function" ? customMerge : deepmerge;
    }
    function getEnumerableOwnPropertySymbols(target) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
        return target.propertyIsEnumerable(symbol);
      }) : [];
    }
    function getKeys(target) {
      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function propertyIsOnObject(object, property) {
      try {
        return property in object;
      } catch (_) {
        return false;
      }
    }
    function propertyIsUnsafe(target, key) {
      return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
    }
    function mergeObject(target, source, options) {
      var destination = {};
      if (options.isMergeableObject(target)) {
        getKeys(target).forEach(function(key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
        });
      }
      getKeys(source).forEach(function(key) {
        if (propertyIsUnsafe(target, key)) {
          return;
        }
        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
          destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
        } else {
          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
        }
      });
      return destination;
    }
    function deepmerge(target, source, options) {
      options = options || {};
      options.arrayMerge = options.arrayMerge || defaultArrayMerge;
      options.isMergeableObject = options.isMergeableObject || isMergeableObject;
      options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options);
      } else if (sourceIsArray) {
        return options.arrayMerge(target, source, options);
      } else {
        return mergeObject(target, source, options);
      }
    }
    deepmerge.all = function deepmergeAll(array, options) {
      if (!Array.isArray(array)) {
        throw new Error("first argument should be an array");
      }
      return array.reduce(function(prev, next) {
        return deepmerge(prev, next, options);
      }, {});
    };
    var deepmerge_1 = deepmerge;
    module2.exports = deepmerge_1;
  }
});

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Button: () => Button,
  ButtonToggleStyles: () => ToggleStyles
});
module.exports = __toCommonJS(src_exports);
var React13 = __toESM(require("react"));
var import_box13 = require("@twilio-paste/box");
var import_spinner = require("@twilio-paste/spinner");
var import_anchor = require("@twilio-paste/anchor");
var import_animation_library = require("@twilio-paste/animation-library");
var import_ArrowForwardIcon = require("@twilio-paste/icons/cjs/ArrowForwardIcon");
var import_LinkExternalIcon = require("@twilio-paste/icons/cjs/LinkExternalIcon");

// src/proptypes.ts
var import_prop_types = __toESM(require("prop-types"));
var DirectButtonPropTypes = {
  as: import_prop_types.default.string,
  fullWidth: import_prop_types.default.bool,
  href: import_prop_types.default.string,
  size: import_prop_types.default.oneOf(["small", "default", "icon", "icon_small", "reset", "rounded_small"]).isRequired,
  tabIndex: import_prop_types.default.oneOf([0, -1]),
  type: import_prop_types.default.oneOf(["submit", "button", "reset"]),
  disabled: import_prop_types.default.bool,
  buttonState: import_prop_types.default.oneOf(["disabled", "loading", "default"]).isRequired,
  variant: import_prop_types.default.oneOf([
    "primary",
    "secondary",
    "destructive",
    "destructive_link",
    "destructive_secondary",
    "link",
    "inverse_link",
    "inverse",
    "reset",
    "primary_icon",
    "secondary_icon",
    "destructive_icon"
  ])
};
var ButtonPropTypes = {
  as: import_prop_types.default.string,
  element: import_prop_types.default.string,
  fullWidth: import_prop_types.default.bool,
  href: import_prop_types.default.string,
  size: import_prop_types.default.oneOf([
    "small",
    "default",
    "icon",
    "icon_small",
    "reset",
    "rounded_small",
    "circle",
    "circle_small"
  ]),
  tabIndex: import_prop_types.default.oneOf([0, -1]),
  type: import_prop_types.default.oneOf(["submit", "button", "reset"]),
  disabled: import_prop_types.default.bool,
  loading: import_prop_types.default.bool,
  variant: import_prop_types.default.oneOf([
    "primary",
    "secondary",
    "destructive",
    "destructive_link",
    "destructive_secondary",
    "link",
    "inverse_link",
    "inverse",
    "reset",
    "primary_icon",
    "secondary_icon",
    "destructive_icon"
  ]).isRequired,
  i18nExternalLinkLabel: import_prop_types.default.string
};

// src/PrimaryButton.tsx
var React = __toESM(require("react"));
var import_box = require("@twilio-paste/box");
var import_deepmerge2 = __toESM(require_cjs());

// src/styles.ts
var import_deepmerge = __toESM(require_cjs());
var ResetStyles = {
  appearance: "none",
  background: "none",
  display: "inline-block",
  border: "none",
  outline: "none",
  transition: "background-color 100ms ease-in, box-shadow 100ms ease-in, color 100ms ease-in",
  fontFamily: "inherit",
  fontWeight: "fontWeightSemibold",
  textDecoration: "none",
  position: "relative",
  margin: "space0",
  _hover: { textDecoration: "none" },
  _focus: { textDecoration: "none", boxShadow: "shadowFocus" },
  _active: { textDecoration: "none" }
};
var BaseStyles = {
  default: (0, import_deepmerge.default)(ResetStyles, {
    cursor: "pointer",
    _active: { boxShadow: "none" }
  }),
  disabled: (0, import_deepmerge.default)(ResetStyles, {
    cursor: "not-allowed"
  }),
  loading: (0, import_deepmerge.default)(ResetStyles, {
    cursor: "wait"
  })
};
var SizeStyles = {
  default: {
    paddingTop: "space30",
    paddingBottom: "space30",
    paddingLeft: "space40",
    paddingRight: "space40",
    borderRadius: "borderRadius20",
    fontSize: "fontSize30",
    lineHeight: "lineHeight20"
  },
  small: {
    paddingTop: "space20",
    paddingBottom: "space20",
    paddingLeft: "space30",
    paddingRight: "space30",
    borderRadius: "borderRadius10",
    fontSize: "fontSize30",
    lineHeight: "lineHeight20"
  },
  icon: {
    padding: "space30",
    borderRadius: "borderRadius20"
  },
  icon_small: {
    padding: "space20",
    borderRadius: "borderRadius20"
  },
  reset: {
    paddingTop: "space0",
    paddingRight: "space0",
    paddingBottom: "space0",
    paddingLeft: "space0",
    borderWidth: "borderWidth0",
    fontSize: "inherit"
  },
  rounded_small: {
    borderRadius: "borderRadiusPill",
    paddingTop: "space20",
    paddingBottom: "space20",
    paddingLeft: "space30",
    paddingRight: "space30",
    fontSize: "fontSize30",
    lineHeight: "lineHeight20"
  },
  circle: {
    padding: "space30",
    borderRadius: "borderRadiusCircle"
  },
  circle_small: {
    padding: "space20",
    borderRadius: "borderRadiusCircle"
  }
};
var ToggleStyles = {
  transition: "background-color 150ms ease-in, box-shadow 150ms ease-in, color 150ms ease-in",
  _pressed: {
    backgroundColor: "colorBackgroundPrimaryStronger",
    color: "colorTextWeakest",
    boxShadow: "shadowBorderPrimaryStronger"
  },
  _pressed_hover: {
    backgroundColor: "colorBackgroundPrimary",
    boxShadow: "shadowBorderPrimary",
    color: "colorTextInverse"
  },
  _pressed_focus: {
    boxShadow: "shadowFocusShadowBorder",
    backgroundColor: "colorBackgroundPrimaryStronger",
    color: "colorTextWeakest"
  }
};
var ToggleIconButtonStyles = {
  transition: "background-color 150ms ease-in, box-shadow 150ms ease-in, color 150ms ease-in",
  _pressed: {
    backgroundColor: "colorBackgroundPrimaryStronger",
    color: "colorTextWeakest",
    boxShadow: "shadowBorderPrimaryStronger"
  },
  _pressed_hover: {
    backgroundColor: "colorBackgroundPrimary",
    boxShadow: "shadowBorderPrimary",
    color: "colorTextInverse"
  },
  _pressed_focus: {
    boxShadow: "shadowFocus",
    backgroundColor: "colorBackgroundPrimaryStronger",
    color: "colorTextWeakest"
  }
};

// src/PrimaryButton.tsx
var defaultStyles = (0, import_deepmerge2.default)(BaseStyles.default, {
  color: "colorTextInverse",
  backgroundColor: "colorBackgroundPrimary",
  boxShadow: "shadowBorderPrimary",
  _hover: {
    color: "colorTextWeakest",
    backgroundColor: "colorBackgroundPrimaryStronger",
    boxShadow: "shadowBorderPrimaryStronger"
  },
  _focus: {
    color: "colorTextWeakest",
    backgroundColor: "colorBackgroundPrimaryStronger",
    boxShadow: "shadowFocus"
  },
  _active: {
    color: "colorTextWeakest",
    backgroundColor: "colorBackgroundPrimaryStrongest",
    boxShadow: "shadowBorderPrimaryStrongest"
  }
});
var loadingStyles = (0, import_deepmerge2.default)(BaseStyles.loading, {
  color: "colorTextWeakest",
  backgroundColor: "colorBackgroundPrimaryStronger",
  boxShadow: "shadowBorderPrimaryStronger"
});
var disabledStyles = (0, import_deepmerge2.default)(BaseStyles.disabled, {
  color: "colorTextWeakest",
  backgroundColor: "colorBackgroundPrimaryWeak",
  boxShadow: "shadowBorderPrimaryWeak"
});
var ButtonStyleMapping = {
  default: defaultStyles,
  loading: loadingStyles,
  disabled: disabledStyles
};
var PrimaryButton = React.forwardRef(
  (_a, ref) => {
    var _b = _a, { size, buttonState, fullWidth } = _b, props = __objRest(_b, ["size", "buttonState", "fullWidth"]);
    return /* @__PURE__ */ React.createElement(
      import_box.Box,
      __spreadValues(__spreadValues(__spreadValues({
        ref,
        width: fullWidth ? "100%" : "auto"
      }, (0, import_box.safelySpreadBoxProps)(props)), ButtonStyleMapping[buttonState]), SizeStyles[size])
    );
  }
);
PrimaryButton.defaultProps = {
  as: "button"
};
if (false) {
  PrimaryButton.propTypes = DirectButtonPropTypes;
}
PrimaryButton.displayName = "PrimaryButton";

// src/PrimaryIconButton.tsx
var React2 = __toESM(require("react"));
var import_box2 = require("@twilio-paste/box");
var import_deepmerge3 = __toESM(require_cjs());
var defaultStyles2 = (0, import_deepmerge3.default)(BaseStyles.default, {
  color: "colorTextLink",
  _hover: {
    color: "colorTextLinkStronger"
  },
  _focus: {
    color: "colorTextLinkStronger"
  },
  _active: {
    color: "colorTextLinkStrongest"
  }
});
var loadingStyles2 = (0, import_deepmerge3.default)(BaseStyles.loading, {
  color: "colorTextLinkStronger"
});
var disabledStyles2 = (0, import_deepmerge3.default)(BaseStyles.disabled, {
  color: "colorTextLinkWeak"
});
var ButtonStyleMapping2 = {
  default: defaultStyles2,
  loading: loadingStyles2,
  disabled: disabledStyles2
};
var PrimaryIconButton = React2.forwardRef(
  (_a, ref) => {
    var _b = _a, { size, buttonState, fullWidth } = _b, props = __objRest(_b, ["size", "buttonState", "fullWidth"]);
    return /* @__PURE__ */ React2.createElement(
      import_box2.Box,
      __spreadValues(__spreadValues(__spreadValues({
        ref,
        width: fullWidth ? "100%" : "auto"
      }, (0, import_box2.safelySpreadBoxProps)(props)), ButtonStyleMapping2[buttonState]), SizeStyles[size])
    );
  }
);
PrimaryIconButton.defaultProps = {
  as: "button"
};
if (false) {
  PrimaryIconButton.propTypes = DirectButtonPropTypes;
}
PrimaryIconButton.displayName = "PrimaryIconButton";

// src/SecondaryButton.tsx
var React3 = __toESM(require("react"));
var import_box3 = require("@twilio-paste/box");
var import_deepmerge4 = __toESM(require_cjs());
var defaultStyles3 = (0, import_deepmerge4.default)(BaseStyles.default, {
  color: "colorText",
  backgroundColor: "colorBackgroundBody",
  boxShadow: "shadowBorder",
  _hover: {
    color: "colorTextLinkStronger",
    backgroundColor: "colorBackgroundPrimaryWeakest",
    boxShadow: "shadowBorderPrimaryStronger"
  },
  _focus: {
    color: "colorTextLinkStronger",
    backgroundColor: "colorBackgroundPrimaryWeakest",
    boxShadow: "shadowFocusShadowBorder"
  },
  _active: {
    color: "colorTextLinkStronger",
    backgroundColor: "colorBackgroundPrimaryWeaker",
    boxShadow: "shadowBorderPrimaryStronger"
  }
});
var baseLoadingStyles = {
  color: "colorTextLinkStronger",
  backgroundColor: "colorBackgroundPrimaryWeaker",
  boxShadow: "shadowBorderPrimaryWeaker"
};
var loadingStyles3 = (0, import_deepmerge4.default)(BaseStyles.loading, __spreadProps(__spreadValues({}, baseLoadingStyles), {
  _hover: baseLoadingStyles,
  _active: baseLoadingStyles,
  _focus: baseLoadingStyles
}));
var baseDisabledStyles = {
  color: "colorTextWeaker",
  backgroundColor: "colorBackgroundBody",
  boxShadow: "shadowBorderWeak"
};
var disabledStyles3 = (0, import_deepmerge4.default)(BaseStyles.disabled, __spreadProps(__spreadValues({}, baseDisabledStyles), {
  _hover: baseDisabledStyles,
  _active: baseDisabledStyles,
  _focus: baseDisabledStyles,
  _pressed: {
    backgroundColor: "colorBackgroundStrong",
    color: "colorTextWeak",
    boxShadow: "none"
  },
  _pressed_hover: {
    backgroundColor: "colorBackgroundStrong",
    color: "colorTextWeak",
    boxShadow: "none"
  }
}));
var ButtonStyleMapping3 = {
  default: defaultStyles3,
  loading: loadingStyles3,
  disabled: disabledStyles3
};
var SecondaryButton = React3.forwardRef(
  (_a, ref) => {
    var _b = _a, { size, buttonState, fullWidth, pressed } = _b, props = __objRest(_b, ["size", "buttonState", "fullWidth", "pressed"]);
    const toggleStyles = pressed === void 0 ? {} : ToggleStyles;
    return /* @__PURE__ */ React3.createElement(
      import_box3.Box,
      __spreadValues(__spreadValues(__spreadValues(__spreadValues({
        ref,
        width: fullWidth ? "100%" : "auto",
        "aria-pressed": pressed
      }, (0, import_box3.safelySpreadBoxProps)(props)), toggleStyles), ButtonStyleMapping3[buttonState]), SizeStyles[size])
    );
  }
);
SecondaryButton.defaultProps = {
  as: "button"
};
if (false) {
  SecondaryButton.propTypes = DirectButtonPropTypes;
}
SecondaryButton.displayName = "SecondaryButton";

// src/SecondaryIconButton.tsx
var React4 = __toESM(require("react"));
var import_box4 = require("@twilio-paste/box");
var import_deepmerge5 = __toESM(require_cjs());
var defaultStyles4 = (0, import_deepmerge5.default)(BaseStyles.default, {
  color: "colorTextIcon",
  _hover: {
    color: "colorText"
  },
  _focus: {
    color: "colorText"
  },
  _active: {
    color: "colorText"
  }
});
var loadingStyles4 = (0, import_deepmerge5.default)(BaseStyles.loading, {
  color: "colorText"
});
var disabledStyles4 = (0, import_deepmerge5.default)(BaseStyles.disabled, {
  color: "colorTextWeaker",
  _pressed: {
    backgroundColor: "colorBackgroundStrong",
    color: "colorTextWeak"
  },
  _pressed_hover: {
    backgroundColor: "colorBackgroundStrong",
    color: "colorTextWeak"
  }
});
var ButtonStyleMapping4 = {
  default: defaultStyles4,
  loading: loadingStyles4,
  disabled: disabledStyles4
};
var SecondaryIconButton = React4.forwardRef(
  (_a, ref) => {
    var _b = _a, { size, buttonState, fullWidth, pressed } = _b, props = __objRest(_b, ["size", "buttonState", "fullWidth", "pressed"]);
    const toggleStyles = pressed === void 0 ? {} : ToggleIconButtonStyles;
    return /* @__PURE__ */ React4.createElement(
      import_box4.Box,
      __spreadValues(__spreadValues(__spreadValues(__spreadValues({
        ref,
        "aria-pressed": pressed,
        width: fullWidth ? "100%" : "auto"
      }, (0, import_box4.safelySpreadBoxProps)(props)), toggleStyles), ButtonStyleMapping4[buttonState]), SizeStyles[size])
    );
  }
);
SecondaryIconButton.defaultProps = {
  as: "button"
};
if (false) {
  SecondaryIconButton.propTypes = DirectButtonPropTypes;
}
SecondaryIconButton.displayName = "SecondaryIconButton";

// src/DestructiveButton.tsx
var React5 = __toESM(require("react"));
var import_box5 = require("@twilio-paste/box");
var import_deepmerge6 = __toESM(require_cjs());
var defaultStyles5 = (0, import_deepmerge6.default)(BaseStyles.default, {
  color: "colorTextInverse",
  backgroundColor: "colorBackgroundDestructive",
  boxShadow: "shadowBorderDestructive",
  _hover: {
    color: "colorTextWeakest",
    backgroundColor: "colorBackgroundDestructiveStronger",
    boxShadow: "shadowBorderDestructiveStronger"
  },
  _focus: {
    color: "colorTextWeakest",
    backgroundColor: "colorBackgroundDestructiveStronger",
    boxShadow: "shadowFocus"
  },
  _active: {
    color: "colorTextWeakest",
    backgroundColor: "colorBackgroundDestructiveStrongest",
    boxShadow: "shadowBorderDestructiveStrongest"
  }
});
var loadingStyles5 = (0, import_deepmerge6.default)(BaseStyles.loading, {
  color: "colorTextWeakest",
  backgroundColor: "colorBackgroundDestructiveStronger",
  boxShadow: "shadowBorderDestructiveStronger"
});
var disabledStyles5 = (0, import_deepmerge6.default)(BaseStyles.disabled, {
  color: "colorTextWeakest",
  backgroundColor: "colorBackgroundDestructiveWeak",
  boxShadow: "shadowBorderDestructiveWeak"
});
var ButtonStyleMapping5 = {
  default: defaultStyles5,
  loading: loadingStyles5,
  disabled: disabledStyles5
};
var DestructiveButton = React5.forwardRef(
  (_a, ref) => {
    var _b = _a, { size, buttonState, fullWidth } = _b, props = __objRest(_b, ["size", "buttonState", "fullWidth"]);
    return /* @__PURE__ */ React5.createElement(
      import_box5.Box,
      __spreadValues(__spreadValues(__spreadValues({
        ref,
        width: fullWidth ? "100%" : "auto"
      }, (0, import_box5.safelySpreadBoxProps)(props)), ButtonStyleMapping5[buttonState]), SizeStyles[size])
    );
  }
);
DestructiveButton.defaultProps = {
  as: "button"
};
if (false) {
  DestructiveButton.propTypes = DirectButtonPropTypes;
}
DestructiveButton.displayName = "DestructiveButton";

// src/DestructiveIconButton.tsx
var React6 = __toESM(require("react"));
var import_box6 = require("@twilio-paste/box");
var import_deepmerge7 = __toESM(require_cjs());
var defaultStyles6 = (0, import_deepmerge7.default)(BaseStyles.default, {
  color: "colorTextLinkDestructive",
  _hover: {
    color: "colorTextLinkDestructiveStronger"
  },
  _focus: {
    color: "colorTextLinkDestructiveStronger"
  },
  _active: {
    color: "colorTextLinkDestructiveStrongest"
  }
});
var loadingStyles6 = (0, import_deepmerge7.default)(BaseStyles.loading, {
  color: "colorTextLinkDestructiveStronger"
});
var disabledStyles6 = (0, import_deepmerge7.default)(BaseStyles.disabled, {
  color: "colorTextLinkDestructiveWeak"
});
var ButtonStyleMapping6 = {
  default: defaultStyles6,
  loading: loadingStyles6,
  disabled: disabledStyles6
};
var DestructiveIconButton = React6.forwardRef(
  (_a, ref) => {
    var _b = _a, { size, buttonState, fullWidth } = _b, props = __objRest(_b, ["size", "buttonState", "fullWidth"]);
    return /* @__PURE__ */ React6.createElement(
      import_box6.Box,
      __spreadValues(__spreadValues(__spreadValues({
        ref,
        width: fullWidth ? "100%" : "auto"
      }, (0, import_box6.safelySpreadBoxProps)(props)), ButtonStyleMapping6[buttonState]), SizeStyles[size])
    );
  }
);
DestructiveIconButton.defaultProps = {
  as: "button"
};
if (false) {
  DestructiveIconButton.propTypes = DirectButtonPropTypes;
}
DestructiveIconButton.displayName = "DestructiveIconButton";

// src/DestructiveLinkButton.tsx
var React7 = __toESM(require("react"));
var import_box7 = require("@twilio-paste/box");
var import_deepmerge8 = __toESM(require_cjs());
var defaultStyles7 = (0, import_deepmerge8.default)(BaseStyles.default, {
  color: "colorTextLinkDestructive",
  textAlign: "left",
  transition: "none",
  _hover: { color: "colorTextLinkDestructiveStronger", textDecoration: "underline" },
  _active: { color: "colorTextLinkDestructiveStrongest", textDecoration: "underline" },
  _focus: { color: "colorTextLinkDestructiveStronger", textDecoration: "underline" }
});
var loadingStyles7 = (0, import_deepmerge8.default)(BaseStyles.loading, {
  color: "colorTextLinkDestructiveStronger",
  textAlign: "left",
  _hover: { color: "colorTextLinkDestructiveStronger" },
  _active: { color: "colorTextLinkDestructiveStronger" },
  _focus: { color: "colorTextLinkDestructiveStronger" }
});
var disabledStyles7 = (0, import_deepmerge8.default)(BaseStyles.disabled, {
  color: "colorTextLinkDestructiveWeak",
  textAlign: "left",
  _hover: { color: "colorTextLinkDestructiveWeak" },
  _active: { color: "colorTextLinkDestructiveWeak" },
  _focus: { color: "colorTextLinkDestructiveWeak" }
});
var ButtonStyleMapping7 = {
  default: defaultStyles7,
  loading: loadingStyles7,
  disabled: disabledStyles7
};
var DestructiveLinkButton = React7.forwardRef(
  (_a, ref) => {
    var _b = _a, { size, buttonState, fullWidth } = _b, props = __objRest(_b, ["size", "buttonState", "fullWidth"]);
    return /* @__PURE__ */ React7.createElement(
      import_box7.Box,
      __spreadValues(__spreadValues(__spreadValues({
        ref,
        width: fullWidth ? "100%" : "auto"
      }, (0, import_box7.safelySpreadBoxProps)(props)), ButtonStyleMapping7[buttonState]), SizeStyles[size])
    );
  }
);
DestructiveLinkButton.defaultProps = {
  as: "a"
};
if (false) {
  DestructiveLinkButton.propTypes = DirectButtonPropTypes;
}
DestructiveLinkButton.displayName = "DestructiveLinkButton";

// src/DestructiveSecondaryButton.tsx
var React8 = __toESM(require("react"));
var import_box8 = require("@twilio-paste/box");
var import_deepmerge9 = __toESM(require_cjs());
var defaultStyles8 = (0, import_deepmerge9.default)(BaseStyles.default, {
  color: "colorTextLinkDestructive",
  backgroundColor: "colorBackgroundBody",
  boxShadow: "shadowBorderDestructive",
  _hover: {
    color: "colorTextLinkDestructiveStronger",
    backgroundColor: "colorBackgroundDestructiveWeakest",
    boxShadow: "shadowBorderDestructiveStronger"
  },
  _focus: {
    color: "colorTextLinkDestructiveStronger",
    backgroundColor: "colorBackgroundDestructiveWeakest",
    boxShadow: "shadowFocus"
  },
  _active: {
    color: "colorTextLinkDestructiveStronger",
    backgroundColor: "colorBackgroundDestructiveWeaker",
    boxShadow: "shadowBorderDestructiveStronger"
  }
});
var baseLoadingStyles2 = {
  color: "colorTextLinkDestructiveStronger",
  backgroundColor: "colorBackgroundDestructiveWeaker",
  boxShadow: "shadowBorderDestructiveWeaker"
};
var loadingStyles8 = (0, import_deepmerge9.default)(BaseStyles.loading, __spreadProps(__spreadValues({}, baseLoadingStyles2), {
  _hover: baseLoadingStyles2,
  _active: baseLoadingStyles2,
  _focus: baseLoadingStyles2
}));
var baseDisabledStyles2 = {
  color: "colorTextLinkDestructiveWeak",
  backgroundColor: "colorBackgroundBody",
  boxShadow: "shadowBorderDestructiveWeak"
};
var disabledStyles8 = (0, import_deepmerge9.default)(BaseStyles.disabled, __spreadProps(__spreadValues({}, baseDisabledStyles2), {
  _hover: baseDisabledStyles2,
  _active: baseDisabledStyles2,
  _focus: baseDisabledStyles2
}));
var ButtonStyleMapping8 = {
  default: defaultStyles8,
  loading: loadingStyles8,
  disabled: disabledStyles8
};
var DestructiveSecondaryButton = React8.forwardRef(
  (_a, ref) => {
    var _b = _a, { size, buttonState, fullWidth } = _b, props = __objRest(_b, ["size", "buttonState", "fullWidth"]);
    return /* @__PURE__ */ React8.createElement(
      import_box8.Box,
      __spreadValues(__spreadValues(__spreadValues({
        ref,
        width: fullWidth ? "100%" : "auto"
      }, (0, import_box8.safelySpreadBoxProps)(props)), ButtonStyleMapping8[buttonState]), SizeStyles[size])
    );
  }
);
DestructiveSecondaryButton.defaultProps = {
  as: "button"
};
if (false) {
  DestructiveSecondaryButton.propTypes = DirectButtonPropTypes;
}
DestructiveSecondaryButton.displayName = "DestructiveSecondaryButton";

// src/LinkButton.tsx
var React9 = __toESM(require("react"));
var import_box9 = require("@twilio-paste/box");
var import_deepmerge10 = __toESM(require_cjs());
var defaultStyles9 = (0, import_deepmerge10.default)(BaseStyles.default, {
  color: "colorTextLink",
  textAlign: "left",
  transition: "none",
  _hover: { color: "colorTextLinkStronger", textDecoration: "underline" },
  _focus: { color: "colorTextLinkStronger", textDecoration: "underline" },
  _active: { color: "colorTextLinkStrongest", textDecoration: "underline" }
});
var loadingStyles9 = (0, import_deepmerge10.default)(BaseStyles.loading, {
  color: "colorTextLinkStronger",
  textAlign: "left"
});
var disabledStyles9 = (0, import_deepmerge10.default)(BaseStyles.disabled, {
  color: "colorTextLinkWeak",
  textAlign: "left"
});
var ButtonStyleMapping9 = {
  default: defaultStyles9,
  loading: loadingStyles9,
  disabled: disabledStyles9
};
var LinkButton = React9.forwardRef(
  (_a, ref) => {
    var _b = _a, { size, buttonState, fullWidth } = _b, props = __objRest(_b, ["size", "buttonState", "fullWidth"]);
    return /* @__PURE__ */ React9.createElement(
      import_box9.Box,
      __spreadValues(__spreadValues(__spreadValues({
        ref,
        width: fullWidth ? "100%" : "auto"
      }, (0, import_box9.safelySpreadBoxProps)(props)), ButtonStyleMapping9[buttonState]), SizeStyles[size])
    );
  }
);
LinkButton.defaultProps = {
  as: "a"
};
if (false) {
  LinkButton.propTypes = DirectButtonPropTypes;
}
LinkButton.displayName = "LinkButton";

// src/InverseButton.tsx
var React10 = __toESM(require("react"));
var import_box10 = require("@twilio-paste/box");
var import_deepmerge11 = __toESM(require_cjs());
var defaultStyles10 = (0, import_deepmerge11.default)(BaseStyles.default, {
  color: "colorTextInverse",
  fontWeight: "fontWeightSemibold",
  backgroundColor: "colorBackgroundInverse",
  boxShadow: "shadowBorderInverse",
  _hover: {
    color: "colorTextInverse",
    fontWeight: "fontWeightSemibold",
    backgroundColor: "colorBackgroundInverseStrong",
    boxShadow: "shadowBorderInverseStrongest"
  },
  _focus: {
    color: "colorTextInverse",
    fontWeight: "fontWeightSemibold",
    backgroundColor: "colorBackgroundInverseStrong",
    boxShadow: "shadowFocusInverse"
  },
  _active: {
    color: "colorTextInverse",
    fontWeight: "fontWeightSemibold",
    backgroundColor: "colorBackgroundInverseStrong",
    boxShadow: "shadowBorderInverseStrongest"
  }
});
var loadingStyles10 = (0, import_deepmerge11.default)(BaseStyles.loading, {
  color: "colorTextInverse",
  fontWeight: "fontWeightSemibold",
  backgroundColor: "colorBackgroundInverseStrong",
  boxShadow: "shadowBorderInverseWeaker"
});
var disabledStyles10 = (0, import_deepmerge11.default)(BaseStyles.disabled, {
  color: "colorTextInverseWeaker",
  fontWeight: "fontWeightSemibold",
  backgroundColor: "colorBackgroundInverse",
  boxShadow: "shadowBorderInverseWeakest"
});
var ButtonStyleMapping10 = {
  default: defaultStyles10,
  loading: loadingStyles10,
  disabled: disabledStyles10
};
var InverseButton = React10.forwardRef(
  (_a, ref) => {
    var _b = _a, { size, buttonState, fullWidth } = _b, props = __objRest(_b, ["size", "buttonState", "fullWidth"]);
    return /* @__PURE__ */ React10.createElement(
      import_box10.Box,
      __spreadValues(__spreadValues(__spreadValues({
        ref,
        width: fullWidth ? "100%" : "auto"
      }, (0, import_box10.safelySpreadBoxProps)(props)), ButtonStyleMapping10[buttonState]), SizeStyles[size])
    );
  }
);
InverseButton.defaultProps = {
  as: "button"
};
if (false) {
  InverseButton.propTypes = DirectButtonPropTypes;
}
InverseButton.displayName = "InverseButton";

// src/InverseLinkButton.tsx
var React11 = __toESM(require("react"));
var import_box11 = require("@twilio-paste/box");
var import_deepmerge12 = __toESM(require_cjs());
var defaultStyles11 = (0, import_deepmerge12.default)(BaseStyles.default, {
  color: "colorTextInverse",
  textAlign: "left",
  transition: "none",
  _hover: { color: "colorTextInverseWeaker", textDecoration: "underline" },
  _focus: { color: "colorTextInverseWeaker", boxShadow: "shadowFocusInverse", textDecoration: "underline" },
  _active: { textDecoration: "underline" }
});
var loadingStyles11 = (0, import_deepmerge12.default)(BaseStyles.loading, {
  color: "colorTextInverse",
  textAlign: "left"
});
var disabledStyles11 = (0, import_deepmerge12.default)(BaseStyles.disabled, {
  color: "colorTextInverseWeaker",
  textAlign: "left"
});
var ButtonStyleMapping11 = {
  default: defaultStyles11,
  loading: loadingStyles11,
  disabled: disabledStyles11
};
var InverseLinkButton = React11.forwardRef(
  (_a, ref) => {
    var _b = _a, { size, buttonState, fullWidth } = _b, props = __objRest(_b, ["size", "buttonState", "fullWidth"]);
    return /* @__PURE__ */ React11.createElement(
      import_box11.Box,
      __spreadValues(__spreadValues(__spreadValues({
        ref,
        width: fullWidth ? "100%" : "auto"
      }, (0, import_box11.safelySpreadBoxProps)(props)), ButtonStyleMapping11[buttonState]), SizeStyles[size])
    );
  }
);
InverseLinkButton.defaultProps = {
  as: "a"
};
if (false) {
  InverseLinkButton.propTypes = DirectButtonPropTypes;
}
InverseLinkButton.displayName = "InverseLinkButton";

// src/ResetButton.tsx
var React12 = __toESM(require("react"));
var import_box12 = require("@twilio-paste/box");
var import_deepmerge13 = __toESM(require_cjs());
var defaultStyles12 = (0, import_deepmerge13.default)(BaseStyles.default, {
  fontWeight: "inherit",
  color: "inherit"
});
var loadingStyles12 = (0, import_deepmerge13.default)(BaseStyles.loading, { fontSize: "inherit", fontWeight: "inherit" });
var disabledStyles12 = (0, import_deepmerge13.default)(BaseStyles.disabled, { fontSize: "inherit", fontWeight: "inherit" });
var ButtonStyleMapping12 = {
  default: defaultStyles12,
  loading: loadingStyles12,
  disabled: disabledStyles12
};
var ResetButton = React12.forwardRef(
  (_a, ref) => {
    var _b = _a, { size, buttonState, fullWidth } = _b, props = __objRest(_b, ["size", "buttonState", "fullWidth"]);
    return /* @__PURE__ */ React12.createElement(
      import_box12.Box,
      __spreadValues(__spreadValues(__spreadValues({
        ref,
        width: fullWidth ? "100%" : "auto"
      }, (0, import_box12.safelySpreadBoxProps)(props)), ButtonStyleMapping12[buttonState]), SizeStyles[size])
    );
  }
);
ResetButton.defaultProps = {
  as: "button"
};
if (false) {
  ResetButton.propTypes = DirectButtonPropTypes;
}
ResetButton.displayName = "ResetButton";

// src/index.tsx
var AnimatedBox = (0, import_animation_library.animated)(import_box13.Box);
var getButtonSize = (variant, children, size) => {
  let smartSize = "default";
  if (size != null) {
    smartSize = size;
  } else if (variant === "link" || variant === "destructive_link" || variant === "reset") {
    smartSize = "reset";
  } else if (React13.Children.count(children) === 1) {
    React13.Children.forEach(children, (child) => {
      if (React13.isValidElement(child) && typeof child.type.displayName === "string" && child.type.displayName.includes("Icon")) {
        smartSize = "icon";
      }
    });
  }
  return smartSize;
};
var getButtonState = (disabled, loading) => {
  if (disabled) {
    return "disabled";
  }
  if (loading) {
    return "loading";
  }
  return "default";
};
var handlePropValidation = ({
  as,
  href,
  tabIndex,
  variant,
  size,
  fullWidth,
  children,
  disabled,
  loading,
  pressed
}) => {
  const hasHref = href != null && href !== "";
  const hasTabIndex = tabIndex != null;
  if (as !== "a" && hasHref) {
    throw new Error(`[Paste: Button] You cannot pass href into a button without the 'a' tag.  Use 'as="a"'.`);
  }
  if (as === "a") {
    if (!hasHref) {
      throw new Error(`[Paste: Button] Missing href prop for link button.`);
    }
    if (variant === "link" || variant === "inverse_link") {
      throw new Error(`[Paste: Button] Using Button component as an Anchor. Use the Paste Anchor component instead.`);
    }
    if (variant !== "primary" && variant !== "secondary" && variant !== "reset" && variant !== "inverse") {
      throw new Error(`[Paste: Button] <Button as="a"> only works with the following variants: primary and secondary.`);
    }
    if (disabled || loading) {
      throw new Error(`[Paste: Button] <Button as="a"> cannot be disabled or loading.`);
    }
  }
  if (variant === "reset" && size !== "reset") {
    throw new Error('[Paste: Button] The "RESET" variant can only be used with the "RESET" size.');
  }
  if ((size === "icon" || size === "icon_small" || size === "circle" || size === "circle_small") && fullWidth) {
    throw new Error("[Paste: Button] Icon buttons should not be fullWidth.");
  }
  if (children == null) {
    throw new Error(`[Paste: Button] Must have non-null children.`);
  }
  if (hasTabIndex && !(tabIndex === 0 || tabIndex === -1)) {
    throw new Error(`[Paste: Button] tabIndex must be 0 or -1.`);
  }
  if (pressed && !(variant === "secondary" || variant === "secondary_icon")) {
    throw new Error(`[Paste: Button] pressed can only be used with "secondary" and "secondary_icon" variants.`);
  }
};
var variantsWithoutBoundingBox = /* @__PURE__ */ new Set(["link", "destructive_link", "inverse_link", "reset"]);
var ButtonContents = ({ buttonState, children, showLoading, variant }) => {
  const buttonVariantHasBoundingBox = variant && variantsWithoutBoundingBox.has(variant);
  return /* @__PURE__ */ React13.createElement(React13.Fragment, null, /* @__PURE__ */ React13.createElement(
    import_box13.Box,
    {
      as: "span",
      display: "flex",
      textDecoration: "inherit",
      opacity: buttonState === "loading" ? "0" : "1",
      justifyContent: buttonVariantHasBoundingBox ? null : "center",
      columnGap: "space20",
      alignItems: "center"
    },
    children
  ), showLoading ? /* @__PURE__ */ React13.createElement(
    import_box13.Box,
    {
      as: "span",
      position: "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      lineHeight: "lineHeight30"
    },
    /* @__PURE__ */ React13.createElement(import_spinner.Spinner, { decorative: true, delay: 0 })
  ) : null);
};
ButtonContents.displayName = "ButtonContents";
var getButtonComponent = (variant) => {
  switch (variant) {
    case "primary_icon":
      return PrimaryIconButton;
    case "secondary":
      return SecondaryButton;
    case "secondary_icon":
      return SecondaryIconButton;
    case "destructive":
      return DestructiveButton;
    case "destructive_icon":
      return DestructiveIconButton;
    case "destructive_secondary":
      return DestructiveSecondaryButton;
    case "link":
      return LinkButton;
    case "destructive_link":
      return DestructiveLinkButton;
    case "reset":
      return ResetButton;
    case "inverse":
      return InverseButton;
    case "inverse_link":
      return InverseLinkButton;
    case "primary":
    default:
      return PrimaryButton;
  }
};
var Button = React13.forwardRef(
  (_a, ref) => {
    var _b = _a, { element = "BUTTON", i18nExternalLinkLabel = "(link takes you to an external page)" } = _b, props = __objRest(_b, ["element", "i18nExternalLinkLabel"]);
    const _a2 = props, { size, variant, children, disabled, loading } = _a2, rest = __objRest(_a2, ["size", "variant", "children", "disabled", "loading"]);
    const [hovered, setHovered] = React13.useState(false);
    const arrowIconStyles = (0, import_animation_library.useSpring)({
      translateX: hovered ? "4px" : "0px",
      config: {
        mass: 0.1,
        tension: 275,
        friction: 16
      }
    });
    const smartDefaultSize = React13.useMemo(() => {
      return getButtonSize(variant, children, size);
    }, [size, variant, children]);
    handlePropValidation(__spreadProps(__spreadValues({}, props), { size: smartDefaultSize }));
    const buttonState = getButtonState(disabled, loading);
    const showLoading = buttonState === "loading";
    const showDisabled = buttonState !== "default";
    const ButtonComponent = getButtonComponent(variant);
    const externalLinkProps = props.href != null ? (0, import_anchor.secureExternalLink)(props.href) : null;
    let injectIconChildren = children;
    if (props.as === "a" && props.href != null && typeof children === "string" && variant !== "reset") {
      injectIconChildren = /* @__PURE__ */ React13.createElement(React13.Fragment, null, children, externalLinkProps != null ? /* @__PURE__ */ React13.createElement(import_LinkExternalIcon.LinkExternalIcon, { decorative: false, title: i18nExternalLinkLabel }) : /* @__PURE__ */ React13.createElement(AnimatedBox, { style: arrowIconStyles }, /* @__PURE__ */ React13.createElement(import_ArrowForwardIcon.ArrowForwardIcon, { decorative: true })));
    }
    return /* @__PURE__ */ React13.createElement(
      ButtonComponent,
      __spreadProps(__spreadValues(__spreadValues({}, externalLinkProps), rest), {
        onMouseEnter: (event) => {
          if (typeof rest.onMouseEnter === "function") {
            rest.onMouseEnter(event);
          }
          setHovered(true);
        },
        onMouseLeave: (event) => {
          if (typeof rest.onMouseLeave === "function") {
            rest.onMouseLeave(event);
          }
          setHovered(false);
        },
        buttonState,
        disabled: showDisabled,
        element,
        variant,
        size: smartDefaultSize,
        "aria-busy": buttonState === "loading" ? "true" : "false",
        className: void 0,
        style: void 0,
        ref
      }),
      /* @__PURE__ */ React13.createElement(ButtonContents, { buttonState, showLoading, variant }, injectIconChildren)
    );
  }
);
Button.defaultProps = {
  as: "button",
  fullWidth: false,
  disabled: false,
  loading: false,
  type: "button",
  variant: "primary"
};
Button.propTypes = ButtonPropTypes;
Button.displayName = "Button";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Button,
  ButtonToggleStyles
});

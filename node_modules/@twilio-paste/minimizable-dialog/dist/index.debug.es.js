var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/MinimizableDialog.tsx
import * as React2 from "react";
import PropTypes from "prop-types";
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { StyledBase } from "@twilio-paste/theme";
import { NonModalDialogPrimitive } from "@twilio-paste/non-modal-dialog-primitive";

// src/MinimizableDialogContext.tsx
import * as React from "react";
var MinimizableDialogContext = React.createContext({});

// src/MinimizableDialog.tsx
var StyledMinimizableDialog = React2.forwardRef(
  (_a, ref) => {
    var _b = _a, { minimized, style } = _b, props = __objRest(_b, ["minimized", "style"]);
    return /* @__PURE__ */ React2.createElement(
      Box,
      __spreadProps(__spreadValues({}, safelySpreadBoxProps(props)), {
        ref,
        boxShadow: "shadow",
        width: "size40",
        zIndex: "zIndex80",
        borderRadius: "borderRadius20",
        transform: "none!important",
        inset: `auto 1.5rem ${minimized === true ? "0" : "1.5"}rem auto!important`,
        _focus: { outline: "none" },
        style
      })
    );
  }
);
StyledMinimizableDialog.displayName = "StyledMinimizableDialog";
var MinimizableDialog = React2.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, element = "MINIMIZABLE_DIALOG" } = _b, props = __objRest(_b, ["children", "element"]);
    const dialog = React2.useContext(MinimizableDialogContext);
    return /* @__PURE__ */ React2.createElement(
      NonModalDialogPrimitive,
      __spreadProps(__spreadValues(__spreadValues({}, dialog), props), {
        as: StyledMinimizableDialog,
        ref,
        preventBodyScroll: false,
        hideOnClickOutside: false
      }),
      /* @__PURE__ */ React2.createElement(StyledBase, null, /* @__PURE__ */ React2.createElement(Box, { element, display: "flex", flexDirection: "column", backgroundColor: "colorBackgroundBody" }, children))
    );
  }
);
MinimizableDialog.displayName = "MinimizableDialog";
MinimizableDialog.propTypes = {
  "aria-label": PropTypes.string.isRequired,
  children: PropTypes.node.isRequired,
  element: PropTypes.string
};

// src/MinimizableDialogButton.tsx
import * as React3 from "react";
import PropTypes2 from "prop-types";
import { Button } from "@twilio-paste/button";
import { NonModalDialogDisclosurePrimitive } from "@twilio-paste/non-modal-dialog-primitive";
var MinimizableDialogButton = React3.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, element = "MINIMIZABLE_DIALOG_BUTTON" } = _b, props = __objRest(_b, ["children", "element"]);
    const dialog = React3.useContext(MinimizableDialogContext);
    return /* @__PURE__ */ React3.createElement(NonModalDialogDisclosurePrimitive, __spreadProps(__spreadValues(__spreadValues({ element }, dialog), props), { as: Button, ref }), children);
  }
);
MinimizableDialogButton.propTypes = {
  id: PropTypes2.string,
  children: PropTypes2.node.isRequired,
  toggle: PropTypes2.func,
  element: PropTypes2.string
};
MinimizableDialogButton.displayName = "MinimizableDialogButton";

// src/MinimizableDialogHeader.tsx
import * as React4 from "react";
import PropTypes3 from "prop-types";
import { Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import { Button as Button2 } from "@twilio-paste/button";
import { ChevronUpIcon } from "@twilio-paste/icons/esm/ChevronUpIcon";
import { CloseIcon } from "@twilio-paste/icons/esm/CloseIcon";
import { ScreenReaderOnly } from "@twilio-paste/screen-reader-only";
import { MinusIcon } from "@twilio-paste/icons/esm/MinusIcon";
var MinimizableDialogHeader = React4.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      children,
      element = "MINIMIZABLE_DIALOG_HEADER",
      i18nDismissLabel = "close",
      i18nMinimizeLabel = "minimize"
    } = _b, props = __objRest(_b, [
      "children",
      "element",
      "i18nDismissLabel",
      "i18nMinimizeLabel"
    ]);
    const { hide, minimized, minimize, expand } = React4.useContext(MinimizableDialogContext);
    return /* @__PURE__ */ React4.createElement(
      Box2,
      __spreadProps(__spreadValues({}, safelySpreadBoxProps2(props)), {
        ref,
        display: "grid",
        gridTemplateColumns: "1fr auto auto",
        columnGap: "space30",
        backgroundColor: "colorBackgroundInverse",
        paddingX: "space70",
        paddingY: "space40",
        color: "colorTextInverse",
        overflow: "hidden",
        borderTopLeftRadius: "borderRadius20",
        borderTopRightRadius: "borderRadius20",
        element
      }),
      /* @__PURE__ */ React4.createElement(
        Box2,
        {
          as: "h2",
          element: `${element}_HEADING`,
          fontWeight: "fontWeightBold",
          fontSize: "fontSize30",
          lineHeight: "lineHeight30",
          margin: "space0"
        },
        children
      ),
      /* @__PURE__ */ React4.createElement(
        Button2,
        {
          element: `${element}_MINIMIZE_BUTTON`,
          variant: "reset",
          size: "reset",
          onClick: minimized ? expand : minimize,
          "aria-pressed": minimized === void 0 ? false : minimized
        },
        minimized ? /* @__PURE__ */ React4.createElement(ChevronUpIcon, { element: `${element}_MINIMIZE_ICON`, decorative: true, size: "sizeIcon20" }) : /* @__PURE__ */ React4.createElement(MinusIcon, { element: `${element}_MINIMIZE_ICON`, decorative: true, size: "sizeIcon20" }),
        /* @__PURE__ */ React4.createElement(ScreenReaderOnly, null, i18nMinimizeLabel)
      ),
      /* @__PURE__ */ React4.createElement(Button2, { element: `${element}_CLOSE_BUTTON`, variant: "reset", size: "reset", onClick: hide }, /* @__PURE__ */ React4.createElement(CloseIcon, { element: `${element}_CLOSE_ICON`, decorative: true, size: "sizeIcon20" }), /* @__PURE__ */ React4.createElement(ScreenReaderOnly, null, i18nDismissLabel))
    );
  }
);
MinimizableDialogHeader.displayName = "MinimizableDialogHeader";
MinimizableDialogHeader.propTypes = {
  children: PropTypes3.node,
  i18nDismissLabel: PropTypes3.string,
  i18nMinimizeLabel: PropTypes3.string,
  element: PropTypes3.string
};

// src/MinimizableDialogContainer.tsx
import * as React5 from "react";
import { useNonModalDialogPrimitiveState } from "@twilio-paste/non-modal-dialog-primitive";
var useMinimizableDialogState = (_a) => {
  var _b = _a, {
    minimized: minimizedArg
  } = _b, initialState = __objRest(_b, [
    "minimized"
  ]);
  const [minimized, setMinimized] = React5.useState(minimizedArg);
  const minimize = () => setMinimized(true);
  const expand = () => setMinimized(false);
  const dialog = useNonModalDialogPrimitiveState(__spreadValues({}, initialState));
  return __spreadProps(__spreadValues({}, dialog), { minimized, minimize, expand });
};
var BaseMinimizableDialogContainer = (_a) => {
  var _b = _a, {
    gutter,
    children,
    placement,
    modal,
    state,
    minimized: minimizedProp
  } = _b, initialState = __objRest(_b, [
    "gutter",
    "children",
    "placement",
    "modal",
    "state",
    "minimized"
  ]);
  const dialog = state || useMinimizableDialogState(__spreadValues({
    minimized: minimizedProp,
    modal: true
  }, initialState));
  return /* @__PURE__ */ React5.createElement(MinimizableDialogContext.Provider, { value: __spreadValues({}, dialog) }, children);
};
BaseMinimizableDialogContainer.displayName = "BaseMinimizableDialogContainer";
var MinimizableDialogContainer = React5.memo(BaseMinimizableDialogContainer);
MinimizableDialogContainer.displayName = "MinimizableDialogContainer";

// src/MinimizableDialogContent.tsx
import * as React6 from "react";
import PropTypes4 from "prop-types";
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps3 } from "@twilio-paste/box";
var MinimizableDialogContent = React6.forwardRef(
  (_a, ref) => {
    var _b = _a, { children, element = "MINIMIZABLE_DIALOG_CONTENT" } = _b, props = __objRest(_b, ["children", "element"]);
    const { minimized } = React6.useContext(MinimizableDialogContext);
    return /* @__PURE__ */ React6.createElement(
      Box3,
      __spreadProps(__spreadValues({}, safelySpreadBoxProps3(props)), {
        element,
        ref,
        display: minimized ? "none" : "block",
        borderBottomLeftRadius: "borderRadius20",
        borderBottomRightRadius: "borderRadius20"
      }),
      children
    );
  }
);
MinimizableDialogContent.propTypes = {
  children: PropTypes4.node,
  element: PropTypes4.string
};
MinimizableDialogContent.displayName = "MinimizableDialogContent";
export {
  MinimizableDialog,
  MinimizableDialogButton,
  MinimizableDialogContainer,
  MinimizableDialogContent,
  MinimizableDialogHeader,
  useMinimizableDialogState
};

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/Radio.tsx
import * as React2 from "react";
import "prop-types";
import { useUID } from "@twilio-paste/uid-library";
import { Box } from "@twilio-paste/box";
import {
  BaseRadioCheckboxControl,
  BaseRadioCheckboxLabel,
  BaseRadioCheckboxLabelText,
  BaseRadioCheckboxHelpText
} from "@twilio-paste/base-radio-checkbox";

// src/RadioContext.tsx
import * as React from "react";
var RadioContext = React.createContext({
  name: "",
  value: "",
  disabled: false,
  hasError: false,
  onChange: () => {
  }
});

// src/Radio.tsx
var HiddenRadio = React2.forwardRef((props, ref) => /* @__PURE__ */ React2.createElement(
  Box,
  __spreadValues({
    as: "input",
    type: "radio",
    size: "size0",
    border: "none",
    overflow: "hidden",
    padding: "space0",
    margin: "space0",
    whiteSpace: "nowrap",
    textTransform: "none",
    position: "absolute",
    clip: "rect(0 0 0 0)",
    ref
  }, props)
));
HiddenRadio.displayName = "HiddenRadio";
var Radio = React2.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      id,
      name,
      element = "RADIO",
      value,
      checked,
      defaultChecked,
      disabled,
      hasError,
      onChange,
      children,
      helpText
    } = _b, props = __objRest(_b, [
      "id",
      "name",
      "element",
      "value",
      "checked",
      "defaultChecked",
      "disabled",
      "hasError",
      "onChange",
      "children",
      "helpText"
    ]);
    if (checked != null && defaultChecked != null) {
      throw new Error(
        `[Paste Radio] Do not provide both 'defaultChecked' and 'checked' to Radio at the same time. Please consider if you want this component to be controlled or uncontrolled.`
      );
    }
    const radioGroupContext = React2.useContext(RadioContext);
    const helpTextId = useUID();
    const radioId = id ? id : useUID();
    const isControlled = React2.useMemo(() => checked !== void 0 || radioGroupContext.value !== "", []);
    const handleChange = React2.useCallback(
      (event) => {
        if (onChange) {
          onChange(event);
        } else {
          radioGroupContext.onChange(event);
        }
      },
      [onChange, radioGroupContext.onChange]
    );
    const state = {
      name: name != null ? name : radioGroupContext.name,
      disabled: disabled != null ? disabled : radioGroupContext.disabled,
      hasError: hasError != null ? hasError : radioGroupContext.hasError
    };
    if (isControlled) {
      if (radioGroupContext.value !== "") {
        state.checked = radioGroupContext.value === value;
      } else {
        state.checked = checked;
      }
    } else {
      state.defaultChecked = defaultChecked;
    }
    return /* @__PURE__ */ React2.createElement(
      Box,
      {
        element,
        position: "relative",
        display: "inline-flex",
        alignItems: "flex-start",
        flexDirection: "column",
        verticalAlign: "top"
      },
      /* @__PURE__ */ React2.createElement(
        HiddenRadio,
        __spreadProps(__spreadValues(__spreadValues({}, props), state), {
          value,
          "aria-describedby": helpTextId,
          "aria-invalid": state.hasError,
          onChange: handleChange,
          id: radioId,
          ref
        })
      ),
      /* @__PURE__ */ React2.createElement(BaseRadioCheckboxLabel, { disabled: state.disabled, htmlFor: radioId }, /* @__PURE__ */ React2.createElement(
        BaseRadioCheckboxControl,
        {
          element: `${element}_CONTROL`,
          borderRadius: "borderRadiusCircle",
          disabled: state.disabled,
          type: "radio"
        },
        /* @__PURE__ */ React2.createElement(
          Box,
          {
            as: "span",
            element: `${element}_CONTROL_CIRCLE`,
            lineHeight: "lineHeight0",
            display: "block",
            color: "inherit",
            size: "sizeIcon10"
          },
          /* @__PURE__ */ React2.createElement("svg", { role: "img", "aria-hidden": true, width: "100%", height: "100%", viewBox: "0 0 16 16", fill: "none" }, /* @__PURE__ */ React2.createElement("circle", { fill: "currentColor", cx: 8, cy: 8, r: 3 }))
        )
      ), /* @__PURE__ */ React2.createElement(BaseRadioCheckboxLabelText, { element: `${element}_LABEL_TEXT` }, children)),
      helpText && /* @__PURE__ */ React2.createElement(BaseRadioCheckboxHelpText, { element: `${element}_HELP_TEXT_WRAPPER`, helpTextId }, helpText)
    );
  }
);
Radio.displayName = "Radio";
if (false) {
  Radio.propTypes = {
    id: PropTypes.string,
    value: PropTypes.string,
    name: PropTypes.string,
    checked: PropTypes.bool,
    disabled: PropTypes.bool,
    hasError: PropTypes.bool,
    helpText: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
    onChange: PropTypes.func,
    children: PropTypes.node.isRequired,
    element: PropTypes.string
  };
}

// src/RadioGroup.tsx
import * as React3 from "react";
import PropTypes2 from "prop-types";
import { InlineControlGroup } from "@twilio-paste/inline-control-group";
var RadioGroup = React3.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      name,
      element = "RADIO_GROUP",
      value,
      onChange,
      disabled = false,
      errorText,
      children,
      i18nRequiredLabel = "(required)"
    } = _b, props = __objRest(_b, [
      "name",
      "element",
      "value",
      "onChange",
      "disabled",
      "errorText",
      "children",
      "i18nRequiredLabel"
    ]);
    const onChangeHandler = React3.useCallback(
      (event) => {
        if (onChange != null) {
          onChange(event.target.value);
        }
      },
      [onChange]
    );
    const contextValue = React3.useMemo(() => {
      return {
        name,
        value: value || "",
        disabled,
        hasError: errorText != null,
        onChange: onChangeHandler
      };
    }, [name, value, disabled, errorText, onChangeHandler]);
    return /* @__PURE__ */ React3.createElement(RadioContext.Provider, { value: contextValue }, /* @__PURE__ */ React3.createElement(
      InlineControlGroup,
      __spreadProps(__spreadValues({
        element
      }, props), {
        disabled,
        errorText,
        name,
        ref,
        i18nRequiredLabel
      }),
      children
    ));
  }
);
RadioGroup.displayName = "RadioGroup";
RadioGroup.propTypes = {
  name: PropTypes2.string.isRequired,
  onChange: PropTypes2.func,
  value: PropTypes2.string,
  element: PropTypes2.string,
  i18nRequiredLabel: PropTypes2.string
};
export {
  Radio,
  RadioGroup
};

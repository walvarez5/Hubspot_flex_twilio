"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "../../node_modules/lodash/_freeGlobal.js"(exports, module2) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module2.exports = freeGlobal;
  }
});

// ../../node_modules/lodash/_root.js
var require_root = __commonJS({
  "../../node_modules/lodash/_root.js"(exports, module2) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module2.exports = root;
  }
});

// ../../node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "../../node_modules/lodash/_Symbol.js"(exports, module2) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module2.exports = Symbol2;
  }
});

// ../../node_modules/lodash/_arrayMap.js
var require_arrayMap = __commonJS({
  "../../node_modules/lodash/_arrayMap.js"(exports, module2) {
    function arrayMap(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    module2.exports = arrayMap;
  }
});

// ../../node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "../../node_modules/lodash/isArray.js"(exports, module2) {
    var isArray = Array.isArray;
    module2.exports = isArray;
  }
});

// ../../node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "../../node_modules/lodash/_getRawTag.js"(exports, module2) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module2.exports = getRawTag;
  }
});

// ../../node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "../../node_modules/lodash/_objectToString.js"(exports, module2) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module2.exports = objectToString;
  }
});

// ../../node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "../../node_modules/lodash/_baseGetTag.js"(exports, module2) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module2.exports = baseGetTag;
  }
});

// ../../node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "../../node_modules/lodash/isObjectLike.js"(exports, module2) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module2.exports = isObjectLike;
  }
});

// ../../node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "../../node_modules/lodash/isSymbol.js"(exports, module2) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module2.exports = isSymbol;
  }
});

// ../../node_modules/lodash/_baseToString.js
var require_baseToString = __commonJS({
  "../../node_modules/lodash/_baseToString.js"(exports, module2) {
    var Symbol2 = require_Symbol();
    var arrayMap = require_arrayMap();
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module2.exports = baseToString;
  }
});

// ../../node_modules/lodash/toString.js
var require_toString = __commonJS({
  "../../node_modules/lodash/toString.js"(exports, module2) {
    var baseToString = require_baseToString();
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    module2.exports = toString;
  }
});

// ../../node_modules/lodash/_baseSlice.js
var require_baseSlice = __commonJS({
  "../../node_modules/lodash/_baseSlice.js"(exports, module2) {
    function baseSlice(array, start, end) {
      var index = -1, length = array.length;
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;
      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }
    module2.exports = baseSlice;
  }
});

// ../../node_modules/lodash/_castSlice.js
var require_castSlice = __commonJS({
  "../../node_modules/lodash/_castSlice.js"(exports, module2) {
    var baseSlice = require_baseSlice();
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === void 0 ? length : end;
      return !start && end >= length ? array : baseSlice(array, start, end);
    }
    module2.exports = castSlice;
  }
});

// ../../node_modules/lodash/_hasUnicode.js
var require_hasUnicode = __commonJS({
  "../../node_modules/lodash/_hasUnicode.js"(exports, module2) {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsZWJ = "\\u200d";
    var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }
    module2.exports = hasUnicode;
  }
});

// ../../node_modules/lodash/_asciiToArray.js
var require_asciiToArray = __commonJS({
  "../../node_modules/lodash/_asciiToArray.js"(exports, module2) {
    function asciiToArray(string) {
      return string.split("");
    }
    module2.exports = asciiToArray;
  }
});

// ../../node_modules/lodash/_unicodeToArray.js
var require_unicodeToArray = __commonJS({
  "../../node_modules/lodash/_unicodeToArray.js"(exports, module2) {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsAstral = "[" + rsAstralRange + "]";
    var rsCombo = "[" + rsComboRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsZWJ = "\\u200d";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }
    module2.exports = unicodeToArray;
  }
});

// ../../node_modules/lodash/_stringToArray.js
var require_stringToArray = __commonJS({
  "../../node_modules/lodash/_stringToArray.js"(exports, module2) {
    var asciiToArray = require_asciiToArray();
    var hasUnicode = require_hasUnicode();
    var unicodeToArray = require_unicodeToArray();
    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    module2.exports = stringToArray;
  }
});

// ../../node_modules/lodash/_createCaseFirst.js
var require_createCaseFirst = __commonJS({
  "../../node_modules/lodash/_createCaseFirst.js"(exports, module2) {
    var castSlice = require_castSlice();
    var hasUnicode = require_hasUnicode();
    var stringToArray = require_stringToArray();
    var toString = require_toString();
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);
        var strSymbols = hasUnicode(string) ? stringToArray(string) : void 0;
        var chr = strSymbols ? strSymbols[0] : string.charAt(0);
        var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
        return chr[methodName]() + trailing;
      };
    }
    module2.exports = createCaseFirst;
  }
});

// ../../node_modules/lodash/upperFirst.js
var require_upperFirst = __commonJS({
  "../../node_modules/lodash/upperFirst.js"(exports, module2) {
    var createCaseFirst = require_createCaseFirst();
    var upperFirst = createCaseFirst("toUpperCase");
    module2.exports = upperFirst;
  }
});

// ../../node_modules/lodash/capitalize.js
var require_capitalize = __commonJS({
  "../../node_modules/lodash/capitalize.js"(exports, module2) {
    var toString = require_toString();
    var upperFirst = require_upperFirst();
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }
    module2.exports = capitalize;
  }
});

// ../../node_modules/lodash/_arrayReduce.js
var require_arrayReduce = __commonJS({
  "../../node_modules/lodash/_arrayReduce.js"(exports, module2) {
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1, length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }
    module2.exports = arrayReduce;
  }
});

// ../../node_modules/lodash/_basePropertyOf.js
var require_basePropertyOf = __commonJS({
  "../../node_modules/lodash/_basePropertyOf.js"(exports, module2) {
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? void 0 : object[key];
      };
    }
    module2.exports = basePropertyOf;
  }
});

// ../../node_modules/lodash/_deburrLetter.js
var require_deburrLetter = __commonJS({
  "../../node_modules/lodash/_deburrLetter.js"(exports, module2) {
    var basePropertyOf = require_basePropertyOf();
    var deburredLetters = {
      "\xC0": "A",
      "\xC1": "A",
      "\xC2": "A",
      "\xC3": "A",
      "\xC4": "A",
      "\xC5": "A",
      "\xE0": "a",
      "\xE1": "a",
      "\xE2": "a",
      "\xE3": "a",
      "\xE4": "a",
      "\xE5": "a",
      "\xC7": "C",
      "\xE7": "c",
      "\xD0": "D",
      "\xF0": "d",
      "\xC8": "E",
      "\xC9": "E",
      "\xCA": "E",
      "\xCB": "E",
      "\xE8": "e",
      "\xE9": "e",
      "\xEA": "e",
      "\xEB": "e",
      "\xCC": "I",
      "\xCD": "I",
      "\xCE": "I",
      "\xCF": "I",
      "\xEC": "i",
      "\xED": "i",
      "\xEE": "i",
      "\xEF": "i",
      "\xD1": "N",
      "\xF1": "n",
      "\xD2": "O",
      "\xD3": "O",
      "\xD4": "O",
      "\xD5": "O",
      "\xD6": "O",
      "\xD8": "O",
      "\xF2": "o",
      "\xF3": "o",
      "\xF4": "o",
      "\xF5": "o",
      "\xF6": "o",
      "\xF8": "o",
      "\xD9": "U",
      "\xDA": "U",
      "\xDB": "U",
      "\xDC": "U",
      "\xF9": "u",
      "\xFA": "u",
      "\xFB": "u",
      "\xFC": "u",
      "\xDD": "Y",
      "\xFD": "y",
      "\xFF": "y",
      "\xC6": "Ae",
      "\xE6": "ae",
      "\xDE": "Th",
      "\xFE": "th",
      "\xDF": "ss",
      "\u0100": "A",
      "\u0102": "A",
      "\u0104": "A",
      "\u0101": "a",
      "\u0103": "a",
      "\u0105": "a",
      "\u0106": "C",
      "\u0108": "C",
      "\u010A": "C",
      "\u010C": "C",
      "\u0107": "c",
      "\u0109": "c",
      "\u010B": "c",
      "\u010D": "c",
      "\u010E": "D",
      "\u0110": "D",
      "\u010F": "d",
      "\u0111": "d",
      "\u0112": "E",
      "\u0114": "E",
      "\u0116": "E",
      "\u0118": "E",
      "\u011A": "E",
      "\u0113": "e",
      "\u0115": "e",
      "\u0117": "e",
      "\u0119": "e",
      "\u011B": "e",
      "\u011C": "G",
      "\u011E": "G",
      "\u0120": "G",
      "\u0122": "G",
      "\u011D": "g",
      "\u011F": "g",
      "\u0121": "g",
      "\u0123": "g",
      "\u0124": "H",
      "\u0126": "H",
      "\u0125": "h",
      "\u0127": "h",
      "\u0128": "I",
      "\u012A": "I",
      "\u012C": "I",
      "\u012E": "I",
      "\u0130": "I",
      "\u0129": "i",
      "\u012B": "i",
      "\u012D": "i",
      "\u012F": "i",
      "\u0131": "i",
      "\u0134": "J",
      "\u0135": "j",
      "\u0136": "K",
      "\u0137": "k",
      "\u0138": "k",
      "\u0139": "L",
      "\u013B": "L",
      "\u013D": "L",
      "\u013F": "L",
      "\u0141": "L",
      "\u013A": "l",
      "\u013C": "l",
      "\u013E": "l",
      "\u0140": "l",
      "\u0142": "l",
      "\u0143": "N",
      "\u0145": "N",
      "\u0147": "N",
      "\u014A": "N",
      "\u0144": "n",
      "\u0146": "n",
      "\u0148": "n",
      "\u014B": "n",
      "\u014C": "O",
      "\u014E": "O",
      "\u0150": "O",
      "\u014D": "o",
      "\u014F": "o",
      "\u0151": "o",
      "\u0154": "R",
      "\u0156": "R",
      "\u0158": "R",
      "\u0155": "r",
      "\u0157": "r",
      "\u0159": "r",
      "\u015A": "S",
      "\u015C": "S",
      "\u015E": "S",
      "\u0160": "S",
      "\u015B": "s",
      "\u015D": "s",
      "\u015F": "s",
      "\u0161": "s",
      "\u0162": "T",
      "\u0164": "T",
      "\u0166": "T",
      "\u0163": "t",
      "\u0165": "t",
      "\u0167": "t",
      "\u0168": "U",
      "\u016A": "U",
      "\u016C": "U",
      "\u016E": "U",
      "\u0170": "U",
      "\u0172": "U",
      "\u0169": "u",
      "\u016B": "u",
      "\u016D": "u",
      "\u016F": "u",
      "\u0171": "u",
      "\u0173": "u",
      "\u0174": "W",
      "\u0175": "w",
      "\u0176": "Y",
      "\u0177": "y",
      "\u0178": "Y",
      "\u0179": "Z",
      "\u017B": "Z",
      "\u017D": "Z",
      "\u017A": "z",
      "\u017C": "z",
      "\u017E": "z",
      "\u0132": "IJ",
      "\u0133": "ij",
      "\u0152": "Oe",
      "\u0153": "oe",
      "\u0149": "'n",
      "\u017F": "s"
    };
    var deburrLetter = basePropertyOf(deburredLetters);
    module2.exports = deburrLetter;
  }
});

// ../../node_modules/lodash/deburr.js
var require_deburr = __commonJS({
  "../../node_modules/lodash/deburr.js"(exports, module2) {
    var deburrLetter = require_deburrLetter();
    var toString = require_toString();
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsCombo = "[" + rsComboRange + "]";
    var reComboMark = RegExp(rsCombo, "g");
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
    }
    module2.exports = deburr;
  }
});

// ../../node_modules/lodash/_asciiWords.js
var require_asciiWords = __commonJS({
  "../../node_modules/lodash/_asciiWords.js"(exports, module2) {
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }
    module2.exports = asciiWords;
  }
});

// ../../node_modules/lodash/_hasUnicodeWord.js
var require_hasUnicodeWord = __commonJS({
  "../../node_modules/lodash/_hasUnicodeWord.js"(exports, module2) {
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }
    module2.exports = hasUnicodeWord;
  }
});

// ../../node_modules/lodash/_unicodeWords.js
var require_unicodeWords = __commonJS({
  "../../node_modules/lodash/_unicodeWords.js"(exports, module2) {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsDingbatRange = "\\u2700-\\u27bf";
    var rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff";
    var rsMathOpRange = "\\xac\\xb1\\xd7\\xf7";
    var rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
    var rsPunctuationRange = "\\u2000-\\u206f";
    var rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
    var rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde";
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['\u2019]";
    var rsBreak = "[" + rsBreakRange + "]";
    var rsCombo = "[" + rsComboRange + "]";
    var rsDigits = "\\d+";
    var rsDingbat = "[" + rsDingbatRange + "]";
    var rsLower = "[" + rsLowerRange + "]";
    var rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsUpper = "[" + rsUpperRange + "]";
    var rsZWJ = "\\u200d";
    var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")";
    var rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")";
    var rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?";
    var rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])";
    var rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
    var reUnicodeWord = RegExp([
      rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
      rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
      rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
      rsUpper + "+" + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join("|"), "g");
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }
    module2.exports = unicodeWords;
  }
});

// ../../node_modules/lodash/words.js
var require_words = __commonJS({
  "../../node_modules/lodash/words.js"(exports, module2) {
    var asciiWords = require_asciiWords();
    var hasUnicodeWord = require_hasUnicodeWord();
    var toString = require_toString();
    var unicodeWords = require_unicodeWords();
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? void 0 : pattern;
      if (pattern === void 0) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }
    module2.exports = words;
  }
});

// ../../node_modules/lodash/_createCompounder.js
var require_createCompounder = __commonJS({
  "../../node_modules/lodash/_createCompounder.js"(exports, module2) {
    var arrayReduce = require_arrayReduce();
    var deburr = require_deburr();
    var words = require_words();
    var rsApos = "['\u2019]";
    var reApos = RegExp(rsApos, "g");
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
      };
    }
    module2.exports = createCompounder;
  }
});

// ../../node_modules/lodash/camelCase.js
var require_camelCase = __commonJS({
  "../../node_modules/lodash/camelCase.js"(exports, module2) {
    var capitalize = require_capitalize();
    var createCompounder = require_createCompounder();
    var camelCase2 = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });
    module2.exports = camelCase2;
  }
});

// src/index.ts
var src_exports = {};
__export(src_exports, {
  BACKGROUND_PROPS: () => BACKGROUND_PROPS,
  BORDER_COLOR_PROPS: () => BORDER_COLOR_PROPS,
  BORDER_PROPS: () => BORDER_PROPS,
  BORDER_RADIUS_PROPS: () => BORDER_RADIUS_PROPS,
  BORDER_STYLE_PROPS: () => BORDER_STYLE_PROPS,
  BORDER_WIDTH_PROPS: () => BORDER_WIDTH_PROPS,
  FLEXBOX_PROPS: () => FLEXBOX_PROPS,
  GAP_PROPS: () => GAP_PROPS,
  GRID_PROPS: () => GRID_PROPS,
  LAYOUT_PROPS: () => LAYOUT_PROPS,
  MARGIN_PROPS: () => MARGIN_PROPS,
  OVERFLOW_PROPS: () => OVERFLOW_PROPS,
  PADDING_PROPS: () => PADDING_PROPS,
  POSITION_PROPS: () => POSITION_PROPS,
  ResponsiveProp: () => ResponsiveProp,
  SHADOW_PROPS: () => SHADOW_PROPS,
  SPACE_PROPS: () => SPACE_PROPS,
  StyleResetProp: () => StyleResetProp,
  TYPOGRAPHY_PROPS: () => TYPOGRAPHY_PROPS,
  isBackgroundColorTokenProp: () => isBackgroundColorTokenProp,
  isBorderColorTokenProp: () => isBorderColorTokenProp,
  isBorderRadiusTokenProp: () => isBorderRadiusTokenProp,
  isBorderWidthTokenProp: () => isBorderWidthTokenProp,
  isBoxShadowTokenProp: () => isBoxShadowTokenProp,
  isDeprecatedBackgroundColorTokenProp: () => isDeprecatedBackgroundColorTokenProp,
  isDeprecatedBorderColorTokenProp: () => isDeprecatedBorderColorTokenProp,
  isDeprecatedBoxShadowTokenProp: () => isDeprecatedBoxShadowTokenProp,
  isDeprecatedTextColorTokenProp: () => isDeprecatedTextColorTokenProp,
  isFontFamilyTokenProp: () => isFontFamilyTokenProp,
  isFontSizeTokenProp: () => isFontSizeTokenProp,
  isFontWeightTokenProp: () => isFontWeightTokenProp,
  isGapTokenProp: () => isGapTokenProp,
  isHeightTokenProp: () => isHeightTokenProp,
  isIconSizeTokenProp: () => isIconSizeTokenProp,
  isLineHeightTokenProp: () => isLineHeightTokenProp,
  isMarginTokenProp: () => isMarginTokenProp,
  isMaxHeightTokenProp: () => isMaxHeightTokenProp,
  isMaxWidthTokenProp: () => isMaxWidthTokenProp,
  isMinHeightTokenProp: () => isMinHeightTokenProp,
  isMinWidthTokenProp: () => isMinWidthTokenProp,
  isPaddingTokenProp: () => isPaddingTokenProp,
  isSpaceTokenProp: () => isSpaceTokenProp,
  isTextColorTokenProp: () => isTextColorTokenProp,
  isWidthTokenProp: () => isWidthTokenProp,
  isZIndexTokenProp: () => isZIndexTokenProp
});
module.exports = __toCommonJS(src_exports);

// src/background.ts
var BACKGROUND_PROPS = [
  "background",
  "backgroundColor",
  "backgroundImage",
  "backgroundSize",
  "backgroundPosition",
  "backgroundRepeat",
  "backgroundAttachment"
];

// src/border.ts
var BORDER_RADIUS_PROPS = [
  "borderRadius",
  "borderBottomLeftRadius",
  "borderBottomRightRadius",
  "borderTopLeftRadius",
  "borderTopRightRadius"
];
var BORDER_WIDTH_PROPS = [
  "borderWidth",
  "borderBottomWidth",
  "borderLeftWidth",
  "borderRightWidth",
  "borderTopWidth"
];
var BORDER_COLOR_PROPS = [
  "borderColor",
  "borderBottomColor",
  "borderLeftColor",
  "borderRightColor",
  "borderTopColor"
];
var BORDER_STYLE_PROPS = [
  "borderStyle",
  "borderTopStyle",
  "borderRightStyle",
  "borderBottomStyle",
  "borderLeftStyle"
];
var BORDER_PROPS = [
  ...BORDER_RADIUS_PROPS,
  ...BORDER_WIDTH_PROPS,
  ...BORDER_COLOR_PROPS,
  ...BORDER_STYLE_PROPS,
  "border",
  "borderTop",
  "borderRight",
  "borderBottom",
  "borderLeft",
  "borderX",
  "borderY"
];

// src/flexbox.ts
var FLEXBOX_PROPS = [
  "alignContent",
  "alignItems",
  "alignSelf",
  "flex",
  "flexBasis",
  "flexDirection",
  "flexGrow",
  "flexShrink",
  "flexWrap",
  "justifyContent",
  "justifyItems",
  "justifySelf",
  "order"
];

// src/grid.ts
var GRID_PROPS = [
  "gridColumn",
  "gridRow",
  "gridAutoFlow",
  "gridAutoColumns",
  "gridAutoRows",
  "gridTemplateColumns",
  "gridTemplateRows",
  "gridTemplateAreas",
  "gridArea"
];

// src/layout.ts
var OVERFLOW_PROPS = ["overflow", "overflowX", "overflowY"];
var LAYOUT_PROPS = [
  ...OVERFLOW_PROPS,
  "width",
  "minWidth",
  "maxWidth",
  "height",
  "minHeight",
  "maxHeight",
  "size",
  "display",
  "verticalAlign"
];

// src/position.ts
var POSITION_PROPS = ["position", "left", "right", "top", "bottom", "zIndex"];

// src/shadow.ts
var SHADOW_PROPS = ["boxShadow", "textShadow"];

// src/space.ts
var MARGIN_PROPS = [
  "margin",
  "m",
  "marginTop",
  "mt",
  "marginRight",
  "mr",
  "marginBottom",
  "mb",
  "marginLeft",
  "ml",
  "marginX",
  "mx",
  "marginY",
  "my"
];
var PADDING_PROPS = [
  "padding",
  "p",
  "paddingTop",
  "pt",
  "paddingRight",
  "pr",
  "paddingBottom",
  "pb",
  "paddingLeft",
  "pl",
  "paddingX",
  "px",
  "paddingY",
  "py"
];
var GAP_PROPS = ["columnGap", "rowGap"];
var SPACE_PROPS = [...MARGIN_PROPS, ...PADDING_PROPS, ...GAP_PROPS];

// src/typography.ts
var TYPOGRAPHY_PROPS = [
  "fontFamily",
  "fontSize",
  "fontStyle",
  "fontWeight",
  "letterSpacing",
  "lineHeight",
  "textAlign",
  "color",
  "textDecoration",
  "textOverflow",
  "textTransform",
  "whiteSpace",
  "wordBreak",
  "wordWrap",
  "overflowWrap"
];

// src/proptypes/background.ts
var import_theme = require("@twilio-paste/theme");

// src/proptypes/utils/propValidator.ts
var propValidator = (optionsList) => {
  return (props, propName, componentName) => {
    const suppliedValue = props[propName];
    const propError = new Error(
      `[${componentName}]: invalid prop supplied "${propName}=${suppliedValue}", expected a token value. See https://paste.twilio.design/tokens for available options.`
    );
    const isInvalidToken = (value) => !optionsList.includes(value);
    if (suppliedValue != null) {
      if (Array.isArray(suppliedValue)) {
        for (const value of suppliedValue) {
          if (isInvalidToken(value)) {
            return propError;
          }
        }
      } else if (isInvalidToken(suppliedValue)) {
        return propError;
      }
    }
    return null;
  };
};

// src/constants.ts
var import_tokens_raw = __toESM(require("@twilio-paste/design-tokens/dist/tokens.raw.json"));
var import_camelCase = __toESM(require_camelCase());
var DEPRECATE_TOKENS = Object.values(import_tokens_raw.default.props).filter((token) => token.deprecated).map((deprecatedToken) => (0, import_camelCase.default)(deprecatedToken.name));

// src/proptypes/background.ts
var BackgroundColorOptions = ["none", "transparent", ...Object.keys(import_theme.DefaultTheme.backgroundColors)];
var isBackgroundColorTokenProp = propValidator(BackgroundColorOptions);
var isDeprecatedBackgroundColorTokenProp = (props) => {
  if (props.backgroundColor != null && DEPRECATE_TOKENS.indexOf(props.backgroundColor) > 0) {
    console.error(
      `Paste: "${props.backgroundColor}" is a deprecated design token. It will be removed in the 2021.11.16 release of Paste`
    );
  }
  return null;
};

// src/proptypes/border.ts
var import_theme2 = require("@twilio-paste/theme");
var BorderRadiusOptions = Object.keys(import_theme2.DefaultTheme.radii);
var BorderWidthOptions = Object.keys(import_theme2.DefaultTheme.borderWidths);
var BorderColorOptions = ["transparent", ...Object.keys(import_theme2.DefaultTheme.borderColors)];
var isBorderRadiusTokenProp = propValidator(BorderRadiusOptions);
var isBorderWidthTokenProp = propValidator(BorderWidthOptions);
var isBorderColorTokenProp = propValidator(BorderColorOptions);
var isDeprecatedBorderColorTokenProp = (props) => {
  if (props.borderColor != null && DEPRECATE_TOKENS.indexOf(props.borderColor) > 0) {
    console.error(
      `Paste: "${props.borderColor}" is a deprecated design token. It will be removed in the 2021.11.16 release of Paste`
    );
  }
  return null;
};

// src/proptypes/layout.ts
var import_prop_types2 = __toESM(require("prop-types"));
var import_theme3 = require("@twilio-paste/theme");

// src/proptypes/utils/responsivePropValidator.ts
var import_prop_types = __toESM(require("prop-types"));
var ResponsiveProp = (type) => {
  return import_prop_types.default.oneOfType([type, import_prop_types.default.arrayOf(type)]);
};

// src/proptypes/layout.ts
var IconSizeOptions = Object.keys(import_theme3.DefaultTheme.iconSizes);
var isWidthTokenProp = ResponsiveProp(import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.number]));
var isMinWidthTokenProp = ResponsiveProp(import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.number]));
var isMaxWidthTokenProp = ResponsiveProp(import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.number]));
var isHeightTokenProp = ResponsiveProp(import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.number]));
var isMinHeightTokenProp = ResponsiveProp(import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.number]));
var isMaxHeightTokenProp = ResponsiveProp(import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.number]));
var isIconSizeTokenProp = propValidator(IconSizeOptions);

// src/proptypes/position.ts
var import_theme4 = require("@twilio-paste/theme");
var ZIndexOptions = Object.keys(import_theme4.DefaultTheme.zIndices);
var isZIndexTokenProp = propValidator(ZIndexOptions);

// src/proptypes/shadow.ts
var import_theme5 = require("@twilio-paste/theme");
var BoxShadowOptions = ["none", ...Object.keys(import_theme5.DefaultTheme.shadows)];
var isBoxShadowTokenProp = propValidator(BoxShadowOptions);
var isDeprecatedBoxShadowTokenProp = (props) => {
  if (props.boxShadow != null && DEPRECATE_TOKENS.indexOf(props.boxShadow) > 0) {
    console.error(
      `Paste: "${props.boxShadow}" is a deprecated design token. It will be removed in the 2021.11.16 release of Paste`
    );
  }
  return null;
};

// src/proptypes/space.ts
var import_theme6 = require("@twilio-paste/theme");
var SpaceOptions = Object.keys(import_theme6.DefaultTheme.space);
var MarginOptions = ["auto", ...Object.keys(import_theme6.DefaultTheme.space)];
var isSpaceTokenProp = propValidator(SpaceOptions);
var isPaddingTokenProp = propValidator(SpaceOptions);
var isMarginTokenProp = propValidator(MarginOptions);
var isGapTokenProp = propValidator(SpaceOptions);

// src/proptypes/typography.ts
var import_theme7 = require("@twilio-paste/theme");
var FontFamilyOptions = ["inherit", ...Object.keys(import_theme7.DefaultTheme.fonts)];
var FontSizeOptions = ["100%", "inherit", ...Object.keys(import_theme7.DefaultTheme.fontSizes)];
var FontWeightOptions = ["inherit", ...Object.keys(import_theme7.DefaultTheme.fontWeights)];
var LineHeightOptions = ["unset", "inherit", ...Object.keys(import_theme7.DefaultTheme.lineHeights)];
var TextColorOptions = ["currentColor", "inherit", ...Object.keys(import_theme7.DefaultTheme.textColors)];
var isFontFamilyTokenProp = propValidator(FontFamilyOptions);
var isFontSizeTokenProp = propValidator(FontSizeOptions);
var isFontWeightTokenProp = propValidator(FontWeightOptions);
var isLineHeightTokenProp = propValidator(LineHeightOptions);
var isTextColorTokenProp = propValidator(TextColorOptions);
var isDeprecatedTextColorTokenProp = (props) => {
  if (props.color != null && DEPRECATE_TOKENS.indexOf(props.color) > 0) {
    console.error(
      `Paste: "${props.color}" is a deprecated design token. It will be removed in the 2021.11.16 release of Paste`
    );
  }
  return null;
};

// src/proptypes/helpers.ts
var import_prop_types3 = __toESM(require("prop-types"));
var StyleResetProp = import_prop_types3.default.oneOf(["none", "inherit", "initial", "unset"]);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BACKGROUND_PROPS,
  BORDER_COLOR_PROPS,
  BORDER_PROPS,
  BORDER_RADIUS_PROPS,
  BORDER_STYLE_PROPS,
  BORDER_WIDTH_PROPS,
  FLEXBOX_PROPS,
  GAP_PROPS,
  GRID_PROPS,
  LAYOUT_PROPS,
  MARGIN_PROPS,
  OVERFLOW_PROPS,
  PADDING_PROPS,
  POSITION_PROPS,
  ResponsiveProp,
  SHADOW_PROPS,
  SPACE_PROPS,
  StyleResetProp,
  TYPOGRAPHY_PROPS,
  isBackgroundColorTokenProp,
  isBorderColorTokenProp,
  isBorderRadiusTokenProp,
  isBorderWidthTokenProp,
  isBoxShadowTokenProp,
  isDeprecatedBackgroundColorTokenProp,
  isDeprecatedBorderColorTokenProp,
  isDeprecatedBoxShadowTokenProp,
  isDeprecatedTextColorTokenProp,
  isFontFamilyTokenProp,
  isFontSizeTokenProp,
  isFontWeightTokenProp,
  isGapTokenProp,
  isHeightTokenProp,
  isIconSizeTokenProp,
  isLineHeightTokenProp,
  isMarginTokenProp,
  isMaxHeightTokenProp,
  isMaxWidthTokenProp,
  isMinHeightTokenProp,
  isMinWidthTokenProp,
  isPaddingTokenProp,
  isSpaceTokenProp,
  isTextColorTokenProp,
  isWidthTokenProp,
  isZIndexTokenProp
});

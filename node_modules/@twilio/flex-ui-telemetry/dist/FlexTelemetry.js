"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const telemetry_1 = require("./types/telemetry");
const constants_1 = require("./constants");
const resolver_1 = require("./utils/resolver");
/**
 * A Telemetry class that exposes methods to capture different type of events in the Flex UI
 */
class FlexTelemetry {
    /**
     * Creates an analytics instance
     * @param properties Common properties to include with every event tracking
     * @throws Will throw an error if Flex Manager is not initialised
     */
    constructor(properties = {}) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const flexManager = (_c = (_b = (_a = window === null || window === void 0 ? void 0 : window.Twilio) === null || _a === void 0 ? void 0 : _a.Flex) === null || _b === void 0 ? void 0 : _b.Manager) === null || _c === void 0 ? void 0 : _c.getInstance();
        const flexUIVersion = (_e = (_d = window === null || window === void 0 ? void 0 : window.Twilio) === null || _d === void 0 ? void 0 : _d.Flex) === null || _e === void 0 ? void 0 : _e.VERSION;
        if (flexManager) {
            const { workerClient, serviceConfiguration, configuration, user } = flexManager;
            this.commonProperties = Object.assign({ product: constants_1.PRODUCT, source: constants_1.SOURCE, flexUiVersion: flexUIVersion, workerSid: (workerClient === null || workerClient === void 0 ? void 0 : workerClient.sid) || '', accountSid: (serviceConfiguration === null || serviceConfiguration === void 0 ? void 0 : serviceConfiguration.account_sid) || '', realm: ((_g = (_f = configuration === null || configuration === void 0 ? void 0 : configuration.sdkOptions) === null || _f === void 0 ? void 0 : _f.chat) === null || _g === void 0 ? void 0 : _g.region) || '', isEmployee: ((_h = configuration === null || configuration === void 0 ? void 0 : configuration.isEmployeeAccount) === null || _h === void 0 ? void 0 : _h.toString()) || 'false', flexUserRole: ((_j = user === null || user === void 0 ? void 0 : user.roles) === null || _j === void 0 ? void 0 : _j.join(',')) || '', instanceSid: (serviceConfiguration === null || serviceConfiguration === void 0 ? void 0 : serviceConfiguration.flex_instance_sid) || '' }, properties);
        }
        else {
            throw new Error('Flex Manager is not initialised');
        }
        this.callbacks = {};
        this._attachCallbackListener();
    }
    get segment() {
        return document.querySelector('#segment-analytics');
    }
    get _pageProperties() {
        return {
            path: window.location.pathname,
            referrer: document.referrer,
            search: window.location.search,
            title: document.title,
            url: window.location.href,
        };
    }
    page(...args) {
        const [category, name, properties = {}, options = {}, callback, callbackId] = (0, resolver_1.resolvePageArguments)(args);
        const commonParameters = [
            Object.assign(Object.assign(Object.assign({}, properties), this.commonProperties), this._pageProperties),
            Object.assign(Object.assign({}, options), { context: Object.assign(Object.assign({}, options.context), { groupId: this.commonProperties.accountSid }) }),
            callback,
            callbackId,
        ];
        let parameters;
        if (category) {
            parameters = [category, name, ...commonParameters];
        }
        else {
            parameters = [name, ...commonParameters];
        }
        this._post(telemetry_1.Method.PAGE, ...parameters);
    }
    track(...args) {
        const [event, properties = {}, options = {}, callback, callbackId] = (0, resolver_1.resolveArguments)(args);
        this._post(telemetry_1.Method.TRACK, event, Object.assign(Object.assign({}, properties), this.commonProperties), Object.assign(Object.assign({}, options), { context: Object.assign(Object.assign({}, options.context), { groupId: this.commonProperties.accountSid, page: Object.assign({}, this._pageProperties) }) }), callback, callbackId);
    }
    identify(...args) {
        const [userId, traits = {}, options = {}, callback, callbackId] = (0, resolver_1.resolveArguments)(args);
        this._post(telemetry_1.Method.IDENTIFY, userId || this.commonProperties.workerSid, Object.assign(Object.assign({}, traits), this.commonProperties), Object.assign(Object.assign({}, options), { context: Object.assign(Object.assign({}, options.context), { groupId: this.commonProperties.accountSid, page: Object.assign({}, this._pageProperties) }) }), callback, callbackId);
    }
    group(...args) {
        const [groupId, traits = {}, options = {}, callback, callbackId] = (0, resolver_1.resolveArguments)(args);
        this._post(telemetry_1.Method.GROUP, groupId, Object.assign(Object.assign({}, traits), this.commonProperties), Object.assign(Object.assign({}, options), { context: Object.assign(Object.assign({}, options.context), { page: Object.assign({}, this._pageProperties) }) }), callback, callbackId);
    }
    /**
     * Invokes the callback method once analytics is initialised and all the enabled destinations have loaded
     * @param callback A function to be executed after the initialisation
     */
    ready(callback) {
        if (this.segment) {
            this._post(telemetry_1.Method.READY, callback, constants_1.READY_EVENT);
        }
        else {
            this.callbacks = {
                [constants_1.READY_EVENT]: callback,
            };
        }
    }
    /**
     * Attaches a listener in the parent window that listens to invocation of Segment Analytics callback method.
     */
    _attachCallbackListener() {
        window.addEventListener('message', (event) => {
            const { type, payload: id } = event.data;
            if (type === constants_1.ANALYTICS_CALLBACK_EVENT && this.callbacks[id]) {
                this.callbacks[id]();
                delete this.callbacks[id];
            }
            else if (type === constants_1.IFRAME_LOADED && this.callbacks[constants_1.READY_EVENT]) {
                const callbackFn = this.callbacks[constants_1.READY_EVENT];
                this._post(telemetry_1.Method.READY, callbackFn, constants_1.READY_EVENT);
            }
        });
    }
    /**
     * Posts a message to the Segment Analytics iframe element
     * @param method Method name
     * @param params Parameters to be passed to the Segment Analytics API
     */
    _post(method, ...params) {
        if (this.segment && this.segment.contentWindow) {
            const callbackId = params.pop();
            const callback = params.pop();
            if (callback && callbackId) {
                this.callbacks[callbackId] = callback;
            }
            this.segment.contentWindow.postMessage({
                type: constants_1.ANALYTICS_EVENT,
                method,
                params,
                callbackId,
            }, window.origin);
        }
    }
}
exports.default = FlexTelemetry;
//# sourceMappingURL=FlexTelemetry.js.map
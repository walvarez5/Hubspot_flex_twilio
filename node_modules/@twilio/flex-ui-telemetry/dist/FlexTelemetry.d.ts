import { CommonProperties, SegmentOptions, FunctionType } from './types/telemetry';
/**
 * A Telemetry class that exposes methods to capture different type of events in the Flex UI
 */
declare class FlexTelemetry {
    private commonProperties;
    private callbacks;
    /**
     * Creates an analytics instance
     * @param properties Common properties to include with every event tracking
     * @throws Will throw an error if Flex Manager is not initialised
     */
    constructor(properties?: Partial<CommonProperties> & Record<string, any>);
    private get segment();
    private get _pageProperties();
    /**
     * Captures the page views.
     * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#page
     * @param category Category of the page
     * @param name Page name
     * @param properties Page properties
     * @param options Segment options
     * @param callback A function executed after a timeout of 300 ms
     */
    page(category?: string, name?: string, properties?: Record<string, any>, options?: SegmentOptions, callback?: () => void): void;
    /**
     * Captures the page views.
     * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#page
     * @param name Page name
     * @param properties Page properties
     * @param options Segment options
     * @param callback A function executed after a timeout of 300 ms
     */
    page(name?: string, properties?: Record<string, any>, options?: SegmentOptions, callback?: () => void): void;
    /**
     * Captures the page views.
     * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#page
     * @param name Page name
     * @param properties Page properties
     * @param callback A function executed after a timeout of 300 ms
     */
    page(name?: string, properties?: Record<string, any>, callback?: () => void): void;
    /**
     * Captures the page views.
     * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#page
     * @param name Page name
     * @param callback A function executed after a timeout of 300 ms
     */
    page(name?: string, callback?: () => void): void;
    /**
     * Captures the page views.
     * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#page
     * @param properties Page properties
     * @param options Segment options
     * @param callback A function executed after a timeout of 300 ms
     */
    page(properties?: Record<string, any>, options?: SegmentOptions, callback?: () => void): void;
    /**
     * Captures the page views.
     * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#page
     * @param callback A function executed after a timeout of 300 ms
     */
    page(callback?: () => void): void;
    /**
     * Records any event or actions that users perform.
     * Documentation - https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#track
     * @param event Event name
     * @param properties Event properties
     * @param options Segment options
     * @param callback A function executed after a timeout of 300 ms
     */
    track(event: string, properties?: Record<string, any>, options?: SegmentOptions, callback?: () => void): void;
    /**
     * Records any event or actions that users perform.
     * Documentation - https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#track
     * @param event Event name
     * @param properties Event properties
     * @param callback A function executed after a timeout of 300 ms
     */
    track(event: string, properties?: Record<string, any>, callback?: () => void): void;
    /**
     * Records any event or actions that users perform.
     * Documentation - https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#track
     * @param event Event name
     * @param callback A function executed after a timeout of 300 ms
     */
    track(event: string, callback?: () => void): void;
    /**
     * Identifies an user to link with the actions/events associated with them.
     * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#identify
     * @param userId Unique identifier for the user
     * @param traits Traits of the user
     * @param options Segment options
     * @param callback A function executed after a timeout of 300 ms
     */
    identify(userId: string, traits?: Record<string, any>, options?: SegmentOptions, callback?: () => void): void;
    /**
     * Identifies an user to link with the actions/events associated with them.
     * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#identify
     * @param userId Unique identifier for the user
     * @param traits Traits of the user
     * @param callback A function executed after a timeout of 300 ms
     */
    identify(userId: string, traits: Record<string, any>, callback?: () => void): void;
    /**
     * Identifies an user to link with the actions/events associated with them.
     * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#identify
     * @param userId Unique identifier for the user
     * @param callback A function executed after a timeout of 300 ms
     */
    identify(userId: string, callback?: () => void): void;
    /**
     * Identifies an user to link with the actions/events associated with them.
     * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#identify
     * @param traits Traits of the user
     * @param options Segment options
     * @param callback A function executed after a timeout of 300 ms
     */
    identify(traits?: Record<string, any>, options?: SegmentOptions, callback?: () => void): void;
    /**
     * Identifies an user to link with the actions/events associated with them.
     * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#identify
     * @param traits Traits of the user
     * @param callback A function executed after a timeout of 300 ms
     */
    identify(traits?: Record<string, any>, callback?: () => void): void;
    /**
     * Identifies an user to link with the actions/events associated with them.
     * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#identify
     * @param callback A function executed after a timeout of 300 ms
     */
    identify(callback: () => void): void;
    /**
     * Associates an identified user with project/workspace/team/etc.
     * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#group
     * @param groupId The ID of the group to associate the user with
     * @param traits Traits for the group
     * @param options Segment Options
     * @param callback A function executed after a timeout of 300 ms
     */
    group(groupId: string, traits?: Record<string, any>, options?: SegmentOptions, callback?: () => void): void;
    /**
     * Associates an identified user with project/workspace/team/etc.
     * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#group
     * @param groupId The ID of the group to associate the user with
     * @param traits Traits for the group
     * @param callback A function executed after a timeout of 300 ms
     */
    group(groupId: string, traits?: Record<string, any>, callback?: () => void): void;
    /**
     * Associates an identified user with project/workspace/team/etc.
     * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#group
     * @param groupId The ID of the group to associate the user with
     * @param callback A function executed after a timeout of 300 ms
     */
    group(groupId: string, callback?: () => void): void;
    /**
     * Invokes the callback method once analytics is initialised and all the enabled destinations have loaded
     * @param callback A function to be executed after the initialisation
     */
    ready(callback: FunctionType): void;
    /**
     * Attaches a listener in the parent window that listens to invocation of Segment Analytics callback method.
     */
    private _attachCallbackListener;
    /**
     * Posts a message to the Segment Analytics iframe element
     * @param method Method name
     * @param params Parameters to be passed to the Segment Analytics API
     */
    private _post;
}
export default FlexTelemetry;

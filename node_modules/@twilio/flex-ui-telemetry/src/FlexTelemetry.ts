import * as semver from 'semver';

import {
  CommonProperties,
  PageProperties,
  Method,
  Parameters,
  SegmentOptions,
  PageParameters,
  FunctionType,
  ReadyParameters,
} from './types/telemetry';
import { ANALYTICS_CALLBACK_EVENT, ANALYTICS_EVENT, IFRAME_LOADED, PRODUCT, READY_EVENT, SOURCE } from './constants';
import { resolveArguments, resolvePageArguments } from './utils/resolver';

/**
 * A Telemetry class that exposes methods to capture different type of events in the Flex UI
 */
class FlexTelemetry {
  private commonProperties: CommonProperties & Record<string, any>;

  private callbacks: Record<string, FunctionType>;

  /**
   * Creates an analytics instance
   * @param properties Common properties to include with every event tracking
   * @throws Will throw an error if Flex Manager is not initialised
   */
  constructor(properties: Partial<CommonProperties> & Record<string, any> = {}) {
    const flexManager = window?.Twilio?.Flex?.Manager?.getInstance();
    const flexUIVersion = window?.Twilio?.Flex?.VERSION;
    if (flexManager) {
      const { workerClient, serviceConfiguration, configuration, user } = flexManager;

      this.commonProperties = {
        product: PRODUCT,
        source: SOURCE,
        flexUiVersion: flexUIVersion,
        workerSid: workerClient?.sid || '',
        accountSid: serviceConfiguration?.account_sid || '',
        realm: configuration?.sdkOptions?.chat?.region || '',
        isEmployee: configuration?.isEmployeeAccount?.toString() || 'false',
        flexUserRole: user?.roles?.join(',') || '',
        instanceSid: serviceConfiguration?.flex_instance_sid || '',
        ...properties,
      };
    } else {
      throw new Error('Flex Manager is not initialised');
    }

    this.callbacks = {};
    this._attachCallbackListener();
  }

  private get segment(): HTMLIFrameElement {
    return document.querySelector('#segment-analytics') as HTMLIFrameElement;
  }

  private get _pageProperties(): PageProperties {
    return {
      path: window.location.pathname,
      referrer: document.referrer,
      search: window.location.search,
      title: document.title,
      url: window.location.href,
    };
  }

  /**
   * Captures the page views.
   * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#page
   * @param category Category of the page
   * @param name Page name
   * @param properties Page properties
   * @param options Segment options
   * @param callback A function executed after a timeout of 300 ms
   */
  public page(
    category?: string,
    name?: string,
    properties?: Record<string, any>,
    options?: SegmentOptions,
    callback?: () => void,
  ): void;

  /**
   * Captures the page views.
   * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#page
   * @param name Page name
   * @param properties Page properties
   * @param options Segment options
   * @param callback A function executed after a timeout of 300 ms
   */
  public page(name?: string, properties?: Record<string, any>, options?: SegmentOptions, callback?: () => void): void;

  /**
   * Captures the page views.
   * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#page
   * @param name Page name
   * @param properties Page properties
   * @param callback A function executed after a timeout of 300 ms
   */
  public page(name?: string, properties?: Record<string, any>, callback?: () => void): void;

  /**
   * Captures the page views.
   * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#page
   * @param name Page name
   * @param callback A function executed after a timeout of 300 ms
   */
  public page(name?: string, callback?: () => void): void;

  /**
   * Captures the page views.
   * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#page
   * @param properties Page properties
   * @param options Segment options
   * @param callback A function executed after a timeout of 300 ms
   */
  public page(properties?: Record<string, any>, options?: SegmentOptions, callback?: () => void): void;

  /**
   * Captures the page views.
   * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#page
   * @param callback A function executed after a timeout of 300 ms
   */
  public page(callback?: () => void): void;

  public page(...args: unknown[]): void {
    const [category, name, properties = {}, options = {}, callback, callbackId] = resolvePageArguments(args);

    const commonParameters = [
      {
        ...properties,
        ...this.commonProperties,
        ...this._pageProperties,
      },
      {
        ...options,
        context: {
          ...options.context,
          groupId: this.commonProperties.accountSid,
        },
      },
      callback,
      callbackId,
    ];
    let parameters: Parameters | PageParameters;
    if (category) {
      parameters = [category, name, ...commonParameters] as PageParameters;
    } else {
      parameters = [name, ...commonParameters] as Parameters;
    }
    this._post(Method.PAGE, ...parameters);
  }

  /**
   * Records any event or actions that users perform.
   * Documentation - https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#track
   * @param event Event name
   * @param properties Event properties
   * @param options Segment options
   * @param callback A function executed after a timeout of 300 ms
   */
  public track(event: string, properties?: Record<string, any>, options?: SegmentOptions, callback?: () => void): void;

  /**
   * Records any event or actions that users perform.
   * Documentation - https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#track
   * @param event Event name
   * @param properties Event properties
   * @param callback A function executed after a timeout of 300 ms
   */
  public track(event: string, properties?: Record<string, any>, callback?: () => void): void;

  /**
   * Records any event or actions that users perform.
   * Documentation - https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#track
   * @param event Event name
   * @param callback A function executed after a timeout of 300 ms
   */
  public track(event: string, callback?: () => void): void;

  public track(...args: unknown[]): void {
    const [event, properties = {}, options = {}, callback, callbackId] = resolveArguments(args);

    this._post(
      Method.TRACK,
      event,
      {
        ...properties,
        ...this.commonProperties,
      },
      {
        ...options,
        context: {
          ...options.context,
          groupId: this.commonProperties.accountSid,
          page: {
            ...this._pageProperties,
          },
        },
      },
      callback,
      callbackId,
    );
  }

  /**
   * Identifies an user to link with the actions/events associated with them.
   * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#identify
   * @param userId Unique identifier for the user
   * @param traits Traits of the user
   * @param options Segment options
   * @param callback A function executed after a timeout of 300 ms
   */
  public identify(userId: string, traits?: Record<string, any>, options?: SegmentOptions, callback?: () => void): void;

  /**
   * Identifies an user to link with the actions/events associated with them.
   * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#identify
   * @param userId Unique identifier for the user
   * @param traits Traits of the user
   * @param callback A function executed after a timeout of 300 ms
   */
  public identify(userId: string, traits: Record<string, any>, callback?: () => void): void;

  /**
   * Identifies an user to link with the actions/events associated with them.
   * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#identify
   * @param userId Unique identifier for the user
   * @param callback A function executed after a timeout of 300 ms
   */
  public identify(userId: string, callback?: () => void): void;

  /**
   * Identifies an user to link with the actions/events associated with them.
   * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#identify
   * @param traits Traits of the user
   * @param options Segment options
   * @param callback A function executed after a timeout of 300 ms
   */
  public identify(traits?: Record<string, any>, options?: SegmentOptions, callback?: () => void): void;

  /**
   * Identifies an user to link with the actions/events associated with them.
   * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#identify
   * @param traits Traits of the user
   * @param callback A function executed after a timeout of 300 ms
   */
  public identify(traits?: Record<string, any>, callback?: () => void): void;

  /**
   * Identifies an user to link with the actions/events associated with them.
   * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#identify
   * @param callback A function executed after a timeout of 300 ms
   */
  public identify(callback: () => void): void;

  public identify(...args: unknown[]): void {
    const [userId, traits = {}, options = {}, callback, callbackId] = resolveArguments(args);

    this._post(
      Method.IDENTIFY,
      userId || this.commonProperties.workerSid,
      {
        ...traits,
        ...this.commonProperties,
      },
      {
        ...options,
        context: {
          ...options.context,
          groupId: this.commonProperties.accountSid,
          page: {
            ...this._pageProperties,
          },
        },
      },
      callback,
      callbackId,
    );
  }

  /**
   * Associates an identified user with project/workspace/team/etc.
   * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#group
   * @param groupId The ID of the group to associate the user with
   * @param traits Traits for the group
   * @param options Segment Options
   * @param callback A function executed after a timeout of 300 ms
   */
  public group(groupId: string, traits?: Record<string, any>, options?: SegmentOptions, callback?: () => void): void;

  /**
   * Associates an identified user with project/workspace/team/etc.
   * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#group
   * @param groupId The ID of the group to associate the user with
   * @param traits Traits for the group
   * @param callback A function executed after a timeout of 300 ms
   */
  public group(groupId: string, traits?: Record<string, any>, callback?: () => void): void;

  /**
   * Associates an identified user with project/workspace/team/etc.
   * Documentation: https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#group
   * @param groupId The ID of the group to associate the user with
   * @param callback A function executed after a timeout of 300 ms
   */
  public group(groupId: string, callback?: () => void): void;

  public group(...args: unknown[]): void {
    const [groupId, traits = {}, options = {}, callback, callbackId] = resolveArguments(args);

    this._post(
      Method.GROUP,
      groupId,
      {
        ...traits,
        ...this.commonProperties,
      },
      {
        ...options,
        context: {
          ...options.context,
          page: {
            ...this._pageProperties,
          },
        },
      },
      callback,
      callbackId,
    );
  }

  /**
   * Invokes the callback method once analytics is initialised and all the enabled destinations have loaded
   * @param callback A function to be executed after the initialisation
   */
  public ready(callback: FunctionType): void {
    if (this.segment) {
      this._post(Method.READY, callback, READY_EVENT);
    } else {
      this.callbacks = {
        [READY_EVENT]: callback,
      };
    }
  }

  /**
   * Attaches a listener in the parent window that listens to invocation of Segment Analytics callback method.
   */
  private _attachCallbackListener() {
    window.addEventListener('message', (event: MessageEvent<{ type: string; payload: string }>): void => {
      const { type, payload: id } = event.data;
      if (type === ANALYTICS_CALLBACK_EVENT && this.callbacks[id]) {
        this.callbacks[id]();
        delete this.callbacks[id];
      } else if (type === IFRAME_LOADED && this.callbacks[READY_EVENT]) {
        const callbackFn = this.callbacks[READY_EVENT];
        this._post(Method.READY, callbackFn, READY_EVENT);
      }
    });
  }

  /**
   * Posts a message to the Segment Analytics iframe element
   * @param method Method name
   * @param params Parameters to be passed to the Segment Analytics API
   */
  private _post(method: Method, ...params: Parameters | PageParameters | ReadyParameters): void {
    if (this.segment && this.segment.contentWindow) {
      const callbackId = params.pop() as string | undefined;
      const callback = params.pop() as FunctionType | undefined;

      if (callback && callbackId) {
        this.callbacks[callbackId] = callback;
      }

      this.segment.contentWindow.postMessage(
        {
          type: ANALYTICS_EVENT,
          method,
          params,
          callbackId,
        },
        window.origin,
      );
    }
  }
}

export default FlexTelemetry;

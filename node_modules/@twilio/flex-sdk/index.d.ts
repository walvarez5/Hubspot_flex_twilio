/// <reference types="node" />

import { Activity } from 'twilio-taskrouter';
import { ActivityOptions } from 'twilio-taskrouter';
import type { ApolloClient } from '@apollo/client/core';
import { ApolloLink } from '@apollo/client/core';
import { Call } from '@twilio/voice-sdk';
import { CallOptions } from 'twilio-taskrouter';
import { Channel } from 'twilio-taskrouter';
import { ChannelEvents } from 'twilio-taskrouter';
import { ConferenceOptions } from 'twilio-taskrouter';
import { DequeueOptions } from 'twilio-taskrouter';
import { Device } from '@twilio/voice-sdk';
import { DocumentNode } from '@apollo/client/core';
import { IncomingTransfer } from 'twilio-taskrouter';
import { LogLevelDesc } from 'loglevel';
import { LogLevelNumbers } from 'loglevel';
import type { NormalizedCacheObject } from '@apollo/client/core';
import { OutgoingTransfer } from 'twilio-taskrouter';
import { RedirectOptions } from 'twilio-taskrouter';
import { RejectOptions } from 'twilio-taskrouter';
import { Reservation } from 'twilio-taskrouter';
import { ReservationEvents } from 'twilio-taskrouter';
import { ReservationParticipantOptions } from 'twilio-taskrouter';
import { Resolvers } from '@apollo/client/core';
import type { Supervisor } from 'twilio-taskrouter';
import { Task } from 'twilio-taskrouter';
import { TaskEvents } from 'twilio-taskrouter';
import { TaskHoldOptions } from 'twilio-taskrouter';
import { TaskOptions } from 'twilio-taskrouter';
import { TaskParticipantOptions } from 'twilio-taskrouter';
import { TaskQueue as TaskRouterTaskQueue } from 'twilio-taskrouter';
import { TaskTransferOptions } from 'twilio-taskrouter';
import { TransferOptions } from 'twilio-taskrouter';
import { Transfers } from 'twilio-taskrouter';
import { TypePolicies } from '@apollo/client/cache/inmemory/policies';
import type { Worker as Worker_2 } from 'twilio-taskrouter';
import { WorkerEvents } from 'twilio-taskrouter';
import { WorkerOptions as WorkerOptions_2 } from 'twilio-taskrouter';
import type { Workspace } from 'twilio-taskrouter';
import { WorkspaceOptions } from 'twilio-taskrouter';
import { WrappingOptions } from 'twilio-taskrouter';

/**
 * Accepts a task and reserves it for the current worker.
 * @public
 * @category Actions
 * @param taskSid - The unique identifier (SID) of the task to be accepted.
 * @param options - Optional configuration parameters for customizing the task acceptance process.
 * @throws {@link FlexSdkError} - Rejects with an error if the task acceptance fails.
 * @returns {Promise<Reservation>} - A promise that resolves to a `Reservation` object, representing the reserved task.
 *
 * @example
 * ```ts
 * import { createClient, AcceptTask } from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN");
 * const acceptTask = new AcceptTask("WTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
 * await client.execute(acceptTask);
 * ```
 */
export declare class AcceptTask implements Action<Promise<Reservation>> {
    constructor(taskSid: string, acceptTaskOptions?: AcceptTaskOptions);
    run(ctx: {}): Promise<Reservation>;
}

/**
 * @public
 */
export declare interface AcceptTaskOptions {
    conferenceOptions?: ConferenceOptions;
}

/**
 * @public
 */
export declare interface AccountConfig {
    set(config: Partial<AccountConfigData>): Promise<void>;
}

/**
 * Account Configuration Data Response
 * @public
 */
export declare interface AccountConfigData<TUI = any> {
    /**
     * The SID of the Account that created the resource
     */
    accountSid: string;
    /**
     * An object that contains application-specific data
     */
    attributes: object;
    /**
     * Whether call recording is enabled
     */
    callRecordingEnabled: boolean;
    /**
     * The call recording webhook URL
     */
    callRecordingWebhookUrl: string | null;
    /**
     * A list of objects that contain the configuration for different channels
     */
    channelConfigs: Array<ChannelConfig> | null;
    /**
     * The SID of the chat service this user belongs to
     */
    chatServiceInstanceSid: string;
    /**
     * An object that contains the CRM attributes
     */
    crmAttributes: object | null;
    /**
     * A list of objects that contain the configurations for the Integrations supported in this configuration
     */
    integrations?: Array<IntegrationsConfig> | null;
    /**
     * The CRM Callback URL
     */
    crmCallbackUrl: string | null;
    /**
     * Whether CRM is present for Flex
     */
    crmEnabled: boolean | null;
    /**
     * The CRM Fallback URL
     */
    crmFallbackUrl: string | null;
    /**
     * The CRM type
     */
    crmType: string | null;
    /**
     * The ISO 8601 date and time in GMT when the Configuration resource was created
     */
    dateCreated: Date;
    /**
     * The ISO 8601 date and time in GMT when the Configuration resource was last updated
     */
    dateUpdated: Date;
    debuggerIntegration: DebuggerIntegration | null;
    flexUiStatusReport: FlexUiStatusReport | null;
    citrixVoiceVdi: CitrixVoiceVdi | null;
    /**
     * The SID of the Messaging service instance
     */
    messagingServiceInstanceSid: string | null;
    /**
     * The URL where the Flex instance is hosted
     */
    runtimeDomain: string;
    /**
     * The SID of the Flex service instance
     */
    flexServiceInstanceSid: string | null;
    /**
     * The SID of the Flex instance
     */
    flexInstanceSid: string | null;
    /**
     * The list of outbound call flows
     */
    outboundCallFlows: {
        [key: string]: OutboundFlows;
    } | null;
    /**
     * If flex-ui should load plugins
     */
    pluginServiceEnabled: boolean | null;
    /**
     * The plugin service attributes
     */
    pluginServiceAttributes: object | null;
    /**
     * The list of public attributes, which are visible to unauthenticated clients
     */
    publicAttributes: object;
    /**
     * The Flex Service version
     */
    serviceVersion: string | null;
    /**
     * The list of serverless service SIDs
     */
    serverlessServiceSids: Array<string> | null;
    /**
     * The status of the Flex onboarding. Can be: \'ok\', \'inprogress\',\'notstarted\'
     */
    status: string;
    /**
     * The TaskRouter SID of the offline activity
     */
    taskrouterOfflineActivitySid?: string;
    /**
     * The Skill description for TaskRouter workers
     */
    taskrouterSkills?: Array<SkillDefinition>;
    /**
     * The SID of the TaskRouter Target TaskQueue
     */
    taskrouterTargetTaskqueueSid: string;
    /**
     * The SID of the TaskRouter target Workflow
     */
    taskrouterTargetWorkflowSid: string;
    /**
     * The list of TaskRouter TaskQueues
     */
    taskrouterTaskqueues: Array<TaskQueue> | null;
    /**
     * The TaskRouter Worker attributes
     */
    taskrouterWorkerAttributes: {
        [key: string]: object;
    } | null;
    /**
     * The TaskRouter default channel capacities and availability for workers
     */
    taskrouterWorkerChannels: {
        [key: string]: WorkerChannel;
    } | null;
    /**
     * The SID of the TaskRouter Workspace
     */
    taskrouterWorkspaceSid: string;
    /**
     * The object that defines the NPM packages and versions to be used in Hosted Flex
     */
    uiDependencies: {
        [key: string]: string;
    } | null;
    /**
     * The object that describes Flex UI characteristics and settings
     */
    uiAttributes: TUI;
    /**
     * The primary language of the Flex UI
     */
    uiLanguage: string | null;
    /**
     * The Pinned UI version
     */
    uiVersion: string;
    queueStatsConfiguration: QueueStatsConfiguration | null;
    /**
     * The absolute URL of the Configuration resource
     */
    url: string;
}

/**
 * @public
 */
export declare type AccountConfigDataGetter = (sessionToken: string, options?: AccountConfigOptions) => Promise<AccountConfigData>;

/**
 * Account config keys
 * Possible keys from AccountConfigData structure
 * @public
 */
export declare type AccountConfigKeys = keyof AccountConfigData;

/**
 * @public
 */
export declare interface AccountConfigOptions {
    query?: {
        UiVersion?: string;
    };
    fetchPolicy?: "no-cache" | undefined;
}

/**
 * @public
 */
export declare type AccountConfigProvider = (sessionToken: string, options?: AccountConfigOptions) => Promise<AccountConfigData>;

/**
 * Account sid option
 * @public
 */
export declare interface AccountSidOption {
    /**
     * Account sid
     */
    accountSid: string;
}

/**
 * @public
 */
export declare interface Action<T> {
    run(ctx: {}): T;
}

export { Activity }

export { ActivityOptions }

/**
 *
 * Add a voice event listener to the client
 * @public
 * @category Actions
 * @param eventName - event name (e.g. IncomingCall)
 * @param listener - event listener
 * @returns {Promise<Client>} - The updated client instance
 *
 * @example
 * ```ts
 * import { createClient, AddVoiceEventListener } from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN");
 *
 * const addVoiceEventListener = new AddVoiceEventListener("IncomingCall", (call) => {
 *   // Handle incoming call
 * })
 * client.execute(addVoiceEventListener)
 *
 * ```
 */
export declare class AddVoiceEventListener implements Action<Promise<Client>> {
    constructor(eventName: ClientEvent, listener: (...args: unknown[]) => void, options?: AddVoiceEventListenerOptions);
    run(ctx: {}): Promise<Client>;
}

/**
 * @public
 */
export declare interface AddVoiceEventListenerOptions {
    voiceDevice?: Device;
}

/**
 * Add voice participant response
 * @public
 */
export declare type AddVoiceParticipantResponse = {
    /**
     * Response for the adding participant request.
     */
    pendingParticipantResponse: ParticipantResponse;
    /**
     * Wait for the success or failure event for adding a Participant.
     */
    waitForParticipantToSettle: Promise<CbmParticipant>;
};

/**
 *
 * @public
 */
export declare type AppType = "SinglePageApp" | "MobileApp";

/**
 * @public
 * Creates an instance of the Authenticator class.
 *
 * @param  accountSid - The Twilio account SID.
 * @returns {Authenticator} An instance of the Authenticator class.
 *
 * @example
 * ```javascript
 * const authInstance = auth("AC123456789009876543210");
 * ```
 */
export declare const auth: (accountSid: string) => Authenticator;

/**
 *
 * @public
 */
export declare interface AuthenticationConfig {
    accountSid: string;
    instanceSid: string;
    connectionName: string;
    clientId: string;
    active: boolean;
    appType: AppType;
}

/**
 * AuthenticationConfigParams
 * Parameters for getAuthenticationConfig
 *
 * @public
 */
export declare type AuthenticationConfigParams = {
    accountSid?: string;
    instanceSid?: string;
    runtimeDomain?: string;
    ssoProfileSid?: string;
    appType?: AppType;
};

/**
 *
 * @public
 */
export declare interface AuthenticationConfigResponse {
    configList: Array<AuthenticationConfig>;
}

/**
 * Authenticator
 * Provides methods for authentication
 *
 * @public
 */
export declare interface Authenticator {
    /**
     * Validates a given token
     *
     * @param token - token to validate
     * @returns {Promise<TokenData>} - data containing token validity
     *
     * @example
     * ```ts
     * import { auth } from "@twilio/flex-sdk";
     *
     * const authInstance = auth("AC123456789009876543210");
     * const { valid, dateExpired } = await authInstance.validateToken("token123456789009876543210");
     *
     * console.log("Token is valid: ", valid);
     * console.log("Token expiration: ", dateExpired);
     * ```
     */
    validateToken(token: string): Promise<TokenData>;
    /**
     * Refreshes token used by the SDK.
     *
     * @param token - token to refresh
     * @returns {Promise<TokenRefreshResult>} - data containing refreshed token and expiration
     *
     * @example
     * ```ts
     * import { auth } from "@twilio/flex-sdk";
     *
     * const authInstance = auth("AC123456789009876543210");
     * const { token, dateExpired } = await authInstance.refreshToken("token123456789009876543210");
     *
     * console.log("Refreshed token: ", token);
     * console.log("Token expiration: ", dateExpired);
     * ```
     */
    refreshToken(token: string): Promise<TokenRefreshResult>;
    /**
     * Fetch identity provider url
     *
     * @param config - idp configuration such as redirect url
     * @returns {Promise<string>} - The identity provider url
     *
     * @example
     * ```ts
     * import { auth } from "@twilio/flex-sdk";
     *
     * const authInstance = auth("AC123456789009876543210");
     * const idpUrl = await authInstance.getIdpUrl({ redirectUrl: "https://example.com" });
     *
     * console.log("Identity provider url: ", idpUrl);
     * ```
     */
    getIdpUrl(config: IdpConfig): Promise<string>;
    /**
     * Generate PKCE codes and login URL for the client to sign in with their IdP
     *
     * @param clientId - SSO configuration client id
     * @param connectionName - SSO configuration connection name
     * @param redirectUrl - SSO configuration redirect url
     * @returns {Promise<LoginDetailsResponse>} - SSO login details
     *
     * @example
     * ```typescript
     * import { auth } from "@twilio/flex-sdk";
     *
     * const authInstance = auth("AC123456789009876543210");
     * const {
     *   loginUrl,
     *   nonce,
     *   codeChallenge,
     *   state,
     *   codeVerifier
     * } = await auth.getLoginDetails("sJQxxxxxxxxx", "JQxxxxxxxxxxx");
     *
     * console.log("Login URL: ", loginUrl);
     * console.log("Nonce: ", nonce);
     * console.log("Code Challenge: ", codeChallenge);
     * console.log("State: ", state);
     * console.log("Code Verifier: ", codeVerifier);
     * ```
     */
    getLoginDetails(clientId: string, connectionName: string, redirectUrl?: string): Promise<LoginDetailsResponse>;
    /**
     * Exchanges token for Flex auth token
     *
     * @param config - parameters for token exchange
     * @returns {Promise<FlexAuthToken>} - Flex auth token
     *
     * @example
     * ```ts
     * import { auth } from "@twilio/flex-sdk";
     *
     * const authInstance = auth("AC123456789009876543210");
     * const tokenDetails = await authInstance.exchangeToken({
     *   authCode: "authCode",
     *   clientId: "clientId",
     *   codeVerifier: "codeVerifier",
     *   nonce: "nonce",
     *   state: "state"
     * });
     *
     * console.log(tokenDetails);
     * ```
     */
    exchangeToken(config: ExchangeTokenParams): Promise<FlexAuthToken>;
}

/**
 * Builds an Authentication object with the given account sid
 * @param accountSid - Account sid
 * @ignore
 *
 * @public
 */
export declare type AuthenticatorFactory = (accountSid: string) => Authenticator;

export { CallOptions }

/**
 * Cancel a task that was being transferred to a target worker.
 * @public
 * @category Actions
 * @param taskSid - The unique identifier (SID) of the task to be transferred.
 * @returns {Promise<Task>} - A promise that resolves to a `Task` object, representing the canceled task.
 * @throws {@link FlexSdkError} - Rejects with an error if the task transfer fails.
 *
 * @example
 * ```ts
 * import { createClient, CancelVoiceTaskTransfer } from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN");
 * const cancelVoiceTaskTransfer = new CancelVoiceTaskTransfer("WTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
 * await client.execute(cancelVoiceTaskTransfer);
 * ```
 */
export declare class CancelVoiceTaskTransfer implements Action<Promise<Task>> {
    constructor(taskSid: string);
    run(ctx: {}): Promise<Task>;
}

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Attachments configuration
 * @public
 */
export declare interface CbmAttachments {
    enabled: boolean;
    /**
     * Max number of attachments
     */
    number_of_attachments: number;
    /**
     * Max size of 1 attachment
     */
    max_file_size: number;
    /**
     * Max total size of attachments
     */
    max_total_file_size: number;
    /**
     * Accepted attachment extensions
     */
    accepted_extensions: Array<string>;
}

/**
 * Participant entity
 * @public
 */
export declare class CbmParticipant {
    /**
     * The sid of the participant (UTxxx)
     */
    readonly participantSid: string;
    /**
     * The type of the participant
     */
    readonly type: ParticipantType;
    /**
     * The type of the channel
     */
    readonly channelType: MediaChannelType;
    /**
     * The sid of the channel (UOxxx)
     */
    readonly channelSid: string;
    /**
     * The sid of the interaction (KDxxx)
     */
    readonly interactionSid: string;
    /**
     * The index of the last read message
     */
    readonly lastReadMessageIndex?: number;
    /**
     * The timestamp of the last read message
     */
    readonly lastReadTimestamp?: Date;
    /**
     * The routing properties of the participant
     */
    readonly routingProperties?: RoutingProperties;
    /**
     * Media properties of the participant
     */
    readonly mediaProperties?: MediaProperties;
    constructor(participantData: ParticipantEventData);
}

export { Channel }

/**
 * Channel configuration object
 * @public
 */
export declare interface ChannelConfig {
    /**
     * Type of channel
     */
    address_type: string;
    cbm_attachments: CbmAttachments;
}

export { ChannelEvents }

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Enable Voice on Citrix VDI
 * @public
 */
export declare interface CitrixVoiceVdi {
    enabled: boolean;
}

/**
 * @public
 */
export declare interface Client extends EventPublisher<ClientEvent> {
    readonly config: ClientConfigType;
    readonly roles: Array<Role>;
    readonly token: string;
    /**
     * @deprecated This won’t be available in the next Major version. Use Graphql {@link Client.dataClient} instead
     * @ignore
     */
    readonly virtualAgentData: VirtualAgentDataApi;
    readonly dataClient: ApolloClient<NormalizedCacheObject> | null;
    readonly worker: Worker_2;
    readonly workspace: Workspace;
    /**
     * @ignore
     * @deprecated This won’t be available in the next Major version. Use Graphql {@link Client.dataClient} instead
     */
    profileConnector: ProfileConnector;
    execute<T>(action: Action<T>): T;
    /**
     * Destroy the client, removing all event listeners
     *
     * @returns {Promise<void>}
     *
     * @example
     * ```ts
     * import { createClient } from "@twilio/flex-sdk";
     *
     * const client = await createClient("SDK_TOKEN");
     *
     * await client.destroy();
     * ```
     */
    destroy(): Promise<void>;
    /**
     *
     * Update the token for the client
     * @param token - The new token
     * @returns {Promise<void>}
     *
     * @example
     * ```ts
     * import { createClient } from "@twilio/flex-sdk";
     *
     * const client = await createClient("SDK_TOKEN");
     *
     * await client.updateToken("NEW_TOKEN");
     * ```
     */
    updateToken(token: string): Promise<void>;
}

/**
 * @public
 */
export declare interface ClientConfigType {
    readonly account: AccountConfig;
}

/**
 * @public
 */
export declare enum ClientEvent {
    TokenExpired = "tokenExpired",
    TokenAboutToExpire = "tokenAboutToExpire",
    TokenUpdated = "tokenUpdated",
    TokenAutoUpdateFailed = "tokenAutoUpdateFailed",
    TokenMaxLifetimeReached = "tokenMaxLifetimeReached",
    ConnectionLost = "connectionLost",
    ConnectionRestored = "connectionRestored",
    Disconnected = "disconnected",
    IncomingCall = "incomingCall",
    ClientDestroyed = "clientDestroyed"
}

/**
 * Client options
 * @public
 */
export declare interface ClientOptions {
    /**
     * Session related options
     */
    readonly session: SessionOptions;
    /**
     * Logger related options
     */
    readonly logger: LoggerOptions;
    /**
     * Telemetry related options
     */
    readonly telemetry: TelemetryOptions;
    /**
     * Account config related options
     */
    readonly accountConfig: AccountConfigOptions;
    /**
     * Data client related options
     */
    readonly dataClientOptions?: DataClientOptions;
    /**
     * TaskRouter-related options
     */
    readonly taskRouterOptions?: TaskRouterOptions;
    /**
     * Voice related options
     */
    readonly voiceOptions?: VoiceOptions;
    /**
     * Twilio Region ID, e.g. "us1", "ie1" etc
     */
    region: string;
    /**
     * region value to use for non-Flex apis
     */
    regionNonFlex?: string;
    /**
     * Name of the app that is using Flex SDK, e.g. "My Custom App"
     */
    appName: string;
    /**
     * Version of the app that is using Flex SDK, e.g. "2.3"
     */
    appVersion: string;
    worker?: Supervisor;
    workspace?: Workspace;
    /**
     * Type of the app using SDK, e.g. "mobile", "web" or "headless". "headless" is used by default
     */
    origin?: string;
    /**
     * Flag to disable graphql data client by default its enabled
     */
    disableDataClient?: boolean;
}

/**
 * @public
 */
export declare type ClientProvider = (token: string, userOptions?: DeepPartial<ClientOptions>) => Promise<Client>;

/**
 * Complete a task that is either pending or assigned. If applicable, will result in WrapupTask action being called.
 * @public
 * @category Actions
 *
 * @param taskSid - The unique identifier (SID) of the task to be completed.
 * @throws {@link FlexSdkError} - Rejects with an error if the task cannot be completed.
 * @returns {Promise<Task>} - A promise that resolves to a `Task` object, representing the completed task.
 *
 * @example
 * ```ts
 * import { createClient, CompleteTask } from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN");
 *
 * const completeTask = new CompleteTask("TSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
 * await client.execute(completeTask);
 * ```
 */
export declare class CompleteTask implements Action<Promise<Task>> {
    constructor(taskSid: string);
    run(ctx: {}): Promise<Task>;
}

export { ConferenceOptions }

/**
 * @public
 *
 * Creates a new FlexSdk Client instance.
 *
 * @param token - A flex token to initialize the client
 * @param userOptions - A set of options to configure the client
 * @returns {Promise<Client>} a Promise that resolves with the new Client instance
 *
 * @example
 * ```ts
 * import { createClient } from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN", {
 *   logger: {
 *     level: "debug"
 *   }
 *});
 * ```
 */
export declare const createClient: (token: string, userOptions?: DeepPartial<ClientOptions> | undefined) => Promise<Client>;

/**
 * @public
 */
export declare interface DataClientOptions {
    connectToDevTools?: boolean;
    localSchema?: {
        typeDefs: string | string[] | DocumentNode | DocumentNode[];
        resolvers: Resolvers | Resolvers[];
    };
    errorLink?: ApolloLink;
    typePolicies?: TypePolicies;
}

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Debugger integration configuration
 * @public
 */
export declare interface DebuggerIntegration {
    console_errors_included?: boolean;
    enabled: boolean;
}

/**
 * @public
 */
export declare type DeepPartial<T> = {
    [P in keyof T]?: DeepPartial<T[P]> | T[P];
};

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * default configuration
 * @public
 */
export declare interface DefaultQueueStatsConfiguration {
    service_level_threshold?: number;
    short_abandoned_threshold?: number;
    reset_timezone?: string;
    reset_time?: string;
}

export { DequeueOptions }

/**
 * Ends a conference for all participants in a task.
 *
 * @public
 * @category Actions
 * @param taskSid - The unique identifier (SID) of the task to be ended.
 * @returns {Promise<Task>} - A promise that resolves to a `Task` object, representing the ended task.
 *
 * @example
 * ```ts
 * import { createClient, EndConferenceForAll } from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN");
 * const endConferenceForAll = new EndConferenceForAll("WTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
 * await client.execute(endConferenceForAll);
 * ```
 */
export declare class EndConferenceForAll implements Action<Promise<Task>> {
    constructor(taskSid: string);
    run(ctx: {}): Promise<Task>;
}

/**
 * Ends a task.
 * @public
 * @category Actions
 * @param taskSid - The unique identifier (SID) of the task to be ended.
 * @throws {@link FlexSdkError} - Rejects with an error if the task cannot be ended.
 * @returns {Promise<Task>} - A promise that resolves to a `Task` object, representing the ended task.
 *
 * @example
 * ```ts
 * import { createClient, EndTask} from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN");
 * const endTask = new EndTask("WTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
 * await client.execute(endTask);
 * ```
 */
export declare class EndTask implements Action<Promise<Task>> {
    constructor(taskSid: string);
    run(ctx: {}): Promise<Task>;
}

/**
 * Error code
 * @public
 */
export declare enum ErrorCode {
    /**
     * PermissionDenied error
     */
    PermissionDeniedError = 20003,
    /**
     * Invalid access token
     */
    InvalidAccessToken = 20101,
    /**
     * Access Token expired or expiration date invalid
     */
    AccessTokenExpired = 20104,
    /**
     * Twilsock rate limit exceeded
     */
    TooManyRequests = 20429,
    /**
     * Internal Server Error
     */
    InternalServerError = 20500,
    /**
     * Bad Gateway
     */
    BadGateway = 20502,
    /**
     * Service Unavailable
     */
    ServiceUnavailable = 20503,
    /**
     * Gateway Timeout
     */
    GatewayTimeout = 20504,
    /**
     * Authorization error
     */
    AuthorizationError = 45003,
    /**
     * Validation error
     */
    ValidationError = 45004,
    /**
     * Connection error
     */
    ConnectionError = 45011,
    /**
     * Unknown error thrown by a child SDK
     */
    SDK = 45500,
    /**
     * Unknown error
     */
    Unknown = 45501,
    /**
     * Access denied
     */
    Forbidden = 45502,
    /**
     * Invalid parameter value received as argument
     */
    InvalidParams = 45503,
    /**
     * Resource was not found
     */
    NotFound = 45504,
    /**
     * Function called in invalid state of the object
     */
    InvalidState = 45505,
    /**
     * Not able to reach the server
     */
    NetworkError = 45508,
    /**
     * TwilsockConnection error
     */
    TwilsockConnectionError = 45511,
    /**
     * DownstreamServiceError error
     */
    DownstreamServiceError = 45512,
    /**
     * Bad request error
     */
    BadRequest = 70002,
    /**
     * Invalid certificate
     */
    InvalidCertificate = 70251
}

/**
 * Error severity
 * @public
 */
export declare enum ErrorSeverity {
    Fatal = "fatal",
    Error = "error",
    Warning = "warning",
    Info = "info"
}

/**
 * @public
 */
export declare interface EventPublisher<E extends string | symbol, F = (...args: unknown[]) => void> {
    addListener(eventName: E, listener: F): this;
    removeListener(eventName: E, listener: F): this;
}

/**
 *
 * @public
 */
export declare interface ExchangeTokenParams {
    clientId: string;
    authCode: string;
    codeVerifier: string;
    nonce: string;
    state: string;
}

/**
 * Flex Feature Flags enable admins to opt-in to features that are currently in Pilot or Beta in Flex.
 * @public
 */
export declare interface FeaturesConfig {
    readonly features: Array<FeaturesList>;
    /**
     * Indicates if Ytica is active on the account
     */
    readonly insightsActive: boolean;
}

/**
 * @public
 */
export declare type FeaturesConfigDataGetter = (token: string) => Promise<FeaturesConfig>;

/**
 * Flex Features
 * Features for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * List of features
 * @public
 */
export declare interface FeaturesList {
    /**
     * Feature description
     */
    readonly description: string;
    /**
     * Documentation URL
     */
    readonly docUrl: string;
    /**
     * Is feature enabled
     */
    readonly enabled: boolean;
    /**
     * Feature identifier
     */
    readonly id: string;
    /**
     * Feature name
     */
    readonly name: string;
    /**
     * Feature stage
     */
    readonly stage: string;
}

/**
 * Request body for POST /Profiles/Find endpoint.
 * @public
 */
export declare interface FindProfilesRequest {
    Attributes: Array<ProfileAttribute>;
    UniqueName: string;
    WriteIfNotFound?: boolean;
}

/**
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Response body for POST /Tokens endpoint
 * @public
 */
export declare interface FlexAuthToken {
    expiration?: Date;
    identity?: string | null;
    roles?: Array<string> | null;
    token?: string | null;
}

/**
 * Error thrown by Flex SDK
 * @public
 */
export declare class FlexSdkError extends Error {
    constructor(errorCode: ErrorCode, metadata?: FlexSdkErrorMetadata, details?: string, wrappedError?: Error);
    /**
     * Error code
     *
     * @readonly
     * @type {ErrorCode}
     */
    get code(): ErrorCode;
    /**
     * Detailed information about what caused the error
     *
     * @readonly
     * @type {string | undefined}
     */
    get details(): string | undefined;
    /**
     * Gets the wrapped Error that caused the exception
     *
     * @readonly
     * @returns {Error | undefined}
     */
    get wrappedError(): Error | undefined;
    /**
     * Gets the metadata about the error
     *
     * @readonly
     * @returns {FlexSdkErrorMetadata}
     */
    get metadata(): FlexSdkErrorMetadata;
}

/**
 * Metadata about error thrown by Flex SDK
 * @public
 */
export declare interface FlexSdkErrorMetadata {
    module?: string;
    resourceSid?: string;
    severity: ErrorSeverity;
    source?: string;
    translatedErrorCode?: ErrorCode;
    unhandled?: boolean;
}

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Flex UI Status Report configuration
 * @public
 */
export declare interface FlexUiStatusReport {
    enabled: boolean;
}

/**
 * @public
 *
 * Gets account configuration data.
 * If `fetchPolicy` is set to `"no-cache"` in `options`, it will call the `accountConfigProvider`
 * and fetch the latest configuration from the server. Otherwise, it will try to get the configuration
 * from the cache first. If the cache is empty, it will fetch the configuration from the server.
 *
 * @param sessionToken -The session token.
 * @param options - The options object containing the fetch policy.
 * @returns {Promise<AccountConfig>} - The account configuration data.
 *
 * @example
 * ```ts
 * import { getAccountConfig } from "@twilio/flex-sdk";
 *
 * const accountConfig = await getAccountConfig("token123456789009876543210");
 * ```
 */
export declare const getAccountConfig: (sessionToken: string, options?: AccountConfigOptions | undefined) => Promise<AccountConfigData<any>>;

/**
 * @public
 *
 * Get authentication config from the server
 *
 * @param params - Authentication config parameters
 * @returns {Promise<AuthenticationConfigResponse>}
 *
 * @example
 * ```ts
 * import { getAuthenticationConfig } from "@twilio/flex-sdk";
 *
 * const authConfig = await getAuthenticationConfig({
 *   runtimeDomain: "test-runtime-domain",
 *   appType: "web"
 * });
 * ```
 */
export declare const getAuthenticationConfig: (config: AuthenticationConfigParams) => Promise<AuthenticationConfigResponse>;

/**
 * @public
 *
 * Retrieves the features config for the provided session token
 *
 * @param token - Your session token.
 * @returns {Promise<FeaturesConfig>} - A promise that resolves with the features config
 *
 * @example
 * ```ts
 * import { getFeaturesConfig } from "@twilio/flex-sdk";
 *
 * const featuresConfig = await getFeaturesConfig("token123456789009876543210");
 * ```
 */
export declare const getFeaturesConfig: (token: string, uiVersion?: string | undefined) => Promise<FeaturesConfig>;

/**
 * @public
 *
 * Retrieves public configuration from the Flex Configuration Service.
 *
 * @param option - Either an `AccountSidOption` or `RuntimeDomainOption` object.
 * @returns A `PublicConfig` object with the public configuration.
 *
 * @throws {FlexSdkError} - If the request to the Flex Configuration Service fails.
 * @throws {FlexSdkError} - If the response from the Flex Configuration Service is invalid.
 *
 * @example
 * ```ts
 * import { getPublicConfig } from "@twilio/flex-sdk";
 *
 * const publicConfig = await getPublicConfig({ accountSid: "AC123456789009876543210" });
 * ```
 */
export declare const getPublicConfig: (option: XOR<AccountSidOption, RuntimeDomainOption>) => Promise<PublicConfig>;

/**
 * @public
 */
export declare type GetToken = () => Promise<string> | string;

/**
 * @public
 * @ignore
 */
export declare const hasPermission: (permissionToCheck: string, tokenRoles: Array<Role>) => boolean;

/**
 * @public
 */
export declare interface HoldCallOptions {
    holdMusicUrl?: string;
    holdMusicMethod?: string;
}

/**
 * Hold a participant in a task.
 *
 * @public
 * @category Actions
 * @param targetParticipantSid - The unique identifier (SID) of the participant to be held.
 * @param taskSid - The unique identifier (SID) of the task to hold the participant in.
 * @param options - Optional configuration parameters for customizing the participant holding process.
 * @throws {@link FlexSdkError} Rejects with an error if the participant cannot be held.
 * @returns {Promise<void>} A promise that resolves when the participant is successfully held.
 *
 * @example
 * ```ts
 * import { createClient, HoldParticipant } from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN");
 * const holdParticipantAction = new HoldParticipant("WKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "WTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
 * await client.execute(holdParticipantAction);
 * ```
 */
export declare class HoldParticipant implements Action<Promise<void>> {
    constructor(targetParticipantSid: string, taskSid: string, options?: HoldParticipantOptions);
    run(ctx: {}): Promise<void>;
}

/**
 * Configuration options for holding a participant in a task.
 * @public
 */
export declare interface HoldParticipantOptions {
    /**
     * The URL of the hold music to play to the participant.
     */
    holdMusicUrl?: string;
    /**
     * The HTTP method to use when fetching the hold music.
     */
    holdMusicMethod?: string;
}

/**
 * Profile Connector for Flex
 * Profile Connector addon for Flex
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * A single identifier that can identify a particular profile in a CDP.
 * @public
 */
export declare interface Identifier {
    /**
     * The CDP/CRM identifier key, in the casing that your service expects us to send along with it.
     */
    key: string;
    /**
     * The optional priority of this identifier, will correspond to the order of the identifiers that we query the CDP/CRM with. 1-indexed.
     */
    priority?: number;
    /**
     * the (optional) friendly name of this particular identifier. Used for presenting identifiers in a nice way in a number of different experiences.
     */
    friendly_name?: string;
}

/**
 * Response body for the GET /Identifiers endpoint.
 * @public
 */
export declare interface IdentifiersResponse {
    identifiers: Array<Identifier>;
}

/**
 * Identity provider configuration interface
 *
 * @public
 */
export declare interface IdpConfig {
    /**
     * redirect url where to return back from identity provider to log in to Flex
     */
    redirectUrl: string;
}

export { IncomingTransfer }

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Integrations config
 * @public
 */
export declare interface IntegrationsConfig {
    name: string;
    type: string;
    active: boolean;
    config: object;
    /**
     * Url of logo
     */
    logo?: string;
    author?: string;
}

/**
 * Kick a participant from a task.
 *
 * @public
 * @category Actions
 * @param targetParticipantSid - The unique identifier (SID) of the participant to be kicked.
 * @param taskSid - The unique identifier (SID) of the task to kick the participant from.
 * @throws {@link FlexSdkError} - Rejects with an error if the participant cannot be kicked.
 * @returns {Promise<void>} - A promise that resolves when the participant is successfully kicked.
 *
 * @example
 * ```ts
 * import { createClient, KickParticipant } from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN");
 * const kickParticipant = new KickParticipant("WKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "WTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
 * await client.execute(kickParticipant);
 * ```
 */
export declare class KickParticipant implements Action<Promise<void>> {
    constructor(targetParticipantSid: string, taskSid: string);
    run(ctx: {}): Promise<void>;
}

/**
 * Logger
 * @public
 * @ignore
 */
export declare interface Logger {
    trace: (...log: unknown[]) => void;
    debug: (...log: unknown[]) => void;
    log: (...log: unknown[]) => void;
    info: (...log: unknown[]) => void;
    warn: (...log: unknown[]) => void;
    error: (...log: unknown[]) => void;
    setLevel: (level: LoggerLevel) => void;
    getLevel: () => LoggerLevelNumbers;
}

/**
 * Logger level
 * @public
 */
export declare type LoggerLevel = LogLevelDesc;

/**
 * @public
 */
export declare type LoggerLevelNumbers = LogLevelNumbers;

/**
 * Logger options
 * @public
 */
export declare interface LoggerOptions {
    level: LoggerLevel;
}

/**
 *
 * @public
 */
export declare interface LoginDetailsResponse {
    loginUrl: string;
    nonce: string;
    codeChallenge: string;
    state: string;
    codeVerifier: string;
}

/**
 * Media channel type
 * @public
 */
export declare enum MediaChannelType {
    Email = "email",
    Sms = "sms",
    WhatsApp = "whatsapp",
    Web = "web",
    Voice = "voice",
    Messenger = "messenger",
    Chat = "chat",
    Gbm = "gbm",
    Video = "video"
}

/**
 * Media properties
 * @public
 */
export declare type MediaProperties = {
    [key: string]: any;
};

/**
 * Monitor a provided ongoing call of another agent
 * @public
 * @category Actions
 * @param taskSid - The taskSid of the task to monitor the call for.
 * @param reservationSid - The reservationSid of the task to monitor the call for.
 * @param options - Optional configuration parameters for customizing the monitor call process.
 * @throws {@link FlexSdkError} - Rejects with an error if the call cannot be monitored.
 * @returns {Promise<VoiceCall>} - A promise that resolves to a `VoiceCall` object, representing the call.
 *
 * @example
 * ```ts
 * import { createClient, MonitorCall  } from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN");
 * const monitorCall = await new MonitorCall("WTXXXXXXXXXXXXXXXXXXXXXXXXX", "WRXXXXXXXXXXXXXXXXXXXXXXXXX");
 * const call = await client.execute(monitorCall);
 * ```
 */
export declare class MonitorCall implements Action<Promise<VoiceCall>> {
    constructor(taskSid: string, reservationSid: string, options?: MonitorCallOptions);
    run(ctx: {}): Promise<VoiceCall>;
}

/**
 * @public
 */
export declare interface MonitorCallOptions {
    extraParams?: Record<any, any>;
    voiceDevice?: Device;
}

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Outbound flows
 * @public
 */
export declare interface OutboundFlows {
    /**
     * Enable flag
     */
    enabled: boolean;
    /**
     * Phone number
     */
    caller_id: string;
    /**
     * Queue sid
     */
    queue_sid: string;
    /**
     * Country code
     */
    location: string;
    /**
     * Workflow sid
     */
    workflow_sid: string;
}

export { OutgoingTransfer }

/**
 * Data of a participant received from events
 * @public
 */
export declare type ParticipantEventData = {
    /**
     * The sid of the participant (UTxxx)
     */
    participant_sid: string;
    /**
     * The type of the participant
     */
    type: ParticipantType;
    /**
     * The type of the channel
     */
    channel_type: MediaChannelType;
    /**
     * The sid of the channel (UOxxx)
     */
    channel_sid: string;
    /**
     * The sid of the interaction (KDxxx)
     */
    interaction_sid: string;
    /**
     * The routing properties of the participant
     */
    routing_properties: RoutingData | null;
    /**
     * Media properties of the participant
     */
    media_properties: MediaProperties | null;
};

/**
 * Response for the participant endpoint request
 * @public
 */
export declare type ParticipantResponse = {
    /**
     * The identifier of the participant who is added to the channel
     */
    sid: string;
    /**
     * The channel sid of the channel where the participant is added
     */
    channel_sid: string;
    /**
     * The identifier of the interaction  where the participant is added
     */
    interaction_sid: string;
    /**
     * Optional media properties of the participant
     */
    media_properties: MediaProperties | null;
};

/**
 * Type of the participant, 'agent', 'customer', 'supervisor', 'external' or 'unknown'
 * @public
 */
export declare enum ParticipantType {
    Agent = "agent",
    Customer = "customer",
    Supervisor = "supervisor",
    External = "external",
    Unknown = "unknown"
}

/**
 * This is the opinionated view Twilio has of a CDP profile.
 * @public
 */
export declare interface Profile {
    /**
     * Unique Profile Mapping Identifier
     */
    sid: string;
    /**
     * The type of the profile:
     */
    type: string | null;
    /**
     * The given name of the profile, non-optional. Maps to \'first name\' in the US/Canada. Either \'business_name\' or a combination of \'given_name\' and \'family_name\' is required.
     */
    given_name?: string | null;
    /**
     * Single additional name field. Maps to \'middle name\' in the United States.
     */
    additional_name?: string | null;
    /**
     * The family name of the profile, non-optional. Maps to \'last name\' in the US/Canada. Either \'business_name\' or a combination of \'given_name\' and \'family_name\' is required.
     */
    family_name?: string | null;
    /**
     * Business name associated with this profile. Either \'business_name\' or a combination of \'given_name\' and \'family_name\' is required.
     */
    business_name?: string | null;
    /**
     * Freeform type field for what type of contact this is.
     */
    contact_type?: string | null;
    /**
     * The email address of the profile.
     */
    email_address?: string | null;
    /**
     * The phone number of the profile.
     */
    phone_number?: string | null;
    /**
     * The date this profile record was created. Can include time as well, not required. Format should be RFC 3339 https://www.rfc-editor.org/rfc/rfc3339#section-5.6
     */
    date_created?: string | null;
    /**
     * The date this profile record was last updated. Can include time as well, not required. Format should be RFC 3339 https://www.rfc-editor.org/rfc/rfc3339#section-5.6.
     */
    date_updated?: string | null;
    /**
     * Fully qualified url of the optional profile image (used for things like an avatar, biz logo, etc.).
     */
    profile_image_url?: string | null;
    /**
     * Optional list of additional contacts.
     */
    additional_contacts?: Array<ProfileContact>;
    /**
     * Optional list of additional contacts.
     */
    addresses?: Array<ProfileAddress>;
    /**
     * To add more information about the profile like membership level, gender, birth date, or whatever else you would like to include should not be protected information.
     */
    additional_attributes?: {
        [key: string]: string;
    };
    /**
     * This is a string that indicates the status of the profile. It can be one of \'unknown\', or \'identified\'.
     */
    status?: Profile.StatusEnum;
    /**
     * The language used by the customer for communication.
     */
    language?: string | null;
    /**
     * The preferred mode of contact for the customer.
     */
    mode_of_contact?: string | null;
    /**
     * The channel used for contact the most frequently.
     */
    frequent_inbound_channel?: string | null;
}

/**
 * @public
 */
export declare namespace Profile {
    export type StatusEnum = 'unknown' | 'identified';
    const StatusEnum: {
        Unknown: StatusEnum;
        Identified: StatusEnum;
    };
}

/**
 * Profile Connector for Flex
 * Profile Connector addon for Flex
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * An object representing address information for a profile.
 * @public
 */
export declare interface ProfileAddress {
    /**
     * A unique ID for the address resource. Used for linking addresses and contacts together.
     */
    id: string | null;
    /**
     * The type of address this is, eg \'Business\', \'Home\', \'Secret Lair\', etc.
     */
    type: string | null;
    /**
     * First address line of the profile.
     */
    address_1?: string | null;
    /**
     * second address line of the profile.
     */
    address_2?: string | null;
    /**
     * third address line of the profile.
     */
    address_3?: string | null;
    /**
     * City of the profile.
     */
    city?: string | null;
    /**
     * Postal/Zip code of the profile.
     */
    zip_code?: string | null;
    /**
     * State/Province of the profile.
     */
    state?: string | null;
    /**
     * Country of the profile.
     */
    country?: string | null;
    /**
     * Optional additional list of fields for unspecified address information. Could be something like \'street_direction\' etc.
     */
    additional_fields?: {
        [key: string]: string;
    };
}

/**
 * Profile Connector for Flex
 * Profile Connector addon for Flex
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The properties of the Participant to create
 * @public
 */
export declare interface ProfileAttribute {
    /**
     * The key of the attribute.
     */
    key: string;
    /**
     * The value of the attribute.
     */
    value: string;
}

/**
 * @public
 * @ignore
 */
export declare interface ProfileConnector {
    /**
     * @deprecated This method won’t be available in the next Major version. Use Graphql {@link Client.dataClient} instead
     * */
    findProfileByUniqueId(uniqueIdentifier: string, uniqueName: string): Promise<Profile>;
    /**
     * @deprecated This method won’t be available in the next Major version. Use Graphql {@link Client.dataClient} instead
     */
    findProfileByIdentifiers(findProfilesRequest: FindProfilesRequest): Promise<ProfilesResponse>;
    /**
     * @deprecated This method won’t be available in the next Major version. Use Graphql {@link Client.dataClient} instead
     */
    getIdentifiers(uniqueName: string): Promise<IdentifiersResponse>;
    /**
     * @deprecated This method won’t be available in the next Major version. Use Graphql {@link Client.dataClient} instead
     */
    getTraits(uniqueName: string): Promise<TraitsResponse>;
}

/**
 * Profile Connector for Flex
 * Profile Connector addon for Flex
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * An object representing contact information for a profile.
 * @public
 */
export declare interface ProfileContact {
    /**
     * Freeform type field for what type of contact this is.
     */
    type?: string | null;
    /**
     * The given name of the profile, non-optional. Maps to \'first name\' in the US/Canada. Either \'business_name\' or a combination of \'given_name\' and \'family_name\' is required.
     */
    given_name?: string | null;
    /**
     * Single additional name field. Maps to \'middle name\' in the United States.
     */
    additional_name?: string | null;
    /**
     * The family name of the profile, non-optional. Maps to \'last name\' in the US/Canada. Either \'business_name\' or a combination of \'given_name\' and \'family_name\' is required.
     */
    family_name?: string | null;
    /**
     * Business name associated with this profile. Either \'business_name\' or a combination of \'given_name\' and \'family_name\' is required.
     */
    business_name?: string | null;
    /**
     * The email address of the profile.
     */
    email_address?: string | null;
    /**
     * The phone number of the profile.
     */
    phone_number?: string | null;
    /**
     * Optional association of this contact to a particular address resource
     */
    address_id?: string | null;
    /**
     * Optional additional list of fields for unspecified contact information. Could be something like \'ip_address\' for an IoT device, etc.
     */
    additional_fields?: {
        [key: string]: string;
    };
}

/**
 * Response body for the POST Resolve endpoint.
 * @public
 */
export declare interface ProfilesResponse {
    profiles: Array<RankedProfile>;
}

/**
 * Public configuration object
 * @public
 */
export declare interface PublicConfig {
    /**
     * Runtime domain
     */
    runtimeDomain: string;
    publicAttributes: PublicConfigAttributes | null;
    /**
     * Account SID (may be encrypted)
     */
    accountSid: string;
}

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Public configuration attributes
 * @public
 */
export declare interface PublicConfigAttributes {
    [key: string]: object | unknown;
    /**
     * Whether the SSO flow needs to be launched in a popup window
     */
    loginPopup?: boolean;
}

/**
 * Public Config Provider
 * @public
 */
export declare type PublicConfigProvider = (option: XOR<AccountSidOption, RuntimeDomainOption>) => Promise<PublicConfig>;

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Queue channel configuration object
 * @public
 */
export declare interface QueueChannelConfiguration {
    /**
     * Queue sid
     */
    queue_sid: string;
    channel_sid: string;
    service_level_threshold: number;
    short_abandoned_threshold: number;
}

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Queue configuration object
 * @public
 */
export declare interface QueueConfiguration {
    queue_sid: string;
    reset_timezone: string;
    reset_time: string;
}

/**
 * Queue stats configuration object
 * @public
 */
export declare interface QueueStatsConfiguration {
    default: DefaultQueueStatsConfiguration;
    /**
     * List of Queue Configurations for an account
     */
    queue_configurations: Array<QueueConfiguration>;
    /**
     * List of Queue Channel Configurations for an account
     */
    queue_channel_configurations: Array<QueueChannelConfiguration>;
}

/**
 * A profile entry augmented with an optional \'match percentage\' of how close the match was to the given attributes.
 * @public
 */
export declare interface RankedProfile {
    profile: Profile;
    /**
     * This is an optional number between 0 and 100 (inclusive) that indicates how close of a match this profile was to the provided attributes.
     */
    match_percentage?: number;
    /**
     * This is a string that indicates the status of the profile. It can be one of \'unknown\', or \'identified\'.
     */
    status?: RankedProfile.StatusEnum;
}

/**
 * @public
 */
export declare namespace RankedProfile {
    export type StatusEnum = 'unknown' | 'identified';
    const StatusEnum: {
        Unknown: StatusEnum;
        Identified: StatusEnum;
    };
}

export { RedirectOptions }

export { RejectOptions }

/**
 * Rejects a task for the current worker.
 * @public
 * @category Actions
 * @param taskSid - The unique identifier (SID) of the task to be rejected.
 * @throws {@link FlexSdkError} - Rejects with an error if the task rejection fails.
 * @returns {Promise<Reservation>} - A promise that resolves to a `Reservation` object, representing the rejected task.
 *
 * @example
 * ```ts
 * import { createClient, RejectTask } from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN");
 * const rejectTask = new RejectTask("WTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
 * await client.execute(rejectTask);
 * ```
 */
export declare class RejectTask implements Action<Promise<Reservation>> {
    constructor(taskSid: string);
    run(ctx: {}): Promise<Reservation>;
}

export { Reservation }

export { ReservationEvents }

export { ReservationParticipantOptions }

/**
 * FederatedAuth Service
 * Authentication for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Role of the user
 * @public
 */
export declare enum Role {
    Guest = "guest",
    Agent = "agent",
    Admin = "admin",
    Supervisor = "supervisor",
    FlexReadqueuestats = "flex.readqueuestats",
    FlexReadteams = "flex.readteams",
    FlexEditstatus = "flex.editstatus",
    FlexEditskills = "flex.editskills",
    FlexMonitorchatcall = "flex.monitorchatcall",
    FlexReadadmin = "flex.readadmin",
    FlexLead = "flex.lead",
    FlexQualityanalyst = "flex.qualityanalyst",
    FlexReadonlyadmin = "flex.readonlyadmin"
}

/**
 * Data used for routing
 * @public
 */
export declare type RoutingData = {
    /**
     * Sid of a task this routing data corresponds to (WTxxx)
     */
    task_sid: string;
    /**
     * Sid of a worker this routing data corresponds to (WKxxx)
     */
    worker_sid?: string;
    /**
     * Sid of a reservation this routing data corresponds to (WRxxx)
     */
    reservation_sid?: string;
};

/**
 * Routing properties of one participant
 * @public
 */
export declare class RoutingProperties {
    /**
     * Sid of a task these routing properties correspond to (WTxxx)
     */
    readonly taskSid: string;
    /**
     * Sid of a worker these routing properties correspond to (WKxxx)
     */
    readonly workerSid?: string;
    /**
     * Sid of a reservation these routing properties correspond to (WRxxx)
     */
    readonly reservationSid?: string;
    constructor(routingData: RoutingData);
}

/**
 * Runtime domain option
 * @public
 */
export declare interface RuntimeDomainOption {
    /**
     * Runtime domain
     */
    runtimeDomain: string;
}

/**
 * @public
 */
export declare interface SessionOptions {
    readonly autoUpdateToken: boolean;
}

/**
 * Sets attributes for the worker.
 *
 * @public
 * @category Actions
 * @param attributes - An object containing attributes to set for the worker.
 * @param options - Optional configuration parameters for customizing the attribute setting process.
 * @throws {@link FlexSdkError} Rejects with an error if the attributes cannot be set.
 * @returns {Promise<void>} A promise that resolves when the attributes are successfully set.
 *
 * @example
 * ```ts
 * import { createClient, SetAttributes } from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN");
 * const setAttributesAction = new SetAttributes({ key: "value" });
 * await client.execute(setAttributesAction);
 * ```
 */
export declare class SetAttributes implements Action<Promise<void>> {
    constructor(attributes: Record<any, any>, setAttributesOptions?: SetAttributesOptions);
    run(ctx: {}): Promise<void>;
}

/**
 * @public
 */
export declare interface SetAttributesOptions {
    mergeExisting?: boolean;
}

/**
 * Sets the current activity for the worker.
 *
 * @public
 * @category Actions
 * @param activitySid - The unique identifier (SID) of the activity to be set as the current activity.
 * @param options - Optional configuration parameters for customizing the activity setting process.
 * @throws {@link FlexSdkError} Rejects with an error if the current activity cannot be set.
 * @returns {Promise<void>} A promise that resolves when the current activity is successfully set.
 *
 * @example
 * ```ts
 * import { createClient, SetCurrentActivity } from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN");
 * const setCurrentActivityAction = new SetCurrentActivity("WAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
 * await client.execute(setCurrentActivityAction);
 * ```
 */
export declare class SetCurrentActivity implements Action<Promise<void>> {
    constructor(activitySid: string, setCurrentActivityOptions?: SetCurrentActivityOptions);
    run(ctx: {}): Promise<void>;
}

/**
 * @public
 */
export declare interface SetCurrentActivityOptions {
    activityUpdateOptions?: ActivityOptions;
}

/**
 * @public
 *
 * Sets the log level for the SDK.
 *
 * @param logLevel - The log level to set.
 *
 * @example
 * ```ts
 * import { setLogLevel } from "@twilio/flex-sdk";
 *
 * setLogLevel("debug");
 * ```
 */
export declare const setLogLevel: (level: LoggerLevel) => void;

/**
 * Sets attributes for a task.
 *
 * @public
 * @category Actions
 * @param taskSid - The unique identifier (SID) of the task to set attributes for.
 * @param attributes - An object containing attributes to set for the task.
 * @param options - Optional configuration parameters for customizing the attribute setting process.
 * @throws {@link FlexSdkError} Rejects with an error if the task attributes cannot be set.
 * @returns {Promise<Task>} A promise that resolves to a Task object, representing the updated task.
 *
 * @example
 * ```ts
 * import { createClient, SetTaskAttributes } from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN");
 * const setTaskAttributesAction = new SetTaskAttributes("WTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", { key: "value" });
 * await client.execute(setTaskAttributesAction);
 * ```
 */
export declare class SetTaskAttributes implements Action<Promise<Task>> {
    constructor(taskSid: string, attributes: Record<any, any>, setTaskAttributesOptions?: SetTaskAttributesOptions);
    run(ctx: {}): Promise<Task>;
}

/**
 * @public
 */
export declare interface SetTaskAttributesOptions {
    mergeExisting?: boolean;
}

/**
 * Sets an activity for a worker.
 *
 * @public
 * @category Actions
 * @param targetWorkerSid - The unique identifier (SID) of the worker to set the activity for.
 * @param activitySid - The unique identifier (SID) of the activity to be set for the worker.
 * @param options - Optional configuration parameters for customizing the activity setting process.
 * @throws {@link FlexSdkError} Rejects with an error if the participant cannot be held.
 * @returns {Promise<void>} A promise that resolves when the activity is successfully set for the worker.
 *
 * @example
 * ```ts
 * import { createClient, SetWorkerActivity } from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN");
 * const setWorkerActivityAction = new SetWorkerActivity("WKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "WAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
 * await client.execute(setWorkerActivityAction);
 * ```
 */
export declare class SetWorkerActivity implements Action<Promise<void>> {
    constructor(targetWorkerSid: string, activitySid: string, options?: SetWorkerActivityOptions);
    run(ctx: {}): Promise<void>;
}

/**
 * @public
 */
export declare interface SetWorkerActivityOptions {
    activityUpdateOptions?: ActivityOptions;
}

/**
 * Sets attributes for a worker.
 *
 * @public
 * @category Actions
 * @param targetWorkerSid - The unique identifier (SID) of the worker to set attributes for.
 * @param attributes - An object containing the attributes to set for the worker.
 * @param options - Optional configuration parameters for customizing the attribute setting process.
 * @throws {@link FlexSdkError} Rejects with an error if the attributes cannot be set for the worker.
 * @returns {Promise<void>} A promise that resolves when the attributes are successfully set for the worker.
 *
 * @example
 * ```ts
 * import { createClient, SetWorkerAttributes } from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN");
 * const setWorkerAttributesAction = new SetWorkerAttributes("WKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", { key: "value" });
 * await client.execute(setWorkerAttributesAction);
 * ```
 */
export declare class SetWorkerAttributes implements Action<Promise<void>> {
    constructor(targetWorkerSid: string, attributes: Record<string, any>, options?: SetWorkerAttributesOptions);
    run(ctx: {}): Promise<void>;
}

/**
 * @public
 */
export declare interface SetWorkerAttributesOptions {
    mergeExisting?: boolean;
}

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Taskrouter skill definition
 * @public
 */
export declare interface SkillDefinition {
    /**
     * Skill name
     */
    name: string;
    /**
     * Skill type, if true value can be given between min and max
     */
    multivalue: boolean;
    /**
     * minimum value
     */
    minimum?: number;
    /**
     * maximum value
     */
    maximum?: number;
}

/**
 * Initiates a warm transfer of a voice task to an external phone number.
 * @public
 * @category Actions
 * @param taskSid - The unique identifier (SID) of the task to be transferred.
 * @param phoneNumber - The external phone number to transfer the task to.
 * @param callerId - An optional parameter for specifying the caller ID for the transfer.
 * @throws {@link FlexSdkError} - Rejects with an error if the transfer cannot be initiated.
 * @returns {Promise<AddVoiceParticipantResponse>} - A promise that resolves to an `AddVoiceParticipantResponse` object, indicating the result of the transfer operation.
 *77
 * @example
 * ```ts
 * import { createClient, StartExternalWarmVoiceTaskTransfer } from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN");
 * const startExternalWarmVoiceTaskTransfer = new StartExternalWarmVoiceTaskTransfer("WTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "+15555555555");
 * await client.execute(startExternalWarmVoiceTaskTransfer);
 * ```
 */
export declare class StartExternalWarmVoiceTaskTransfer implements Action<Promise<AddVoiceParticipantResponse>> {
    constructor(taskSid: string, phoneNumber: string, callerId?: string);
    run(ctx: {}): Promise<AddVoiceParticipantResponse>;
}

/**
 * Starts an outbound call.
 * @public
 * @category Actions
 * @param toNumber - The phone number to which the outbound call will be placed.
 * @param fromNumber - The phone number from which the outbound call will be placed.
 * @param workflowSid - The unique identifier (SID) of the workflow to be used for the outbound call.
 * @param taskQueueSid - The unique identifier (SID) of the task queue to be used for the outbound call.
 * @param options - Optional configuration parameters for customizing the outbound call process.
 * @throws {@link FlexSdkError} - Rejects with an error if the outbound call cannot be started.
 * @returns {Promise<VoiceCall>} - A promise that resolves to a `VoiceCall` object, representing the outbound call.
 *
 * @example
 * ```ts
 * import { createClient, StartOutboundCall  } from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN");
 * const startOutBoundCall = await new StartOutboundCall("+15555555555");
 * const call = await client.execute(startOutBoundCall);
 * ```
 */
export declare class StartOutboundCall implements Action<Promise<VoiceCall>> {
    constructor(toNumber: string, fromNumber?: string, workflowSid?: string, taskQueueSid?: string, options?: StartOutboundCallOptions);
    run(ctx: {}): Promise<VoiceCall>;
}

/**
 * @public
 */
export declare interface StartOutboundCallOptions {
    attributesForTaskCreation?: object;
    conferenceOptions?: ConferenceOptions;
    voiceDevice?: Device;
}

/**
 * Transfers a task to a target worker.
 * @public
 * @category Actions
 * @param taskSid - The unique identifier (SID) of the task to be transferred.
 * @param to - The unique identifier (SID) of the worker to transfer the task to.
 * @param options - Optional configuration parameters for customizing the task transfer process.
 * @returns {Promise<Task>} - A promise that resolves to a `Task` object, representing the transferred task.
 * @throws {@link FlexSdkError} - Rejects with an error if the task transfer fails.
 *
 * @example
 * ```ts
 * import { createClient, StartVoiceTaskTransfer } from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN");
 * const startVoiceTaskTransfer = new StartVoiceTaskTransfer("WTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "WKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
 * await client.execute(startVoiceTaskTransfer);
 * ```
 * */
export declare class StartVoiceTaskTransfer {
    constructor(taskSid: string, to: string, transferTaskOptions: TransferTaskOptions);
    run(ctx: {}): Promise<Task>;
}

export { Task }

export { TaskEvents }

export { TaskHoldOptions }

export { TaskOptions }

export { TaskParticipantOptions }

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Task queues used for Transfers
 * @public
 */
export declare interface TaskQueue {
    /**
     * TaskQueue Sid
     */
    sid: string;
    /**
     * TaskQueue available as target
     */
    targettable: boolean;
}

/**
 * @public
 */
export declare type TaskRouterOptions = {
    /**
     * Worker-related options
     */
    readonly workerOptions?: WorkerOptions_2;
    /**
     * Workspace-related options
     */
    readonly workspaceOptions?: WorkspaceOptions;
};

export { TaskRouterTaskQueue }

export { TaskTransferOptions }

/**
 * @public
 */
export declare type TelemetryOptions = {
    /**
     * Set to `false` to opt-out from submitting errors via telemetry
     */
    readonly reportErrors: boolean;
};

/**
 * Token information
 *
 * @public
 */
export declare type TokenData = {
    roles: Array<Role>;
    valid: boolean;
    dateExpired: Date;
    identity: string;
    flexUserSid: string;
};

/**
 * Object returned by refreshToken()
 *
 * @public
 */
export declare type TokenRefreshResult = {
    token: string;
    dateExpired: Date;
};

/**
 * Profile Connector for Flex
 * Profile Connector addon for Flex
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * A single trait mapping.
 * @public
 */
export declare interface Trait {
    /**
     * The CDP/CRM property, in it\'s original casing.
     */
    from: string;
    /**
     * The field on our profile data model that the \'from\' field maps to. Can be a many to 1 mapping for additional_attributes. For arrays, will be represented with array syntax. For Example \'addresses[0].address_1\'
     */
    to?: string;
    /**
     * This is a future looking array of categories that a particular trait will be associated with, user-defined. All fields will have \'default\' as a category for now.
     */
    categories?: Array<string>;
    /**
     * the (optional) friendly name of this particular trait. Used almost exclusively in conjunction with the additional_attributes mappings, so that we have the ability to communicate a nicer looking name for this.
     */
    friendly_name?: string;
}

/**
 * Response body for the GET /Traits endpoint.
 * @public
 */
export declare interface TraitsResponse {
    traits: Array<Trait>;
}

export { TransferOptions }

export { Transfers }

/**
 * @public
 */
export declare interface TransferTaskOptions {
    transferOptions?: TransferOptions;
}

export { TypePolicies }

/**
 *
 * Unhold a participant in a task.
 * @public
 * @category Actions
 * @param targetParticipantSid - The unique identifier (SID) of the participant to be unheld.
 * @param taskSid - The unique identifier (SID) of the task to unhold the participant in.
 * @throws {@link FlexSdkError} - Rejects with an error if the participant cannot be unheld.
 * @returns {Promise<void>} - A promise that resolves when the participant is successfully unheld.
 *
 * @example
 * ```ts
 * import { createClient, UnholdParticipant } from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN");
 * const unholdParticipant = new UnholdParticipant("WKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "WTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
 * await client.execute(unholdParticipant);
 * ```
 */
export declare class UnholdParticipant implements Action<Promise<void>> {
    constructor(targetParticipantSid: string, taskSid: string);
    run(ctx: {}): Promise<void>;
}

/**
 * @public
 *
 * Returns the version of the SDK
 */
export declare const version: string;

/**
 * Response schema for the VA endpoint
 * @public
 */
export declare interface VirtualAgentData {
    sentences: Array<VirtualAgentDataSentences>;
}

/**
 * @public
 * @ignore
 */
export declare interface VirtualAgentDataApi {
    getV1VirtualAgentData: (contextLookupSid: string) => Promise<VirtualAgentData>;
}

/**
 * Fetch data for Virtual Agent
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: flex-sdk@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Schema for VirtualAgentData Sentences
 * @public
 */
export declare interface VirtualAgentDataSentences {
    sentence_index: number;
    start_time: string;
    role: string;
    transcript: string;
}

/**
 * @public
 */
export declare interface VoiceCall {
    /**
     * @ignore
     */
    call: Call;
    /**
     * @ignore
     */
    device: Device;
    /**
     * Check if current call (if there is one) is on hold.
     *
     * @returns {Promise<boolean>} - A promise that resolves to a boolean indicating whether the call is on hold.
     *
     * @example
     * ```ts
     * import { createClient, StartOutboundCall } from "@twilio/flex-sdk";
     *
     * const client = await createClient("SDK_TOKEN");
     * const startOutboundCall = new StartOutboundCall("+1XXX", "+1XXX", "WWXXX", "WQXXX");
     *
     * const voiceCall = await client.execute(startOutboundCall);
     *
     * const isOnHold: boolean = await voiceCall.isOnHold();
     * console.log(`Call ${isOnHold ? "is on hold" : "is not on hold"}`)
     * ```
     */
    isOnHold(): Promise<boolean>;
    /**
     * @deprecated This method won’t be available in the next Major version. Use {@link VoiceCall.mute} and {@link VoiceCall.unmute} instead
     * @ignore
     */
    toggleMute(): void;
    /**
     * Hang up current call (if there is one).
     *
     * @returns {Promise<void>}
     *
     * @example
     * ```ts
     * import { createClient, StartOutboundCall } from "@twilio/flex-sdk";
     *
     * const client = await createClient("SDK_TOKEN");
     * const startOutboundCall = new StartOutboundCall("+1XXX", "+1XXX", "WWXXX", "WQXXX");
     *
     * const voiceCall = await client.execute(startOutboundCall);
     *
     * await voiceCall.disconnect();
     * ```
     */
    disconnect(): Promise<void>;
    /**
     * Is current call muted
     *
     * @returns {boolean} - A boolean indicating whether the call is muted
     *
     * @example
     * ```ts
     * import { createClient, StartOutboundCall } from "@twilio/flex-sdk";
     *
     * const client = await createClient("SDK_TOKEN");
     * const startOutboundCall = new StartOutboundCall("+1XXX", "+1XXX", "WWXXX", "WQXXX");
     *
     * const voiceCall = await client.execute(startOutboundCall);
     *
     * const isMuted: boolean = voiceCall.isMuted();
     * console.log(`Call ${isMuted ? "is muted" : "is not muted"}`)
     * ```
     */
    isMuted(): boolean;
    /**
     * Mute current call
     *
     * @returns {void}
     *
     * @example
     * ```ts
     * import { createClient, StartOutboundCall } from "@twilio/flex-sdk";
     *
     * const client = await createClient("SDK_TOKEN");
     * const startOutboundCall = new StartOutboundCall("+1XXX", "+1XXX", "WWXXX", "WQXXX");
     *
     * const voiceCall = await client.execute(startOutboundCall);
     * voiceCall.mute();
     *
     * const isMuted: boolean = voiceCall.isMuted();
     * console.log(`Call ${isMuted ? "is muted" : "is not muted"}`)
     * ```
     */
    mute(): void;
    /**
     * Unmute current call
     *
     * @returns {void}
     *
     * @example
     * ```ts
     * import { createClient, StartOutboundCall } from "@twilio/flex-sdk";
     *
     * const client = await createClient("SDK_TOKEN");
     * const startOutboundCall = new StartOutboundCall("+1XXX", "+1XXX", "WWXXX", "WQXXX");
     *
     * const voiceCall = await client.execute(startOutboundCall);
     * voiceCall.unmute();
     *
     * const isMuted: boolean = voiceCall.isMuted();
     * console.log(`Call ${isMuted ? "is muted" : "is not muted"}`)
     * ```
     */
    unmute(): void;
    /**
     * Hold current call (if there is one).
     *
     * @param holdMusicUrl - The URL endpoint to play when participant is on hold.
     * @param holdMusicMethod - The HTTP method for the hold URL.
     *
     * @returns {Promise<Task>} - A promise that resolves to a `Task` object, representing the held task.
     *
     * @example
     * ```ts
     * import { createClient, StartOutboundCall } from "@twilio/flex-sdk";
     *
     * const client = await createClient("SDK_TOKEN");
     * const startOutboundCall = new StartOutboundCall("+1XXX", "+1XXX", "WWXXX", "WQXXX");
     *
     * const voiceCall = await client.execute(startOutboundCall);
     *
     * await voiceCall.hold("holdMusicUrl", "GET");
     * ```
     */
    hold(options?: HoldCallOptions): Promise<Task>;
    /**
     * Unhold current call (if there is one).
     *
     * @returns {Promise<Task>} - A promise that resolves to a `Task` object, representing the unheld task.
     *
     * @example
     * ```ts
     * import { createClient, StartOutboundCall } from "@twilio/flex-sdk";
     *
     * const client = await createClient("SDK_TOKEN");
     * const startOutboundCall = new StartOutboundCall("+1XXX", "+1XXX", "WWXXX", "WQXXX");
     *
     * const voiceCall = await client.execute(startOutboundCall);
     *
     * // Call is not on hold by default so to unhold, it is needed to hold first
     * await call.hold("holdMusicUrl", "GET");
     * await call.unhold();
     * ```
     */
    unhold(): Promise<Task>;
}

/**
 * @public
 */
export declare interface VoiceOptions {
    /**
     * Auto accept incoming calls
     * @defaultValue true
     */
    autoAcceptIncomingCalls?: boolean;
}

/**
 * Without
 * Constructs a type by forcing all properties from T that are not assignable to U to be undefined
 * @public
 */
export declare type Without<T, U> = {
    [P in Exclude<keyof T, keyof U>]?: never;
};

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Default Worker attribute settings
 * @public
 */
export declare interface WorkerChannel {
    /**
     * Unique name of the TaskChannel associated to this WorkerChannel
     */
    name: string;
    /**
     * Default capacity value
     */
    capacity: number;
    /**
     * Default availability
     */
    availability: boolean;
}

export { WorkerEvents }

export { WorkerOptions_2 as WorkerOptions }

export { WorkspaceOptions }

export { WrappingOptions }

/**
 * Wrap up a task that is either pending or assigned.
 * @public
 * @category Actions
 * @param taskSid - The unique identifier (SID) of the task to be completed.
 * @throws {@link FlexSdkError} - Rejects with an error if the task cannot be completed.
 * @returns {Promise<Reservation>} - A promise that resolves to a `Reservation` object, representing the completed task.
 *
 * @example
 * ```ts
 * import { createClient, WrapUpTask } from "@twilio/flex-sdk";
 *
 * const client = await createClient("SDK_TOKEN");
 * const wrapUpTask = new WrapUpTask("TSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
 * await client.execute(wrapupTask);
 * ```
 */
export declare class WrapUpTask implements Action<Promise<Reservation>> {
    constructor(taskSid: string);
    run(ctx: {}): Promise<Reservation>;
}

/**
 * XOR
 * Constructs a type that requires type T or U, but not both
 * @public
 */
export declare type XOR<T, U> = T | U extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;

export { }

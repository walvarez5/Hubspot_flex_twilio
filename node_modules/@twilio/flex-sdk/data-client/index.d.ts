/// <reference types="react" />

import * as ApolloClient from '@apollo/client';
import { ApolloLink } from '@apollo/client/core';
import { DocumentNode } from '@apollo/client/core';
import { execute } from '@apollo/client';
import { ApolloClient as FlexDataClient } from '@apollo/client/core';
import { ApolloError as FlexDataClientError } from '@apollo/client';
import { ApolloLink as FlexDataClientLink } from '@apollo/client';
import { gql } from 'graphql-tag';
import { MockedProvider } from '@apollo/client/testing';
import { NormalizedCacheObject } from '@apollo/client/core';
import { Observable } from '@apollo/client';
import { onError } from '@apollo/client/link/error';
import { Resolvers } from '@apollo/client/core';
import { TypePolicies } from '@apollo/client/cache/inmemory/policies';
import { useLazyQuery as useFlexLazyQuery } from '@apollo/client';
import { useMutation as useFlexMutation } from '@apollo/client';
import { useQuery as useFlexQuery } from '@apollo/client';
import { useSubscription as useFlexSubscription } from '@apollo/client';

/**
 * @public
 *
 * Creates an Apollo Client for the Flex Data API
 *
 * @param tokenOrGetToken - A string or function that returns a string. If a function is provided, it will be called to get the token.
 * @param options - Options for the Apollo Client
 *
 * @returns {Promise<ApolloClient>} A promise that resolves to an Apollo Client
 *
 * @example
 * ```ts
 * import { createDataClient } from "@twilio/flex-sdk/data-client";
 *
 * const dataClient = await createDataClient("token123456789009876543210");
 * or
 *
 * const fucntionToGetToken = async () => "token123456789009876543210";
 * const dataClient = await createDataClient(fucntionToGetToken, { region: "us1" });
 * ```
 *
 */
export declare const createDataClient: (tokenOrGetToken: string | GetToken, options?: CreateDataClientOptions | undefined) => Promise<FlexDataClient<NormalizedCacheObject>>;

/**
 * @public
 */
export declare interface CreateDataClientOptions extends DataClientOptions {
    region?: string;
}

/**
 * @public
 */
export declare interface DataClientOptions {
    connectToDevTools?: boolean;
    localSchema?: {
        typeDefs: string | string[] | DocumentNode | DocumentNode[];
        resolvers: Resolvers | Resolvers[];
    };
    errorLink?: ApolloLink;
    typePolicies?: TypePolicies;
}

export { DocumentNode }

export { execute }

export { FlexDataClient }

export { FlexDataClientError }

export { FlexDataClientLink }

/**
 * @public
 *
 * Component to wrap the content inside an ApolloProvider
 *
 * @param  props - apollo client and childrens
 * @returns {JSX.Element}
 *
 * @example
 *
 * ```tsx
 * import { ApolloClient, ApolloProvider } from "@apollo/client";
 *
 * import { DataProvider, createDataClient } from "@twilio/flex-sdk/data-client";
 *
 * const apolloClient = await createDataClient("token", { region: "us1" });
 *
 * <DataProvider dataClient={apolloClient}>
 *     <span>test content</span>
 * </DataProvider>
 * ```
 */
export declare const FlexDataProvider: {
    ({ children, dataClient }: FlexDataProviderProps): JSX.Element;
    displayName: string;
};

/**
 * @public
 */
export declare interface FlexDataProviderProps {
    children: JSX.Element;
    dataClient: ApolloClient.ApolloClient<ApolloClient.NormalizedCacheObject>;
}

/**
 * @public
 */
export declare type GetToken = () => Promise<string> | string;

export { gql }

export { MockedProvider }

export { NormalizedCacheObject }

export { Observable }

export { onError }

export { Resolvers }

export { TypePolicies }

export { useFlexLazyQuery }

export { useFlexMutation }

export { useFlexQuery }

export { useFlexSubscription }

export { }

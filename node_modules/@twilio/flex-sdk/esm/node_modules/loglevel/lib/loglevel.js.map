{"version":3,"file":"loglevel.js","sources":["../../../../../../node_modules/loglevel/lib/loglevel.js"],"sourcesContent":["/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n"],"names":["root","definition","module","this","noop","undefinedType","isIE","logMethods","bindMethod","obj","methodName","method","traceForIE","realMethod","replaceLoggingMethods","level","loggerName","i","enableLoggingWhenConsoleArrives","defaultMethodFactory","Logger","name","defaultLevel","factory","self","currentLevel","storageKey","persistLevelIfPossible","levelNum","levelName","getPersistedLevel","storedLevel","cookie","location","persist","initialLevel","defaultLogger","_loggersByName","logger","_log"],"mappings":"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","x_google_ignoreList":[0]}
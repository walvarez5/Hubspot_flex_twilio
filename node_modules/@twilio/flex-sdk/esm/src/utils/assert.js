typeof window<"u"&&(window.global=window);import{FlexSdkError as o}from"../modules/error/FlexSdkError/FlexSdkError.js";import{ErrorCode as s}from"../modules/error/ErrorCode/ErrorCodes.js";import"../modules/error/ErrorCode/InternalErrorCodes.js";import"../modules/error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as a}from"../modules/error/ErrorSeverity/ErrorSeverity.js";function c(t){try{JSON.stringify(t)}catch(r){return/^TypeError: Converting circular structure to JSON/.test(r)}return!1}function d(t,r){if(typeof t>"u"){const e={module:"",severity:a.Error,source:"assert.ts"};throw new o(s.InvalidParams,e,`${r}, expected a defined value`)}}function i(t,r){if(typeof t!="object"||t===null||Array.isArray(t)){const e={module:"",severity:a.Error,source:"assert.ts"};throw new o(s.InvalidParams,e,`${r}, expected an object`)}}function f(t,r){if(i(t,r),c(t)){const e={module:"",severity:a.Error,source:"assert.ts"};throw new o(s.InvalidParams,e,`${r}, expected an object without cycles`)}}function n(t,r){if(typeof t!="string"){const e={module:"",severity:a.Error,source:"assert.ts"};throw new o(s.InvalidParams,e,`${r}, expected a string`)}}function m(t,r){if(n(t,r),t.trim()===""){const e={module:"",severity:a.Error,source:"assert.ts"};throw new o(s.InvalidParams,e,`${r}, expected a string which is not empty`)}}function u(t,r){if(!(t in r)){const e={module:"",severity:a.Error,source:"assert.ts"};throw new o(s.InvalidParams,e,`${t} is not a valid key`)}}export{d as assertDefined,u as assertKeyInObject,f as assertNotCircularObject,m as assertNotEmptyString,i as assertObject,n as assertString};
//# sourceMappingURL=assert.js.map

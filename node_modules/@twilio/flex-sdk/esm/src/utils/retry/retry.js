typeof window<"u"&&(window.global=window);import{isValidNumber as m,generateBackoffInterval as o}from"./retryUtil.js";async function d(e){const i=e.logger;let t=0,l=800,n=3*1e3,a=3;m(e.initialDelay)&&(l=e.initialDelay),m(e.maxDelay)&&(n=e.maxDelay),m(e.maxAttempts)&&(a=e.maxAttempts),l>n&&i.warn("Initial delay cannot be greater than Max delay, hence defaulting to Max delay"),a<1&&(i.warn("The value of max retry attempts has to be greater than 0, hence reset to 1"),a=1);let y;do{try{return t>0&&i.debug("Retry attempt: ",t),await e.functionToRetry()}catch(r){if(!e.retryCondition(r))return Promise.reject(r);if(t>=a-1){y=r;break}}const f=o(l,n,t+1);i.debug("Retry after(ms): ",f),await new Promise(r=>setTimeout(r,f))}while(t++<a-1);return Promise.reject(y)}export{d as retry};
//# sourceMappingURL=retry.js.map

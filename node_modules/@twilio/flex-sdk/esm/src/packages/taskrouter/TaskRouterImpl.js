typeof window<"u"&&(window.global=window);import{__classPrivateFieldSet as a,__classPrivateFieldGet as e}from"../../../node_modules/tslib/tslib.es6.js";import{Supervisor as O,Workspace as v}from"twilio-taskrouter";import{parseRegionForTwilsock as L}from"../../utils/regionUtil.js";import"../../modules/logger/Logger/LogEntry.js";import{LoggerName as y}from"../../modules/logger/Logger/LoggerName.js";import{getLogger as S}from"../../modules/logger/LoggerFactory/getLogger.js";import"../../modules/logger/LoggerFactory/LoggerConfigImpl.js";import{SessionImpl as b}from"../../modules/session/Session/SessionImpl.js";import{getEnvironmentConfig as F}from"../../modules/config/EnvironmentConfig/EnvironmentConfigImpl.js";import"../../modules/error/FlexSdkError/FlexSdkError.js";import"../../modules/error/ErrorCode/ErrorCodes.js";import"../../modules/error/ErrorCode/InternalErrorCodes.js";import"../../modules/error/ErrorCode/ErrorCodeHelper.js";import"../../modules/error/ErrorSeverity/ErrorSeverity.js";import"../../modules/storage/LocalStorage/LocalStorageKeys.js";import"../../modules/config/AccountConfig/AccountConfigImpl/AccountConfigDataContainer/AccountConfigDataContainer.js";import"../../modules/reporter/ErrorReporter.js";import"../../modules/storage/LocalStorage/LocalStorageImpl.js";import{ClientOptionsStore as I}from"../../modules/client/ClientOptions/ClientOptionsStore.js";import"../../backend/generated/Configuration/api/configuration.service.js";var p,l,f,o,r;class M{constructor(t){p.set(this,void 0),l.set(this,void 0),f.set(this,void 0),o.set(this,void 0),r.set(this,void 0),a(this,l,t.getInstanceOf(b),"f"),a(this,f,t.getInstanceOf(I),"f"),a(this,p,S(t)(y.TaskRouter),"f")}async init(t,i){var s,d,u,h,c,g;if(t&&a(this,o,t,"f"),i&&a(this,r,i,"f"),e(this,o,"f")&&e(this,r,"f"))return Promise.resolve();const _=F(),{region:T,regionNonFlex:R}=_||{},k=R||e(this,f,"f").regionNonFlex||T||e(this,f,"f").region,w=L(k);if(!e(this,o,"f")){const n=((d=(s=e(this,f,"f"))===null||s===void 0?void 0:s.taskRouterOptions)===null||d===void 0?void 0:d.workerOptions)||{};n.logLevel=n?.logLevel||this.mapToLogLevelString((h=(u=e(this,f,"f"))===null||u===void 0?void 0:u.logger)===null||h===void 0?void 0:h.level),k!==void 0&&(n.region=w),a(this,o,new O(e(this,l,"f").token,n),"f")}let m=(g=(c=e(this,f,"f"))===null||c===void 0?void 0:c.taskRouterOptions)===null||g===void 0?void 0:g.workspaceOptions;return k!==void 0&&(m={},m.region=w),!e(this,r,"f")&&t?(a(this,r,new v(e(this,l,"f").token,m,e(this,o,"f").workspaceSid),"f"),Promise.resolve()):new Promise(n=>{e(this,o,"f").on("ready",()=>{a(this,r,new v(e(this,l,"f").token,m,e(this,o,"f").workspaceSid),"f"),n()})})}updateToken(t){if(e(this,p,"f").debug("updateToken called"),e(this,o,"f"))try{this.worker.updateToken(t)}catch(i){e(this,p,"f").error("Failed to update token on worker",i)}if(e(this,r,"f"))try{this.workspace.updateToken(t)}catch(i){e(this,p,"f").error("Failed to update token on workspace",i)}e(this,p,"f").debug("updateToken completed")}async createTask(t,i,s,d,u={}){return e(this,o,"f").createTask(t,i,s,d,u)}get worker(){return e(this,o,"f")}get workspace(){return e(this,r,"f")}mapToLogLevelString(t){const i={trace:0,debug:1,info:2,warn:3,error:4,silent:5};if(typeof t=="number")switch(t){case 0:return"trace";case 1:return"debug";case 2:return"info";case 3:return"warn";case 4:return"error";case 5:return"silent";default:return"warn"}else if(typeof t=="string"){const s=t.toLowerCase();if(s in i)return s}return"warn"}}p=new WeakMap,l=new WeakMap,f=new WeakMap,o=new WeakMap,r=new WeakMap;export{M as TaskRouterImpl};
//# sourceMappingURL=TaskRouterImpl.js.map

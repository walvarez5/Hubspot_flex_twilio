typeof window<"u"&&(window.global=window);import{__classPrivateFieldSet as o,__classPrivateFieldGet as i}from"../../../../../node_modules/tslib/tslib.es6.js";import"../../../../modules/error/FlexSdkError/FlexSdkError.js";import{ErrorCode as s}from"../../../../modules/error/ErrorCode/ErrorCodes.js";import"../../../../modules/error/ErrorCode/InternalErrorCodes.js";import"../../../../modules/error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as a}from"../../../../modules/error/ErrorSeverity/ErrorSeverity.js";import{throwFlexSdkError as l}from"../../../../modules/error/ThrowError/ErrorHelper.js";import{TwilsockAdapterImpl as m}from"../../../TwilsockAdapter/TwilsockAdapterImpl.js";var r;class n{constructor(e){this.basePath="http://flex-sdk.twilio.com/v1",r.set(this,void 0),this.twilsockAdapter=e.getInstanceOf(m),o(this,r,l(e),"f")}async postTelemetryEvents(e){if(e==null){const t={module:"backend",severity:a.Error,source:"telemetry.service.ts"};i(this,r,"f").call(this,s.InvalidParams,t,"Required parameter events was null or undefined when calling postTelemetryEvents.")}return await this.twilsockAdapter.post(`${this.basePath}/Telemetry/Events`,e)}}r=new WeakMap;export{n as TelemetryServiceImpl};
//# sourceMappingURL=telemetry.service.js.map

typeof window<"u"&&(window.global=window);import{__classPrivateFieldSet as h,__classPrivateFieldGet as o}from"../../../../../node_modules/tslib/tslib.es6.js";import"../../../../modules/error/FlexSdkError/FlexSdkError.js";import{ErrorCode as a}from"../../../../modules/error/ErrorCode/ErrorCodes.js";import"../../../../modules/error/ErrorCode/InternalErrorCodes.js";import{isDownstreamErrorCode as c}from"../../../../modules/error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as m}from"../../../../modules/error/ErrorSeverity/ErrorSeverity.js";import{HttpAdapterImpl as f}from"../../../HttpAdapter/HttpAdapterImpl.js";import{AuthenticationMethod as v}from"../../../commons/authenticationMethods.js";import{convertDateStringValuesToDate as p}from"../../../../utils/processHttpAdapterResponse.js";import{throwFlexSdkError as w}from"../../../../modules/error/ThrowError/ErrorHelper.js";var r;class A{constructor(e){r.set(this,void 0),this.httpAdapter=new f(e),h(this,r,w(e),"f"),this.httpAdapter.setIsEdgeSupported(!0)}async getIdpUrl(e,t){const s={module:"backend",severity:m.Error,source:"federatedAuth.service.ts"};e==null&&o(this,r,"f").call(this,a.InvalidParams,s,"Required parameter accountSid was null or undefined."),t==null&&o(this,r,"f").call(this,a.InvalidParams,s,"Required parameter sSOLoginRequestBody was null or undefined.");let i;try{i=await this.httpAdapter.post(`https://iam[region].twilio.com/v1/Accounts/${encodeURIComponent(String(e))}/authenticate`,void 0,t)}catch(n){if(c(n.code)){const d=`FederatedAuthService - ${n.message}`;return o(this,r,"f").call(this,a.DownstreamServiceError,s,d)}return Promise.reject(n)}return p(i)}async refreshToken(e,t){const s={module:"backend",severity:m.Error,source:"federatedAuth.service.ts"};e==null&&o(this,r,"f").call(this,a.InvalidParams,s,"Required parameter accountSid was null or undefined."),t==null&&o(this,r,"f").call(this,a.InvalidParams,s,"Required parameter token was null or undefined.");let i;try{i=await this.httpAdapter.post(`https://iam[region].twilio.com/v1/Accounts/${encodeURIComponent(String(e))}/Tokens/refresh`,void 0,t)}catch(n){if(c(n.code)){const d=`FederatedAuthService - ${n.message}`;return o(this,r,"f").call(this,a.DownstreamServiceError,s,d)}return Promise.reject(n)}return p(i)}async validateToken(e,t,s){const i={module:"backend",severity:m.Error,source:"federatedAuth.service.ts"};e==null&&o(this,r,"f").call(this,a.InvalidParams,i,"Required parameter accountSid was null or undefined."),t==null&&o(this,r,"f").call(this,a.InvalidParams,i,"Required parameter token was null or undefined.");let l;try{l=await this.httpAdapter.post(`https://iam[region].twilio.com/v1/Accounts/${encodeURIComponent(String(e))}/Tokens/validate`,v.Basic,t,s)}catch(d){if(c(d.code)){const u=`FederatedAuthService - ${d.message}`;return o(this,r,"f").call(this,a.DownstreamServiceError,i,u)}return Promise.reject(d)}return p(l)}}r=new WeakMap;export{A as FederatedAuthServiceImpl};
//# sourceMappingURL=federatedAuth.service.js.map

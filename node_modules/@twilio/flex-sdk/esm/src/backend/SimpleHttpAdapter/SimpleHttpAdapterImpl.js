typeof window<"u"&&(window.global=window);import{__classPrivateFieldGet as r,__classPrivateFieldSet as f}from"../../../node_modules/tslib/tslib.es6.js";import"../../modules/error/FlexSdkError/FlexSdkError.js";import{InternalError as b}from"../../modules/error/InternalError/InternalError.js";import{ErrorCode as u}from"../../modules/error/ErrorCode/ErrorCodes.js";import"../../modules/error/ErrorCode/InternalErrorCodes.js";import"../../modules/error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as I}from"../../modules/error/ErrorSeverity/ErrorSeverity.js";import{retry as S}from"../../utils/retry/retry.js";import{retryableStatusCodes as M,retryableErrorMap as W}from"../../utils/retry/retryUtil.js";import{defaultRetryConditionOnFlexSdkError as E}from"../../utils/defaultRetryConditionOnFlexSdkError.js";import{makeAuthenticationHeaders as x}from"../commons/authenticationMethods.js";import{buildRegionalHostWithEdge as N,buildRegionalHost as O}from"../../utils/regionUtil.js";import{throwFlexSdkError as U,throwFlexSdkErrorFromResponse as j}from"../../modules/error/ThrowError/ErrorHelper.js";import{getEnvironmentConfig as L}from"../../modules/config/EnvironmentConfig/EnvironmentConfigImpl.js";import{TokenRegistry as P}from"../TokenRegistry.js";import{HttpStatusCode as A}from"../../utils/HttpStatusCode.js";import"../../modules/logger/Logger/LogEntry.js";import{LoggerName as q}from"../../modules/logger/Logger/LoggerName.js";import{getLogger as G}from"../../modules/logger/LoggerFactory/getLogger.js";import"../../modules/logger/LoggerFactory/LoggerConfigImpl.js";var y,w,c,v,p,_,T,k,H,a;class D{constructor(t){y.add(this),w.set(this,void 0),c.set(this,void 0),v.set(this,void 0),p.set(this,void 0),_.set(this,void 0),k.set(this,e=>{if(!e)return r(this,w,"f").sessionToken;if(typeof e=="string")return e;throw new b("No token in request body")}),H.set(this,e=>{let o,i;return M.includes(e)&&(i=W[e]),e===A.TooManyRequests?o=u.TooManyRequests:e>=A.InternalServerError&&(o=u.Unknown),[o,i]}),a.set(this,async(e,o,i,d,l,m)=>{const R=r(this,y,"m",T).call(this,e);let n=null;try{let s=new Headers({"Content-Type":m||"application/json"});i&&(s=x(i,r(this,k,"f").call(this,l?.token),m));const h=l?.headers||{};Object.entries(h).forEach(([g,F])=>{s.append(g,F)}),n=await fetch(R,{headers:s,method:o,body:d})}catch(s){r(this,c,"f").call(this,u.NetworkError,{severity:I.Error,translatedErrorCode:u.NetworkError},void 0,s)}if(!n?.ok){const s={module:"backend",severity:I.Error,source:"SimpleHttpAdapterImpl.ts"},[h,g]=r(this,H,"f").call(this,n?.status);h&&r(this,c,"f").call(this,h,Object.assign(Object.assign({},s),g&&{translatedErrorCode:g})),await r(this,v,"f").call(this,n,s)}return await n?.json()}),f(this,w,t.getInstanceOf(P),"f"),f(this,p,G(t)(q.Retry),"f"),f(this,c,U(t),"f"),f(this,v,j(t),"f")}get(t,e,o){return S({functionToRetry:()=>r(this,a,"f").call(this,t,"GET",e,void 0,o),retryCondition:E,logger:r(this,p,"f")})}post(t,e,o,i,d){return S({functionToRetry:()=>r(this,a,"f").call(this,t,"POST",e,o,i,d),retryCondition:E,logger:r(this,p,"f")})}put(t,e,o,i){return S({functionToRetry:()=>r(this,a,"f").call(this,t,"PUT",e,o,void 0,i),retryCondition:E,logger:r(this,p,"f")})}delete(t,e){return S({functionToRetry:()=>r(this,a,"f").call(this,t,"DELETE",e),retryCondition:E,logger:r(this,p,"f")})}setIsEdgeSupported(t=!1){f(this,_,t,"f")}}w=new WeakMap,c=new WeakMap,v=new WeakMap,p=new WeakMap,_=new WeakMap,k=new WeakMap,H=new WeakMap,a=new WeakMap,y=new WeakSet,T=function(t){const e=L(),o=e.region||"",i=e.edge||"",d=e.regionNonFlex||o,m=/^https?:\/\/flex\[region\]\./.test(t)?o:d;return t.replace("[region]",r(this,_,"f")?N(m,i):O(m))};export{D as SimpleHttpAdapterImpl};
//# sourceMappingURL=SimpleHttpAdapterImpl.js.map

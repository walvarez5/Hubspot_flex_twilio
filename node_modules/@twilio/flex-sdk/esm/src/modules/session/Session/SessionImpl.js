typeof window<"u"&&(window.global=window);import{__classPrivateFieldGet as e,__classPrivateFieldSet as i}from"../../../../node_modules/tslib/tslib.es6.js";import U from"events";import{SessionEvent as g}from"./SessionEvent.js";import{TwilsockEvent as y}from"../../websocket/Twilsock/TwilsockEvent.js";import"../../error/FlexSdkError/FlexSdkError.js";import{InternalError as b}from"../../error/InternalError/InternalError.js";import"../../error/ErrorCode/ErrorCodes.js";import"../../error/ErrorCode/InternalErrorCodes.js";import"../../error/ErrorCode/ErrorCodeHelper.js";import"../../error/ErrorSeverity/ErrorSeverity.js";import"../../logger/Logger/LogEntry.js";import{LoggerName as L}from"../../logger/Logger/LoggerName.js";import{getLogger as F}from"../../logger/LoggerFactory/getLogger.js";import"../../logger/LoggerFactory/LoggerConfigImpl.js";import{getCurrentDate as O}from"../../../utils/getCurrentDate.js";import{getDefaultSessionOptions as R}from"../SessionOptions/defaultSessionOptions.js";import{TwilsockImpl as C}from"../../websocket/Twilsock/TwilsockImpl.js";import{createAuthenticator as P}from"../../auth/AuthenticatorFactory/createAuthenticator/createAuthenticator.js";import{accountConfigProvider as D}from"../../config/AccountConfigProvider/AccountConfigProvider.js";import{TokenRegistry as N}from"../../../backend/TokenRegistry.js";var k,A,p,a,l,w,d,T,M,S,s,m,r,u,f,E,W,I,v,_;const V=1,z=15e3;class B{constructor(t){k.set(this,void 0),A.set(this,void 0),p.set(this,void 0),a.set(this,void 0),l.set(this,void 0),w.set(this,void 0),d.set(this,void 0),T.set(this,[]),M.set(this,void 0),S.set(this,!0),s.set(this,void 0),m.set(this,void 0),r.set(this,void 0),u.set(this,void 0),f.set(this,void 0),E.set(this,void 0),W.set(this,async()=>{e(this,I,"f").call(this)&&await e(this,_,"f").call(this)}),I.set(this,()=>{const o=O();return(e(this,p,"f").getTime()-o.getTime())/(60*1e3)<=V}),v.set(this,async()=>{e(this,d,"f")?await e(this,_,"f").call(this):i(this,m,!0,"f")}),_.set(this,async()=>{e(this,s,"f").debug("Auto-updating token");const o=e(this,d,"f").accountSid;if(!o)throw new b("Account sid not set");let c,n;const x=e(this,k,"f").call(this,o);try{const h=await x.refreshToken(this.token);n=h.dateExpired,n.getTime()===e(this,p,"f").getTime()&&(e(this,s,"f").warn("Token expiration not extended, because max lifetime reached"),e(this,r,"f").emit(g.TokenMaxLifetimeReached,h.dateExpired)),c=h.token}catch(h){e(this,s,"f").error("Failed to refresh token",h),e(this,r,"f").emit(g.TokenAutoUpdateFailed)}if(!e(this,S,"f")){e(this,s,"f").trace("AutoUpdateToken, session destroyed after refreshToken");return}if(c&&n)try{await this.updateToken(c),i(this,p,n,"f"),e(this,s,"f").info("Token auto-updated")}catch(h){e(this,s,"f").error("Failed to auto-update token",h),e(this,r,"f").emit(g.TokenAutoUpdateFailed)}}),i(this,a,t.getInstanceOf(C),"f"),i(this,l,R(),"f"),i(this,w,D(t),"f"),i(this,k,P(t),"f"),i(this,s,F(t)(L.Session),"f"),e(this,s,"f").debug("Session constructed"),i(this,r,new U,"f"),i(this,f,t.getInstanceOf(N),"f")}async init(t){e(this,s,"f").debug("will initialize session with token: ",t),e(this,s,"f").debug("will update token: ",e(this,l,"f").autoUpdateToken),e(this,f,"f").sessionToken=t,await e(this,a,"f").connect(t),e(this,l,"f").autoUpdateToken&&e(this,a,"f").addListener(y.TokenAboutToExpire,e(this,v,"f")),i(this,d,await e(this,w,"f").call(this,t),"f");const o=e(this,d,"f").accountSid,n=await e(this,k,"f").call(this,o).validateToken(e(this,f,"f").sessionToken);return i(this,T,n.roles,"f"),i(this,p,n.dateExpired,"f"),i(this,M,n.identity,"f"),i(this,E,n.flexUserSid,"f"),e(this,l,"f").autoUpdateToken&&(i(this,m,e(this,m,"f")||e(this,I,"f").call(this),"f"),i(this,u,setInterval(()=>e(this,W,"f").call(this),z),"f")),e(this,m,"f")&&await e(this,_,"f").call(this),Promise.resolve()}async updateToken(t){e(this,f,"f").sessionToken=t,await e(this,a,"f").updateToken(t),e(this,s,"f").debug("new token set")}async destroy(){e(this,u,"f")&&clearInterval(e(this,u,"f")),i(this,S,!1,"f"),e(this,a,"f").removeListener(y.TokenAboutToExpire,e(this,v,"f")),await e(this,a,"f").destroy()}get token(){return e(this,f,"f").sessionToken}get roles(){return e(this,T,"f")}addListener(t,o){return e(this,r,"f").on(t,o),this}removeListener(t,o){return e(this,r,"f").removeListener(t,o),this}}k=new WeakMap,A=new WeakMap,p=new WeakMap,a=new WeakMap,l=new WeakMap,w=new WeakMap,d=new WeakMap,T=new WeakMap,M=new WeakMap,S=new WeakMap,s=new WeakMap,m=new WeakMap,r=new WeakMap,u=new WeakMap,f=new WeakMap,E=new WeakMap,W=new WeakMap,I=new WeakMap,v=new WeakMap,_=new WeakMap;export{B as SessionImpl};
//# sourceMappingURL=SessionImpl.js.map

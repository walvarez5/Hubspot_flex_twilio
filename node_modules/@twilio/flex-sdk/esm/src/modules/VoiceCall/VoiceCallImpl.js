typeof window<"u"&&(window.global=window);import{__classPrivateFieldSet as m,__classPrivateFieldGet as r}from"../../../node_modules/tslib/tslib.es6.js";import{TaskRouterImpl as S}from"../../packages/taskrouter/TaskRouterImpl.js";import{getVoiceReservation as p,canHold as y,isLiveCall as _,isOutboundCallTask as P}from"../actions/ActionUtils.js";import{FlexSdkError as l}from"../error/FlexSdkError/FlexSdkError.js";import{ErrorCode as d}from"../error/ErrorCode/ErrorCodes.js";import"../error/ErrorCode/InternalErrorCodes.js";import"../error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as a}from"../error/ErrorSeverity/ErrorSeverity.js";import"../logger/Logger/LogEntry.js";import{LoggerName as E}from"../logger/Logger/LoggerName.js";import{getLogger as j}from"../logger/LoggerFactory/getLogger.js";import"../logger/LoggerFactory/LoggerConfigImpl.js";import{CbmImpl as C}from"../cbm/CbmImpl.js";var f,g,i,v,k;class D{constructor(t,e,n){f.set(this,void 0),g.set(this,void 0),i.set(this,void 0),v.set(this,void 0),k.set(this,void 0),m(this,f,t.getInstanceOf(S),"f"),m(this,g,t.getInstanceOf(C),"f"),m(this,i,j(t)(E.Call),"f"),r(this,i,"f").debug("VoiceCall constructed"),m(this,k,n,"f"),m(this,v,e,"f")}get call(){return r(this,v,"f")}get device(){return r(this,k,"f")}toggleMute(){return r(this,v,"f").mute(!r(this,v,"f").isMuted())}isMuted(){return r(this,v,"f").isMuted()}mute(){r(this,v,"f").mute(!0)}unmute(){r(this,v,"f").mute(!1)}async disconnect(){if(!r(this,f,"f").worker){const e="disconnect: worker is not initialized";return r(this,i,"f").error(e),Promise.reject(new l(d.SDK,{severity:a.Error},e))}if(!r(this,v,"f")){const e="disconnect: no active call";return r(this,i,"f").error(e),Promise.reject(new l(d.SDK,{severity:a.Error},e))}try{return r(this,v,"f").disconnect(),Promise.resolve()}catch{const n="disconnect: Failed to disconnect a call";return r(this,i,"f").error(n),Promise.reject(new l(d.SDK,{severity:a.Error},n))}}async hold(t){var e,n,s;const o=r(this,f,"f").worker,c=t?.holdMusicUrl,w=t?.holdMusicMethod||"GET";if(!o){const h="hold: worker is not initialized";return r(this,i,"f").error(h),Promise.reject(new l(d.SDK,{severity:a.Error},h))}const u=p(o);if(!u){const h="hold: voice reservation not found";return r(this,i,"f").error(h),Promise.reject(new l(d.SDK,{severity:a.Error},h))}if(u&&!y(u,o)){const h=`hold: Cannot hold call with taskSid: ${(e=u?.task)===null||e===void 0?void 0:e.sid}`;return r(this,i,"f").error(h),Promise.reject(new l(d.SDK,{severity:a.Error},h))}try{return await((n=u?.task)===null||n===void 0?void 0:n.updateParticipant(Object.assign(Object.assign({hold:!0},c&&{holdUrl:c}),{holdMethod:w})))}catch{const M=`hold: Error holding call with taskSid: ${(s=u?.task)===null||s===void 0?void 0:s.sid}`;return r(this,i,"f").error(M),Promise.reject(new l(d.SDK,{severity:a.Error},M))}}async unhold(){var t,e,n;const s=r(this,f,"f").worker;if(!s){const c="unhold: worker is not initialized";return r(this,i,"f").error(c),Promise.reject(new l(d.SDK,{severity:a.Error},c))}const o=p(s);if(!o){const c="unhold: voice reservation not found";return r(this,i,"f").error(c),Promise.reject(new l(d.SDK,{severity:a.Error},c))}if(o&&!y(o,s)){const c=`unhold: Cannot unhold call with taskSid: ${(t=o?.task)===null||t===void 0?void 0:t.sid}`;return r(this,i,"f").error(c),Promise.reject(new l(d.SDK,{severity:a.Error},c))}try{return await((e=o?.task)===null||e===void 0?void 0:e.updateParticipant({hold:!1}))}catch{const w=`unhold: Error unholding call with taskSid: ${(n=o?.task)===null||n===void 0?void 0:n.sid}`;return r(this,i,"f").error(w),Promise.reject(new l(d.SDK,{severity:a.Error},w))}}async isOnHold(){const t=r(this,f,"f").worker,e=p(t);if(!e){const s="isOnHold: voice reservation not found";return r(this,i,"f").error(s),Promise.reject(new l(d.SDK,{severity:a.Error},s))}if(!_(e)&&!P(e.task)){const s="isOnHold: voice reservation is not live outbound call";return r(this,i,"f").error(s),Promise.reject(new l(d.SDK,{severity:a.Error},s))}return(await r(this,g,"f").getParticipantsByTask(e?.task)).some(s=>{var o;return s.type==="customer"&&JSON.parse((o=s.mediaProperties)===null||o===void 0?void 0:o.hold)})}}f=new WeakMap,g=new WeakMap,i=new WeakMap,v=new WeakMap,k=new WeakMap;export{D as VoiceCallImpl};
//# sourceMappingURL=VoiceCallImpl.js.map

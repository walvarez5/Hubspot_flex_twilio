typeof window<"u"&&(window.global=window);import"../../logger/Logger/LogEntry.js";import{LoggerName as w}from"../../logger/Logger/LoggerName.js";import{getLogger as h}from"../../logger/LoggerFactory/getLogger.js";import"../../logger/LoggerFactory/LoggerConfigImpl.js";import"../../error/FlexSdkError/FlexSdkError.js";import{ErrorCode as y}from"../../error/ErrorCode/ErrorCodes.js";import"../../error/ErrorCode/InternalErrorCodes.js";import"../../error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as I}from"../../error/ErrorSeverity/ErrorSeverity.js";import{LocalStorageKeys as f}from"../../storage/LocalStorage/LocalStorageKeys.js";import{AccountConfigDataContainer as O}from"../AccountConfig/AccountConfigImpl/AccountConfigDataContainer/AccountConfigDataContainer.js";import{throwFlexSdkError as S}from"../../error/ThrowError/ErrorHelper.js";import{LocalStorageImpl as U}from"../../storage/LocalStorage/LocalStorageImpl.js";import{ClientOptionsStore as A}from"../../client/ClientOptions/ClientOptionsStore.js";import{ConfigurationServiceImpl as E}from"../../../backend/generated/Configuration/api/configuration.service.js";const b={module:"config",eventSource:"AccountConfigProvider.ts"},D=o=>async(g,r={})=>{var n,i;const s=o.getInstanceOf(O),m=o.getInstanceOf(E),u=S(o),d=o.getInstanceOf(U),l=h(o)(w.Config),a=o.getInstanceOf(A),p=((n=a?.accountConfig.query)===null||n===void 0?void 0:n.UiVersion)||((i=r?.query)===null||i===void 0?void 0:i.UiVersion);let e;try{e=await m.fetchConfiguration("UiVersion",p,{token:g}),d.setCachedItem(f.AccountConfig,e)}catch(c){const t=d.getCachedItem(f.AccountConfig);if(t===void 0){const C=`Failed to fetch account configuration: ${c}. No cache found.`,v=c.code||y.Unknown;return u(v,Object.assign(Object.assign({},b),{severity:I.Error}),C)}t.dateCreated=new Date(t.dateCreated),t.dateUpdated=new Date(t.dateUpdated),l.warn(`Failed to fetch account configuration: ${c}. Using cache instead`),e=t}return s.set(e),e};export{D as accountConfigProvider};
//# sourceMappingURL=AccountConfigProvider.js.map

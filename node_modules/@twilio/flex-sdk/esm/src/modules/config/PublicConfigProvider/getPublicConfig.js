typeof window<"u"&&(window.global=window);import{ConfigurationServiceImpl as b}from"../../../backend/generated/Configuration/api/configuration.service.js";import"../../error/FlexSdkError/FlexSdkError.js";import{ErrorCode as u}from"../../error/ErrorCode/ErrorCodes.js";import"../../error/ErrorCode/InternalErrorCodes.js";import"../../error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as f}from"../../error/ErrorSeverity/ErrorSeverity.js";import{throwFlexSdkError as w}from"../../error/ThrowError/ErrorHelper.js";import{throwAndReportFlexSdkError as I}from"../../error/ThrowError/ThrowAndReportErrorHelper.js";import"../../logger/Logger/LogEntry.js";import{LoggerName as v}from"../../logger/Logger/LoggerName.js";import{getLogger as D}from"../../logger/LoggerFactory/getLogger.js";import"../../logger/LoggerFactory/LoggerConfigImpl.js";import{LocalStorageKeys as d}from"../../storage/LocalStorage/LocalStorageKeys.js";import{LocalStorageImpl as E}from"../../storage/LocalStorage/LocalStorageImpl.js";import{mapRootKeysToCamelCase as y}from"../../../utils/mapKeys.js";const g=".twil.io",O=/^([a-z]+-[a-z]+-\d+)$/,l={module:"config",eventSource:"PublicConfigProvider.ts"};function P(o){let i=o.trim();if(i.endsWith("/")&&(i=i.replace(/\/$/,"")),!i.endsWith(g)){const r=i.match(O);r&&r[1]&&(i+=g)}return i}function N(o){return!!o.accountSid}function R(o){if(N(o))return{paramName:"AccountSid",paramValue:o.accountSid};const i=o.runtimeDomain;return{paramName:"RuntimeDomain",paramValue:P(i)}}const z=o=>async i=>{var r;const m=w(o),p=o.getInstanceOf(b),h=I(o),s=o.getInstanceOf(E),C=D(o)(v.Config),t=R(i);let n;try{n=await p.fetchPublicConfiguration(t.paramName,t.paramValue),s.setCachedItem(d.PublicConfig,n)}catch(c){const e=s.getCachedItem(d.PublicConfig);if((r=e?.configurations)===null||r===void 0?void 0:r.some(a=>a.accountSid===t.paramValue||a.runtimeDomain===t.paramValue))C.warn(`Failed to fetch public configuration: ${c}. Using cache instead`),n=e;else{const a=`Failed to fetch public configuration: ${c}. No cache found.`,S=c.code||u.Unknown;return h(S,Object.assign(Object.assign({},l),{severity:f.Error}),a)}}return n&&n.configurations&&n.configurations.length||m(u.SDK,Object.assign(Object.assign({},l),{severity:f.Error}),"Invalid response from public configuration endpoint"),y(n.configurations[0])};export{z as getPublicConfig};
//# sourceMappingURL=getPublicConfig.js.map

typeof window<"u"&&(window.global=window);import"../../../logger/Logger/LogEntry.js";import{LoggerName as p}from"../../../logger/Logger/LoggerName.js";import{getLogger as u}from"../../../logger/LoggerFactory/getLogger.js";import"../../../logger/LoggerFactory/LoggerConfigImpl.js";import"../../../error/FlexSdkError/FlexSdkError.js";import{ErrorCode as l}from"../../../error/ErrorCode/ErrorCodes.js";import"../../../error/ErrorCode/InternalErrorCodes.js";import"../../../error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as h}from"../../../error/ErrorSeverity/ErrorSeverity.js";import{LocalStorageKeys as s}from"../../../storage/LocalStorage/LocalStorageKeys.js";import{throwAndReportFlexSdkError as w}from"../../../error/ThrowError/ThrowAndReportErrorHelper.js";import{FeaturesServiceImpl as F}from"../../../../backend/generated/Features/api/features.service.js";import{LocalStorageImpl as I}from"../../../storage/LocalStorage/LocalStorageImpl.js";const v={module:"config",eventSource:"FeaturesProviderImpl.ts"},C=e=>async(i,t)=>{const c=e.getInstanceOf(F),m=w(e),a=e.getInstanceOf(I),f=u(e)(p.Config);let r;try{r=await c.fetchFeatures(Object.assign({token:i},t&&{headers:{"X-Flex-Version":t}})),a.setCachedItem(s.FeaturesConfig,r)}catch(o){const n=a.getCachedItem(s.FeaturesConfig);if(n===void 0){const d=`Failed to fetch features: ${o}. No cache found.`,g=o.code||l.Unknown;return m(g,Object.assign(Object.assign({},v),{severity:h.Error}),d)}f.warn(`Failed to fetch features: ${o}. Using cache instead`),r=n}return r};export{C as featuresProviderImpl};
//# sourceMappingURL=featuresProviderImpl.js.map

typeof window<"u"&&(window.global=window);import{__classPrivateFieldSet as a,__classPrivateFieldGet as r}from"../../../../../node_modules/tslib/tslib.es6.js";import{Device as g}from"@twilio/voice-sdk";import{ClientEvent as v}from"../../../client/Client/ClientEvent.js";import{ClientImpl as C}from"../../../client/Client/ClientImpl/ClientImpl.js";import{getLogger as f}from"../../../logger/LoggerFactory/getLogger.js";import{LoggerName as m}from"../../../logger/Logger/LoggerName.js";import{VoiceControllerImpl as V}from"../../../voice/VoiceControllerImpl.js";import{VoiceCallImpl as u}from"../../../VoiceCall/VoiceCallImpl.js";var d,c,s,l,h;class L{constructor(n,t,e){d.add(this),c.set(this,void 0),s.set(this,void 0),l.set(this,void 0),a(this,c,n,"f"),a(this,s,t,"f"),a(this,l,e,"f")}async run(n){const t=n,e=t.getInstanceOf(C),o=f(t)(m.Client);if(r(this,c,"f")!==v.IncomingCall)return o.warn("Attempting to listen to an unknown event:",r(this,c,"f")),e;try{const i=t.getInstanceOf(V);if(await r(this,d,"m",h).call(this,i,t),i?.voiceDevice)return i.voiceDevice.on(g.EventName.Incoming,w=>{const _=new u(t,w,i.voiceDevice);e.emitter.emit(v.IncomingCall,_)}),e.addListener(r(this,c,"f"),r(this,s,"f"));o.error("VoiceController does not have a voiceDevice.")}catch(i){o.error("Failed to add voice event listener to client.",i)}return o.warn("addVoiceEventListener failed to add a listener to the event:",r(this,c,"f")),e}}c=new WeakMap,s=new WeakMap,l=new WeakMap,d=new WeakSet,h=async function(n,t){var e;const o=f(t)(m.Client);if(!n){o.error("voiceController is undefined in initVoiceController");return}try{n.isInitialized||await n.init((e=r(this,l,"f"))===null||e===void 0?void 0:e.voiceDevice)}catch(i){o.error("Failed to initialise VoiceController",i)}};export{L as AddVoiceEventListener};
//# sourceMappingURL=AddVoiceEventListener.js.map

typeof window<"u"&&(window.global=window);import{__classPrivateFieldGet as o,__classPrivateFieldSet as v}from"../../../../../node_modules/tslib/tslib.es6.js";import{VoiceCallImpl as S}from"../../../VoiceCall/VoiceCallImpl.js";import{FlexSdkError as w}from"../../../error/FlexSdkError/FlexSdkError.js";import{ErrorCode as d}from"../../../error/ErrorCode/ErrorCodes.js";import"../../../error/ErrorCode/InternalErrorCodes.js";import"../../../error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as C}from"../../../error/ErrorSeverity/ErrorSeverity.js";import"../../../logger/Logger/LogEntry.js";import"../../../logger/Logger/LoggerName.js";import{getLogger as k}from"../../../logger/LoggerFactory/getLogger.js";import"../../../logger/LoggerFactory/LoggerConfigImpl.js";import{TaskRouterImpl as _}from"../../../../packages/taskrouter/TaskRouterImpl.js";import{VoiceControllerImpl as u}from"../../../voice/VoiceControllerImpl.js";import{isSupervisorAlreadyMonitoringCallTask as y}from"../../ActionUtils.js";import{CbmImpl as b}from"../../../cbm/CbmImpl.js";var i,c,s,g;class E{constructor(m,t,a={}){i.set(this,void 0),c.set(this,void 0),s.set(this,{}),g.set(this,async e=>{const n=o(this,s,"f").voiceDevice,f=k(e)("StartOutboundCall"),l=e.getInstanceOf(u);try{l.isInitialized||await l.init(n)}catch(p){f.error("Failed to initialise VoiceController",p)}}),v(this,i,m,"f"),v(this,c,t,"f"),v(this,s,a,"f")}async run(m){const t=m,a=t.getInstanceOf(_),e=t.getInstanceOf(u),n=k(t)("MonitorCall"),f=t.getInstanceOf(b);n.debug(`monitorCall invoked with taskSid: ${o(this,i,"f")}`);const l=a.worker,p=await a.workspace.fetchTask(o(this,i,"f"));if(!l){const r="monitorCall: worker is not initialized";return n.error(r),Promise.reject(new w(d.SDK,{severity:C.Error},r))}if(await y(p,l,f)){const r=`monitorCall: supervisor is already monitoring call for taskSid: ${o(this,i,"f")}`;return n.error(r),Promise.reject(new w(d.SDK,{severity:C.Error},r))}await o(this,g,"f").call(this,t);try{await a.worker.monitor(o(this,i,"f"),o(this,c,"f"),o(this,s,"f").extraParams?Object.assign({},o(this,s,"f").extraParams):{})}catch(r){return Promise.reject(new w(d.SDK,{severity:C.Error},r.message))}return new Promise(r=>{const h=I=>{n.info("Incoming call event received in monitorCall");const M=new S(t,I,e.voiceDevice);e.unsubscribeFromIncomingCallEvent(h),r(M)};e.subscribeToIncomingCallEvent(h)})}}i=new WeakMap,c=new WeakMap,s=new WeakMap,g=new WeakMap;export{E as MonitorCall};
//# sourceMappingURL=MonitorCall.js.map

typeof window<"u"&&(window.global=window);import{__classPrivateFieldGet as m,__classPrivateFieldSet as O}from"../../../../../node_modules/tslib/tslib.es6.js";import{VoiceCallImpl as z}from"../../../VoiceCall/VoiceCallImpl.js";import{FlexSdkError as a}from"../../../error/FlexSdkError/FlexSdkError.js";import{ErrorCode as l}from"../../../error/ErrorCode/ErrorCodes.js";import"../../../error/ErrorCode/InternalErrorCodes.js";import"../../../error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as s}from"../../../error/ErrorSeverity/ErrorSeverity.js";import"../../../logger/Logger/LogEntry.js";import"../../../logger/Logger/LoggerName.js";import{getLogger as q}from"../../../logger/LoggerFactory/getLogger.js";import"../../../logger/LoggerFactory/LoggerConfigImpl.js";import{TaskRouterImpl as j}from"../../../../packages/taskrouter/TaskRouterImpl.js";import{sendTrackingEvent as u,getDefaultCallerID as G,getDefaultQueueSid as L,getDefaultWorkflowSid as U,isWorkerOffline as $,isOutboundCallingEnabled as B,hasVoiceTaskWithStatus as Q}from"../../ActionUtils.js";import{AccountConfigDataContainer as H}from"../../../config/AccountConfig/AccountConfigImpl/AccountConfigDataContainer/AccountConfigDataContainer.js";import{VoiceControllerImpl as R}from"../../../voice/VoiceControllerImpl.js";import{EVENTS as d}from"../../../analytics/Analytics.js";import{AnalyticsImpl as J}from"../../../analytics/AnalyticsImpl.js";var g,y,E,F,S,A;class X{constructor(_,f,D,o,i){g.set(this,void 0),y.set(this,void 0),E.set(this,void 0),F.set(this,void 0),S.set(this,void 0),A.set(this,async v=>{var c;const e=(c=m(this,S,"f"))===null||c===void 0?void 0:c.voiceDevice,I=q(v)("StartOutboundCall"),h=v.getInstanceOf(R);try{h.isInitialized||await h.init(e)}catch(w){I.error("Failed to initialise VoiceController",w)}}),O(this,g,_,"f"),O(this,y,f,"f"),O(this,E,D,"f"),O(this,F,o,"f"),O(this,S,i,"f")}async run(_){const f=_,D=f.getInstanceOf(j),o=q(f)("StartOutboundCall"),i=f.getInstanceOf(J),v=f.getInstanceOf(H),c=f.getInstanceOf(R);o.debug(`startOutboundCall invoked to number: ${m(this,g,"f")}`);const e=D.worker,{attributesForTaskCreation:I,conferenceOptions:h}=m(this,S,"f")||{};if(!e){const t="startOutboundCall: worker is not initialized";throw o.error(t),u(d.StartOutboundCallCompleted,i,e,t),new a(l.SDK,{severity:s.Error},t)}if(!m(this,g,"f")){const t="startOutboundCall: toNumber is a required parameter";throw o.error(t),u(d.StartOutboundCallCompleted,i,e,t),new a(l.SDK,{severity:s.Error},t)}const w=m(this,y,"f")||G(v.get().outboundCallFlows);if(!w){const t="startOutboundCall: fromNumber is required";throw o.error(t),u(d.StartOutboundCallCompleted,i,e,t),new a(l.SDK,{severity:s.Error},t)}const W=m(this,F,"f")||L(v.get().outboundCallFlows);if(!W){const t="startOutboundCall: taskQueueSid is required";throw o.error(t),u(d.StartOutboundCallCompleted,i,e,t),new a(l.SDK,{severity:s.Error},t)}const N=m(this,E,"f")||U(v.get().outboundCallFlows);if(!N){const t="startOutboundCall: workflowSid is required";throw o.error(t),u(d.StartOutboundCallCompleted,i,e,t),new a(l.SDK,{severity:s.Error},t)}const P=v.get().taskrouterOfflineActivitySid;if(!P){const t="startOutboundCall: taskrouterOfflineActivitySid is undefined";throw o.error(t),u(d.StartOutboundCallCompleted,i,e,t),new a(l.SDK,{severity:s.Error},t)}if($(e,P)){const t="startOutboundCall: worker is offline, outbound call cancelled";throw o.error(t),u(d.StartOutboundCallCompleted,i,e,t),new a(l.SDK,{severity:s.Error},t)}if(!B(v.get().outboundCallFlows)){const t=`startOutboundCall: Outbound calling is disabled in Flex account configuration,
                                outbound call cancelled`;throw o.error(t),u(d.StartOutboundCallCompleted,i,e,t),new a(l.SDK,{severity:s.Error},t)}if(Q(e,"pending")){const t="startOutboundCall: Inbound call is pending, outbound call cancelled";throw o.error(t),u(d.StartOutboundCallCompleted,i,e,t),new a(l.SDK,{severity:s.Error},t)}if(Q(e,"accepted")){const t="startOutboundCall: Another voice task is already in accepted status, outbound call cancelled";throw o.error(t),u(d.StartOutboundCallCompleted,i,e,t),new a(l.SDK,{severity:s.Error},t)}if(await m(this,A,"f").call(this,f),!c.isAudioInputDeviceAvailable()){const t="startOutboundCall: no audio input device, outbound call cancelled";throw o.error(t),u(d.StartOutboundCallCompleted,i,e,t),new a(l.SDK,{severity:s.Error},t)}return new Promise(async(t,V)=>{let M,K;const k=r=>{var n,b,T;if(o.info("Incoming call event received in startOutboundCall",(n=r?.parameters)===null||n===void 0?void 0:n.From,(b=r?.parameters)===null||b===void 0?void 0:b.To),((T=r?.parameters)===null||T===void 0?void 0:T.From)===w){o.debug("From phone numbers match"),clearTimeout(M),c.unsubscribeFromIncomingCallEvent(k);const x=new z(f,r,c.voiceDevice);t(x)}else o.error("Incoming call is coming from a different number, not from the one given as an argument to startOutboundCall action")};c.subscribeToIncomingCallEvent(k);let C;const p=async r=>{var n;if(o.info("A reservation has been created for the task",(n=r?.task)===null||n===void 0?void 0:n.sid),r.task.sid===K)try{const b=await r.conference(h);o.debug("Conference created",b)}catch(b){o.error("Error creating conference",b)}finally{e.off("reservationCreated",p),e.off("reservationFailed",C)}};C=r=>{var n;o.error("Failed to create reservation for task:",(n=r?.task)===null||n===void 0?void 0:n.sid),r.task.sid===K&&(e.off("reservationCreated",p),e.off("reservationFailed",C))},M=setTimeout(()=>{c.unsubscribeFromIncomingCallEvent(k),e.off("reservationCreated",p),e.off("reservationFailed",C);const r="Timeout: No incoming call event received within 30 seconds";o.error(r),V(new a(l.SDK,{severity:s.Error},r))},3e4),e.on("reservationCreated",p),e.on("reservationFailed",C);try{const n={taskChannelUniqueName:"voice",attributes:Object.assign(Object.assign({},I),{direction:"outbound"})};K=await e.createTask(m(this,g,"f"),w,N,W,n)}catch(r){clearTimeout(M),c.unsubscribeFromIncomingCallEvent(k),e.off("reservationCreated",p),e.off("reservationFailed",C),V(r)}})}}g=new WeakMap,y=new WeakMap,E=new WeakMap,F=new WeakMap,S=new WeakMap,A=new WeakMap;export{X as StartOutboundCall};
//# sourceMappingURL=StartOutBoundCall.js.map

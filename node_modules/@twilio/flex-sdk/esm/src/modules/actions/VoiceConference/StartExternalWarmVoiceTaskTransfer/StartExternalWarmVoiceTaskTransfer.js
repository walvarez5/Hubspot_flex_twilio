typeof window<"u"&&(window.global=window);import{__classPrivateFieldSet as k,__classPrivateFieldGet as e}from"../../../../../node_modules/tslib/tslib.es6.js";import{getLogger as h}from"loglevel";import{AnalyticsImpl as x}from"../../../analytics/AnalyticsImpl.js";import{CbmImpl as W}from"../../../cbm/CbmImpl.js";import"../../../logger/Logger/LogEntry.js";import{LoggerName as V}from"../../../logger/Logger/LoggerName.js";import"../../../logger/LoggerFactory/getLogger.js";import"../../../logger/LoggerFactory/LoggerConfigImpl.js";import{TaskRouterImpl as y}from"../../../../packages/taskrouter/TaskRouterImpl.js";import{getReservationsByTask as C,sendTrackingEvent as T,getDefaultCallerID as I}from"../../ActionUtils.js";import{EVENTS as g}from"../../../analytics/Analytics.js";import{FlexSdkError as i}from"../../../error/FlexSdkError/FlexSdkError.js";import{ErrorCode as c}from"../../../error/ErrorCode/ErrorCodes.js";import"../../../error/ErrorCode/InternalErrorCodes.js";import"../../../error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as m}from"../../../error/ErrorSeverity/ErrorSeverity.js";import{AccountConfigDataContainer as _}from"../../../config/AccountConfig/AccountConfigImpl/AccountConfigDataContainer/AccountConfigDataContainer.js";var o,s,f;class P{constructor(l,t,d){o.set(this,void 0),s.set(this,void 0),f.set(this,void 0),k(this,o,l,"f"),k(this,s,t,"f"),k(this,f,d,"f")}async run(l){const t=l,d=t.getInstanceOf(y),n=h(V.Actions),a=d.worker,p=t.getInstanceOf(x),v=t.getInstanceOf(W),S=t.getInstanceOf(_);if(n.debug(`startExternalWarmVoiceTaskTransfer invoked with #taskSid: ${e(this,o,"f")} and #phoneNumber: ${e(this,s,"f")}`),!a){const r="startExternalWarmVoiceTaskTransfer: worker is not initialized";return n.error(r),Promise.reject(new i(c.SDK,{severity:m.Error},r))}const u=C(a,e(this,o,"f")).find(r=>r.status==="accepted");if(!u){const r=`startExternalWarmVoiceTaskTransfer: Reservation for task ${e(this,o,"f")} is not found`;return n.error(r),T(g.StartExternalWarmVoiceTaskTransferCompleted,p,a,r),Promise.reject(new i(c.SDK,{severity:m.Error},r))}const E=e(this,f,"f")||I(S.get().outboundCallFlows);if(!E){const r="startExternalWarmVoiceTaskTransfer: #callerId not found";return n.error(r),T(g.StartExternalWarmVoiceTaskTransferCompleted,p,a,r),Promise.reject(new i(c.SDK,{severity:m.Error},r))}try{return await v.addVoiceParticipant(u.task,{from:E,to:e(this,s,"f"),type:"external"})}catch(r){const w=`startExternalWarmVoiceTaskTransfer: Could not transfer task: ${r.message}`;return T(g.StartExternalWarmVoiceTaskTransferCompleted,p,a,w),Promise.reject(new i(c.SDK,{severity:m.Error},w))}}}o=new WeakMap,s=new WeakMap,f=new WeakMap;export{P as StartExternalWarmVoiceTaskTransfer};
//# sourceMappingURL=StartExternalWarmVoiceTaskTransfer.js.map

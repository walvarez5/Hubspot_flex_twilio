typeof window<"u"&&(window.global=window);import{__classPrivateFieldSet as v,__classPrivateFieldGet as g}from"../../../../../node_modules/tslib/tslib.es6.js";import{FlexSdkError as d}from"../../../error/FlexSdkError/FlexSdkError.js";import{ErrorCode as l}from"../../../error/ErrorCode/ErrorCodes.js";import"../../../error/ErrorCode/InternalErrorCodes.js";import"../../../error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as m}from"../../../error/ErrorSeverity/ErrorSeverity.js";import"../../../logger/Logger/LogEntry.js";import{LoggerName as C}from"../../../logger/Logger/LoggerName.js";import{getLogger as E}from"../../../logger/LoggerFactory/getLogger.js";import"../../../logger/LoggerFactory/LoggerConfigImpl.js";import{TaskRouterImpl as u}from"../../../../packages/taskrouter/TaskRouterImpl.js";import{getReservationsByTask as F,sendTrackingEvent as f}from"../../ActionUtils.js";import{EVENTS as p}from"../../../analytics/Analytics.js";import{AnalyticsImpl as h}from"../../../analytics/AnalyticsImpl.js";import{CbmImpl as y}from"../../../cbm/CbmImpl.js";var o;class A{constructor(i){o.set(this,void 0),v(this,o,i,"f")}async run(i){const t=i,w=t.getInstanceOf(u),n=E(t)(C.Actions),e=w.worker,s=t.getInstanceOf(h),k=t.getInstanceOf(y);if(n.debug(`endConferenceForAll invoked with taskSid: ${g(this,o,"f")}`),!e){const r="endConferenceForAll: Worker is not initialized";return n.error(r),Promise.reject(new d(l.SDK,{severity:m.Error},r))}const c=F(e,g(this,o,"f")).find(r=>r.status==="accepted");if(!c){const r="endConferenceForAll: Reservation not found";throw n.error(r),f(p.EndConferenceForAllCompleted,s,e,r),new d(l.SDK,{severity:m.Error},r)}try{const{task:r}=await k.endConference(c);return f(p.EndConferenceForAllCompleted,s,e),r}catch{const a=`endConferenceForAll: Could not end conference with task sid ${c.task.sid}`;throw n.error(a),f(p.UnholdParticipantCompleted,s,e,a),new d(l.SDK,{severity:m.Error},a)}}}o=new WeakMap;export{A as EndConferenceForAll};
//# sourceMappingURL=EndConferenceForAll.js.map

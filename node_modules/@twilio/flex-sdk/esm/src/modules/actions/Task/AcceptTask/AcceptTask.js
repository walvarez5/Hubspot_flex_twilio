typeof window<"u"&&(window.global=window);import{__classPrivateFieldSet as w,__classPrivateFieldGet as l}from"../../../../../node_modules/tslib/tslib.es6.js";import{FlexSdkError as a}from"../../../error/FlexSdkError/FlexSdkError.js";import{ErrorCode as p}from"../../../error/ErrorCode/ErrorCodes.js";import"../../../error/ErrorCode/InternalErrorCodes.js";import"../../../error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as m}from"../../../error/ErrorSeverity/ErrorSeverity.js";import"../../../logger/Logger/LogEntry.js";import{LoggerName as S}from"../../../logger/Logger/LoggerName.js";import{getLogger as h}from"../../../logger/LoggerFactory/getLogger.js";import"../../../logger/LoggerFactory/LoggerConfigImpl.js";import{TaskRouterImpl as E}from"../../../../packages/taskrouter/TaskRouterImpl.js";import{getReservationsByTask as A,sendTrackingEvent as f,isCallTask as C}from"../../ActionUtils.js";import{EVENTS as d}from"../../../analytics/Analytics.js";import{AnalyticsImpl as _}from"../../../analytics/AnalyticsImpl.js";import{CbmImpl as M}from"../../../cbm/CbmImpl.js";var i,v;class P{constructor(g,c){i.set(this,void 0),v.set(this,void 0),w(this,i,g,"f"),w(this,v,c,"f")}async run(g){var c;const k=g,u=k.getInstanceOf(E),o=h(k)(S.Actions),r=u.worker,n=k.getInstanceOf(_),T=k.getInstanceOf(M);o.debug(`acceptTask invoked with taskSid: ${l(this,i,"f")}`);const y=(c=l(this,v,"f"))===null||c===void 0?void 0:c.conferenceOptions;if(!r){const e="acceptTask: worker is not initialized";return o.error(e),Promise.reject(new a(p.SDK,{severity:m.Error},e))}const t=A(r,l(this,i,"f")).find(e=>e.status==="pending");if(!t){const e=`acceptTask: Reservation for task ${l(this,i,"f")} not found`;return f(d.AcceptTaskCompleted,n,r,e),o.error(e),Promise.reject(new a(p.SDK,{severity:m.Error},e))}if(!C(t.task)){if(!T){const e="acceptTask: CBM SDK is not initialized";return o.error(e),f(d.AcceptTaskCompleted,n,r,e),Promise.reject(new a(p.SDK,{severity:m.Error},e))}try{const e=await T.acceptReservation(t);return f(d.AcceptTaskCompleted,n,r),e}catch{const s=`acceptTask: Failed to accept reservation ${t.sid}`;return o.error(s),Promise.reject(new a(p.SDK,{severity:m.Error},s))}}try{return await t.conference(y),f(d.AcceptTaskCompleted,n,r),t}catch{const s=`acceptTask: Failed to create conference for ${t.sid}`;return o.error(s),f(d.AcceptTaskCompleted,n,r,s),Promise.reject(new a(p.SDK,{severity:m.Error},s))}}}i=new WeakMap,v=new WeakMap;export{P as AcceptTask};
//# sourceMappingURL=AcceptTask.js.map

typeof window<"u"&&(window.global=window);import{__classPrivateFieldSet as u,__classPrivateFieldGet as n}from"../../../../../node_modules/tslib/tslib.es6.js";import{FlexSdkError as i}from"../../../error/FlexSdkError/FlexSdkError.js";import{ErrorCode as c}from"../../../error/ErrorCode/ErrorCodes.js";import"../../../error/ErrorCode/InternalErrorCodes.js";import"../../../error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as f}from"../../../error/ErrorSeverity/ErrorSeverity.js";import"../../../logger/Logger/LogEntry.js";import{LoggerName as w}from"../../../logger/Logger/LoggerName.js";import{getLogger as V}from"../../../logger/LoggerFactory/getLogger.js";import"../../../logger/LoggerFactory/LoggerConfigImpl.js";import{TaskRouterImpl as y}from"../../../../packages/taskrouter/TaskRouterImpl.js";import{getReservationsByTask as E,sendTrackingEvent as l,isCallTask as S}from"../../ActionUtils.js";import{EVENTS as k}from"../../../analytics/Analytics.js";import{AnalyticsImpl as h}from"../../../analytics/AnalyticsImpl.js";var e;class C{constructor(m){e.set(this,void 0),u(this,e,m,"f")}async run(m){var T,g;const v=m,p=v.getInstanceOf(y),s=V(v)(w.Actions),o=p.worker,t=v.getInstanceOf(h);if(s.debug(`cancelVoiceTaskTransfer invoked with taskSid: ${n(this,e,"f")}`),!o){const r="cancelVoiceTaskTransfer: worker is not initialized";return s.error(r),Promise.reject(new i(c.SDK,{severity:f.Error},r))}const a=E(o,n(this,e,"f")).find(r=>r.status==="accepted");if(!a){const r=`cancelVoiceTaskTransfer: Reservation for task ${n(this,e,"f")} is not found`;return s.error(r),l(k.CancelVoiceTaskTransfer,t,o,r),Promise.reject(new i(c.SDK,{severity:f.Error},r))}if(!S(a.task)){const r=`cancelVoiceTaskTransfer: Reservation for task ${n(this,e,"f")} is not an active call`;return s.error(r),l(k.CancelVoiceTaskTransfer,t,o,r),Promise.reject(new i(c.SDK,{severity:f.Error},r))}if(!(!((g=(T=a.task)===null||T===void 0?void 0:T.transfers)===null||g===void 0)&&g.outgoing)){const r=`cancelVoiceTaskTransfer: Reservation for task ${n(this,e,"f")} has
            no outgoing transfer to cancel`;return s.error(r),l(k.CancelVoiceTaskTransfer,t,o,r),Promise.reject(new i(c.SDK,{severity:f.Error},r))}try{return await a.task.transfers.outgoing.cancel(),l(k.CancelVoiceTaskTransfer,t,o),a.task}catch(r){const d=`cancelVoiceTaskTransfer: Could not transfer task: ${r.message}`;return l(k.CancelVoiceTaskTransfer,t,o,d),Promise.reject(new i(c.SDK,{severity:f.Error},d))}}}e=new WeakMap;export{C as CancelVoiceTaskTransfer};
//# sourceMappingURL=CancelVoiceTaskTransfer.js.map

typeof window<"u"&&(window.global=window);import{__classPrivateFieldSet as v,__classPrivateFieldGet as d}from"../../../../../node_modules/tslib/tslib.es6.js";import{FlexSdkError as n}from"../../../error/FlexSdkError/FlexSdkError.js";import{ErrorCode as m}from"../../../error/ErrorCode/ErrorCodes.js";import"../../../error/ErrorCode/InternalErrorCodes.js";import"../../../error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as a}from"../../../error/ErrorSeverity/ErrorSeverity.js";import"../../../logger/Logger/LogEntry.js";import{LoggerName as T}from"../../../logger/Logger/LoggerName.js";import{getLogger as u}from"../../../logger/LoggerFactory/getLogger.js";import"../../../logger/LoggerFactory/LoggerConfigImpl.js";import{TaskRouterImpl as C}from"../../../../packages/taskrouter/TaskRouterImpl.js";import{CbmImpl as y}from"../../../cbm/CbmImpl.js";import{sendTrackingEvent as p,getReservationsByTask as S}from"../../ActionUtils.js";import{EVENTS as c}from"../../../analytics/Analytics.js";import{AnalyticsImpl as E}from"../../../analytics/AnalyticsImpl.js";var t;class h{constructor(l){t.set(this,void 0),v(this,t,l,"f")}async run(l){const s=l,w=s.getInstanceOf(C),o=u(s)(T.Actions),r=w.worker,i=s.getInstanceOf(E),g=s.getInstanceOf(y);if(o.debug(`completeTask invoked with taskSid: ${d(this,t,"f")}`),!r){const e="completeTask: worker is not initialized";return o.error(e),Promise.reject(new n(m.SDK,{severity:a.Error},e))}if(!g){const e="completeTask: CBM SDK is not initialized";return o.error(e),p(c.CompleteTaskCompleted,i,r,e),Promise.reject(new n(m.SDK,{severity:a.Error},e))}const f=S(r,d(this,t,"f")).filter(e=>e.status==="wrapping"||e.status==="accepted");if(!f.length){const e=`completeTask: Reservation for task ${d(this,t,"f")} not found`;return o.error(e),p(c.CompleteTaskCompleted,i,r,e),Promise.reject(new n(m.SDK,{severity:a.Error},e))}try{await Promise.all(f.map(e=>g.completeReservation(e))),p(c.CompleteTaskCompleted,i,r)}catch{const k="completeTask: Failed to complete reservation";return o.error(k),p(c.CompleteTaskCompleted,i,r,k),Promise.reject(new n(m.SDK,{severity:a.Error},k))}return f[0].task}}t=new WeakMap;export{h as CompleteTask};
//# sourceMappingURL=CompleteTask.js.map

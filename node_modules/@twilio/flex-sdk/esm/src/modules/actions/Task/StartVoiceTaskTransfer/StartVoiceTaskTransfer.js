typeof window<"u"&&(window.global=window);import{__classPrivateFieldSet as S,__classPrivateFieldGet as s}from"../../../../../node_modules/tslib/tslib.es6.js";import{FlexSdkError as f}from"../../../error/FlexSdkError/FlexSdkError.js";import{ErrorCode as c}from"../../../error/ErrorCode/ErrorCodes.js";import"../../../error/ErrorCode/InternalErrorCodes.js";import"../../../error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as d}from"../../../error/ErrorSeverity/ErrorSeverity.js";import"../../../logger/Logger/LogEntry.js";import{LoggerName as V}from"../../../logger/Logger/LoggerName.js";import{getLogger as y}from"../../../logger/LoggerFactory/getLogger.js";import"../../../logger/LoggerFactory/LoggerConfigImpl.js";import{TaskRouterImpl as E}from"../../../../packages/taskrouter/TaskRouterImpl.js";import{getReservationsByTask as C,sendTrackingEvent as m,isCallTask as _}from"../../ActionUtils.js";import{EVENTS as T}from"../../../analytics/Analytics.js";import{AnalyticsImpl as P}from"../../../analytics/AnalyticsImpl.js";var o,p,v;class D{constructor(u,k,l){o.set(this,void 0),p.set(this,void 0),v.set(this,void 0),S(this,o,u,"f"),S(this,p,k,"f"),S(this,v,l,"f")}async run(u){var k,l;const w=u,h=w.getInstanceOf(E),i=y(w)(V.Actions),e=h.worker,n=w.getInstanceOf(P);i.debug(`startVoiceTaskTransfer invoked with taskSid: ${s(this,o,"f")} and to: ${s(this,p,"f")}`);const a=(k=s(this,v,"f"))===null||k===void 0?void 0:k.transferOptions;if(!e){const r="startVoiceTaskTransfer: worker is not initialized";return i.error(r),Promise.reject(new f(c.SDK,{severity:d.Error},r))}const t=C(e,s(this,o,"f")).find(r=>r.status==="accepted");if(!t){const r=`startVoiceTaskTransfer: Reservation for task ${s(this,o,"f")} is not found`;return i.error(r),m(T.StartVoiceTaskTransferCompleted,n,e,r),Promise.reject(new f(c.SDK,{severity:d.Error},r))}if(!_(t.task)){const r=`startVoiceTaskTransfer: Reservation ${s(this,o,"f")} is not an active call`;return i.error(r),m(T.StartVoiceTaskTransferCompleted,n,e,r),Promise.reject(new f(c.SDK,{severity:d.Error},r))}if(((l=t.task.transfers.outgoing)===null||l===void 0?void 0:l.status)==="INITIATED"){const r=`startVoiceTaskTransfer: Reservation ${s(this,o,"f")} has already initiated transfer`;return i.error(r),m(T.StartVoiceTaskTransferCompleted,n,e,r),Promise.reject(new f(c.SDK,{severity:d.Error},r))}if(t.workerSid!==e.sid){const r=`startVoiceTaskTransfer: Reservation ${s(this,o,"f")} cannot be transferred by a different worker`;return i.error(r),m(T.StartVoiceTaskTransferCompleted,n,e,r),Promise.reject(new f(c.SDK,{severity:d.Error},r))}try{a?.mode==="COLD"&&await t.updateParticipant({endConferenceOnExit:!1});const r=await t?.task.transfer(s(this,p,"f"),a);return m(T.StartVoiceTaskTransferCompleted,n,e),r}catch(r){a?.mode==="COLD"&&await t.updateParticipant({endConferenceOnExit:!0});const g=`startVoiceTaskTransfer: Could not transfer task: ${r.message}`;return m(T.StartVoiceTaskTransferCompleted,n,e,g),Promise.reject(new f(c.SDK,{severity:d.Error},g))}}}o=new WeakMap,p=new WeakMap,v=new WeakMap;export{D as StartVoiceTaskTransfer};
//# sourceMappingURL=StartVoiceTaskTransfer.js.map

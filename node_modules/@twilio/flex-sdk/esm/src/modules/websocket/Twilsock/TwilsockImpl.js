typeof window<"u"&&(window.global=window);import{__classPrivateFieldGet as t,__classPrivateFieldSet as r}from"../../../../node_modules/tslib/tslib.es6.js";import j from"loglevel";import K from"../../../../package.json.js";import V from"events";import{TwilsockClientEvent as h}from"../TwilsockClient/TwilsockClient.js";import{TwilsockEvent as l}from"./TwilsockEvent.js";import{FlexSdkError as D}from"../../error/FlexSdkError/FlexSdkError.js";import{InternalError as p}from"../../error/InternalError/InternalError.js";import{ErrorCode as I}from"../../error/ErrorCode/ErrorCodes.js";import"../../error/ErrorCode/InternalErrorCodes.js";import"../../error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as N}from"../../error/ErrorSeverity/ErrorSeverity.js";import"../../logger/Logger/LogEntry.js";import{LoggerName as Q}from"../../logger/Logger/LoggerName.js";import{getLogger as X}from"../../logger/LoggerFactory/getLogger.js";import"../../logger/LoggerFactory/LoggerConfigImpl.js";import{retry as Y}from"../../../utils/retry/retry.js";import{isTwilsockReplyError as P}from"./TwilsockReplyError.js";import{parseRegionForTwilsock as q}from"../../../utils/regionUtil.js";import{throwFlexSdkError as z,throwFlexSdkErrorFromErrorResponse as G}from"../../error/ThrowError/ErrorHelper.js";import{ClientOptionsStore as J}from"../../client/ClientOptions/ClientOptionsStore.js";import{getEnvironmentConfig as B}from"../../config/EnvironmentConfig/EnvironmentConfigImpl.js";import{getTwilsockClient as Z}from"../TwilsockClientFactory/getTwilsockClient.js";var C,_,u,i,E,d,c,a,g,v,S,f,O,M,b,L,W,F,x,A,y;const $="flex-sdk",tt="JS",et="flex";class it{constructor(s){C.add(this),_.set(this,void 0),u.set(this,void 0),i.set(this,void 0),E.set(this,void 0),d.set(this,void 0),c.set(this,!1),a.set(this,void 0),g.set(this,void 0),v.set(this,void 0),f.set(this,(e,o)=>{this.getRawTwilsockClient().on(e,(...n)=>t(this,a,"f").emit(o,...n))}),O.set(this,()=>{t(this,f,"f").call(this,h.TokenExpired,l.TokenExpired),t(this,f,"f").call(this,h.TokenAboutToExpire,l.TokenAboutToExpire),t(this,f,"f").call(this,h.StateChanged,l.StateChanged),t(this,f,"f").call(this,h.Connected,l.Connected),t(this,f,"f").call(this,h.Disconnected,l.Disconnected),t(this,b,"f").call(this)}),M.set(this,()=>{const e=j.getLogger("twilsock");e.methodFactory=o=>(...n)=>t(this,i,"f")[o](...n),e.setLevel("trace")}),b.set(this,()=>{this.getRawTwilsockClient().on(h.ConnectionError,({errorCode:e,metadata:o,message:n})=>{const k=new D(e||I.TwilsockConnectionError,o,n);t(this,a,"f").emit(l.ConnectionError,k)})}),L.set(this,e=>e instanceof D&&e.code===I.TwilsockConnectionError),W.set(this,e=>P(e)&&e.reply.status.code===429),F.set(this,e=>P(e)&&e.reply.status.code>=500),x.set(this,e=>t(this,W,"f").call(this,e)||t(this,F,"f").call(this,e)||t(this,L,"f").call(this,e)),A.set(this,async e=>{if(t(this,c,"f")){if(t(this,i,"f").debug("updateTokenOnce called and isConnected flag is:",t(this,c,"f")),!this.twilsockClient)throw new p("TwilsockClient_is_null");await this.twilsockClient.updateToken(e),t(this,a,"f").emit(l.TokenUpdated,e)}else{if(t(this,i,"f").debug("updateTokenOnce called, but isConnected flag is false"),!this.twilsockClient)throw new p("twilsockClient is undefined");await this.twilsockClient.updateToken(e),await this.getTwilsockClientConnected(),t(this,a,"f").emit(l.TokenUpdated,e)}}),y.set(this,(e=3e5)=>new Promise((o,n)=>{if(this.getRawTwilsockClient().isConnected){r(this,c,!0,"f"),t(this,i,"f").debug("rawTwilsockClient.isConnected in waitUntilConnectedOrRejected"),o();return}let w;const m=()=>(t(this,i,"f").debug("successHandler in waitUntilConnectedOrRejected"),w(),o()),T=U=>(t(this,i,"f").warn("Twilsock connection error, setting isConnected to false",U),r(this,c,!1,"f"),w(),n(U)),R=setTimeout(()=>{t(this,i,"f").warn("Timed out in waitUntilConnectedOrRejected"),w(),n(new Error("Timed out in waitUntilConnectedOrRejected"))},e);w=()=>{t(this,i,"f").debug("Cleaning up listeners in waitUntilConnectedOrRejected"),this.removeListener(l.Connected,m),this.removeListener(l.ConnectionError,T),clearTimeout(R)},this.addListener(l.Connected,m),this.addListener(l.ConnectionError,T)})),r(this,u,Z,"f"),r(this,_,et,"f"),r(this,i,X(s)(Q.Twilsock),"f"),t(this,i,"f").debug("Twilsock constructed"),r(this,E,B(),"f"),r(this,d,s.getInstanceOf(J),"f"),r(this,a,new V,"f"),r(this,g,z(s),"f"),r(this,v,G(s),"f")}async connect(s){if(t(this,i,"f").debug("Connect called"),t(this,c,"f"))throw new p("Twilsock connection already exists");const{region:e,regionNonFlex:o}=t(this,E,"f")||{},n={region:q(o||t(this,d,"f").regionNonFlex||e||t(this,d,"f").region),clientMetadata:{type:$,sdk:tt,sdkv:K.version,app:t(this,d,"f").appName,appv:t(this,d,"f").appVersion}};this.twilsockClient=t(this,u,"f").call(this,s,t(this,_,"f"),n),t(this,O,"f").call(this),t(this,M,"f").call(this),t(this,C,"m",S).call(this),await t(this,y,"f").call(this)}async updateToken(s){try{await Y({functionToRetry:()=>t(this,A,"f").call(this,s),retryCondition:t(this,x,"f"),initialDelay:500,logger:t(this,i,"f")})}catch(e){const o={module:"websocket",severity:N.Error,source:"update Twilsock token"};t(this,v,"f").call(this,e,o)}}getRawTwilsockClient(){if(!this.twilsockClient)throw new p("Twilsock hasn't been initialized");return this.twilsockClient}async post(s,e,o){var n,k;t(this,c,"f")||(t(this,i,"f").debug("Attempting to post, but isConnect is false, reconnecting first"),await this.getTwilsockClientConnected());try{return await this.getRawTwilsockClient().post(s,e,o)}catch(w){const m=((n=w.body)===null||n===void 0?void 0:n.code)||I.SDK,T=((k=w.body)===null||k===void 0?void 0:k.message)||w.message,R={module:"websocket",severity:N.Error,source:"TwilsockImpl.ts"};return t(this,g,"f").call(this,m,R,T,w)}}async destroy(){if(t(this,i,"f").debug("destroy called"),r(this,c,!1,"f"),!this.twilsockClient){t(this,i,"f").warn("[TwilsockImpl.destroy] - TwilsockClient_is_null");return}const s=new Promise(e=>{this.twilsockClient&&this.twilsockClient.on(h.Disconnected,e)});await this.twilsockClient.disconnect(),await s,delete this.twilsockClient,t(this,a,"f").removeAllListeners()}addListener(s,e){return t(this,a,"f").on(s,e),this}removeListener(s,e){return t(this,a,"f").removeListener(s,e),this}isConnected(){return!t(this,c,"f")||!this.twilsockClient?!1:this.getRawTwilsockClient().isConnected}async getTwilsockClientConnected(){t(this,C,"m",S).call(this),await t(this,y,"f").call(this)}}_=new WeakMap,u=new WeakMap,i=new WeakMap,E=new WeakMap,d=new WeakMap,c=new WeakMap,a=new WeakMap,g=new WeakMap,v=new WeakMap,f=new WeakMap,O=new WeakMap,M=new WeakMap,b=new WeakMap,L=new WeakMap,W=new WeakMap,F=new WeakMap,x=new WeakMap,A=new WeakMap,y=new WeakMap,C=new WeakSet,S=function(){if(t(this,i,"f").debug("connect0 called"),t(this,c,"f"))throw new p("Twilsock connection already exists");if(!this.twilsockClient)throw new p("TwilsockClient_is_null");try{this.twilsockClient.connect(),r(this,c,!0,"f")}catch(s){t(this,i,"f").warn("connection to twilsockClient failed",s)}};export{it as TwilsockImpl};
//# sourceMappingURL=TwilsockImpl.js.map

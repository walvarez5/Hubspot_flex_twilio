typeof window<"u"&&(window.global=window);import{__classPrivateFieldGet as e,__classPrivateFieldSet as r}from"../../../../../node_modules/tslib/tslib.es6.js";import{TelemetryServiceImpl as k}from"../../../../backend/generated/Telemetry/api/telemetry.service.js";import"../../../error/FlexSdkError/FlexSdkError.js";import"../../../error/ErrorCode/ErrorCodes.js";import"../../../error/ErrorCode/InternalErrorCodes.js";import"../../../error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as R}from"../../../error/ErrorSeverity/ErrorSeverity.js";import{throwFlexSdkErrorFromErrorResponse as F}from"../../../error/ThrowError/ErrorHelper.js";import{throwAndReportFlexSdkError as N}from"../../../error/ThrowError/ThrowAndReportErrorHelper.js";import"../../../logger/Logger/LogEntry.js";import{TelemetryLoggerName as A}from"../../../logger/Logger/LoggerName.js";import{getLogger as O}from"../../../logger/LoggerFactory/getLogger.js";import"../../../logger/LoggerFactory/LoggerConfigImpl.js";import{assertNotEmptyString as u}from"../../../../utils/assert.js";import{toSdkBackendEvents as W}from"./toSdkBackendEvent.js";var t,E,d,m,a,p,y,P,w;const U=409,I=429,g=50,B=5,C=6e4,D=3e5;class H{constructor(n){t.set(this,void 0),E.set(this,void 0),d.set(this,!1),m.set(this,!1),a.set(this,0),p.set(this,void 0),y.set(this,void 0),P.set(this,async(...s)=>{var f;e(this,t,"f").debug("Sending",s.length,"telemetry events"),e(this,t,"f").trace("Events",s);let o={number_of_successful_events:0,number_of_failed_events:0};try{const{body:i}=await e(this,E,"f").postTelemetryEvents({events:s});r(this,a,0,"f"),i&&(o=i,e(this,t,"f").debug("Telemetry sent successfully"))}catch(i){const c=(f=i.wrappedError)===null||f===void 0?void 0:f.status;if(c===U)return e(this,t,"f").warn("Telemetry is disabled for this account"),r(this,d,!0,"f"),o;r(this,a,+e(this,a,"f")+1,"f"),e(this,a,"f")>=B?(r(this,a,0,"f"),e(this,w,"f").call(this,D)):c===I&&(e(this,t,"f").warn("Telemetry rate limit hit"),e(this,w,"f").call(this,C));const h={module:"telemetry",severity:R.Error,eventSource:"TwilioTelemetryProcessor.ts"};e(this,p,"f").call(this,i,h)}return o}),w.set(this,s=>{r(this,m,!0,"f"),setTimeout(()=>{r(this,m,!1,"f")},s)}),r(this,t,O(n)(A.TelemetryProcessor),"f"),r(this,E,new k(n),"f"),r(this,y,N(n),"f"),r(this,p,F(n),"f")}async processEvents(n,s,f,...o){u(n,"payload type"),typeof s<"u"&&u(s,"group name"),o.forEach(({eventName:T,eventSource:_})=>{u(T,"event name"),typeof _<"u"&&u(_,"event source")});const i={eventsNotProcessed:o.length,eventsSucceeded:0,eventsFailed:0};if(e(this,d,"f"))return e(this,t,"f").trace("Events not sent: telemetry disabled"),i;if(e(this,m,"f"))return e(this,t,"f").trace("Events not sent: telemetry is paused due to server errors"),i;e(this,t,"f").debug("common attributes:",f);const c=W(e(this,y,"f"),n,s,f,...o);let h=0,v=0;if(c.length){let T;const _=[];for(let l=0;l<c.length&&!(e(this,d,"f")||e(this,m,"f"));l+=g)T=c.slice(l,l+g),_.push(e(this,P,"f").call(this,...T));const b=await Promise.all(_);h=b.reduce((l,S)=>l+S.number_of_successful_events,0),v=b.reduce((l,S)=>l+S.number_of_failed_events,0)}const M=o.length-h-v;return{eventsSucceeded:h,eventsFailed:v,eventsNotProcessed:M}}}t=new WeakMap,E=new WeakMap,d=new WeakMap,m=new WeakMap,a=new WeakMap,p=new WeakMap,y=new WeakMap,P=new WeakMap,w=new WeakMap;export{H as TwilioTelemetryProcessor};
//# sourceMappingURL=TwilioTelemetryProcessor.js.map

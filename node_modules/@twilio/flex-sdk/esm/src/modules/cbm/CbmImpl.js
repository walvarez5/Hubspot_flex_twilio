typeof window<"u"&&(window.global=window);import{__classPrivateFieldSet as c,__classPrivateFieldGet as i}from"../../../node_modules/tslib/tslib.es6.js";import{CbmSdk as u,ChannelStatus as g,LogLevel as o}from"../../../cbm-sdk/index.js";import"../logger/Logger/LogEntry.js";import{LoggerName as v}from"../logger/Logger/LoggerName.js";import{getLogger as w}from"../logger/LoggerFactory/getLogger.js";import"../logger/LoggerFactory/LoggerConfigImpl.js";import{SessionImpl as y}from"../session/Session/SessionImpl.js";import{getEnvironmentConfig as C}from"../config/EnvironmentConfig/EnvironmentConfigImpl.js";import{FlexSdkError as P}from"../error/FlexSdkError/FlexSdkError.js";import{ErrorCode as _}from"../error/ErrorCode/ErrorCodes.js";import"../error/ErrorCode/InternalErrorCodes.js";import"../error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as b}from"../error/ErrorSeverity/ErrorSeverity.js";import"../storage/LocalStorage/LocalStorageKeys.js";import"../config/AccountConfig/AccountConfigImpl/AccountConfigDataContainer/AccountConfigDataContainer.js";import"../reporter/ErrorReporter.js";import"../storage/LocalStorage/LocalStorageImpl.js";import{ClientOptionsStore as S}from"../client/ClientOptions/ClientOptionsStore.js";import"../../backend/generated/Configuration/api/configuration.service.js";var p,l,a,r;class k{constructor(t){p.set(this,void 0),l.set(this,void 0),a.set(this,void 0),r.set(this,void 0),c(this,l,t.getInstanceOf(y),"f"),c(this,a,t.getInstanceOf(S),"f"),c(this,p,w(t)(v.CBM),"f")}async init(t){var e,f;if(t)return c(this,r,t,"f"),Promise.resolve();const s=C(),{region:d,regionNonFlex:m}=s||{},n=m||i(this,a,"f").regionNonFlex||d||i(this,a,"f").region,h={logLevel:this.mapToLogLevel((f=(e=i(this,a,"f"))===null||e===void 0?void 0:e.logger)===null||f===void 0?void 0:f.level)};return n!==void 0&&(h.region=n),c(this,r,new u(i(this,l,"f").token,h),"f"),Promise.resolve()}updateToken(t){i(this,r,"f").updateToken(t)}async acceptReservation(t){return i(this,r,"f").acceptReservation(t)}async addVoiceParticipant(t,e){return i(this,r,"f").addVoiceParticipant(t,e)}async removeVoiceParticipant(t,e){return i(this,r,"f").removeVoiceParticipant(t,e)}async endConference(t){return await i(this,r,"f").endConference(t.task),t}async rejectReservation(t){return i(this,r,"f").rejectReservation(t)}async holdParticipant(t,e){return i(this,r,"f").holdParticipant(t,e)}async unholdParticipant(t,e){return i(this,r,"f").unHoldParticipant(t,e)}async getParticipantsByTask(t){const e=await i(this,r,"f").getChannels(t);return i(this,r,"f").getParticipants(t,e[0].sid)}async getParticipantBySid(t,e){const s=(await i(this,r,"f").getChannels(e)).find(n=>n.status===g.Active);if(!s||!s.sid){const n=`Active channel for task: ${e.sid} not found`;throw i(this,p,"f").error(n),new P(_.SDK,{severity:b.Error},n)}const m=(await i(this,r,"f").getParticipants(e,s.sid)).find(n=>n.participantSid===t);if(!m){const n=`Participant with sid: ${t} not found`;i(this,p,"f").warn(n)}return m}async completeReservation(t){return i(this,r,"f").completeReservation(t)}wrapReservation(t){return i(this,r,"f").wrapReservation(t)}mapToLogLevel(t){if(typeof t=="number")switch(t){case 0:return o.Trace;case 1:return o.Debug;case 2:return o.Info;case 3:return o.Warn;case 4:return o.Error;case 5:return o.Silent;default:return o.Warn}else if(typeof t=="string"){const e=t.toLowerCase();if(e in o)return o[e]}return o.Warn}}p=new WeakMap,l=new WeakMap,a=new WeakMap,r=new WeakMap;export{k as CbmImpl};
//# sourceMappingURL=CbmImpl.js.map

typeof window<"u"&&(window.global=window);import{__classPrivateFieldGet as t,__classPrivateFieldSet as r}from"../../../../../node_modules/tslib/tslib.es6.js";import D from"events";import{ClientEvent as a}from"../ClientEvent.js";import{TwilsockEvent as l}from"../../../websocket/Twilsock/TwilsockEvent.js";import{SessionEvent as T}from"../../../session/Session/SessionEvent.js";import"../../../logger/Logger/LogEntry.js";import{LoggerName as b}from"../../../logger/Logger/LoggerName.js";import{getLogger as L}from"../../../logger/LoggerFactory/getLogger.js";import"../../../logger/LoggerFactory/LoggerConfigImpl.js";import{TelemetrySdkEventGroup as O}from"../../../telemetrySdkClient/TelemetrySdkEvents/TelemetrySdkEventGroup.js";import{TelemetrySdkEventName as F}from"../../../telemetrySdkClient/TelemetrySdkEvents/TelemetrySdkEventName.js";import{TelemetrySdkEventSource as R}from"../../../telemetrySdkClient/TelemetrySdkEvents/TelemetrySdkEventSource.js";import"../../../telemetrySdkClient/TelemetrySdkClient/TelemetrySDKSessionData.js";import{proxyEvent as m}from"../../../events/EventPublisher/EventPublisher.js";import{getTelemetrySdkClient as N}from"../../../telemetrySdkClient/telemetrySdkClient.js";import{ProfileConnectorImpl as P}from"../../../profileConnector/ProfileConnectorImpl.js";import{SessionImpl as U}from"../../../session/Session/SessionImpl.js";import{TwilsockImpl as G}from"../../../websocket/Twilsock/TwilsockImpl.js";import{AccountConfigStore as x}from"../../../config/AccountConfig/AccountConfigImpl/AccountConfigStore/AccountConfigStore.js";import{VirtualAgentDataImpl as V}from"../../../virtualAgentData/VirtualAgentDataImpl.js";import{TaskRouterImpl as K}from"../../../../packages/taskrouter/TaskRouterImpl.js";import{CbmImpl as $}from"../../../cbm/CbmImpl.js";import{assertNotEmptyString as j}from"../../../../utils/assert.js";import{DataClientImpl as q}from"../../../dataClient/DataClientImpl.js";import{FlexSdkError as S}from"../../../error/FlexSdkError/FlexSdkError.js";import{ErrorCode as M}from"../../../error/ErrorCode/ErrorCodes.js";import"../../../error/ErrorCode/InternalErrorCodes.js";import"../../../error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as W}from"../../../error/ErrorSeverity/ErrorSeverity.js";import{AnalyticsImpl as z}from"../../../analytics/AnalyticsImpl.js";import{EVENTS as I}from"../../../analytics/Analytics.js";import{sendTrackingEvent as _}from"../../../actions/ActionUtils.js";var s,f,h,c,g,i,v,n,y,k,u,d,C,E;class B{constructor(e){s.set(this,void 0),f.set(this,void 0),h.set(this,void 0),c.set(this,void 0),g.set(this,void 0),i.set(this,void 0),v.set(this,void 0),n.set(this,void 0),y.set(this,void 0),k.set(this,void 0),u.set(this,void 0),d.set(this,void 0),C.set(this,void 0),E.set(this,async()=>{try{await t(this,g,"f").createEventGroup(O.Default).addEvents({eventName:F.ClientDestroyed,eventSource:R.Client})}catch(o){t(this,h,"f").error("Failed to send telemetry destroy event",o)}}),r(this,s,e.getInstanceOf(U),"f"),r(this,f,e.getInstanceOf(G),"f"),this.config={account:e.getInstanceOf(x)},r(this,g,N(e),"f"),r(this,h,L(e)(b.Client),"f"),r(this,i,new D,"f"),r(this,v,e.getInstanceOf(V),"f"),r(this,y,e.getInstanceOf(P),"f"),r(this,n,e.getInstanceOf(K),"f"),r(this,k,e.getInstanceOf($),"f"),r(this,u,e.getInstanceOf(q),"f"),r(this,d,e.getInstanceOf(z),"f"),r(this,c,e,"f"),this.setupProxies()}setupProxies(){m(t(this,f,"f"),t(this,i,"f"),l.TokenAboutToExpire,a.TokenAboutToExpire),m(t(this,f,"f"),t(this,i,"f"),l.TokenExpired,a.TokenExpired),m(t(this,f,"f"),t(this,i,"f"),l.TokenUpdated,a.TokenUpdated),m(t(this,f,"f"),t(this,i,"f"),l.ConnectionError,a.ConnectionLost),m(t(this,f,"f"),t(this,i,"f"),l.Connected,a.ConnectionRestored),m(t(this,f,"f"),t(this,i,"f"),l.Disconnected,a.Disconnected),m(t(this,s,"f"),t(this,i,"f"),T.TokenAutoUpdateFailed,a.TokenAutoUpdateFailed),m(t(this,s,"f"),t(this,i,"f"),T.TokenMaxLifetimeReached,a.TokenMaxLifetimeReached)}async updateToken(e){j(e,"token");const o=[];if(t(this,C,"f"))throw new S(M.InvalidState,{severity:W.Error},"Client already destroyed");const w=(p,A)=>new S(M.SDK,{severity:W.Error},`Failed to update token on ${A}`,p);if(t(this,s,"f"))try{await t(this,s,"f").updateToken(e)}catch(p){o.push(w(p,"session"))}if(t(this,n,"f"))try{await t(this,n,"f").updateToken(e)}catch(p){o.push(w(p,"task router"))}if(t(this,k,"f"))try{await t(this,k,"f").updateToken(e)}catch(p){o.push(w(p,"cbm"))}if(_(I.UpdateTokenCompleted,t(this,d,"f"),t(this,n,"f").worker),o.length)throw new AggregateError(o)}async destroy(){t(this,h,"f").debug("Client destroy called"),!t(this,C,"f")&&(r(this,C,!0,"f"),await t(this,E,"f").call(this),await t(this,s,"f").destroy(),t(this,i,"f").emit(a.ClientDestroyed),t(this,i,"f").removeAllListeners(),t(this,u,"f").destroy(),t(this,c,"f").destroy(),t(this,h,"f").debug("Client has been destroyed"))}get roles(){return _(I.ClientRolesCompleted,t(this,d,"f"),t(this,n,"f").worker),[...t(this,s,"f").roles]}get token(){return _(I.ClientTokenCompleted,t(this,d,"f"),t(this,n,"f").worker),t(this,s,"f").token}get profileConnector(){return t(this,y,"f")}get virtualAgentData(){return t(this,v,"f")}get dataClient(){return t(this,u,"f").client}get worker(){return t(this,n,"f").worker}get workspace(){return t(this,n,"f").workspace}get emitter(){return t(this,i,"f")}addListener(e,o){return t(this,i,"f").on(e,o),this}removeListener(e,o){return t(this,i,"f").removeListener(e,o),this}execute(e){return e.run(t(this,c,"f"))}}s=new WeakMap,f=new WeakMap,h=new WeakMap,c=new WeakMap,g=new WeakMap,i=new WeakMap,v=new WeakMap,n=new WeakMap,y=new WeakMap,k=new WeakMap,u=new WeakMap,d=new WeakMap,C=new WeakMap,E=new WeakMap;export{B as ClientImpl};
//# sourceMappingURL=ClientImpl.js.map

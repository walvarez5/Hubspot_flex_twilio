typeof window<"u"&&(window.global=window);import{mergeUserOptions as k}from"../../../utils/mergeUserOptions.js";import{assertNotEmptyString as F}from"../../../utils/assert.js";import{TelemetrySdkEventGroup as b}from"../../telemetrySdkClient/TelemetrySdkEvents/TelemetrySdkEventGroup.js";import{TelemetrySdkEventName as D}from"../../telemetrySdkClient/TelemetrySdkEvents/TelemetrySdkEventName.js";import{TelemetrySdkEventSource as h}from"../../telemetrySdkClient/TelemetrySdkEvents/TelemetrySdkEventSource.js";import{SDKDependency as T}from"../../telemetrySdkClient/TelemetrySdkClient/TelemetrySDKSessionData.js";import"../../logger/Logger/LogEntry.js";import{LoggerName as x}from"../../logger/Logger/LoggerName.js";import{getLogger as M}from"../../logger/LoggerFactory/getLogger.js";import{LoggerConfigImpl as N}from"../../logger/LoggerFactory/LoggerConfigImpl.js";import"../../error/FlexSdkError/FlexSdkError.js";import{ErrorCode as O}from"../../error/ErrorCode/ErrorCodes.js";import"../../error/ErrorCode/InternalErrorCodes.js";import"../../error/ErrorCode/ErrorCodeHelper.js";import{ErrorSeverity as R}from"../../error/ErrorSeverity/ErrorSeverity.js";import{ClientOptionsStore as A}from"../ClientOptions/ClientOptionsStore.js";import{throwFlexSdkError as K,throwFlexSdkErrorFromErrorResponse as L}from"../../error/ThrowError/ErrorHelper.js";import{getTelemetrySdkClient as z}from"../../telemetrySdkClient/telemetrySdkClient.js";import{ContextManager as B}from"../../contextManager/ContextManager.js";import{SessionImpl as G}from"../../session/Session/SessionImpl.js";import{ClientImpl as P}from"../Client/ClientImpl/ClientImpl.js";import{initErrorSubscriptions as U}from"../../reporter/Subscriber.js";import{TaskRouterImpl as _}from"../../../packages/taskrouter/TaskRouterImpl.js";import{CbmImpl as j}from"../../cbm/CbmImpl.js";import{AnalyticsImpl as q}from"../../analytics/AnalyticsImpl.js";import{DataClientImpl as H}from"../../dataClient/DataClientImpl.js";import{featuresProviderImpl as J}from"../../config/FeaturesProvider/featuresProviderImpl/featuresProviderImpl.js";import{isFeatureFlagEnabled as Q}from"../../actions/ActionUtils.js";const V=(s,i)=>{const o=i?.features,r=o?.find(m=>m.id===s);return r?.name},W=async(s,i,o)=>{try{await i.createEventGroup(b.Default).addEvents({eventName:D.ClientInitialized,eventSource:h.Client,durationMs:o})}catch(r){s.error("Failed to send client init event",r)}};let p;const X=s=>async(i,o)=>{var r,m;F(i,"token");let t=B.newInstance();p||(t=s||t,p=!0),U(t);const y=Date.now(),n=t.getInstanceOf(A),g=t.getInstanceOf(N),a=M(t)(x.Client),u=K(t),v=L(t);!((r=o?.logger)===null||r===void 0)&&r.level&&(g.level=(m=o?.logger)===null||m===void 0?void 0:m.level),k(n,o);const c=t.getInstanceOf(G);if(c)try{await c.init(i)}catch(e){const l={module:"client",severity:R.Error,source:"createClient.ts"};e.code===51102||e.code===20003?(l.source="Twilsock",u(O.Forbidden,l,"Insufficient permissions",e.source)):v(e,l)}try{const e={dependencies:{[T.Twilsock]:"default"}},l=z(t);await l.setSessionData(e);const E=Date.now()-y;await W(a,l,E)}catch(e){a.error("Failed to set session data for telemetry",e)}const w=t.getInstanceOf(_);try{await w.init(n?.worker,n?.workspace)}catch(e){a.error("Failed to initialise TaskRouter",e)}const I=t.getInstanceOf(j);try{await I.init()}catch(e){a.error("Failed to initialise CBM SDK",e)}const C=t.getInstanceOf(q),d=await J(t)(i),S=Q("disable-flex-sdk-telemetry-beta",d),f=V("flex-telemetry-key",d);if(S)a.info("Product analytics is disabled");else if(!f)a.info("Analytics Key for Telemetry not found in features config");else try{C.init(f)}catch(e){a.warn("Failed to initialise Analytics",e)}if(!n.disableDataClient){const e=t.getInstanceOf(H);try{await e.init()}catch(l){a.error("Failed to initialize DataClient",l)}}return t.getInstanceOf(P)};export{X as createClient};
//# sourceMappingURL=createClient.js.map

import * as React from "react";
import { ThemeProps } from "../theme";
/**
 * Properties of ErrorMessage
 *
 * @typedef ErrorMessage.ErrorMessageProps
 * @property {string} [title="Error"] - Title of the error message
 * @property {string} [description] - Description of the error message
 * @property {boolean} [hideBranding=false] - Hide Twilio Flex branding on the bottom
 * @property {Function} [primaryAction] - A handler for primary action button click
 * @property {string} [primaryActionTitle] - A title for the primary action button
 * @property {Function} [secondaryAction] - A handler for secondary action button click
 * @property {string} [secondaryActionTitle] - A title for the secondary action button
 */
export interface ErrorMessageProps extends ThemeProps {
    title: string;
    description?: string | React.ReactNode;
    hideBranding: boolean;
    primaryAction?: () => void;
    primaryActionTitle?: string;
    secondaryAction?: () => void;
    secondaryActionTitle?: string;
}
declare const ErrorMessageThemed: React.FC<Pick<Pick<ErrorMessageProps, "description" | "theme" | "primaryAction" | "primaryActionTitle" | "secondaryAction" | "secondaryActionTitle"> & Partial<Pick<ErrorMessageProps, "title" | "hideBranding">> & Partial<Pick<{
    title: string;
    hideBranding: boolean;
}, never>>, "title" | "description" | "hideBranding" | "primaryAction" | "primaryActionTitle" | "secondaryAction" | "secondaryActionTitle"> & {
    theme?: import("@emotion/react").Theme;
}>;
export { ErrorMessageThemed as ErrorMessage };

import React from "react";
import { ColumnDefinition } from "./ColumnDefinition";
import { ColumnDefinitionElement } from "./ColumnDefinition.definitions";
export interface DataTableProps<T, C> {
    items: Array<T>;
    itemKey?: (item: T) => string;
    isLoading?: boolean;
    placeholder?: React.ReactNode;
    preferedColumns?: Array<string>;
    updatePreferenceWithNewColumns?: (colkeys: Array<any>) => void;
    columnDataCreationContext?: C;
    selectedItemKey?: string;
    onRowClick?: (item: T) => void;
    hasHoverStyle: boolean;
    defaultSortColumn?: string;
    stickyHeader: boolean;
    onItemsReordered?: (items: T[]) => void;
    children?: Array<React.ReactElement<ColumnDefinition<T, C>> | undefined | null | false> | React.ReactElement<ColumnDefinition<T, C>> | null | false;
}
interface DataTableState<T, C> {
    sortingFn?: (a: T, b: T) => number;
    sortingAsc: boolean;
    columnDefinitions?: Array<ColumnDefinitionElement<T, C>>;
    sortingKey?: React.Key;
    dragTarget?: number;
    draggingItem?: number;
}
export declare class DataTable<T, C = undefined> extends React.Component<DataTableProps<T, C>, DataTableState<T, C>> {
    state: DataTableState<T, C>;
    static defaultProps: {
        hasHoverStyle: boolean;
        stickyHeader: boolean;
    };
    constructor(props: DataTableProps<T, C>);
    resetSort: () => void;
    private updateColumnOrderAccPreference;
    private renderRows;
    render(): {};
    private onDragEnd;
    private setSortingFn;
    private static isValidColumnItem;
    private validateChildren;
    private createHeaderColSpans;
    private createSortIcon;
    private createHeader;
    private createSubHeader;
}
export {};

import * as React from "react";
import { DynamicContentStore } from "../../DynamicComponent";
import { CSSProps } from "../CSSProps";
/**
 * @typedef Theme.SidePanelThemeProps
 * @property {CSSProps} Container - Main container
 * @property {CSSProps} Header - Header element
 * @property {CSSProps} HeaderButton - Close button in header element
 */
export interface SidePanelThemeProps {
    Header: CSSProps;
    Container: CSSProps;
    HeaderButton: CSSProps;
}
interface ChildrenProps {
    [key: string]: any;
}
/**
 * @typedef SidePanel.SidePanelProps
 * @property {string} displayName - String used for className generation and in contentStore definition
 * @property {boolean} [isHidden=false] - If set to false, the main container will be set in display none
 * @property {React.ReactChild} [title] - A textual component used as panel title in default header
 * @property {Function} [handleCloseClick] - Callback function trigger on `close` button click in default header
 * @property {React.ReactElement} [HeaderComponent] - Component to replace the default SidePanel header
 * @property {SidePanelThemeProps} [themeOverride={}] - Object to override defaults styles for the instance
 * @extends SidePanel.SidePanelThemeOverrideProp
 */
export interface SidePanelProps<P> {
    className?: string;
    displayName?: string;
    contentStore?: DynamicContentStore<P>;
    isHidden?: boolean;
    title?: React.ReactChild;
    handleCloseClick?: () => void;
    HeaderComponent?: React.ReactElement;
    themeOverride: Partial<SidePanelThemeProps>;
    childrenProps: ChildrenProps;
    rightButton?: React.ReactChild;
    closeRef?: React.RefObject<HTMLButtonElement>;
    children?: React.ReactNode;
}
/**
 * A component rendering a list of dynamic filters.
 * Can be themed with `Theme.SidePanel` in [Theme](Theme).
 *
 * @component
 * @category Components / Programmable
 * @subcategory Components
 * @hideconstructor
 * @param {SidePanel.SidePanelProps} props
 * @private
 */
export declare class SidePanel<ContentProps> extends React.PureComponent<SidePanelProps<ContentProps>> {
    /**
     * Default properties
     *
     * @static
     * @type {SidePanelProps}
     * @readonly
     */
    static defaultProps: {
        isHidden: boolean;
        childrenProps: {};
        themeOverride: {};
    };
    render(): JSX.Element;
    private renderContent;
    private renderHeader;
}
export {};

import * as React from "react";
import { DynamicContentStore } from "../../../DynamicComponent";
import { MessageListChildrenKeys, MessageListChildrenProps } from "./MessageList.definitions";
export declare const displayName = "MessageList";
export declare const contentStore: DynamicContentStore<MessageListChildrenProps, MessageListChildrenKeys>;
export declare class MessageListImpl extends React.PureComponent<MessageListChildrenProps> {
    private messageList;
    private newMessageRef;
    private loadedMessagesInUpdate;
    private keepScrolledToBottom;
    private lastScrollHeight;
    private lastScrollTop;
    private inputFocused;
    private mediaDownloaded;
    state: {
        focusIndex: number;
        shouldFocusLatest: boolean;
        hasSwitchedConversation: boolean;
        newFocusAfterMessageClick: number;
    };
    render(): JSX.Element;
    componentDidMount(): void;
    componentWillUnmount(): void;
    private handleInputMessagePosted;
    private handleMediaDownloaded;
    private handleInputFocus;
    private handleInputBlur;
    componentDidUpdate(oldProps: MessageListChildrenProps): void;
    scrollToBottom(): void;
    private consumeLastMessageIfApplicable;
    private captureBottomScrollState;
    private loadMoreMessages;
    private onScroll;
    private onDebounceScroll;
    private setMessageListRef;
    private findMyLastMessageIndex;
    private getConversationMessages;
    private getEmailMessageRecipients;
    private getListItems;
    private getPendingMessageElements;
    private injectDateSeparatorElements;
    private injectAgentHandoffEvents;
    private injectUnreadSeparatorElements;
    private injectLoadingElements;
    private injectWelcomeMessage;
    private injectPredefinedMessage;
    private injectTransfers;
    private scrollDownClick;
    private onClick;
    private checkForScrollBtnDisplay;
    private handleFocus;
    private getNextFocusIndex;
    private updateFocus;
    private newMessageListener;
}

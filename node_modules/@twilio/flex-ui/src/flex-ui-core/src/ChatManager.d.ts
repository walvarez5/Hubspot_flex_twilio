import { Client } from "@twilio/conversations";
import { FileAttachmentConfig } from "./fileAttachmentHelpers";
import { TransferWithNotes } from "./state/ConversationState";
interface ChannelConfig {
    fileAttachment?: FileAttachmentConfig;
}
interface ChatManagerConfig {
    useMessageInputV2: boolean;
    showEmailRecipientChangeConfirmationDialog: boolean;
    enableContentTemplateBrowser: boolean;
}
type ChannelConfigFromConversationSidFunction = (conversationSid: string) => ChannelConfig;
type IsCBMFromConversationSidFunction = (conversationSid: string) => boolean;
type GetTransfersFromConversationSidFunction = (conversationSid: string) => Promise<TransferWithNotes[]>;
type getDisplayNameFromConversationSidFunction = (conversationSid: string) => string | undefined;
export declare class ChatManager {
    private static isReady;
    static initialize(initial: {
        channelConfigCallback: ChannelConfigFromConversationSidFunction;
        isCBMCallback: IsCBMFromConversationSidFunction;
        getTransfersFromConversationSidCallback: GetTransfersFromConversationSidFunction;
        getDisplayNameCallback: getDisplayNameFromConversationSidFunction;
        initialChatManagerConfig: ChatManagerConfig;
        initialConversationClient: Client | undefined;
        disableOrganicMessageSorting?: boolean;
        useLegacyUnloadConversationChecks?: boolean;
        multiTabSupport?: boolean;
        showCustomerLeft?: boolean;
    }): void;
    private static waitForChatManagerToInitialize;
    private static getChannelConfigFromConversationSid;
    static getFileAttachmentConfigFromConversationSid(conversationSid: string): FileAttachmentConfig;
    static isCBM(conversationSid: string): boolean;
    static getDisplayNameFromConversationSid(conversationSid: string): string | undefined;
    static shouldUseMessageInputV2(): boolean;
    static showEmailRecipientChangeConfirmationDialog(): boolean;
    static isOrganicMessageSortingDisabled(): boolean;
    static shouldUseLegacyUnloadConversationChecks(): boolean;
    static getConversationsClient(): Client;
    static isMultiTabSupportEnabled(): boolean;
    static getShowCustomerLeft(): boolean;
    static getTransfers(conversationSid: string): Promise<TransferWithNotes[]>;
    static enableContentTemplateBrowser(): boolean;
    static destroy(): void;
}
export {};

import * as FlexSDK from "@twilio/flex-sdk";
import { EventEmitter } from "events";
import { DeepPartial } from "../types";
export interface FlexSDKOptions extends DeepPartial<FlexSDK.ClientOptions> {
}
export interface FlexSDKTokenPayload {
    token: string;
    data: FlexSDK.TokenData;
}
export declare class FlexSDKManagerImpl extends EventEmitter {
    private client?;
    private onTokenUpdated;
    private onTokenExpired;
    setClient(client: FlexSDK.Client): void;
    initialize(token: string, options: FlexSDKOptions): Promise<void>;
    validateToken(token: string): Promise<FlexSDK.TokenData>;
    getClient(): FlexSDK.Client | undefined;
    destroy(): Promise<void>;
    updateToken(token: string): Promise<void>;
    getAccountConfig(token: string, options?: FlexSDK.AccountConfigOptions): Promise<FlexSDK.AccountConfigData<any>>;
    getFeaturesConfig(token: string, uiVersion?: string): Promise<FlexSDK.FeaturesConfig>;
    setAccountConfig(config: Partial<FlexSDK.AccountConfigData<any>>): Promise<void>;
    getPublicConfig(option: FlexSDK.XOR<FlexSDK.AccountSidOption, FlexSDK.RuntimeDomainOption>): Promise<FlexSDK.PublicConfig>;
    getIdentifiers(uniqueName: string): Promise<FlexSDK.IdentifiersResponse>;
    getTraits(uniqueName: string): Promise<FlexSDK.TraitsResponse>;
    findProfileByIdentifiers(findProfilesRequest: FlexSDK.FindProfilesRequest): Promise<FlexSDK.ProfilesResponse>;
    findProfileByProfileSid(profileConnectSid: string, connectorName: string): Promise<FlexSDK.Profile>;
    hasPermission(permissionToCheck: string, tokenRoles: string[]): boolean | null;
    fetchVirtualAgentTranscript(taskSid: string): Promise<FlexSDK.VirtualAgentData>;
}
export declare const FlexSDKManager: FlexSDKManagerImpl;

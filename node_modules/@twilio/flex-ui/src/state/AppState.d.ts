import { ChatState } from "../flex-ui-core/src";
import { AgentCopilotState } from "./AgentCopilotConfigurationState";
import { Config } from "./AppConfig";
import { AppStatusState } from "./AppStatusState";
import { ConferencesState } from "./Conferences";
import { ConnectionStatus } from "./ConnectionStatus";
import { FeatureFlagsState } from "./FeatureFlags";
import { FlexErrorState } from "./FlexErrorState";
import { InsightsState } from "./InsightsState.definitions";
import { ParticipantState } from "./Participants/participants.types";
import { PhoneState } from "./PhoneState";
import { QualityManagementState } from "./QualityManagementState";
import { QueuesState } from "./QueuesState";
import { SessionState } from "./SessionState";
import { SupervisorState } from "./Supervisor/SupervisorState";
import { ViewState } from "./ViewState";
import { WorkerState } from "./WorkerState";
/**
 * Root Redux Flex application state
 * @typedef AppState
 * @property {Config} config configuration state
 * @property {SessionState} session session state
 * @property {ChatState} chat chat state
 * @property {WorkerState} worker worker state
 * @property {PhoneState} phone voice call state
 * @property {ViewState} view view state
 * @property {AppStatusState} appStatus app status
 * @property {ConnectionStatus} connectionStatus connection status
 * @property {InsightsState} insights insights state
 * @property {SupervisorState} supervisor supervisor state
 * @property {ConferencesState} conferences conferences state
 * @property {QueuesState} realtimeQueues realtimeQueues
 * @property {FeatureFlagsState} featureFlags featureFlags
 * @property {FlexErrorState} flexErrors flexErrors
 * @property {QualityManagementState} qualityManagement qualityManagement
 * @property {ParticipantState} participants participants state
 * @property {AgentCopilotState} agentCopilot agentCopilot state
 * @category State Management
 */
export interface AppState {
    readonly config: Config;
    readonly session: SessionState;
    readonly chat: ChatState.ChatState;
    readonly worker: WorkerState;
    readonly phone: PhoneState;
    readonly view: ViewState;
    readonly appStatus: AppStatusState;
    readonly connectionStatus: ConnectionStatus;
    readonly insights: InsightsState;
    readonly supervisor: SupervisorState;
    readonly conferences: ConferencesState;
    readonly realtimeQueues: QueuesState;
    readonly featureFlags: FeatureFlagsState;
    readonly flexErrors: FlexErrorState;
    readonly qualityManagement: QualityManagementState;
    readonly participants: ParticipantState;
    readonly agentCopilot: AgentCopilotState;
}

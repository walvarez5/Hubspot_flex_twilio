import { QueuesFilterFunction, QueuesSubscriptionFilterFunction } from "./QueuesStateTypes";
import { QueuesStatsMediator } from "./QueuesStatsMediator";
export declare const DEFAULT_QUEUES_STATS_CONFIG: {
    tasksNowKey: string;
    tasks30minKey: string;
    tasksTodayKey: string;
    workerActivitiesStatsKey: string;
    workspaceStatsMapName: string;
    workspaceStatsKey: string;
    queueMapNameSuffix: string;
};
export declare class QueuesStatsSubscriptionService {
    private static instance;
    private config;
    private maps?;
    private queues?;
    private channelMetadata;
    private workspaceStatsMap?;
    private syncClient;
    isInitialized: boolean;
    static queueMediators: {
        [key: string]: QueuesStatsMediator;
    };
    private static isSubscriptionFilterSet;
    private static isUIFilterSet;
    private static _subscriptionFilter;
    private static _UIFilter;
    static get subscriptionFilter(): QueuesSubscriptionFilterFunction;
    static set subscriptionFilter(filter: QueuesSubscriptionFilterFunction);
    static get UIFilter(): QueuesFilterFunction;
    static set UIFilter(filter: QueuesFilterFunction);
    static getInstance(): QueuesStatsSubscriptionService;
    static getMediator(queueSid: string): QueuesStatsMediator | undefined;
    private closeSubscriptions;
    private openSubscriptions;
    static updateSubscriptions(unselectedQueueSids?: string[], selectedQueueSids?: string[]): Promise<void>;
    private addQueueMediator;
    private getSubscribedQueuesData;
    static init(): Promise<void>;
    static close(): void;
    constructor();
    private findQueueByMap;
    private getAllQueueSids;
    private getSelectedQueueSids;
    private getUpdatedPreferenceData;
    private initSubscriptionsWithPreference;
    private getDefaultCardsData;
    private init;
    private close;
    private initializeWorkspaceStats;
    private initializeChannelMetadata;
    private handleItemUpdated;
    private checkIfConditionalHighlightingEnabled;
    private subscribeMaps;
}

import { Action, Dispatch } from "redux";
/**
 * Agent Copilot State for current Agent
 * @interface AgentCopilotState
 * @property {AgentCopilotConfigState} config - AgentCopilotConfigState
 * @category State
 */
export interface AgentCopilotState {
    config?: AgentCopilotConfigState;
}
/**
 * Agent Copilot Configuration State for current Agent
 * @interface AgentCopilotConfigState
 * @property {string[]} [enabledQueues] - List of queue SIDs that have Agent Copilot enabled, or all queues if empty
 * @property {boolean} displayNotes - Whether or not the Notes tab and related components are visible in the UI
 * @property {boolean} displaySentiment - Whether or not the sentiment input field is visible in the UI
 * @property {boolean} multiLanguageEnabled - Whether or not multilanguage is enabled for the account
 * @category State
 * @since 2.8.0
 */
export interface AgentCopilotConfigState {
    enabledQueues?: string[] | null;
    displayNotes?: boolean;
    displaySentiment?: boolean;
    multiLanguageEnabled?: boolean;
}
interface AgentCopilotConfigurationStateAction extends Action {
    readonly payload?: any;
}
export declare const SET_ENABLED_QUEUES = "SET_ENABLED_QUEUES";
export declare const SET_DISPLAY_NOTES = "SET_DISPLAY_NOTES";
export declare const SET_DISPLAY_SENTIMENT = "SET_DISPLAY_SENTIMENT";
export declare const SET_MULTI_LANGUAGE_ENABLED = "SET_MULTI_LANGUAGE_ENABLED";
export declare function reduce(state: AgentCopilotState, action: AgentCopilotConfigurationStateAction): AgentCopilotState;
export declare class Actions {
    private static _dispatcher;
    static get dispatcher(): Dispatch<any>;
    static set dispatcher(dispatcher: Dispatch<any>);
    static setEnabledQueues(enabledQueues: string[] | null): void;
    static setDisplayNotes(isVisible: boolean): void;
    static setDisplaySentiment(isVisible: boolean): void;
    static setMultiLanguageEnabled(isEnabled: boolean): void;
}
export {};

import { Action, Dispatch } from "redux";
import { FlexError } from "../FlexError";
import { ClientManagerInstance } from "../core/FlexClientManager/ClientManagerHelpers";
export interface FlexErrorStateAction extends Action {
    readonly payload?: any;
}
/**
 * @typedef {object} FlexErrorState
 * @property {Array<FlexError>} errors Flex errors
 * @memberof AppState
 */
export interface FlexErrorState {
    errors: Array<FlexError>;
    degradeMap: {
        [val in ClientManagerInstance]?: boolean;
    };
}
export declare const ACTION_NEW_FLEX_ERROR = "ACTION_NEW_FLEX_ERROR";
export declare const ACTION_CLEAR_ALL_ERRORS = "ACTION_CLEAR_ALL_ERRORS";
export declare const ACTION_UPDATE_DEGRADED_CLIENT = "UPDATE_DEGRADED_CLIENT";
export declare function reduce(state: FlexErrorState, action: FlexErrorStateAction): {
    errors: any[];
    degradeMap: { [val in ClientManagerInstance]?: boolean; };
};
export declare class Actions {
    static get dispatcher(): Dispatch<any>;
    static newFlexError(error: FlexError): void;
    static clearAllErrors(): void;
    static updateDegradedClients(clientName: ClientManagerInstance, degraded: boolean): void;
}

import { IFinding } from "../core/Insights/Findings/Finding.models";
import { AnalyticalDashboard, GoodDataProfileInfo, ProjectDashboard } from "../models/InsightsModel";
import { FlexState } from "../store";
import { InsightsState, InsightsStateActionTypes, Segment, SegmentList } from "./InsightsState.definitions";
export declare const currentSegmentSelector: import("reselect").OutputSelector<FlexState, Segment, (res1: {
    [segmentId: string]: Segment;
}, res2: string) => Segment>;
export declare const segmentSelector: (state: FlexState, segmentId: string) => Segment;
export declare const getOffset: (offset: number | null) => number;
export declare const segmentListSelector: import("reselect").OutputParametricSelector<FlexState, string, SegmentList, (res: Segment) => SegmentList>;
export declare const currentSegmentListSelector: import("reselect").OutputSelector<FlexState, SegmentList, (res: Segment) => SegmentList>;
export declare const findingsSelector: import("reselect").OutputParametricSelector<FlexState, string, IFinding[], (res1: SegmentList, res2: {
    [segmentId: string]: IFinding[];
}) => IFinding[]>;
export declare const displayedFindingsSelector: import("reselect").OutputParametricSelector<FlexState, string, {
    offset: number;
    id: string;
    segment_id: string;
    speaker: "customer" | "agent";
    speech_phrase: string;
    speech_search: string;
    verified: string;
    duration: number;
    confidence: number;
}[], (res1: {
    [segmentId: string]: Segment;
}, res2: IFinding[]) => {
    offset: number;
    id: string;
    segment_id: string;
    speaker: "customer" | "agent";
    speech_phrase: string;
    speech_search: string;
    verified: string;
    duration: number;
    confidence: number;
}[]>;
export declare const silencesAndCrosstalksSelector: import("reselect").OutputParametricSelector<FlexState, string, {
    offset: number;
    id: string;
    segment_id: string;
    speaker: "customer" | "agent";
    speech_phrase: string;
    speech_search: string;
    verified: string;
    duration: number;
    confidence: number;
}[], (res1: {
    [segmentId: string]: Segment;
}, res2: IFinding[]) => {
    offset: number;
    id: string;
    segment_id: string;
    speaker: "customer" | "agent";
    speech_phrase: string;
    speech_search: string;
    verified: string;
    duration: number;
    confidence: number;
}[]>;
export declare const currentSegmentOffsetSelector: import("reselect").OutputSelector<FlexState, number, (res: Segment) => number>;
export declare const mediaLinksSelector: import("reselect").OutputSelector<FlexState, import("../components/Insights/Player/Player.definitions").InsightsPlayerMediaLink[], (res: Segment) => import("../components/Insights/Player/Player.definitions").InsightsPlayerMediaLink[]>;
export declare function reduce(state?: InsightsState, action?: InsightsStateActionTypes): InsightsState;
export declare class Actions {
    private static dispatchAction;
    static updateGoodDataProfileInfo(info: GoodDataProfileInfo): void;
    static updateInsightsProjectDashboards(dashboards: ProjectDashboard[]): void;
    static updateInsightsAnalyticalDashboards(dashboards: AnalyticalDashboard[]): void;
    static deleteDashboard(dashboardId: string): void;
    static updateInsightsWorkspaceAttributes(attributes: string[]): void;
    static navigateToFirstDashboard(): void;
    static updateDashboardDrillableItems(payload: {
        dashboardId: string;
        items: string[];
    }): void;
}

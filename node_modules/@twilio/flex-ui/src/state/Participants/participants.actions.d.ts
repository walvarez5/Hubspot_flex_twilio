import { Dispatch } from "redux";
import { ITask } from "../../models";
import { Participant } from "./participants.types";
export declare const getParticipantsPending: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<"participants/get/pending">;
export declare const getParticipantsFulfilled: import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<Participant[], "participants/get/fulfilled">;
export declare const getParticipantsRejected: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<"participants/get/rejected">;
export declare const addPendingParticipant: import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<Pick<import("./participants.types").RawParticipantBase<import("./participants.types").RawVoiceProperties>, "channel_sid" | "interaction_sid"> & {
    sid: string;
} & {
    phoneNumber: string;
}, "add/pending/participant">;
export declare const removeParticipant: import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<string, "remove/participant">;
export declare const addParticipant: import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<Participant, "add/participant">;
export declare const clearPendingParticipants: import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<Participant, "clear/pending/participant">;
export type ParticipantActions = ReturnType<typeof getParticipantsPending> | ReturnType<typeof getParticipantsFulfilled> | ReturnType<typeof getParticipantsRejected> | ReturnType<typeof addPendingParticipant> | ReturnType<typeof removeParticipant> | ReturnType<typeof addParticipant> | ReturnType<typeof clearPendingParticipants>;
export declare const dispatch: Dispatch<ParticipantActions>;
export declare function getParticipants(task: ITask): Promise<void>;

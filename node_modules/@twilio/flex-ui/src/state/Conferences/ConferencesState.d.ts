import { AnyAction } from "redux";
import { Conference } from "./Conference";
import { ConferenceListener } from "./ConferenceListener";
import { baseConferencesState, baseConferenceState, baseUpdateConferencePayload, baseUpdateMultipleConferencePayload } from "./Conferences.definitions";
export type ConferenceState = baseConferenceState<Conference>;
export type ConferencesState = baseConferencesState<Conference>;
export type UpdateMultipleConferencePayload = baseUpdateMultipleConferencePayload<Conference>;
export type UpdateConferencePayload = baseUpdateConferencePayload<Conference>;
export declare function reduce(state: ConferencesState, action: AnyAction): ConferencesState;
export declare class Actions {
    private static handleConferenceUpdateThrottler;
    private static handleConferenceUpdateCalls;
    private static dispatchAction;
    static assignInsights(insightsClient: any): void;
    private static handleConferenceUpdateImpl;
    static handleConferenceUpdate(listener: ConferenceListener | undefined): void;
    static updateConferencesWithParticipant(participantSid: string): void;
    static shutdown(): void;
}

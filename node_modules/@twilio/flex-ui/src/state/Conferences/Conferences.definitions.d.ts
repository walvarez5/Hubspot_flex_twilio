/**
 * Conference state
 *
 * @typedef ConferencesState.ConferenceState
 * @property {ConferencesState.Conference} source source object of the conference
 * @category State
 */
export interface baseConferenceState<Conference> {
    source: Conference;
}
/**
 * State for known conferences
 *
 * @interface ConferencesState
 * @property {Map<string, ConferencesState.ConferenceState>} states active conferences states by conference SID
 * @category State
 */
export interface baseConferencesState<Conference> {
    readonly states: Map<string, baseConferenceState<Conference>>;
}
/**
 * Participant type
 *
 * @typedef {"worker" | "customer" | "transfer" | "supervisor" | ""} ParticipantType
 * @memberof ConferencesState
 */
export type ParticipantType = "worker" | "customer" | "transfer" | "supervisor" | "unknown";
/**
 * Participant status
 *
 * @typedef {"left" | "joined" | "recently_left"} ParticipantStatus
 * @memberof ConferencesState
 */
export type ParticipantStatus = "left" | "joined" | "recently_left";
/**
 * Conference status
 *
 * @typedef {"left" | "joined" | "recently_left"} ConferenceStatus
 * @memberof ConferencesState
 */
export type ConferenceStatus = "setup" | "active" | "closed" | "failed";
export interface OutboundTransfer {
    sid: string;
    status: ParticipantStatus;
    source: any;
}
export type baseConferenceListenerCallback<ConferenceListener> = (listener: ConferenceListener) => void;
export declare enum ConferenceListenerState {
    initializing = "initializing",
    initialized = "initialized",
    destroying = "destroying"
}
export interface baseConferenceListenerWrapper<ConferenceListener> {
    consumers: Array<String>;
    listener: ConferenceListener;
}
export interface baseUpdateConferencePayload<Conference> {
    conference: Conference;
}
export interface baseUpdateMultipleConferencePayload<Conference> {
    conferences: Array<Conference>;
}
export interface Channel {
    sid: string;
    status: ConferenceStatus;
    mediaSid: string;
    type: string;
}
export type ChannelParticipantType = "customer" | "supervisor" | "agent" | "worker" | "external" | "unknown" | "transfer";
export { ChannelParticipantStatus } from "../../internal-flex-commons/src";
export interface VoiceChannelProperties {
    call_sid?: string;
    hold?: boolean;
    muted?: boolean;
}
export declare enum DataSource {
    sync = "sync",
    tr = "tr"
}

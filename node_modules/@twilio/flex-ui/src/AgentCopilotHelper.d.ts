import { ITask } from "./models";
import { AgentCopilotConfigState } from "./state/AgentCopilotConfigurationState";
/**
 * @classdesc Helper class for Agent Copilot feature
 * @category Helpers
 * @private
 */
export declare class AgentCopilotHelper {
    /**
     * Given a task, determines if required Flex feature flags are enabled the current agent.
     * This is independendent of it's visibility in the UI.
     * @param {ITask} task The active task in the Flex UI
     * @returns {boolean} true if Agent has necessary Flex feature flags enabled for Agent Copilot feature and task chanel.
     * @example
     * import { AgentCopilotHelper } from "./AgentCopilotHelper";
     * const hasRequiredFlexFeatureFlagsForTask = AgentCopilotHelper.hasRequiredFlexFeatureFlagsForTask(task);
     */
    static hasRequiredFlexFeatureFlagsForTask: (task?: ITask) => boolean;
    /**
     * Given a task and the agent copilot configuration, determines if wrapup assist is enabled for the task.
     * This is independent of it's visibility in the UI.
     * @param {ITask} task The active task in the Flex UI
     * @param {AgentCopilotConfigState} config The agent copilot configuration state
     * @returns {boolean} true if the task is in a valid state, Flex Feature flags are enabled, and config includes task queue.
     * @example
     * import { AgentCopilotHelper } from "./AgentCopilotHelper";
     * // config value pulled from state: state.flex.agentCopilot.config
     * const isWrapupAssistEnabled = AgentCopilotHelper.isAgentCopilotActiveForTask(task, config);
     */
    static isAgentCopilotActiveForTask: (task?: ITask, config?: AgentCopilotConfigState) => boolean;
    static hasRequiredFlagsForTopics: (task: ITask) => boolean;
}

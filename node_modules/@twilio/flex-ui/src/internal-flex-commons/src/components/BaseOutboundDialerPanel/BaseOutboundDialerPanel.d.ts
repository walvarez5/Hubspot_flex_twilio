import * as React from "react";
import type { IQueue } from "../../utils";
export interface OutboundDialerPanelState {
    phoneNumber?: string;
    selectedQueueSid?: string;
    inProgress?: boolean;
    errorString?: string;
}
export interface InjectedProps {
    dispatch?: () => void;
    children?: React.ReactNode;
    generateCallButtonAriaLabel?: (templates: TemplateProps, inProgress: boolean, phoneNumber: string, hasIncomingCallReservation: boolean | undefined) => string;
    generateErrorAriaLabel?: (templates: TemplateProps, errorString: string) => string;
    renderError?: (templates: TemplateProps, errorString: string, getQueue: (sid: string) => IQueue) => React.ReactNode;
    handlePhoneNumberChange?: (phoneNumber: string) => void;
    handleQueueChange?: (selectedQueueSid: string) => void;
    updateState?: (newData: any) => void;
}
type TemplateProps = any;
export declare function withBaseOutboundDialerPanel<P>(WrappedComponent: React.ComponentType<P>, updateState: any): {
    new (props: P): {
        updateState: (newData: any) => void;
        generateCallButtonAriaLabel: (templates: TemplateProps, inProgress: boolean, phoneNumber: string, hasIncomingCallReservation: boolean | undefined) => any;
        generateErrorAriaLabel(templates: TemplateProps, errorString: string): any;
        renderError: (templates: TemplateProps, errorString: string, getQueue: (sid: string) => IQueue) => JSX.Element;
        handlePhoneNumberChange: (phoneNumber: string) => void;
        handleQueueChange: (selectedQueueSid: string) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends keyof OutboundDialerPanelState>(state: OutboundDialerPanelState | ((prevState: Readonly<OutboundDialerPanelState>, props: Readonly<P>) => OutboundDialerPanelState | Pick<OutboundDialerPanelState, K>) | Pick<OutboundDialerPanelState, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<P> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<OutboundDialerPanelState>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<OutboundDialerPanelState>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<P>, prevState: Readonly<OutboundDialerPanelState>): any;
        componentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<OutboundDialerPanelState>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<OutboundDialerPanelState>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<OutboundDialerPanelState>, nextContext: any): void;
    };
    contextType?: React.Context<any> | undefined;
};
export {};

import * as React from "react";
import { BaseITask, DynamicContentStore } from "../../utils";
import { CSSProps } from "../../utils/theme";
/**
 * Properties of participant canvas theme.
 *
 * @typedef Theme.ParticipantCanvasThemeProps
 * @property {CSSProps} Container - Styles participant container.
 * @property {CSSProps} Avatar - Styles participant avatar.
 * @property {CSSProps} TranscriptAvatar - Styles participant avatar in CCAI flow.
 * @property {CSSProps} StateHover - Styles hover state on participant avatar.
 * @property {CSSProps} ConnectingAnimation - Styles participant connecting state.
 * @property {CSSProps} Button - Styles button in participant canvas.
 * @property {CSSProps} HangUpButton - Styles hang up button in participant canvas.
 * @since 2.0.0
 */
export interface ParticipantCanvasThemeProps {
    Container: CSSProps;
    Avatar: CSSProps;
    TranscriptAvatar: CSSProps;
    StateHover: CSSProps;
    ConnectingAnimation: {
        color: string;
    };
    Button: CSSProps;
    HangUpButton: CSSProps;
}
export declare enum ParticipantCanvasChildrenKeys {
    avatar = "avatar",
    avatarHover = "avatar-hover",
    name = "name",
    status = "status",
    actions = "actions",
    transcriptParticipantContainer = "transcriptParticipantContainer",
    transcriptParticipantMetaContainer = "transcriptParticipantMetaContainer",
    transcriptParticipantAvatar = "transcriptParticipantAvatar",
    transcriptParticipantStatusContainer = "transcriptParticipantStatusContainer"
}
export declare enum ParticipantCanvasListItemChildrenKeys {
    avatar = "avatar",
    avatarHover = "avatar-hover",
    statusContainer = "statusContainer",
    name = "name",
    status = "status",
    actions = "actions"
}
export declare enum ParticipantCanvasActionsChildrenKeys {
    acceptKick = "accept-kick",
    cancelKick = "cancel-kick",
    cancelTransfer = "cancel-transfer",
    hold = "hold",
    kick = "kick"
}
export interface ParticipantCanvasImplState {
    showKickConfirmation: boolean;
}
interface Common {
    templates: any;
}
interface ContentCommon<ParentsChildrenProps> extends Common {
    avatar?: string;
    onHold?: boolean;
    connecting?: boolean;
    isDisabled?: boolean;
    connectingColor?: string;
    adjustedTheme: (baseTheme: any) => any;
    parentProps: React.PropsWithChildren<ParentsChildrenProps>;
    name: string | React.ReactNode;
    statusTemplate: (context?: any) => string;
    isTaskAssignedToCurrentWorker: boolean;
    hideActions?: boolean;
    actionsItemDisplayName: string;
    actionsItemContentStore: DynamicContentStore;
    renderActions: React.ReactNode;
}
export interface ParticipantKickConfirmationProps extends Common {
    onKickParticipantConfirmClick: () => void;
    onHideKickConfirmation: () => void;
}
export interface ParticipantContentProps<ParentsChildrenProps> extends ContentCommon<ParentsChildrenProps> {
    participantCanvasContentStore: DynamicContentStore;
    participantCanvasDisplayName: string;
    participantWidth: number;
}
export interface ParticipantContentListProps<ParentsChildrenProps> extends ContentCommon<ParentsChildrenProps> {
    listItemContentStore: DynamicContentStore;
    listItemDisplayName: string;
}
export interface CCAIParticipantListItemProps<ParentsChildrenProps> extends ContentCommon<ParentsChildrenProps> {
    participantCanvasContentStore: DynamicContentStore;
    participantCanvasDisplayName: string;
    participantType?: string;
}
export interface BaseParticipantCanvasProps extends Common {
    task: BaseITask;
    participant?: any;
    isCCAICall?: boolean;
    participantWidth: number;
    hideActions?: boolean;
    hideHoldButton?: boolean;
    listMode?: boolean;
    isTaskAssignedToCurrentWorker?: boolean;
    theme?: any;
    kickParticipant: () => void;
    cancelTransfer: () => void;
    handleHold: (participant: any, task: BaseITask, type: string) => void;
}
export {};

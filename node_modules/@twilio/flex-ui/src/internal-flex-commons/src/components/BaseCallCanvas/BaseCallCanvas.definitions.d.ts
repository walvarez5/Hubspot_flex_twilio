import type { BaseITask, ConferenceParticipant, Participant, TaskStatusBasedType, Template } from "../../utils";
import type { DialpadState } from "./BaseCallCanvasDialpad";
export interface BaseCallCanvasProps {
    conference: {
        participants: Array<ConferenceParticipant>;
    };
    templates: Template;
    isCCAICall: boolean;
    muted: boolean;
    isTaskAssignedToCurrentWorker: boolean;
    callQualityIssue: boolean;
    task: BaseITask;
    dialpadState?: DialpadState;
    participantsByCallSid: Record<string, Participant>;
    unHoldMyself: () => void;
    isCurrentWorkerOnHold: boolean;
    cancelTransfer: () => void;
    handleHold: () => void;
    kickParticipant: () => void;
    onHoldParticipantClick: () => void;
    onMuteClick: () => void;
    onHangupClick: () => void;
    onDialpadClick: () => void;
    sendDTMFDigits: (key: string) => void;
    statusTemplate?: {
        titleLine?: TaskStatusBasedType;
        firstLine?: TaskStatusBasedType;
        secondLine?: TaskStatusBasedType;
    };
}
export interface CallCanvasContentProps {
    isCCAICall?: boolean;
    hideActions?: boolean;
    isDialPadOpen?: boolean;
    muted?: boolean;
    templates: Template;
    participants: Array<ConferenceParticipant>;
    task: BaseITask;
    onHoldParticipantClick: () => void;
    onMuteClick: () => void;
    onHangupClick: () => void;
    onDialpadClick: () => void;
}
export interface GetParticipantsParams {
    conference: {
        participants: Array<ConferenceParticipant>;
    };
    external: Array<ConferenceParticipant>;
    participantsByCallSid: Record<string, Participant>;
    includeMyself?: boolean;
}
export interface CallCanvasIconProps {
    task: BaseITask;
}

import { type CSSProps } from "../../utils";
export declare const Row: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: React.ElementType;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const DialpadLayout: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: React.ElementType;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export interface ButtonThemeProps extends Partial<CSSProps> {
    disabledColor?: string;
    lightHover?: boolean;
}
interface ButtonProps {
    themeOverride?: ButtonThemeProps;
    roundCorners?: boolean;
    isLink?: boolean;
    variant?: "inherit" | "primary" | "secondary" | "default" | "success" | "destructive" | "link";
    fullWidth?: boolean;
    disabled?: boolean;
}
interface CustomButtonProps extends ButtonProps, Compact {
    animate: boolean;
}
interface Compact {
    compact: boolean;
}
export declare const Button: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: React.ElementType;
} & CustomButtonProps, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const Caption: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: import("react").ElementType;
} & Compact, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {}>;
export declare const Description: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: import("react").ElementType;
} & Compact, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {}>;
export {};

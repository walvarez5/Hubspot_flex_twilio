import type { Duration } from "date-fns";
declare const formatTimeDurationByNumberOrDuration: (timeInMs?: number, duration?: Duration, format?: "full" | "compact" | "short" | "normal") => string;
/**
 * This method formats dates based upon a millisecond value.  The format value is optional and defaults to 'full'.
 *
 * format type 'short' formats date as following:
 * 0sec - 59min - MM:SS
 * 1h - 23h59min - HHh MMmin
 * from 1d - DDd HHh
 * format type: 'full' return string representation of time in (dd):(hh):mm:ss format
 * format type: 'compact' returns string representation of time in seconds, minutes or hours
 * Only display the necessary information (eg. If hours = 0, do not even display hours).
 * Stays the same for all locales (by design).
 * @param {number} timeInMs - The amount of time in milliseconds to be converted to a time interval.
 * @param {string} format - converts the time duration to a custom defined format.
 * @returns {string} The time in DHMS format.
 * @example
 * formatTimeDuration(1000) // 00:01
 * @since 2.0.0
 */
declare const formatTimeDuration: (timeInMs?: number, format?: "full" | "compact" | "short") => string;
/**
 * This method calculates the remaining time in seconds from a given date.
 * @param {Date} date - The date to calculate the remaining time from.
 * date fromat is '2024-11-12T17:59:34.249579Z'
 * @example
 * calculateRemainingTime(2024-11-12T17:59:34.249579Z) // 5483810
 * @since 2.11.0
 */
declare function calculateRemainingTime(date: string): number;
export { calculateRemainingTime, formatTimeDuration, formatTimeDurationByNumberOrDuration };

import { BaseITask } from "../models";
/**
 * Base TaskHelper
 * @class
 * @since 0.0.1
 */
export declare class BaseTaskHelper {
    protected task: BaseITask;
    constructor(task: BaseITask);
    static durationSinceUpdate(task: BaseITask): string;
    /**
     * Duration since last update of a task. Uses `dateUpdated` property of a task.
     * @readonly
     * @type {string}
     * @example
     * import { BaseTaskHelper } from "@twilio/flex-ui";
     * const taskHelper = new BaseTaskHelper(someTask);
     * console.log(taskHelper.durationSinceUpdate);
     * @since 2.0.0
     */
    get durationSinceUpdate(): string;
    static durationSinceUpdateShort(task: BaseITask): string;
    /**
     * Duration since last update of a task in short format. Uses `dateUpdated` property of a task.
     * @readonly
     * @type {string}
     * @example
     * import { BaseTaskHelper } from "@twilio/flex-ui";
     * const taskHelper = new BaseTaskHelper(someTask);
     * console.log(taskHelper.durationSinceUpdateShort);
     * @since 2.0.0
     */
    get durationSinceUpdateShort(): string;
    /**
     * Serializes task object to json string.
     * @readonly
     * @type {string}
     * @example
     * import { TaskHelper } from "@twilio/flex-ui";
     * const taskHelper = new TaskHelper(someTask);
     * console.log(taskHelper.jsonString);
     * @since 2.0.0
     */
    get jsonString(): string;
    static isLiveCall(task: BaseITask): boolean;
    get isLiveCall(): boolean;
    static isCallOnHold(task: BaseITask, overrideBaseLiveCall?: boolean): boolean;
    get isCallOnHold(): boolean;
    static canHold(task: BaseITask, workerSid: string): boolean;
    static isCurrentWorkerOnHold(task: BaseITask): boolean;
    static canTransfer(task: BaseITask, workerSid: string): boolean;
    static canCancelTransfer(task: BaseITask | undefined): boolean;
    static isGroupCall(task: BaseITask): boolean;
    static isLiveChat(task: BaseITask): boolean;
    get isLiveChat(): boolean;
    static isIncomingCall(task: BaseITask): boolean;
    get isIncomingCall(): boolean;
    static isChatBasedTask(task: BaseITask): boolean;
    get isChatBasedTask(): boolean;
    static isVoiceTask(task: BaseITask): boolean;
    get isVoiceTask(): boolean;
    static isEmailTask(task: BaseITask): boolean;
    static getTaskConversationSid(task: BaseITask): string;
    static isPending(task: BaseITask): boolean;
    get isPending(): boolean;
    static isInWrapupMode(task: BaseITask): boolean;
    get isInWrapupMode(): boolean;
    static isCompleted(task: BaseITask): boolean;
    get isCompleted(): boolean;
    static isTaskAssignedToCurrentWorker(task: BaseITask, workerSid: string): boolean;
    static isTaskAccepted(task: BaseITask): boolean;
    get isTaskAccepted(): boolean;
    static isOutboundCallTask(task: BaseITask): boolean;
    static isInitialOutboundAttemptTask(task: BaseITask): boolean;
    static isCBMTask(task: BaseITask): boolean;
}

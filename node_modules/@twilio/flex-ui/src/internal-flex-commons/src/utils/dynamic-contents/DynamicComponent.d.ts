import * as React from "react";
import { DynamicContentStore } from "./DynamicContentStore";
export * from "./DynamicContentStore";
export { DynamicComponentWithTheme as DynamicComponent };
/**
 * Dynamically populated children which will receive props of type T.
 * @typedef {(React.ReactElement<T>)} DynamicContentStore.DynamicComponentChildren
 * @template T
 * @memberof DynamicContentStore
 * @since 2.0.0
 */
/**
 * @class DefaultContentFragment
 * @classdesc Represents a default content fragment
 *
 * @private
 * @param {DynamicContentStore.ContentFragmentProps}
 * @extends {React.Component}
 * @memberof DynamicComponent
 * @since 2.0.0
 */
export declare class DefaultContentFragment extends React.Component<any> {
    render(): React.ReactNode;
}
export interface DynamicComponentProps<P> {
    childProps?: any;
    contentStore: DynamicContentStore<P>;
    className?: string;
    customChildren?: React.ReactNode;
    vertical?: boolean;
    name: string;
    noContainers?: boolean;
    subContainer?: React.ReactElement<any>;
    renderChildren?: (children: Array<React.ReactNode>, align: string) => Array<React.ReactNode>;
    rootContainerStyles?: string;
    theme: any;
}
declare const DynamicComponentWithTheme: React.FC<(Pick<DynamicComponentProps<any>, "name" | "className" | "vertical" | "childProps" | "contentStore" | "customChildren" | "noContainers" | "subContainer" | "renderChildren" | "rootContainerStyles"> | Pick<DynamicComponentProps<any> & {
    children?: React.ReactNode | undefined;
}, "children" | "name" | "className" | "vertical" | "childProps" | "contentStore" | "customChildren" | "noContainers" | "subContainer" | "renderChildren" | "rootContainerStyles">) & {
    theme?: import("@emotion/react").Theme;
}>;

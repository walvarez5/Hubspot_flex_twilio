import * as React from "react";
import type { ComponentWrapper } from "./componentDecorating";
import type { CleanupFunction, ContentFragmentProps, RemoveComponentCall, RemoveComponentCallOptions } from "./DynamicContentStore.definitions";
/**
 * @class ContentFragment
 * @classdesc Represents a content fragment
 *
 * @private
 * @param {DynamicContentStore.ContentFragmentProps}
 * @extends {React.Component}
 * @memberof DynamicComponent
 * @since 2.0.0
 */
export declare class ContentFragment extends React.Component<ContentFragmentProps> {
    render(): React.ReactNode;
}
/**
 * @category Components / Programmable
 * @docname Add / Replace / Remove Methods
 * @class DynamicContentStore
 * @classdesc Flex UI is a library of programmable or dynamic components that expose a Content property and allows you to add, replace and remove any component and its children. This can be done by using add, replace and remove methods with options.
 * @param {string} name Name of the dynamic content store
 * @hideconstructor
 * @since 2.0.0
 * @example
 * // MyComponentImpl.tsx
 * import { DynamicContentStore, DynamicComponent } from "@twilio/flex-ui";
 *
 * export const displayName = "MyComponent";
 * export const contentStore = new DynamicContentStore(displayName);
 *
 * export class MyComponentImpl extends React.PureComponent {
 *   // â€¦
 *   render() {
 *     return (
 *       <DynamicComponent
 *       store={contentStore}
 *       // ..
 */
export declare class DynamicContentStore<P extends Object = any, CKeys extends React.Key = ""> {
    private _name;
    constructor(name: string);
    /**
     * Name of the dynamic content store
     *
     * @type {string}
     * @private
     * @since 2.0.0
     */
    get name(): string;
    private _removeRequests;
    private registeredFragments;
    registeredWrappers: ComponentWrapper<P>[];
    private removeRegistration;
    /**
     * Adds a new child fragment
     *
     * @param {React.ReactElement<any>} child - child to add
     * @param {DynamicContentStore.ContentFragmentProps} options - options of the child to add
     * @returns {CleanupFunction} callback when executed removes the added component
     * @since 2.0.0
     * @example
     * ComponentName.Content.add(Component, options);
     */
    add(child: React.ReactElement<any>, options?: ContentFragmentProps): CleanupFunction;
    /**
     * Removes an existing child fragment
     *
     * @param {React.Key} key - key that identifies the fragment to remove
     * @param {RemoveComponentCallOptions} options - options of the child to remove
     * @returns {CleanupFunction} callback to undo remove request
     * @since 2.0.0
     * @example
     * ComponentName.Content.remove(componentKey, options);
     */
    remove(key: CKeys | React.Key, options?: RemoveComponentCallOptions): CleanupFunction;
    /**
     * Replaces the entire programmable component with the provided custom component.
     *
     * @param {React.ReactElement} customComponent - new custom component that will replace an existing fragment
     * @param {DynamicContentStore.ContentFragmentProps} options - options of the new custom component
     * @returns {CleanupFunction} callback when executed removes the replaced component
     * @since 2.0.0
     * @example
     * ComponentName.Content.replace(Component, options);
     */
    replace(customComponent: React.ReactElement<any>, options?: ContentFragmentProps): CleanupFunction;
    /**
     * Replace a Flex component with a custom component which is able to render the original component and has access to all its original properties
     *
     * @param {ComponentWrapper} wrapper - the custom wrapper component which can augment or replace the original component, and access/modify all original props
     * @since 2.0.0
     * @example
     * ComponentName.Content.addWrapper(ComponentWrapper);
     */
    addWrapper(wrapper: ComponentWrapper<P>): void;
    getAllWrappers(): ComponentWrapper<P>[];
    /**
     * Array of React Elements (React.ReactElement) that represent the fragments that will be added to the component
     * @type {Array<React.ReactElement>}
     * @private
     * @since 2.0.0
     */
    get fragments(): React.ReactElement<ContentFragmentProps & {
        children?: React.ReactNode;
    }, string | React.JSXElementConstructor<any>>[];
    /**
     * Array of {@link DynamicContentStore.RemoveComponentCall} requests that represent requests of fragments to be removed from the component
     * @type {Array<DynamicContentStore.RemoveComponentCall>}
     * @private
     * @since 2.0.0
     */
    get removeRequests(): Array<RemoveComponentCall>;
}

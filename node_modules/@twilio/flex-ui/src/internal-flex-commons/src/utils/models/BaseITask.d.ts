import { CallOptions, DequeueOptions, RedirectOptions, ReservationParticipantOptions, Task, TaskParticipantOptions } from "@twilio/flex-sdk";
/**
 * Status of the Reservation
 * @typedef {"pending" | "accepted" | "wrapping" | "completed" | "canceled"} TaskReservationStatus
 * @memberof ITask
 * @since 2.0.0
 */
export type TaskReservationStatus = "pending" | "accepted" | "wrapping" | "completed" | "canceled" | "paused";
/**
 * Status of the Task
 * @typedef {"reserved" | "assigned" | "wrapping" | "completed" | "canceled"} TaskTaskStatus
 * @memberof ITask
 * @since 2.0.0
 */
export type TaskTaskStatus = "reserved" | "assigned" | "wrapping" | "completed" | "canceled";
export interface BaseITask<CustomAttributesType extends Object = Record<string, any>, TaskTransfer = any, Conference = any> {
    source: Task;
    sourceObject: any;
    addOns: object;
    age: number;
    attributes: CustomAttributesType;
    dateCreated: Date;
    dateUpdated: Date;
    priority: number;
    queueName: string;
    queueSid: string;
    reason: string;
    sid: string;
    status: TaskReservationStatus;
    taskSid: string;
    taskStatus: TaskTaskStatus;
    taskChannelSid: string;
    taskChannelUniqueName: string;
    timeout: number;
    workflowName: string;
    workflowSid: string;
    workerSid: string;
    incomingTransferObject?: TaskTransfer;
    outgoingTransferObject?: TaskTransfer;
    routingTarget: string;
    defaultFrom: string;
    formattedAttributes: {
        from?: string;
        outbound_to?: string;
    };
    channelType: string;
    conference?: Conference;
    endConference: () => Promise<any>;
    addVoiceParticipant: (to: string, from: string, type: string) => Promise<any>;
    joinCall: () => Promise<any>;
    getChannels: () => Promise<any>;
    getParticipants: (channelSid: string) => Promise<any>;
    setEndConferenceOnExit: (participantSid: string, endConferenceOnExit: boolean) => Promise<any>;
    complete: () => Promise<any>;
    transfer: (to: string, options: any) => Promise<any>;
    hold: (holdMusicUrl?: string, holdMusicMethod?: string) => Promise<any>;
    unhold: () => Promise<any>;
    holdParticipant: (targetSid: string, holdMusicUrl?: string, holdMusicMethod?: string) => Promise<any>;
    unholdParticipant: (targetSid: string) => Promise<any>;
    cancelTransfer: () => Promise<any>;
    kick: (targetSid: string) => Promise<any>;
    setAttributes: (attributes: object) => Promise<any>;
    wrapUp: () => Promise<any>;
    dequeue: (options?: DequeueOptions) => Promise<any>;
    redirectCall: (callSid: string, url: string, options?: RedirectOptions) => Promise<any>;
    issueCallToWorker: (from: string, url: string, options?: CallOptions) => Promise<any>;
    updateWorkerParticipant: (options?: ReservationParticipantOptions) => Promise<any>;
    updateCustomerParticipant: (options?: TaskParticipantOptions) => Promise<any>;
}

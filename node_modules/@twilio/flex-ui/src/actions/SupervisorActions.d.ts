import { ITask, IWorker } from "../models";
import { AppliedFilter } from "../state/Supervisor/SupervisorState.definitions";
/**
 * @package
 * @typedef SelectWorkerInSupervisorPayload
 * @property {IWorker} [worker] worker
 * @property {string} [workerSid] workerSid
 * @memberof Actions
 */
export interface SelectWorkerInSupervisorPayload {
    worker?: IWorker;
    workerSid?: string;
}
/**
 * @package
 * @typedef TaskInSupervisorPayload
 * @property {ITask} [task] task
 * @property {string} [sid] taskSid
 * @memberof Actions
 */
export interface TaskInSupervisorPayload {
    task?: ITask;
    sid?: string;
}
/**
 * @package
 * @typedef {TaskInSupervisorPayload} MonitorTaskPayload
 * @property {any} [extraParams] extra params
 * @memberof Actions
 */
export interface MonitorTaskPayload extends TaskInSupervisorPayload {
    extraParams?: any;
}
/**
 * @package
 * @typedef ApplyTeamsViewFiltersPayload
 * @property {AppliedFilter[]} filters array of filters to apply
 * @property {string} [extraFilterQuery] query string for custom filters
 * @memberof Actions
 */
export interface ApplyTeamsViewFiltersPayload {
    filters: Array<AppliedFilter>;
    extraFilterQuery?: string;
}
/**
 * @package
 * @typedef ApplyTeamsViewSearchPayload
 * @property {string} search search string
 * @memberof Actions
 */
export interface ApplyTeamsViewSearchPayload {
    search: string;
}
export declare class SupervisorActions {
    static registerActions(): void;
    private static monitorCall;
    private static stopMonitoringCall;
    private static selectTaskInSupervisor;
    private static selectWorkerInSupervisor;
    private static updateSelectWorkerActionPayload;
    private static updateTaskActionPayload;
    private static applyTeamsViewFilters;
    private static applyTeamsViewSearch;
}

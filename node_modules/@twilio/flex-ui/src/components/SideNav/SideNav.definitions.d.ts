/**
 * Properties of SideNav.
 *
 * @typedef SideNav.SideNavProps
 * @property {boolean} [reserveSpace] - Whether the SideNav is shown in compact mode.
 * @property {DynamicComponentChildren<SideNavChildrenProps>} [children] - children
 */
export interface SideNavProps {
    reserveSpace: boolean;
}
/**
 * Properties of SideNav.
 *
 * @typedef {SideNavProps} SideNav.SideNavChildrenProps
 * @property {boolean} [incomingTasks] - Whether there are incoming tasks or not. If there are, the SideNav shows an indicator in the agent-desktop icon.
 * @property {boolean} [isOpen] - Whether the Sidebar is open or not.
 * @property {string} [activeView] - Represents the current active view.
 */
export interface SideNavChildrenProps extends SideNavProps {
    incomingTasks?: boolean;
    isOpen?: boolean;
    activeView?: string;
}
export declare enum SideNavChildrenKeys {
    agentDesktop = "agent-desktop",
    teams = "teams",
    conversationalInsights = "conversational-insights",
    queuesStats = "queues-stats",
    dashboards = "dashboards",
    analyze = "analyze",
    qualityManagement = "quality-management",
    inspections = "inspections",
    agents = "agents",
    speechSearches = "speech-searches",
    sideNav = "side-nav"
}

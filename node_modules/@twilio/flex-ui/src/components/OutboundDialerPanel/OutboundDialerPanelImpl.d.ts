import { DynamicContentStore } from "../../flex-ui-core/src";
import { type InjectedProps, type OutboundDialerPanelState } from "../../internal-flex-commons/src";
import * as React from "react";
import { ThemeProps } from "../theme";
import { OutboundDialerPanelChildrenProps } from "./OutboundDialerPanel.definitions";
export declare const displayName = "OutboundDialerPanel";
export declare const contentStore: DynamicContentStore<OutboundDialerPanelChildrenProps, "">;
type Combined = ThemeProps & OutboundDialerPanelChildrenProps & InjectedProps & OutboundDialerPanelState;
export declare class OutboundDialerPanelChild extends React.PureComponent<Combined> {
    static displayName: string;
    render(): JSX.Element;
    private handleDial;
    private handleClose;
}
export declare const OutboundDialerPanelImpl: {
    new (props: Combined): {
        updateState: (newData: any) => void;
        generateCallButtonAriaLabel: (templates: any, inProgress: boolean, phoneNumber: string, hasIncomingCallReservation: boolean | undefined) => any;
        generateErrorAriaLabel(templates: any, errorString: string): any;
        renderError: (templates: any, errorString: string, getQueue: (sid: string) => import("internal-flex-commons").IQueue) => JSX.Element;
        handlePhoneNumberChange: (phoneNumber: string) => void;
        handleQueueChange: (selectedQueueSid: string) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends keyof OutboundDialerPanelState>(state: OutboundDialerPanelState | ((prevState: Readonly<OutboundDialerPanelState>, props: Readonly<Combined>) => OutboundDialerPanelState | Pick<OutboundDialerPanelState, K>) | Pick<OutboundDialerPanelState, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Combined> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<OutboundDialerPanelState>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Combined>, nextState: Readonly<OutboundDialerPanelState>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Combined>, prevState: Readonly<OutboundDialerPanelState>): any;
        componentDidUpdate?(prevProps: Readonly<Combined>, prevState: Readonly<OutboundDialerPanelState>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Combined>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Combined>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Combined>, nextState: Readonly<OutboundDialerPanelState>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Combined>, nextState: Readonly<OutboundDialerPanelState>, nextContext: any): void;
    };
    contextType?: React.Context<any> | undefined;
};
export {};

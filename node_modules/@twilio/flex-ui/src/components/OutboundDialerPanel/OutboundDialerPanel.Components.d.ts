import { SidePanel } from "../../flex-ui-core/src";
import { ThemeProps } from "../theme";
export declare const StyledSidePanel: import("@emotion/styled").StyledComponent<Pick<import("@twilio/flex-ui-core").SidePanelProps<unknown>, "displayName" | "children" | "title" | "className" | "contentStore" | "handleCloseClick" | "HeaderComponent" | "rightButton" | "closeRef"> & Partial<Pick<import("@twilio/flex-ui-core").SidePanelProps<unknown>, "themeOverride" | "isHidden" | "childrenProps">> & Partial<Pick<{
    isHidden: boolean;
    childrenProps: {};
    themeOverride: {};
}, never>> & {
    theme?: import("@emotion/react").Theme;
}, {}, {
    ref?: import("react").Ref<SidePanel<unknown>>;
}>;
export declare const Container: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: import("react").ElementType;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
interface DialerContainerProps extends ThemeProps {
    disabled?: boolean;
}
export declare const DialerContainer: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: import("react").ElementType;
} & DialerContainerProps, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const OfflineContainer: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: import("react").ElementType;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const Caption: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: import("react").ElementType;
}, import("react").DetailedHTMLProps<import("react").LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, {}>;
export declare const StyledSelect: import("@emotion/styled").StyledComponent<import("@material-ui/core").SelectProps & {
    theme?: import("@emotion/react").Theme;
}, {}, {}>;
export declare const CallControls: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: import("react").ElementType;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const CallAnimation: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: import("react").ElementType;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const ErrorMessage: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: import("react").ElementType;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const ErrorIcon: () => JSX.Element;
export {};

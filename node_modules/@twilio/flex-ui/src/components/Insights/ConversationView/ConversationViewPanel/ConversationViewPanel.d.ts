import * as React from "react";
import { Icon } from "../../../../flex-ui-core/src";
import { PublicSegment, Segment } from "../../../../state/InsightsState.definitions";
export declare const PanelContainer: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: React.ElementType;
} & {
    hidden?: boolean;
}, React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const PanelTitle: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: React.ElementType;
}, React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const PanelTitleIcon: import("@emotion/styled").StyledComponent<import("@twilio/flex-ui-core").IconProps & {
    theme?: import("@emotion/react").Theme;
}, {}, {
    ref?: React.Ref<Icon>;
}>;
export declare const PanelContent: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: React.ElementType;
}, React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export type ConversationViewPanelOwnProps = {
    id: string;
    title: string;
    name: string;
    icon?: string;
    keepMounted: boolean;
    children: React.ReactElement | ((segment: PublicSegment) => React.ReactNode);
};
export type ConversationViewPanelStateProps = {
    segment: Segment;
};
export type ConversationViewPanelProps = ConversationViewPanelOwnProps & ConversationViewPanelStateProps;
export declare class ConversationViewPanelWithContext extends React.Component<ConversationViewPanelProps> {
    static defaultProps: {
        keepMounted: boolean;
    };
    render(): JSX.Element;
}
export declare const ConversationViewPanel: import("react-redux").ConnectedComponent<typeof ConversationViewPanelWithContext, import("react-redux").Omit<React.ClassAttributes<ConversationViewPanelWithContext> & ConversationViewPanelOwnProps & ConversationViewPanelStateProps, "segment"> & Omit<ConversationViewPanelOwnProps, "keepMounted"> & {
    keepMounted?: boolean;
}>;

import * as React from "react";
import { Segment } from "../../../state/InsightsState.definitions";
import { InsightsPlayerPlayActionPayload } from "./Player.definitions";
interface OverlayPlayerImplState {
    visible: boolean;
    loaderType: "none" | "side" | "bottom";
}
export interface OverlayPlayerImplStateProps {
    segment?: Segment;
    segmentId?: string;
    selectedMediaLink?: number;
}
export interface OverlayPlayerImplDispatchProps {
    updateSegmentId: (segmentId?: string) => void;
}
export type OverlayPlayerImplProps = OverlayPlayerImplStateProps & OverlayPlayerImplDispatchProps;
export declare class OverlayPlayerImpl extends React.Component<OverlayPlayerImplProps, OverlayPlayerImplState> {
    constructor(props: OverlayPlayerImplProps);
    static getDerivedStateFromProps(nextProps: OverlayPlayerImplProps): {
        loaderType: string;
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: OverlayPlayerImplProps): void;
    private fetchSegmentData;
    private registerActions;
    private handleClose;
    play: (payload: InsightsPlayerPlayActionPayload) => Promise<void>;
    show: () => Promise<void>;
    hide: () => Promise<void>;
    onInitialized: () => Promise<void>;
    render(): JSX.Element;
    renderLoader(): JSX.Element;
    renderError(): JSX.Element;
    renderVoice(segment: Segment): JSX.Element;
    renderByMediaType(segment: Segment): JSX.Element;
}
export {};

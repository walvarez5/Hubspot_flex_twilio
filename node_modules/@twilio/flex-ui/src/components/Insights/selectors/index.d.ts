import { AnalyticalDashboard, ProjectDashboard } from "../../../models/InsightsModel";
import { FlexState } from "../../../store";
/**
 *
 * MC Hammer - U Can't Touch This
 * https://www.youtube.com/watch?v=_NNYI8VbFyY
 *
 * Use this only in a mapStateToProps FACTORY. Due to the fact how we reimplemented connect,
 * the shape of the store is different when using factory and when returning object immediately.
 * The solution would be to use selectors to access appState instead of wrapping connect,
 * but its too late for that, since this is already exposed to customers.
 *
 * The use of the factory is absolutely vital here, because without it reselect doesn't properly
 * cache the results and only the last call is cached. When multiple instances of connected component exist,
 * they each have different ownProps and selector is called again, making memoization useless.
 *
 * Without the factory, the selectors are recalculated EVERY TIME ANY REDUX ACTION IS DISPATCHED.
 * @private
 */
export declare const projectDashboardsSelectorForFactory: (state: FlexState) => {
    [dashboardId: string]: ProjectDashboard;
};
export declare const drillableItemsSelectorForFactory: (state: FlexState) => {
    [dashboardId: string]: string[];
};
export declare const tabIdToProjectDashboard: import("reselect").OutputSelector<FlexState, any, (res: {
    [dashboardId: string]: ProjectDashboard;
}) => any>;
export declare const dashboardIdPropsSelector: (_: FlexState, props: {
    dashboardId: string;
}) => string;
export declare const createDashboardByTabIdSelector: () => import("reselect").OutputParametricSelector<FlexState, {
    dashboardId: string;
}, any, (res1: any, res2: string) => any>;
export declare const dashboardsFilterSelector: (_: FlexState, ownProps: {
    dashboardsFilter: (d: ProjectDashboard | AnalyticalDashboard) => boolean;
}) => (d: ProjectDashboard | AnalyticalDashboard) => boolean;
export declare const projectDashboardsSelector: (state: FlexState) => {
    [dashboardId: string]: ProjectDashboard;
};
export declare const projectDashboardsArraySelector: import("reselect").OutputSelector<FlexState, ProjectDashboard[], (res: {
    [dashboardId: string]: ProjectDashboard;
}) => ProjectDashboard[]>;
export declare const filteredProjectDashboards: import("reselect").OutputParametricSelector<FlexState, {
    dashboardsFilter: (d: ProjectDashboard | AnalyticalDashboard) => boolean;
}, ProjectDashboard[], (res1: ProjectDashboard[], res2: (d: ProjectDashboard | AnalyticalDashboard) => boolean) => ProjectDashboard[]>;
export declare const analyticalDashboardsSelector: (state: FlexState) => {
    [dashboardId: string]: AnalyticalDashboard;
};
export declare const analyticalDashboardsArraySelector: import("reselect").OutputSelector<FlexState, AnalyticalDashboard[], (res: {
    [dashboardId: string]: AnalyticalDashboard;
}) => AnalyticalDashboard[]>;
export declare const filteredAnalyticalDashboards: import("reselect").OutputParametricSelector<FlexState, {
    dashboardsFilter: (d: ProjectDashboard | AnalyticalDashboard) => boolean;
}, AnalyticalDashboard[], (res1: AnalyticalDashboard[], res2: (d: ProjectDashboard | AnalyticalDashboard) => boolean) => AnalyticalDashboard[]>;
export declare const analyticalDashboardsByIdSelector: import("reselect").OutputParametricSelector<FlexState, {
    dashboardId: string;
}, AnalyticalDashboard, (res1: {
    [dashboardId: string]: AnalyticalDashboard;
}, res2: string) => AnalyticalDashboard>;
export declare const dashboardCategorySelector: (state: FlexState) => string;
export declare const dashboardAuthorSelector: (state: FlexState) => string;
export declare const createDrillableItemsByIdSelector: () => import("reselect").OutputParametricSelector<FlexState, {
    dashboardId: string;
}, string[], (res1: {
    [dashboardId: string]: string[];
}, res2: string) => string[]>;
export declare const drillableItemsSelector: (state: FlexState) => {
    [dashboardId: string]: string[];
};
export declare const drillableItemsByIdSelector: import("reselect").OutputParametricSelector<FlexState, {
    dashboardId: string;
}, string[], (res1: {
    [dashboardId: string]: string[];
}, res2: string) => string[]>;

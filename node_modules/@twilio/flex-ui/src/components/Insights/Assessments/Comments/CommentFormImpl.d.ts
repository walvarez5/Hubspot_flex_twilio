import * as React from "react";
import { IComment, ICommentCategory } from "../Questionnaire";
export declare const CommentInput: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: React.ElementType;
}, React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>, {}>;
export interface CommentFormStateProps {
    commentCategories: Array<ICommentCategory>;
    submitComment: (segmentId: string | undefined, value: string, categoryId: string, categoryName: string) => Promise<any>;
}
export interface CommentFormDispatchProps {
    updateComment: (comment: IComment) => void;
}
export interface CommentFormOwnProps {
    segmentId: string;
    onSubmit: () => void;
}
type CommentFormProps = CommentFormOwnProps & CommentFormStateProps & CommentFormDispatchProps;
interface CommentFormState {
    value: string;
    selectedCategory: string;
    submitting: boolean;
}
export declare class CommentFormImpl extends React.PureComponent<CommentFormProps, CommentFormState> {
    state: CommentFormState;
    static getDerivedStateFromProps(props: CommentFormProps, state: CommentFormState): CommentFormState | {
        selectedCategory: string;
    };
    onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;
    onCategorySelect: (event: React.ChangeEvent<HTMLSelectElement>) => void;
    onSubmit: () => Promise<void>;
    render(): JSX.Element;
}
export {};

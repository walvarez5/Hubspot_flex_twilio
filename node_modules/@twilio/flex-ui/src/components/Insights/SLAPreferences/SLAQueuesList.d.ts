import * as React from "react";
import { QueuesConfig } from "../../../state/QueuesState/QueuesStateTypes";
interface Queue {
    sid: string;
    friendly_name: string;
}
interface Channel {
    sid: string;
    unique_name: string;
    friendly_name: string;
}
interface SLAQueuesListOwnProps {
    onEditQueue: (sid: string) => void;
}
interface SLAQueuesListStateProps {
    queueConfigurations: Exclude<QueuesConfig["queue_configurations"], null>;
    channelConfigurations: Exclude<QueuesConfig["queue_channel_configurations"], null>;
    hasFetched: boolean;
    queues: Queue[];
    channelsBySid: {
        [channel_sid: string]: Channel;
    };
    channelSids: string[];
    error: Error | null;
}
type SLAQueuesListProps = SLAQueuesListStateProps & SLAQueuesListOwnProps;
export declare class SLAQueuesListImpl extends React.Component<SLAQueuesListProps> {
    constructor(props: SLAQueuesListProps);
    private renderFriendlyNameHeader;
    private renderFriendlyName;
    private renderDailyMetricsResetHeader;
    private renderDailyMetricsReset;
    private renderChannelServiceLevelsHeader;
    private renderChannelServiceLevels;
    handleRowClick: (q: Queue) => void;
    private getQueueKey;
    render(): JSX.Element;
}
export declare const SLAQueuesList: import("react-redux").ConnectedComponent<typeof SLAQueuesListImpl, import("react-redux").Omit<React.ClassAttributes<SLAQueuesListImpl> & SLAQueuesListStateProps & SLAQueuesListOwnProps, "error" | "queues" | "hasFetched" | "queueConfigurations" | "channelConfigurations" | "channelsBySid" | "channelSids">>;
export {};

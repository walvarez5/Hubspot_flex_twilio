import { Identifier, IdentifiersResponse, Trait, TraitsResponse } from "@twilio/flex-sdk";
import hoistNonReactStatics from "hoist-non-react-statics";
import React, { Dispatch } from "react";
export declare enum PROFILE_CONNECTOR_CONTEXT_ACTION_NAME {
    SET_BRIDGE_LABEL = "SET_BRIDGE_LABEL",
    SET_CDP_DEGRADATION_WARNING = "SET_CDP_DEGRADATION_WARNING",
    SET_CRM_ENABLED = "SET_CRM_ENABLED",
    SET_DETAILS_ENABLED = "SET_DETAILS_ENABLED",
    SET_DISPLAY_NAME_CONFIG = "SET_DISPLAY_NAME_CONFIG",
    SET_DISPLAY_NAME_FOR_TASK = "SET_DISPLAY_NAME_FOR_TASK",
    SET_HISTORY_ENABLED = "SET_HISTORY_ENABLED",
    SET_HIGHLIGHTS_ENABLED = "SET_HIGHLIGHTS_ENABLED",
    SET_HEADER_VISIBILITY = "SET_HEADER_VISIBILITY",
    SET_IDENTIFIERS = "SET_IDENTIFIERS",
    SET_PROFILE_CONNECTOR_FOR_TASK = "SET_PROFILE_CONNECTOR_FOR_TASK",
    SET_SEARCH_IDENTIFIERS = "SET_SEARCH_IDENTIFIERS",
    SET_SHOW_UNIDENTIFIED_PROFILE_ENABLED = "SET_SHOW_UNIDENTIFIED_PROFILE_ENABLED",
    SET_TRAITS = "SET_TRAITS",
    UNSET_CDP_DEGRADATION_WARNING = "UNSET_CDP_DEGRADATION_WARNING",
    UNSET_PROFILE_CONNECTOR_FOR_TASK = "UNSET_PROFILE_CONNECTOR_FOR_TASK",
    SET_PROFILE_SEARCH_VIEW_STATE = "SET_PROFILE_SEARCH_VIEW_STATE"
}
export interface TaskProfileConnectorContextProps {
    profileConnector?: IProfileConnector;
}
export interface IProfileConnector {
    contextSid?: string;
    displayName?: string;
    sid?: string;
    taskSid: string;
    unique_name?: string;
}
export declare const profileConnectorContextInitialValue: {
    state: ProfileConnectorContextProps;
};
export interface CdpDegradationWarning {
    code: number;
    message: string;
}
interface UnifySettings {
    agentCopilot?: {
        config: {
            enabledQueues: [] | null;
            displayNotes: boolean;
            displaySentiment: boolean;
        };
    };
    bridgeLabel?: string;
    cdpDegradationWarning?: CdpDegradationWarning;
    detailsEnabled: boolean;
    displayNameConfig?: Trait[];
    highlightsEnabled: boolean;
    historyEnabled: boolean;
    identifiers?: Identifier[];
    searchIdentifiers?: Identifier[];
    showUnidentifiedProfileEnabled: boolean;
    traits?: Trait[];
    showCustomerHeader: boolean;
    showProfileSearchView: boolean;
}
export interface ProfileConnectorContextProps extends UnifySettings {
    profileConnectors: Map<string, IProfileConnector> | null;
}
export type ProfileConnectorStateAction = {
    type: PROFILE_CONNECTOR_CONTEXT_ACTION_NAME.SET_IDENTIFIERS;
    payload: IdentifiersResponse;
} | {
    type: PROFILE_CONNECTOR_CONTEXT_ACTION_NAME.SET_SEARCH_IDENTIFIERS;
    payload: Identifier[];
} | {
    type: PROFILE_CONNECTOR_CONTEXT_ACTION_NAME.SET_TRAITS;
    payload: TraitsResponse;
} | {
    type: PROFILE_CONNECTOR_CONTEXT_ACTION_NAME.SET_PROFILE_CONNECTOR_FOR_TASK;
    payload: {
        profileConnector?: IProfileConnector;
        taskSid: string;
    };
} | {
    type: PROFILE_CONNECTOR_CONTEXT_ACTION_NAME.UNSET_PROFILE_CONNECTOR_FOR_TASK;
    payload: string;
} | {
    type: PROFILE_CONNECTOR_CONTEXT_ACTION_NAME.SET_DETAILS_ENABLED;
    payload: boolean;
} | {
    type: PROFILE_CONNECTOR_CONTEXT_ACTION_NAME.SET_HISTORY_ENABLED;
    payload: boolean;
} | {
    type: PROFILE_CONNECTOR_CONTEXT_ACTION_NAME.SET_HIGHLIGHTS_ENABLED;
    payload: boolean;
} | {
    type: PROFILE_CONNECTOR_CONTEXT_ACTION_NAME.SET_HEADER_VISIBILITY;
} | {
    type: PROFILE_CONNECTOR_CONTEXT_ACTION_NAME.SET_SHOW_UNIDENTIFIED_PROFILE_ENABLED;
    payload: boolean;
} | {
    type: PROFILE_CONNECTOR_CONTEXT_ACTION_NAME.SET_BRIDGE_LABEL;
    payload: string;
} | {
    type: PROFILE_CONNECTOR_CONTEXT_ACTION_NAME.SET_DISPLAY_NAME_FOR_TASK;
    payload: {
        taskSid: string;
        displayName: string;
    };
} | {
    type: PROFILE_CONNECTOR_CONTEXT_ACTION_NAME.SET_DISPLAY_NAME_CONFIG;
    payload: Array<{
        from: string;
        to: string;
    }>;
} | {
    type: PROFILE_CONNECTOR_CONTEXT_ACTION_NAME.SET_CDP_DEGRADATION_WARNING;
    payload: CdpDegradationWarning;
} | {
    type: PROFILE_CONNECTOR_CONTEXT_ACTION_NAME.UNSET_CDP_DEGRADATION_WARNING;
} | {
    type: PROFILE_CONNECTOR_CONTEXT_ACTION_NAME.SET_PROFILE_SEARCH_VIEW_STATE;
    payload: boolean;
};
export declare function profileConnectorContextReducer(state?: ProfileConnectorContextProps, action?: ProfileConnectorStateAction): ProfileConnectorContextProps;
export declare const ProfileConnectorContext: React.Context<ProfileConnectorContextProps>;
/**
 * The withProfileConnectorContext() helper function creates a
 * Higher-Order Component that hydrates the children component's
 * profileConnector prop with the related task's profile connector object.
 * This HOC is intended to be wrapped with withTaskContext HOC so taskSid is populated correctly.
 * @since 2.9.0
 * @name withProfileConnectorContext
 * @kind function
 * @memberOf context-providers
 * @param {React.ReactElement<any>} Component Any user-defined React Component.
 * @example
 * Example usage:
 * <MyComponent />
 * @returns {React.ReactElement<any>} `withProfileConnectorContext()` creates a HOC that hydrates the children component's profileConnector prop with the related task's profile connector object.
 */
export declare function withProfileConnectorContext<C extends React.ComponentType<React.ComponentProps<C>>>(Component: C): {
    new (props: (Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }) | Readonly<Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, context: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<React.ComponentProps<C>, keyof ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    readonly displayName: string;
    contextType?: React.Context<any> | undefined;
} & hoistNonReactStatics.NonReactStatics<C, {}>;
interface ProfileConnectorContextProviderProps {
    children: React.ReactNode;
}
export declare const ProfileConnectorContextProvider: ({ children }: ProfileConnectorContextProviderProps) => JSX.Element;
export declare class ProfileConnectorContextActions {
    private static _dispatcher;
    static get dispatcher(): Dispatch<ProfileConnectorStateAction>;
    static set dispatcher(dispatcher: Dispatch<ProfileConnectorStateAction>);
    static setBridgeLabel(label: string): void;
    static setCdpDegradationWarning(error: CdpDegradationWarning): void;
    static setDetailsEnabled(isEnabled: boolean): void;
    static setDisplayName(taskSid: string, displayName: string): void;
    static setDisplayNameConfig(traits: {
        from: string;
        to: string;
    }[]): void;
    static setHighlightsEnabled(isEnabled: boolean): void;
    static setHistoryEnabled(isEnabled: boolean): void;
    static setIdentifiers(identifiers: IdentifiersResponse): void;
    static setProfileConnectorForTask(profileConnector: IProfileConnector): void;
    static setSearchIdentifiers(identifiers: Array<Identifier>): void;
    static setShowUnidentifiedProfileEnabled(isEnabled: boolean): void;
    static setTraits(traits: TraitsResponse): void;
    static unsetCdpDegradationWarning(): void;
    static unsetProfileConnectorForTask(taskSid: string): void;
    static showProfileSearchView(state: boolean): void;
}
export {};

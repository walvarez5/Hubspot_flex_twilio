import { Theme } from "@emotion/react";
import { DateRangeCombobox, DrilldownConfig, FilterParamsObj, ListItemsObj, Message, MetricsRow, MetricsScore, PageInfo, PickedObjectType, TaskRouterResource, Team, TeamMember, Tier, TrendOptionsType } from "./types";
export declare const FILTER_LIMIT = 5;
export declare enum CSATColour {
    HIGH = "#51AD5E",
    LOW = "#C5352C",
    NEUTRAL = "#001A84"
}
export declare enum IconColour {
    WARN = "#C72323",
    SUCCESS = "#51AD5E"
}
export declare enum DataHighlightType {
    NONE = "NONE",
    WARN = "WARN",
    ERROR = "ERROR"
}
export declare enum ReportType {
    METRICS = "METRICS",
    SUMMARY = "SUMMARY",
    TREND = "TREND"
}
export declare enum TrendDirection {
    UP = "up",
    DOWN = "down"
}
export declare enum ColumnSortDirection {
    ASC = "ascending",
    DESC = "descending",
    NONE = "none"
}
export declare enum Participant {
    CUSTOMER = "Customer",
    AGENT = "Agent"
}
export declare const SortDirectionMap: {
    ascending: string;
    descending: string;
    none: string;
};
export declare enum SortColumn {
    SCORE = "score",
    RECORD_COUNT = "record_count",
    TIER_RATE = "tier_rate"
}
export declare enum TableHeaders {
    AVERAGE_SCORE = "Average score",
    AVERAGE_TIME = "Average time",
    TOTAL_INTERACTIONS = "Total interactions",
    NEGATIVE_INTERACTIONS_CSAT = "% with negative CSAT",
    NEGATIVE_INTERACTIONS_CUSTOMER_EFFORT = "% with high customer effort",
    NEGATIVE_INTERACTIONS_AGENT_EXPERIENCE = "% with low agent exp",
    NEGATIVE_INTERACTIONS_REPEAT_RISK = "% with high repeat call risk"
}
export declare enum InsightCategory {
    PREDICTIVE_SCORES = "predictive_scores",
    AGENT = "agent",
    QUEUE = "queue",
    CHANNEL = "channel"
}
export declare enum ReportName {
    PREDICTIVE_SCORES = "PREDICTIVE_SCORES",
    CHANNEL_METRICS = "CHANNEL_METRICS",
    AGENT_METRICS = "AGENT_METRICS",
    AGENTS_CSAT_SUMMARY = "AGENTS_CSAT_SUMMARY",
    QUEUE_METRICS = "QUEUE_METRICS",
    TOPIC_METRICS = "TOPIC_METRICS",
    CONVERSATION_METRICS = "CONVERSATION_METRICS",
    TREND_METRICS = "TREND_METRICS"
}
export declare enum MetricType {
    PREDICTED_CSAT = "~predicted-csat",
    CUSTOMER_EFFORT = "~customer-effort",
    AGENT_EXPERIENCE = "~agent-experience",
    MULTITOUCH_RISK = "~multitouch-risk"
}
export declare enum MetricBadgeType {
    SUCCESS = "success",
    ERROR = "error",
    NEUTRAL = "decorative10"
}
export declare enum ScoreStatusType {
    POSITIVE = "positive",
    NEGATIVE = "negative"
}
export declare enum Granularity {
    DAYS = "DAYS",
    WEEKS = "WEEKS",
    MONTHS = "MONTHS",
    QUARTERS = "QUARTERS"
}
export declare enum FilterType {
    Channels = "Channels",
    Queues = "Queues",
    Workers = "Workers",
    Topics = "Topics",
    Teams = "Teams"
}
export declare enum ConversationRating {
    POSITIVE = "Positive",
    NEGATIVE = "Negative",
    NEUTRAL = "Neutral",
    NONE = "None"
}
export declare enum MetricStringKeys {
    TOPIC_METRICS = "TOPIC_METRICS",
    CHANNEL_CSAT = "CHANNEL_CSAT",
    AGENT_SUMMARY = "AGENT_SUMMARY",
    TREND = "TREND",
    POPOVER = "POPOVER",
    TABLE_HEADER = "TABLE_HEADER"
}
export declare enum GranularityStringKeys {
    TREND_TITLE = "TREND_TITLE"
}
export declare enum ResourceType {
    CHANNEL = "Channel",
    QUEUE = "Queue",
    TOPIC = "Topic",
    AGENT = "Agent",
    CONVERSATION = "Conversation"
}
export declare enum ModuleType {
    OUTLIER = "outlier",
    FACTORS = "factors",
    CORRELATION = "correlation"
}
export declare enum MetricRatingType {
    High = "High",
    Neutral = "Neutral",
    Low = "Low"
}
export declare const CHART_BASE_HEIGHT = 410;
export declare const CHART_ROW_HEIGHT = 60;
export declare const PERCENTAGE_WARN_THRESHOLD = 30;
export declare const PERCENTAGE_ERROR_THRESHOLD = 60;
export declare const DEFAULT_TEAM = "QO00000000000000000000000000000000";
export declare const DATE_RANGE_OPTIONS: DateRangeCombobox[];
export declare const cardGroupStyle: React.CSSProperties;
export declare const metricRating: (selectedMetric: string) => Record<MetricRatingType, string>;
export declare const MetricToTierIdMap: (selectedMetric: string) => Record<MetricRatingType, string>;
export declare const getAppliedInsightsKey: () => string;
export declare const isSupervisorRoleWithTeamsEnabled: () => boolean;
export declare const fetchFiltersFromLocalStorage: () => any;
export declare const parseFilters: (filters: FilterParamsObj) => FilterParamsObj;
export declare const selectedMetricMap: (selectedMetric: string) => string;
export declare const tierIdColorMap: (selectedMetric: string) => Record<MetricRatingType, CSATColour>;
export declare const returnSelectedTeam: () => string | undefined;
export declare const DATE_RANGE_DEFAULT_OPTION: DateRangeCombobox;
export declare const isParticipantCustomer: (conversation: Message) => boolean;
export declare const METRICS_INITIAL_STATE: MetricsScore[];
export declare const EMPTY_ROWS_DATA: {
    rows: MetricsRow[];
    meta: PageInfo;
};
export declare const EMPTY_FILTERS: FilterParamsObj;
export declare const pick: (targetObject: PickedObjectType, propertiesList: string[]) => PickedObjectType;
export declare const pickBy: (targetObject: PickedObjectType, func: (value: string) => boolean) => PickedObjectType;
export declare const assignHighlightType: (percentageOfNegativeInteractions: string) => DataHighlightType;
export declare const EMPTY_DRILLDOWN_CONFIG: DrilldownConfig;
export declare const returnPercentageOfNegativeInteractions: (recordCount: number, tiers: Tier[], selectedMetric: string) => string;
export declare const returnStartDate: (endDate: string, granularity: Granularity) => Date;
export declare const modifyResponse: (listOfItems: TaskRouterResource[]) => ListItemsObj;
export declare const modifyTopics: (topics: string[]) => TaskRouterResource[];
export declare const modifyTeams: (teams: Team[]) => TaskRouterResource[];
export declare const modifyWorkers: (workers: TaskRouterResource[]) => TaskRouterResource[];
export declare const modifyTeamMembers: (teamMembers: TeamMember[]) => TaskRouterResource[];
export declare const labelToFilterkeyMap: (label: string) => string;
export declare const getFilterCountOrAll: (filterObject: ListItemsObj | string[]) => number | "All";
export declare const trendChartOptions: (selectedMetric: string, initialStateCheck: boolean) => TrendOptionsType;
export declare const TitleStrings: (selectedMetric: string) => Record<MetricStringKeys, string>;
export declare const TierRatingMap: (selectedMetric: string) => {
    [key: string]: string;
};
export declare const GranularityStrings: (granularity: Granularity) => Record<GranularityStringKeys, string>;
export declare const returnMetricBadgeType: (trendDirection: string) => MetricBadgeType;
export declare const convertTimestamp: (granularity: Granularity, timeStamp: string) => string;
export declare const conversationTimePeriod: (conversationStartTime: string, conversationEndTime: string) => string;
export declare const AgentTableHeaderToMetricTypeMap: (tableHeader: string) => MetricType;
export declare const validateAndFormatDateWithTimezone: (timeStamp: string, format: string) => string;
export declare const constructAllChannelRow: (metricRows: MetricsRow[], selectedMetric: string) => MetricsRow;
export declare const returnTiersBasedOnScoreId: (row: MetricsRow, scoreId: string) => Tier[];
export declare const formatGranularityString: (granularityStr: string) => string;
export declare const returnListOfRowId: (metricData: MetricsRow[]) => string[];
export declare const returnListOfParticipantId: (conversationData: Message[]) => string[];
export declare const hasFiltersApplied: (filterObj: Partial<FilterParamsObj>) => boolean;
export declare const selectedTeamPresent: (teamsList: Team[], selectedTeam: string) => Team | undefined;
export declare const HighchartTheme: (theme: Theme) => {
    chart: {
        backgroundColor: string;
    };
    plotOptions: {
        series: {
            borderColor: string;
        };
        pie: {
            dataLabels: {
                color: string;
            };
        };
    };
    legend: {
        itemStyle: {
            color: string;
        };
    };
    yAxis: {
        title: {
            style: {
                color: string;
            };
        };
        labels: {
            style: {
                color: string;
            };
        };
    };
    xAxis: {
        labels: {
            style: {
                color: string;
            };
        };
    };
};

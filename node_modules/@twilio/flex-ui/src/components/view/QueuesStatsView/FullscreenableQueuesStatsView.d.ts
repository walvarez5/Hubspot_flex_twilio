import { QueuesStatsViewComponent } from "./QueuesStatsView";
export declare const FullscreenableQueuesStatsView: {
    new (props: import("./QueuesStatsView.definitions").QueuesStatsViewProps | Readonly<import("./QueuesStatsView.definitions").QueuesStatsViewProps>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<import("./QueuesStatsView.definitions").QueuesStatsViewProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<import("./QueuesStatsView.definitions").QueuesStatsViewProps> & Readonly<{
            children?: import("react").ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<import("./QueuesStatsView.definitions").QueuesStatsViewProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<import("./QueuesStatsView.definitions").QueuesStatsViewProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<import("./QueuesStatsView.definitions").QueuesStatsViewProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<import("./QueuesStatsView.definitions").QueuesStatsViewProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import("./QueuesStatsView.definitions").QueuesStatsViewProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<import("./QueuesStatsView.definitions").QueuesStatsViewProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<import("./QueuesStatsView.definitions").QueuesStatsViewProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: import("./QueuesStatsView.definitions").QueuesStatsViewProps, context: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<import("./QueuesStatsView.definitions").QueuesStatsViewProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<import("./QueuesStatsView.definitions").QueuesStatsViewProps> & Readonly<{
            children?: import("react").ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<import("./QueuesStatsView.definitions").QueuesStatsViewProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<import("./QueuesStatsView.definitions").QueuesStatsViewProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<import("./QueuesStatsView.definitions").QueuesStatsViewProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<import("./QueuesStatsView.definitions").QueuesStatsViewProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import("./QueuesStatsView.definitions").QueuesStatsViewProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<import("./QueuesStatsView.definitions").QueuesStatsViewProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<import("./QueuesStatsView.definitions").QueuesStatsViewProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    readonly displayName: string;
    fullscreen: Partial<import("../../fullscreen").FullscreenConfig>;
    contextType?: import("react").Context<any> | undefined;
} & import("hoist-non-react-statics").NonReactStatics<typeof QueuesStatsViewComponent, {}>;

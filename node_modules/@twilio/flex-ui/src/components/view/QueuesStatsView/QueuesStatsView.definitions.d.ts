import { ContentFragment, Theme } from "../../../flex-ui-core/src";
import * as React from "react";
import { FlexContextType } from "../../../core/ContextProvider";
import { ViewAdditionalProps } from "../../ViewCollection";
export declare enum QueueStatsViewChildrenKeys {
    tiles = "tiles",
    table = "table",
    queuesStatsHeader = "queues-stats-header",// not documented
    queuesStatsTableHeader = "queues-stats-table-header",// not documented
    queueStatsFilterPanel = "queueStats-filter-panel",// not documented
    insightsFilter = "insights-filter",// not documented
    insightsFilterTable = "insights-filter-table",// not documented
    newMetricsAlert = "queues-stats-new-metrics-alert",
    conditionalHighlighting = "conditional-highlighting"
}
/**
 * QueuesStatsView Props
 *
 * @typedef QueuesStatsView.QueuesStatsViewProps
 * @property {ContextProvider.FlexContextType} [context] context
 * @property {React.ReactElement<React.ComponentFragment>} [children=undefined] - Children must be wrapped in `ContentFragment`
 * @property {RouteComponentProps} [route] - If you are using custom router and want to pass the route props to children
 */
export type QueuesStatsViewProps = Omit<QueuesStatsViewImplOwnProps, "isViewActive">;
/**
 * Props passed to children of QueuesStatsView
 *
 * @typedef QueuesStatsView.QueuesStatsViewChildrensProps
 * @property {boolean} isLoading Is realtime queues stats data being fetched
 * @property {boolean} hasNoData If true, there are no queues set up
 * @property {boolean} [isViewActive=undefined] True/false if part of a {@link ViewCollection}, otherwise undefined
 * @property {RouteComponentProps} [route=undefined] Route component props if part of a {@link ViewCollection} or the route prop passed to {@link QueuesStatsView}
 * @property {Theme} theme theme
 */
export type QueuesStatsViewChildrenProps = Omit<QueuesStatsViewImplProps, "children"> & {
    theme: Theme;
};
export interface QueueStatsViewState {
    showNewMetricsAlert: string;
}
export interface QueuesStatsViewImplStateProps {
    isLoading: boolean;
    hasNoData: boolean;
    error?: Error;
    isFilterPanelOpen?: boolean;
    queuesCountText?: string;
    queuesCount?: number;
    isFirstTimeCardsExperience?: boolean;
}
export type QueuesStatsViewImplOwnProps = ViewAdditionalProps & {
    context?: FlexContextType;
    children?: React.ReactElement<ContentFragment>;
};
export type QueuesStatsViewImplProps = QueuesStatsViewImplStateProps & QueuesStatsViewImplOwnProps;

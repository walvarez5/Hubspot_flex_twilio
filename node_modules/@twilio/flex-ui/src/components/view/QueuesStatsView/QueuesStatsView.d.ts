import { DynamicContentStore } from "../../../flex-ui-core/src";
import * as React from "react";
import { FlexState } from "../../../store";
import { AggregatedQueuesDataTiles, QueuesDataTable } from "../../queuesStats";
import { QueueStatsViewChildrenKeys, QueuesStatsViewImplProps, QueuesStatsViewImplStateProps, QueuesStatsViewProps } from "./QueuesStatsView.definitions";
import { QueuesStatsViewImpl } from "./QueuesStatsViewImpl";
export declare const mapStateToProps: (state: FlexState) => QueuesStatsViewImplStateProps;
export declare const ConnectedQueuesStatsViewImpl: import("react-redux").ConnectedComponent<typeof QueuesStatsViewImpl, import("react-redux").Omit<React.ClassAttributes<QueuesStatsViewImpl> & QueuesStatsViewImplStateProps & import("../../ViewCollection").ViewAdditionalProps & {
    context?: import("../../..").FlexContextType;
    children?: React.ReactElement<import("@twilio/flex-ui-core").ContentFragment>;
}, "error" | "isLoading" | "isFilterPanelOpen" | "isFirstTimeCardsExperience" | "queuesCount" | "hasNoData" | "queuesCountText"> & import("../../ViewCollection").ViewAdditionalProps & {
    context?: import("../../..").FlexContextType;
    children?: React.ReactElement<import("@twilio/flex-ui-core").ContentFragment>;
}>;
/**
 * @classdesc Renders the real-time queues dashboard.
 * @alias QueuesStatsView
 * @component
 * @hideconstructor
 * @param {QueuesStatsViewProps} props - QueuesStatsView props
 * @category Components / Programmable
 * @subcategory Components
 */
export declare class QueuesStatsViewComponent extends React.PureComponent<QueuesStatsViewProps> {
    static readonly displayName = "QueuesStatsView";
    /**
     * Dynamic content store
     *
     * @name Content
     * @static
     * @type {DynamicContentStore<QueuesStatsViewImplProps, QueueStatsViewChildrenKeys>}
     * @memberof QueuesStatsView
     * @example QueuesStatsView.Component
     * @readonly
     */
    static readonly Content: DynamicContentStore<QueuesStatsViewImplProps, QueueStatsViewChildrenKeys>;
    /**
     * Reference for the view's AggregatedQueuesDataTiles component
     *
     * @name Tiles
     * @static
     * @type {AggregatedQueuesDataTiles}
     * @memberof QueuesStatsView
     * @example QueuesStatsView.Tiles
     * @readonly
     */
    static readonly Tiles: typeof AggregatedQueuesDataTiles;
    /**
     * Reference for the view's QueuesDataTable component
     *
     * @name Table
     * @static
     * @type {QueuesDataTable}
     * @memberof QueuesStatsView
     * @example QueuesStatsView.Table
     * @readonly
     */
    static readonly Table: typeof QueuesDataTable;
    render(): JSX.Element;
}

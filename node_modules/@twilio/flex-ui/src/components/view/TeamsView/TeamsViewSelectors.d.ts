import { FilterDefinition } from "../../../flex-ui-core/src";
import { AppliedFilter, FilterConditions } from "../../../state/Supervisor/SupervisorState.definitions";
import { FlexState } from "../../../store";
import { WorkerListFilter } from "../../supervisor/WorkersDataTable";
export declare const searchFilterSelector: import("reselect").OutputSelector<FlexState, {
    name: string;
    condition: FilterConditions;
    values: string;
}, (res: string) => {
    name: string;
    condition: FilterConditions;
    values: string;
}>;
export declare const appliedFiltersSelector: (state: FlexState) => AppliedFilter[];
export declare const appliedFiltersCountSelector: import("reselect").OutputSelector<FlexState, number, (res: AppliedFilter[]) => number>;
export declare const filterQuerySelector: import("reselect").OutputParametricSelector<FlexState, string | AppliedFilter | AppliedFilter[], string, (res1: string | AppliedFilter | AppliedFilter[], res2: string, res3: AppliedFilter[], res4: {
    name: string;
    condition: FilterConditions;
    values: string;
}) => string>;
export declare const legacyFiltersSelector: (filters?: WorkerListFilter[]) => WorkerListFilter[];
export declare const taskBySidSelector: import("reselect").OutputParametricSelector<FlexState, string, import("../../..").ITask<Record<string, any>>, (res1: import("../../../state/State.definition").SupervisorWorkerState[], res2: import("../../../state/State.definition").SupervisorWorkerState, res3: string) => import("../../..").ITask<Record<string, any>>>;
export declare const workerBySidSelector: import("reselect").OutputParametricSelector<FlexState, string, import("../../..").IWorker<any>, (res1: import("../../../state/State.definition").SupervisorWorkerState[], res2: import("../../../state/State.definition").SupervisorWorkerState, res3: string) => import("../../..").IWorker<any>>;
export declare const activitiesFilterSelector: import("reselect").OutputSelector<FlexState, FilterDefinition, (res: [string, any][]) => FilterDefinition>;

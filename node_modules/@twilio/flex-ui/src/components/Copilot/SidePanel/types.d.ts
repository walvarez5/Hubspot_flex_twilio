import type { BoxProps } from "@twilio-paste/core/box";
import type { ButtonProps } from "@twilio-paste/core/button";
export type BadgeSizes = "default" | "small";
type BadgeBaseProps = {
    children: NonNullable<React.ReactNode>;
    element?: BoxProps["element"];
};
type BadgeButtonProps = HTMLPasteProps<"button"> & {
    as: "button";
    onClick: HTMLPasteProps<"button">["onClick"];
    href?: never;
};
type As = React.ElementType;
type BlockedGlobalHTMLAttrs = "style" | "className" | "color";
type PropsOf<T extends As> = React.ComponentPropsWithoutRef<T>;
type HTMLPasteProps<T extends As> = Omit<PropsOf<T>, "ref" | BlockedGlobalHTMLAttrs>;
export interface SidePanelProps extends HTMLPasteProps<"div"> {
    children?: React.ReactNode;
    label: string;
    element?: BoxProps["element"];
}
export interface SidePanelBodyProps extends HTMLPasteProps<"div"> {
    children?: React.ReactNode;
    element?: BoxProps["element"];
    inTab?: boolean;
}
export interface SidePanelHeaderProps extends HTMLPasteProps<"div"> {
    children?: React.ReactNode;
    element?: BoxProps["element"];
}
export interface SidePanelContainerProps extends HTMLPasteProps<"div"> {
    children: React.ReactNode;
    i18nCloseSidePanelTitle?: string;
    i18nOpenSidePanelTitle?: string;
    sidePanelId?: string;
    isOpen: boolean;
    element?: BoxProps["element"];
}
export type ButtonBadgeProps = BadgeBaseProps & Omit<BadgeButtonProps, "onClick"> & {
    onClick?: BadgeButtonProps["onClick"];
};
type SidePanelButtonBaseProps = {
    id?: string;
    toggle?: () => void;
};
export type SidePanelButtonProps = SidePanelButtonBaseProps & Omit<ButtonProps, "as"> & {
    element?: BoxProps["element"];
};
export type SidePanelBadgeButtonProps = SidePanelButtonBaseProps & Omit<ButtonBadgeProps, "as"> & {
    element?: BoxProps["element"];
};
export interface SidePanelPushContentWrapperProps extends HTMLPasteProps<"div"> {
    children: React.ReactNode;
    element?: BoxProps["element"];
}
export interface SidePanelContextProps {
    sidePanelId: string;
    isOpen: boolean;
    i18nCloseSidePanelTitle: string;
    i18nOpenSidePanelTitle: string;
}
export {};

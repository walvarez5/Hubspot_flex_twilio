import { BadgePropsWithDefaultPropsAsOptional, ComponentBadgeProps } from "../ComponentBadgeProps.definitions";
/**
 * Properties of MainHeader.
 * @typedef MainHeader.MainHeaderProps
 * @property {string} [logoUrl=undefined] - Logo URL shown in the main header.
 * @property {string} [logoAltText=undefined] - Logo alt text shown in the main header.
 * @property {ComponentBadgeProps<MainHeaderProps>} [Badge] - Set of properties for internal Badge element.
 * @property {number | Function} [Badge.children] - Children of internal Badge component.
 * @property {boolean } [isSideNavOpen] - Whether the Sidebar is open or not.
 * @property {boolean } [isOutboundDialerOpen] - Whether the Outbound dialer is open or not.
 * @property {DynamicContentStore.DynamicComponentChildren<MainHeaderChildrenProps>} [children] - children
 */
export interface MainHeaderProps {
    logoUrl?: string;
    logoAltText?: string;
    Badge?: ComponentBadgeProps<MainHeaderProps>;
    isSideNavOpen?: boolean;
    isOutboundDialerOpen?: boolean;
}
/**
 * Properties of MainHeader.
 * @typedef {MainHeaderProps} MainHeader.MainHeaderChildrenProps
 * @property {boolean} [incomingTasks] - Deprecated - Whether there are any incoming tasks or not.
 * @property {boolean} [isLiveVoiceCall] - Whether there is a live voice call.
 * @property {boolean} [isLiveVoiceConnection] - Deprecated: use isLiveVoiceCall.
 * @property {Badge.BadgeProps} [Badge] - Set of properties for internal Badge element.
 */
export interface MainHeaderChildrenProps extends MainHeaderProps {
    incomingTasks?: boolean;
    isLiveVoiceCall?: boolean;
    isLiveVoiceConnection?: boolean;
    hasIncomingCallReservation?: boolean;
    Badge?: BadgePropsWithDefaultPropsAsOptional;
}
export declare enum MainHeaderChildrenKeys {
    logo = "logo",
    errorUiButton = "errorui-button",
    dialpadButton = "dialpad-button",
    userControls = "user-controls",
    activity = "activity",
    badge = "badge",
    mainHeader = "main-header",
    sideNavButton = "sidenav-button",
    deviceManager = "device-manager",
    localeSelector = "locale-selector",
    conditionalAlerting = "conditional-alerting"
}

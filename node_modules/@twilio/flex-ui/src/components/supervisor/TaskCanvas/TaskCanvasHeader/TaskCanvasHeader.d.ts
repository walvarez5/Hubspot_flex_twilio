import { DynamicContentStore } from "../../../../flex-ui-core/src";
import * as React from "react";
import { TaskContextProps } from "../../../context";
import { SupervisorTaskCanvasHeaderChildrenKeys } from "./TaskCanvasHeader.definitions";
/**
 * @alias Supervisor․TaskCanvasHeader
 * @classdesc This is a container for Supervisor.TaskCanvasHeader.
 * Can be themed with `Theme.Supervisor.TaskCanvas` in [Theme](Theme).
 * @component
 * @hideconstructor
 * @memberof Supervisor
 * @category Components / Programmable
 * @subcategory Components
 */
export declare class TaskCanvasHeader extends React.PureComponent {
    static readonly displayName = "SupervisorTaskCanvasHeader";
    /**
     * Dynamic content store
     *
     * @name Content
     * @static
     * @type {DynamicContentStore<TaskContextProps, SupervisorTaskCanvasHeaderChildrenKeys>}
     * @memberof Supervisor․TaskCanvasHeader
     * @example Supervisor.TaskCanvasHeader.Content
     * @readonly
     */
    static Content: DynamicContentStore<TaskContextProps, SupervisorTaskCanvasHeaderChildrenKeys>;
    render(): JSX.Element;
}
export declare const Connected: {
    new (props: Omit<TaskContextProps, keyof TaskContextProps> | Readonly<Omit<TaskContextProps, keyof TaskContextProps>>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<TaskContextProps, keyof TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<TaskContextProps, keyof TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<TaskContextProps, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<TaskContextProps, keyof TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<TaskContextProps, keyof TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<TaskContextProps, keyof TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<TaskContextProps, keyof TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<TaskContextProps, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<TaskContextProps, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Omit<TaskContextProps, keyof TaskContextProps>, context: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<TaskContextProps, keyof TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<TaskContextProps, keyof TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<TaskContextProps, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<TaskContextProps, keyof TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<TaskContextProps, keyof TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<TaskContextProps, keyof TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<TaskContextProps, keyof TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<TaskContextProps, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<TaskContextProps, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    readonly displayName: string;
    contextType?: React.Context<any> | undefined;
} & import("hoist-non-react-statics").NonReactStatics<{
    (props: TaskContextProps): JSX.Element;
    displayName: string;
} & import("hoist-non-react-statics").NonReactStatics<React.FC<Pick<import("../../..").ThemeProps & TaskContextProps, keyof TaskContextProps> & {
    theme?: import("@emotion/react").Theme;
}>, {}>, {}>;

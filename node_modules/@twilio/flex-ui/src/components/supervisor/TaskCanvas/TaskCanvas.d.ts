import { DynamicContentStore } from "../../../flex-ui-core/src";
import * as React from "react";
import { SupervisorTaskCanvasChildrenKeys, TaskCanvasChildrenProps, TaskCanvasProps } from "./TaskCanvas.definitions";
import { TaskCanvasHeader } from "./TaskCanvasHeader";
import { TaskCanvasTabs } from "./TaskCanvasTabs";
/**
 * @alias Supervisor․TaskCanvas
 * @classdesc This is a container for Supervisor.TaskCanvas
 * Can be themed with `Theme.Supervisor.TaskCanvas` in [Theme](Theme).
 * @component
 * @hideconstructor
 * @category Components / Programmable
 * @subcategory Components
 */
export declare class TaskCanvas extends React.PureComponent<TaskCanvasProps> {
    static readonly displayName = "SupervisorTaskCanvas";
    /**
     * Dynamic content store
     *
     * @name Content
     * @static
     * @type {DynamicContentStore<TaskCanvasChildrenProps, SupervisorTaskCanvasChildrenKeys>}
     * @memberof Supervisor․TaskCanvas
     * @example Supervisor.TaskCanvas.Content
     * @readonly
     */
    static readonly Content: DynamicContentStore<TaskCanvasChildrenProps, SupervisorTaskCanvasChildrenKeys>;
    /**
     * Header
     *
     * @name Header
     * @static
     * @type {TaskCanvasHeader}
     * @memberof Supervisor․TaskCanvas
     * @example Supervisor.TaskCanvas.Header
     * @readonly
     */
    static readonly Header: typeof TaskCanvasHeader;
    /**
     * Tabs
     *
     * @name Tabs
     * @static
     * @type {TaskCanvasTabs}
     * @memberof Supervisor․TaskCanvas
     * @example Supervisor.TaskCanvas.Tabs
     * @readonly
     */
    static readonly Tabs: typeof TaskCanvasTabs;
    render(): JSX.Element;
}
export declare const Connected: {
    new (props: Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps> | Readonly<Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps>>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps>, context: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, keyof import("../../context/TaskContext").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    readonly displayName: string;
    contextType?: React.Context<any> | undefined;
} & import("hoist-non-react-statics").NonReactStatics<{
    (props: TaskCanvasChildrenProps): JSX.Element;
    displayName: string;
} & import("hoist-non-react-statics").NonReactStatics<React.FC<Pick<import("./TaskCanvas.definitions").TaskCanvasImplProps & import("../../context/TaskContext").TaskContextProps & import("../..").ThemeProps, "closeRef" | keyof import("../../context/TaskContext").TaskContextProps> & {
    theme?: import("@emotion/react").Theme;
}>, {}>, {}>;

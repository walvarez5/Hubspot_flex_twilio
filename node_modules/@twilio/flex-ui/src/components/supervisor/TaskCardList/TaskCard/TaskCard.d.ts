import { DynamicContentStore } from "../../../../flex-ui-core/src";
import * as React from "react";
import { SupervisorTaskCardChildrenKeys, TaskCardChildrenProps, TaskCardProps } from "./TaskCard.definitions";
/**
 * @alias Supervisor․TaskCard
 * @classdesc This is a container for TaskCard.
 * Can be themed with `Theme.TaskCard` in [Theme](Theme).
 * @component
 * @hideconstructor
 * @category Components / Programmable
 * @subcategory Components
 */
export declare class TaskCard extends React.PureComponent<TaskCardProps> {
    static displayName: string;
    /**
     * Dynamic content store
     *
     * @name Content
     * @static
     * @type {DynamicContentStore<TaskCard.TaskCardChildrenProps, SupervisorTaskCardChildrenKeys>}
     * @memberof Supervisor․TaskCard
     * @example Supervisor․TaskCard.Content
     * @readonly
     */
    static readonly Content: DynamicContentStore<TaskCardChildrenProps, SupervisorTaskCardChildrenKeys>;
    render(): JSX.Element;
}
export declare const Connected: {
    new (props: Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps> | Readonly<Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps>>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps>, context: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<TaskCardChildrenProps, keyof import("../../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    readonly displayName: string;
    contextType?: React.Context<any> | undefined;
} & import("hoist-non-react-statics").NonReactStatics<{
    (props: TaskCardChildrenProps): JSX.Element;
    displayName: string;
} & import("hoist-non-react-statics").NonReactStatics<React.FC<Pick<Pick<TaskCardChildrenProps & import("../../..").ThemeProps, "theme" | "conference" | "onClick" | "icon" | "task" | "firstLine" | "secondLine" | "call" | "conversation" | "channelDefinition" | "chatChannel"> & Partial<Pick<TaskCardChildrenProps & import("../../..").ThemeProps, "selected" | "highlighted">> & Partial<Pick<{
    highlighted: boolean;
    selected: boolean;
}, never>>, "conference" | "onClick" | "icon" | "selected" | "task" | "firstLine" | "secondLine" | "call" | "conversation" | "channelDefinition" | "chatChannel" | "highlighted"> & {
    theme?: import("@emotion/react").Theme;
}>, {}>, {}>;

import { Profile } from "@twilio/flex-sdk";
import { DynamicContentStore } from "../../../flex-ui-core/src";
import * as React from "react";
import { TaskContextProps } from "../../context";
/**
 * Properties of SearchView.
 * @typedef SearchView.SearchViewProps
 * @property {React.MouseEventHandler<HTMLButtonElement>} [onClickCancel=undefined] - Action to dismiss the search view.
 * @property {string} [uniqueName=flex_connector] - Unique name of profile connector instance associated with segment.
 * @property {string} [isReplacingProfile=false] - show if user is searching to replace a profile
 */
export interface SearchViewProps {
    onClickCancel: React.MouseEventHandler<HTMLButtonElement> | undefined;
    onLinkProfile: (profileConnector: any) => void;
    unlinkProfile?: React.MouseEventHandler<HTMLButtonElement> | undefined;
    uniqueName: string;
    isReplacingProfile?: boolean;
    currentProfile?: Profile | null;
}
/**
 * Properties of SearchView.
 * @typedef {SearchView.SearchViewProps} SearchView.SearchViewChildrenProps
 */
export interface SearchViewChildrenProps extends TaskContextProps, SearchViewProps {
}
/**
 * @private
 * @classdesc This is a container for Search view of [Profile Connector](ProfileConnector).
 * Can be themed with `Theme.ProfileConnector.SearchView` in [Theme](Theme).
 * @component
 * @hideconstructor
 * @param {SearchView.SearchViewProps} props - Properties to be passed to configure this component.
 * @category Components / Programmable
 * @subcategory Components
 * @example
 * import {SearchView } from "@twilio/flex-ui";
 * <SearchView key="container" />
 */
export declare class SearchView extends React.PureComponent<SearchViewProps> {
    static readonly displayName = "SearchView";
    /**
     * Dynamic content store
     * @static
     * @type {DynamicContentStore<SearchView.SearchViewChildrenProps>}
     * @readonly
     * @example
     * import { SegmentContainer } from "@twilio/flex-ui";
     * const content = SegmentContainer.Content;
     */
    static readonly Content: DynamicContentStore<SearchViewChildrenProps>;
    /**
     * Default properties
     * @static
     * @type {SearchView.SearchViewProps}
     * @readonly
     * @example
     * import { SegmentContainer } from "@twilio/flex-ui";
     * const props = SegmentContainer.defaultProps;
     * <SegmentContainer key="container" {...props}/>
     */
    static readonly defaultProps: Partial<SearchViewProps>;
    static updateAll(): void;
    render(): JSX.Element;
}
export declare const Connected: {
    new (props: Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof TaskContextProps> | Readonly<Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof TaskContextProps>>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof TaskContextProps>, context: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    readonly displayName: string;
    contextType?: React.Context<any> | undefined;
} & import("hoist-non-react-statics").NonReactStatics<React.FC<Pick<SearchViewChildrenProps, keyof SearchViewChildrenProps> & {
    theme?: import("@emotion/react").Theme;
}>, {}>;

import { DynamicContentStore } from "../../../flex-ui-core/src";
import React from "react";
import { CustomerProfileViewChildrenKeys, CustomerProfileViewChildrenProps, CustomerProfileViewProps } from "./CustomerProfileView.definitions";
/**
 * @private
 * @classdesc This component renders the profile data of the customer.
 * Can be themed with `Theme.ProfileConnector.CustomerProfileView` in [Theme](Theme).
 * @component
 * @hideconstructor
 * @param {CustomerProfileView.CustomerProfileViewProps} props - Properties to be passed to configure this component.
 * @category Components / Programmable
 * @subcategory Components
 * @example
 * import { CustomerProfileView } from "@twilio/flex-ui";
 * <CustomerProfileView key="container" />
 */
export declare class CustomerProfileView extends React.PureComponent<CustomerProfileViewProps> {
    static readonly displayName = "ProfileView";
    /**
     * Dynamic content store
     * @static
     * @type {DynamicContentStore<CustomerProfileViewChildrenProps, CustomerProfileViewChildrenKeys>}
     * @readonly
     * @example
     * import { CustomerProfileView } from "@twilio/flex-ui";
     * const content = CustomerProfileView.Content;
     */
    static readonly Content: DynamicContentStore<CustomerProfileViewChildrenProps, CustomerProfileViewChildrenKeys>;
    /**
     * Default properties
     * @static
     * @type {CustomerProfileView.CustomerProfileViewProps}
     * @readonly
     * @example
     * import { CustomerProfileView } from "@twilio/flex-ui";
     * const props = CustomerProfileView.defaultProps;
     * <CustomerProfileView key="container" {...props}/>
     */
    static readonly defaultProps: Partial<CustomerProfileViewProps>;
    static updateAll(): void;
    render(): JSX.Element;
}
export declare const Connected: {
    new (props: Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../../context").TaskContextProps> | Readonly<Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../../context").TaskContextProps>>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../context").TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../context").TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../context").TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../context").TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../context").TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../context").TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../../context").TaskContextProps>, context: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../context").TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../context").TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../context").TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../context").TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../context").TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../context").TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    readonly displayName: string;
    contextType?: React.Context<any> | undefined;
} & import("hoist-non-react-statics").NonReactStatics<React.FC<Pick<CustomerProfileViewChildrenProps, keyof CustomerProfileViewChildrenProps> & {
    theme?: import("@emotion/react").Theme;
}>, {}>;

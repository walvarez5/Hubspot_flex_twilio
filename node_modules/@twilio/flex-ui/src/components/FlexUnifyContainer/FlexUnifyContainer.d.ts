import { DynamicContentStore } from "../../flex-ui-core/src";
import * as React from "react";
import { FlexUnifyContainerChildrenKeys, FlexUnifyContainerChildrenProps, FlexUnifyContainerProps } from "./FlexUnifyContainer.definitions";
import { ProfileHeader } from "./ProfileHeaderAndLinkMenu/ProfileHeader";
import { ProfileHeaderText } from "./ProfileHeaderAndLinkMenu/ProfileHeaderText";
import { ProfileHighlights } from "./ProfileHighlights";
import { ProfileConnectorTabs } from "./ProfileConnectorTabs";
/**
 * @classdesc FlexUnifyContainer is the parent component of ProfileView and SearchView.
 * Can be themed with `Theme.FlexUnifyContainer` in [Theme](Theme).
 * @component
 * @hideconstructor
 * @param {FlexUnifyContainer.FlexUnifyContainerProps} props - Properties to be passed to configure this component.
 * @category Components / Programmable
 * @subcategory Components
 * @example
 * import { UnifiedProfilesContainer } from "@twilio/flex-ui";
 * <FlexUnifyContainer key="container" />
 */
export declare class FlexUnifyContainer extends React.PureComponent<FlexUnifyContainerProps> {
    static readonly displayName = "ProfileConnector";
    /**
     * Shortcut for ProfileConnectorTabs component
     * @static
     * @type {ProfileConnectorTabs}
     * @readonly
     */
    static readonly ProfileTabs: typeof ProfileConnectorTabs;
    /**
     * Shortcut for ProfileHeader component
     * @static
     * @type {ProfileHeader}
     * @readonly
     * @since 2.9.0
     */
    static readonly ProfileHeader: typeof ProfileHeader;
    /**
     * Shortcut for ProfileHeaderText component
     * @static
     * @type {ProfileHeaderText}
     * @readonly
     * @since 2.9.0
     */
    static readonly ProfileHeaderText: typeof ProfileHeaderText;
    /**
     * Shortcut for ProfileHighlights component
     * @static
     * @type {ProfileHighlights}
     * @readonly
     * @since 2.9.0
     */
    static readonly ProfileHighlights: typeof ProfileHighlights;
    /**
     * Dynamic content store
     * @static
     * @type {DynamicContentStore<FlexUnifyContainerChildrenProps, FlexUnifyContainerChildrenKeys>}
     * @readonly
     * @example
     * import { UnifiedProfilesContainer } from "@twilio/flex-ui";
     * const content = FlexUnifyContainer.Content;
     */
    static readonly Content: DynamicContentStore<FlexUnifyContainerChildrenProps, FlexUnifyContainerChildrenKeys>;
    static updateAll(): void;
    render(): JSX.Element;
}
export declare const Connected: {
    new (props: Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof import("../context").TaskContextProps> | Readonly<Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof import("../context").TaskContextProps>>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../context").TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../context").TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../context").TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../context").TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../context").TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../context").TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof import("../context").TaskContextProps>, context: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../context").TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../context").TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../context").TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../context").TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../context").TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../context").TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    readonly displayName: string;
    contextType?: React.Context<any> | undefined;
} & import("hoist-non-react-statics").NonReactStatics<{
    new (props: (Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }) | Readonly<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, context: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    readonly displayName: string;
    contextType?: React.Context<any> | undefined;
} & import("hoist-non-react-statics").NonReactStatics<React.FC<Pick<FlexUnifyContainerChildrenProps, keyof FlexUnifyContainerChildrenProps> & {
    theme?: import("@emotion/react").Theme;
}>, {}>, {}>;

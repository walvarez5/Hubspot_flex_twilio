import { DynamicContentStore } from "../../../../flex-ui-core/src";
import * as React from "react";
import { ProfileHeaderChildrenKeys, ProfileHeaderChildrenProps, ProfileHeaderProps } from "./ProfileHeader.definitions";
/**
 * @alias UnifedProfilesContainer.ProfileHeader
 * @classdesc UnifiedProfilesContainer.ProfileHeader is the view of the Profile Header component
 * @component
 * @param {ProfileHeader.ProfileHeaderProps} props - Properties to be passed to configure this component.
 * @category Components / Programmable
 * @subcategory Components
 * @since 2.9.0
 */
export declare class ProfileHeader extends React.PureComponent<ProfileHeaderProps> {
    static readonly displayName = "ProfileHeader";
    /**
     * Dynamic content store
     * @name Content
     * @static
     * @type {DynamicContentStore<ProfileHeaderChildrenProps, ProfileHeaderChildrenKeys>}
     * @memberof UnifiedProfilesContainer.ProfileHeader
     * @example UnifiedProfilesContainer.ProfileHeader.Content
     * @readonly
     * @since 2.9.0
     */
    static readonly Content: DynamicContentStore<ProfileHeaderChildrenProps, ProfileHeaderChildrenKeys>;
    /**
     * Default properties
     * @static
     * @type { ProfileHeaderProps }
     * @readonly
     * @since 2.9.0
     * @example
     * import { ProfileHeader, ProfileHeaderProps } from "@twilio/flex-ui";
     * const props = ProfileHeader.defaultProps;
     * <ProfileHeader key="container" {...props}/>
     */
    static readonly defaultProps: Partial<ProfileHeaderChildrenProps>;
    render(): JSX.Element;
}
export declare const Connected: {
    new (props: Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof import("../../../context").TaskContextProps> | Readonly<Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof import("../../../context").TaskContextProps>>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../../context").TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../../context").TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../../context").TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../../context").TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../../context").TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../../context").TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof import("../../../context").TaskContextProps>, context: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../../context").TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../../context").TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../../context").TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../../context").TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../../context").TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../../context").TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    readonly displayName: string;
    contextType?: React.Context<any> | undefined;
} & import("hoist-non-react-statics").NonReactStatics<{
    new (props: (Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }) | Readonly<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, context: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    readonly displayName: string;
    contextType?: React.Context<any> | undefined;
} & import("hoist-non-react-statics").NonReactStatics<React.FC<Pick<ProfileHeaderChildrenProps, keyof ProfileHeaderChildrenProps> & {
    theme?: import("@emotion/react").Theme;
}>, {}>, {}>;

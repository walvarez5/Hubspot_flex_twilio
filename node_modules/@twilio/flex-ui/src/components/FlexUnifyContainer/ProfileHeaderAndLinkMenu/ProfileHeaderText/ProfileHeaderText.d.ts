import { DynamicContentStore } from "../../../../flex-ui-core/src";
import * as React from "react";
import { ProfileHeaderTextChildrenKeys, ProfileHeaderTextChildrenProps, ProfileHeaderTextProps } from "./ProfileHeaderText.definitions";
/**
 * @alias UnifedProfilesContainer.ProfileHeaderText
 * @classdesc UnifiedProfilesContainer.ProfileHeaderText is the view of the Text component portion of Profile Header
 * @component
 * @param {ProfileHeaderText.ProfileHeaderTextProps} props - Properties to be passed to configure this component.
 * @category Components / Programmable
 * @subcategory Components
 * @since 2.9.0
 */
export declare class ProfileHeaderText extends React.PureComponent<ProfileHeaderTextProps> {
    static readonly displayName = "ProfileHeaderText";
    /**
     * Dynamic content store
     * @name Content
     * @static
     * @type {DynamicContentStore<ProfileHeaderTextChildrenProps, ProfileHeaderTextChildrenKeys>}
     * @memberof UnifiedProfilesContainer.ProfileHeaderText
     * @example UnifiedProfilesContainer.ProfileHeaderText.Content
     * @readonly
     * @since 2.9.0
     */
    static readonly Content: DynamicContentStore<ProfileHeaderTextChildrenProps, ProfileHeaderTextChildrenKeys>;
    /**
     * Default properties
     * @static
     * @type { ProfileHeaderTextProps }
     * @readonly
     * @since 2.9.0
     * @example
     * import { ProfileHeader, ProfileHeaderProps } from "@twilio/flex-ui";
     * const props = ProfileHeader.defaultProps;
     * <ProfileHeader key="container" {...props}/>
     */
    static readonly defaultProps: Partial<ProfileHeaderTextProps>;
    render(): JSX.Element;
}
export declare const Connected: {
    new (props: Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../../../context").TaskContextProps> | Readonly<Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../../../context").TaskContextProps>>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context").TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context").TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context").TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context").TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context").TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context").TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../../../context").TaskContextProps>, context: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context").TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context").TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context").TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context").TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context").TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context").TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    readonly displayName: string;
    contextType?: React.Context<any> | undefined;
} & import("hoist-non-react-statics").NonReactStatics<React.FC<Pick<ProfileHeaderTextChildrenProps, keyof ProfileHeaderTextChildrenProps> & {
    theme?: import("@emotion/react").Theme;
}>, {}>;

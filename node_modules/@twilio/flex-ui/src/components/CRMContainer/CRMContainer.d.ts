import { DynamicContentStore } from "../../flex-ui-core/src";
import * as React from "react";
import { CRMContainerChildrenKeys, CRMContainerChildrenProps, CRMContainerProps } from "./CRMContainer.definitions";
export * from "./CRMContainer.Components";
/**
 * @classdesc This is a container for the CRM integration.
 * Can be themed with `Theme.CRMContainer` in [Theme](Theme).
 * @component
 * @hideconstructor
 * @param {CRMContainer.CRMContainerProps} props - Properties to be passed to configure this component.
 * @category Components / Programmable
 * @subcategory Components
 * @example
 * import { CRMContainer } from "@twilio/flex-ui";
 * <CRMContainer key="container" />
 */
export declare class CRMContainer extends React.PureComponent<CRMContainerProps> {
    static readonly displayName = "CRMContainer";
    /**
     * Dynamic content store
     *
     * @static
     * @type {DynamicContentStore<CRMContainer.CRMContainerChildrenProps, CRMContainerChildrenKeys>}
     * @readonly
     * @example
     * import { CRMContainer } from "@twilio/flex-ui";
     * const content = CRMContainer.Content;
     */
    static readonly Content: DynamicContentStore<CRMContainerChildrenProps, CRMContainerChildrenKeys>;
    /**
     * Default properties
     *
     * @static
     * @type {CRMContainer.CRMContainerProps}
     * @readonly
     * @example
     * import { CRMContainer } from "@twilio/flex-ui";
     * const props = CRMContainer.defaultProps;
     * <CRMContainer key="container" {...props}/>
     */
    static readonly defaultProps: Partial<CRMContainerProps>;
    static updateAll(): void;
    render(): JSX.Element;
}
export declare const Connected: {
    new (props: Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../context").TaskContextProps> | Readonly<Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../context").TaskContextProps>>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context").TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context").TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context").TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context").TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context").TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context").TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    } & {
        children?: React.ReactNode | undefined;
    }, keyof import("../context").TaskContextProps>, context: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context").TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context").TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context").TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context").TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context").TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context").TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        } & {
            children?: React.ReactNode | undefined;
        }, keyof import("../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    readonly displayName: string;
    contextType?: React.Context<any> | undefined;
} & import("hoist-non-react-statics").NonReactStatics<React.FC<Pick<CRMContainerChildrenProps, keyof CRMContainerChildrenProps> & {
    theme?: import("@emotion/react").Theme;
}>, {}>;

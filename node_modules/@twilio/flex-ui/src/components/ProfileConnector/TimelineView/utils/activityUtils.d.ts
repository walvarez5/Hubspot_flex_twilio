import { Activity, ActivityAttributes, ActivityDetail, ActivityDetails, ActivityView, ProfilesAndHistoryConfiguration, ProfilesAndHistoryConfigurationEventPropertyType, Warning } from "../../../../core/FlexDataClient";
import { ActivityAttributesModel, ActivityDetailModel, ActivityDetailsModel, ActivityModel, ActivityViewModel, ChannelNote, TimelineActivityDetailItemType } from "../timelineViewTypes";
export declare const ERROR_CONTEXT = "TimelineActivityUtils";
declare const findLatestActivity: (activites: ActivityModel[]) => ActivityModel;
declare const toTimelineActivityModel: (activity?: Activity | null) => ActivityModel;
declare const toTimelineActivityViewModel: (activity: ActivityView) => ActivityViewModel;
declare const toTimelineActivityDetailsModel: (details: ActivityDetails | ActivityView) => ActivityDetailsModel | undefined;
declare const toTimelineActivityAttributesModel: (attr: ActivityAttributes) => ActivityAttributesModel;
export declare const limitCodesDisplayAmount: (channelNote: ChannelNote) => ChannelNote;
declare const getDuration: (activityAttributes: ActivityAttributesModel | undefined) => number | undefined;
declare const toTimelineActivityDetailModel: (details: ActivityDetail[]) => ActivityDetailModel[];
/**
 * Map of the types that the Profile&History API supports (ProfilesAndHistoryConfigurationEventPropertyType)
 * to the types that TimelineActivityDetailItemType supports.
 * @param {ProfilesAndHistoryConfigurationEventPropertyType} type The activity customization config type.
 * @returns {TimelineActivityDetailItemType} The corresponding timeline activity detail item type.
 * @example getDetailType("date") => "Date"
 */
declare const getDetailType: (type?: ProfilesAndHistoryConfigurationEventPropertyType | null) => TimelineActivityDetailItemType;
/**
 * Get the localized string for a label.  This first checks the manager.strings object for a match.
 * If no match is found, the original label is returned.
 * @param {string} labelStr The label to localize.
 * @returns {string} The localized label.
 * @example getLocalizationString("Order Placed") => "orden realizada"
 */
declare const getLocalizationString: (labelStr: string) => string;
declare const removeWhitespaceAndLowerCase: (value: any) => string;
declare const getDetailLabelAndValue: (label: string, value: string | JSX.Element, propertyKey: string, capitalizeValue?: boolean) => JSX.Element;
declare const findCdpDegradationWarning: (warnings: Warning[]) => Warning;
interface CheckGQLWarningsContext {
    cdpDegradationWarning: Warning | undefined;
    activityCustomizations: ProfilesAndHistoryConfiguration[] | undefined;
}
declare const checkGQLWarnings: (warnings: Warning[], context: CheckGQLWarningsContext) => void;
export { checkGQLWarnings, CheckGQLWarningsContext, findCdpDegradationWarning, findLatestActivity, getDetailLabelAndValue, getDetailType, getDuration, getLocalizationString, removeWhitespaceAndLowerCase, toTimelineActivityAttributesModel, toTimelineActivityDetailModel, toTimelineActivityDetailsModel, toTimelineActivityModel, toTimelineActivityViewModel };

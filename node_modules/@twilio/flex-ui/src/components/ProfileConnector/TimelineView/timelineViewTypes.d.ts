export declare enum ActivityType {
    Activity = "Activity",
    ActivityView = "ActivityView",
    ActivityDetails = "ActivityDetails"
}
type ActivityBase = {
    label: string;
    timestamp: string;
    attributes: ActivityAttributesModel;
};
type ActivityModel = ActivityBase & {
    type: ActivityType.Activity;
    sid: string;
};
type ActivityViewModel = ActivityBase & {
    type: ActivityType.ActivityView;
    details?: ActivityDetailModel[];
};
type ActivityModelTypes = ActivityModel | ActivityViewModel;
type ActivityAttributesModel = {
    type: ActivityAttributesType;
    interactionSid?: string;
    channelType?: ChannelEnumType;
    direction?: DirectionEnumType;
    durationInSeconds?: number;
    data?: Record<string, any>;
};
type DetailBase = {
    label: string;
    timestamp?: string;
};
type ActivityDetailsModel = DetailBase & {
    sid?: string;
    type: ActivityType.ActivityDetails;
    attributes: ActivityAttributesModel;
    details: ActivityDetailModel[];
};
declare enum SentimentEnumType {
    Negative = "NEGATIVE",
    Neutral = "NEUTRAL",
    Positive = "POSITIVE"
}
type ProfileEventAttributesData = {
    event_name: string;
    description_label: string;
};
type ProfileEventDetailModel = DetailBase & {
    type: ActivityDetailType.ProfileEventDetail;
    data?: ProfileEventAttributesData;
};
type CustomDetailModel = DetailBase & {
    type: ActivityDetailType.CustomDetail;
    data?: Record<string, any>;
};
type ChannelDetailModel = DetailBase & {
    type: ActivityDetailType.ChannelDetail;
    channelSid?: string;
    channelType?: ChannelEnumType;
    direction?: DirectionEnumType;
    participants: ParticipantModel[];
};
type ActivityDetailModel = ChannelDetailModel | CustomDetailModel | ProfileEventDetailModel;
export type ChannelCode = {
    topic: string;
    subtopic?: string;
    dispositionCode?: string;
};
export type ChannelNote = {
    summary?: string;
    sentiment?: SentimentEnumType;
    codes?: ChannelCode[];
};
interface ParticipantModel {
    sid: string;
    timestamp?: string;
    workerName: string;
    queueName?: string;
    mediaSid: string;
    participantType: ParticipantEnumType;
    channelNote?: ChannelNote;
}
interface TimelineActivityDetailItem {
    id: string;
    icon?: JSX.Element;
    title?: string;
    content: string | JSX.Element;
    href?: string;
    truncateText?: boolean;
    numberOfLines?: number;
    type: TimelineActivityDetailItemType;
}
interface ConfigDrivenItems extends TimelineActivityDetailItem {
    order?: number | null;
}
declare enum TimelineActivityDetailItemType {
    Text = "Text",
    MultilineText = "MultilineText",
    Link = "Link",
    IconAndText = "IconAndText",
    Date = "Date",
    Currency = "Currency",
    Number = "Number"
}
declare enum ChannelEnumType {
    Email = "EMAIL",
    Voice = "VOICE",
    Sms = "SMS",
    Whatsapp = "WHATSAPP",
    AppleMessagesForBusiness = "APPLE",
    Web = "WEB",
    Unknown = "UNKNOWN"
}
declare enum ParticipantEnumType {
    Agent = "AGENT",
    Customer = "CUSTOMER",
    Unknown = "UNKNOWN"
}
declare enum DirectionEnumType {
    Inbound = "INBOUND",
    Outbound = "OUTBOUND"
}
export declare enum ActivityDetailType {
    CustomDetail = "CustomDetail",
    ChannelDetail = "ChannelDetail",
    NoteDetail = "NoteDetail",
    ProfileEventDetail = "ProfileEventDetail"
}
export declare enum ActivityAttributesType {
    InteractionAttributes = "InteractionAttributes",
    CustomAttributes = "CustomAttributes",
    ProfileEventUIAttributes = "ProfileEventUIAttributes"
}
export { ActivityAttributesModel, ActivityDetailModel, ActivityDetailsModel, ActivityModel, ActivityModelTypes, ActivityViewModel, ChannelDetailModel, ChannelEnumType, ConfigDrivenItems, DirectionEnumType, ParticipantEnumType, ParticipantModel, ProfileEventAttributesData, ProfileEventDetailModel, SentimentEnumType, TimelineActivityDetailItem, TimelineActivityDetailItemType };

import { Profile } from "@twilio/flex-sdk";
import * as React from "react";
import { TaskContextProps } from "../../context";
import { TaskProfileConnectorContextProps } from "../../context/ProfileConnectorContext";
export interface TimelineViewProps {
    profileConnectSid: string;
    profileStatus: Profile.StatusEnum;
    searchView: boolean;
    isRenderedInTab: boolean;
}
/**
 * Properties of TimelineView.
 * @typedef {TimelineView.TimelineViewProps} TimelineView.TimelineViewChildrenProps
 */
export interface TimelineViewChildrenProps extends TaskContextProps, TaskProfileConnectorContextProps, TimelineViewProps {
    pageSize?: number;
    selectedTabName?: string;
}
export declare class TimelineView extends React.PureComponent<TimelineViewProps> {
    static readonly displayName = "TimelineView";
    /**
     * Default properties
     * @static
     * @type {TimelineView.TimelineViewProps}
     * @readonly
     * @example
     * import { TimelineView } from "@twilio/flex-ui";
     * const props = TimelineView.defaultProps;
     * <TimelineView key="container" {...props}/>
     */
    static readonly defaultProps: TimelineViewProps;
    render(): JSX.Element;
}
export declare const Connected: import("react-redux").ConnectedComponent<{
    new (props: Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof TaskContextProps> | Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof TaskContextProps>>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof TaskContextProps>, context: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    readonly displayName: string;
    contextType?: React.Context<any> | undefined;
} & import("hoist-non-react-statics").NonReactStatics<{
    new (props: (Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }) | Readonly<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, context: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    readonly displayName: string;
    contextType?: React.Context<any> | undefined;
} & import("hoist-non-react-statics").NonReactStatics<((props: TimelineViewChildrenProps) => JSX.Element) & {
    displayName: string;
}, {}>, {}>, import("react-redux").Omit<React.ClassAttributes<{
    render(): JSX.Element;
    context: any;
    setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
    forceUpdate(callback?: () => void): void;
    readonly props: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof TaskContextProps>> & Readonly<{
        children?: React.ReactNode | undefined;
    }>;
    state: Readonly<{}>;
    refs: {
        [key: string]: React.ReactInstance;
    };
    componentDidMount?(): void;
    shouldComponentUpdate?(nextProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
    componentWillUnmount?(): void;
    componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
    getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof TaskContextProps>>, prevState: Readonly<{}>): any;
    componentDidUpdate?(prevProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
    componentWillMount?(): void;
    UNSAFE_componentWillMount?(): void;
    componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof TaskContextProps>>, nextContext: any): void;
    UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof TaskContextProps>>, nextContext: any): void;
    componentWillUpdate?(nextProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
}> & Omit<Omit<TimelineViewChildrenProps, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
    task: {
        taskSid: string;
    };
}, keyof TaskContextProps>, "selectedTabName">>;

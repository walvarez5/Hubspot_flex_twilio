export { ActivityStatistic, WorkerQueue, WorkspaceStats } from "../../state/QueuesState";
export { AggregatedQueuesChannelBody } from "./AggregatedQueuesChannelTile";
export { AggregatedQueuesDataTiles } from "./AggregatedQueuesDataTiles";
export { AggregatedQueuesDataTilesProps } from "./AggregatedQueuesDataTiles/AggregatedQueuesDataTiles.definitions";
export { QueuesDataTable, QueuesDataTableCell, QueuesDataTableCellProps, QueuesDataTableProps } from "./QueuesDataTable";
import { QueuesFilterFunction, QueuesSubscriptionFilterFunction } from "../../state/QueuesState/QueuesStateTypes";
/**
 * Sets visibility filter for subscribed queues in QueuesStats.
 * Takes a [filter function]{@link QueuesStats.QueuesFilterFunction} as an argument.
 * A Queue is displayed, if the return value is <code>true</code>.
 *
 * For more information and examples please refer to [Twilio Flex Docs](https://www.twilio.com/docs/flex/developer/ui/queues-view-programmability).
 *
 * @param {QueuesFilterFunction} filter queue filter function
 * @returns {void}
 * @memberof QueuesStats
 * @example
 * import * as Flex from "@twilio/flex-ui";
 * const queuesFilterFunction = (queue) => queue.friendly_name === "QueueStatsQueue";
 * Flex.QueuesStats.setFilter(queuesFilterFunction);
 */
export declare const setFilter: (filter: QueuesFilterFunction) => void;
/**
 * Sets subscription filter for QueuesStats.
 * Takes a filter function as an argument.
 * A Queue is subscribed to, if the function returns <code>true</code> for the given queue.
 *
 * For more information and examples please refer to [Twilio Flex Docs](https://www.twilio.com/docs/flex/developer/ui/queues-view-programmability).
 *
 * @param {QueuesSubscriptionFilterFunction} filter filter function
 * @memberof QueuesStats
 * @example
 * import * as Flex from "@twilio/flex-ui";
 * const queuesSubscriptionFilterFunction = (queue) => queue.sid === "WQXXXXXXXXXXXXXXXXX";
 * Flex.QueuesStats.setSubscriptionFilter(queuesSubscriptionFilterFunction);
 */
export declare const setSubscriptionFilter: (filter: QueuesSubscriptionFilterFunction) => void;

import { ContentFragment } from "../../../flex-ui-core/src";
import * as React from "react";
import { HighlightedQueueList, QueueMetricsData, WorkerQueue } from "../../../state/QueuesState/QueuesStateTypes";
import { Theme } from "../../theme";
/**
 * QueuesDataTable Props.
 * @typedef QueuesStats․QueuesDataTableProps
 * @memberof QueuesStats․QueuesDataTable
 * @property {React.ReactElement<React.ContentFragment>} [children=undefined] - Add
 * additional columns using `ColumnDefinition` components wrapped in `ContentFragment`.
 * Content renderer function passed to `ColumnDefinition` will receive QueuesStats․WorkerQueue as an argument.
 */
export type QueuesDataTableProps = QueuesDataTableImplOwnProps;
export type QueuesDataTableProgrammableProps = Partial<Pick<QueuesDataTableProps, "defaultSortColumn">>;
/**
 * Props passed to children of QueuesStats.QueuesDataTableProps
 * @typedef QueuesStats․QueuesDataTableChildrenProps
 * @memberof QueuesStats․QueuesDataTable
 * @property {Theme} theme - Theme
 * @property {string} [defaultSortColumn="friendly-name"] Default sort option, if undefined it will use friendly-name.
 * @property {WorkerQueue[]} queuesList - An array of task queues to be passed to the data table.
 */
export type QueuesDataTableChildrenProps = QueuesDataTableImplProps;
export interface QueuesDataTableImplStateProps {
    queuesList: WorkerQueue[];
    metricsData: Array<QueueMetricsData>;
    highlightedMetricData?: HighlightedQueueList;
}
export interface QueuesDataTableImplOwnProps {
    children?: React.ReactElement<ContentFragment>;
    defaultSortColumn?: string;
}
export type QueuesDataTableImplProps = QueuesDataTableImplStateProps & QueuesDataTableImplOwnProps & {
    theme: Theme;
};
export interface QueuesDataTableImplState {
    hideChannels: {
        [row: string]: boolean;
    };
    horizontalScrollActive: boolean;
}
export declare enum QueuesDataTableChildrenKeys {
    friendlyName = "friendly-name",
    activeTasks = "active-tasks",
    waitingTasks = "waiting-tasks",
    longestWaitTime = "longest-wait-time",
    sla30Min = "sla-30min",
    slaToday = "sla-today",
    handledTasks30Min = "handled-tasks-30min",
    handledTasksToday = "handled-tasks-today",
    abandonedTasks30Min = "abandoned-tasks-30min",
    abandonedTasksToday = "abandoned-tasks-today",
    averageWaitingTime30 = "average-waiting-time-30",
    averageWaitingTimeToday = "average-waiting-time-today",
    averageAbandonTime30 = "average-abandon-time-30",
    averageAbandonTimeToday = "average-abandon-time-today",
    averageHandleTime30 = "average-handle-time-30",
    averageHandleTimeToday = "average-handle-time-today",
    averageTalkTime30 = "average-talk-time-30",
    averageTalkTimeToday = "average-talk-time-today",
    missedInvitations30 = "missed-invitations-30",
    missedInvitationsToday = "missed-invitations-today",
    agents = "agents",
    rejectedInvitations30 = "rejected-invitations-30",
    rejectedInvitationsToday = "rejected-invitations-today",
    averageWrapupTime30 = "average-wrapup-time-30",
    averageWrapupTimeToday = "average-wrapup-time-today",
    abandonedTasksPercentage30Min = "abandoned-tasks-percentage-30min",
    abandonedTasksPercentageToday = "abandoned-tasks-percentage-today",
    abandonedTasksCount30Min = "abandoned-tasks-count-30min",
    abandonedTasksCountToday = "abandoned-tasks-count-today",
    shortAbandonedTasksPercentage30Min = "short-abandoned-tasks-percentage-30min",
    shortAbandonedTasksPercentageToday = "short-abandoned-tasks-percentage-today",
    shortAbandonedTasksCount30Min = "short-abandoned-tasks-count-30min",
    shortAbandonedTasksCountToday = "short-abandoned-tasks-count-today",
    acceptedTasksCount30Min = "accepted-tasks-count-30min",
    acceptedTasksCountToday = "accepted-tasks-count-today",
    transferredOutTasksCount30Min = "transferred-out-tasks-count-30min",
    transferredOutTasksCountToday = "transferred-out-tasks-count-today",
    transferredOutTasksPercentage30Min = "transferred-out-tasks-percentage-30min",
    transferredOutTasksPercentageToday = "transferred-out-tasks-percentage-today",
    numberOfTasks30Min = "number-of-tasks-30min",
    numberOfTasksToday = "number-of-tasks-today",
    handledWithinSLATasksCountToday = "handled-within-sla-tasks-count-today",
    handledWithinSLATasksCount30Min = "handled-within-sla-tasks-count-30min",
    handledWithinSLATasksPercentageToday = "handled-within-sla-tasks-percentage-today",
    handledWithinSLATasksPercentage30Min = "handled-within-sla-tasks-percentage-30min",
    completedTasks30Min = "completed-tasks-count-30min",
    completedTasksToday = "completed-tasks-count-today",
    healthStatus = "health-status",
    availableAgents = "available-agents",
    unavailableAgents = "unavailable-agents",
    offlineAgents = "offline-agents"
}
export declare const ConditionalHightingKeys: {
    abandonedTasksCount: {
        metricId: string;
        metricIdInIndexDb: string;
    };
    abandonedTasksPercentage: {
        metricId: string;
        metricIdInIndexDb: string;
    };
    activeTasks: {
        metricId: string;
        metricIdInIndexDb: string;
    };
    averageHandleTime: {
        metricId: string;
        metricIdInIndexDb: string;
    };
    averageWaitingTime: {
        metricId: string;
        metricIdInIndexDb: string;
    };
    handledTasksCount: {
        metricId: string;
        metricIdInIndexDb: string;
    };
    handledTasksWithinSlThresholdPercentage: {
        metricId: string;
        metricIdInIndexDb: string;
    };
    longestTaskWaitingFrom: {
        metricId: string;
        metricIdInIndexDb: string;
    };
    slaPercentage: {
        metricId: string;
        metricIdInIndexDb: string;
    };
    totalMissedInvitations: {
        metricId: string;
        metricIdInIndexDb: string;
    };
    waitingTasks: {
        metricId: string;
        metricIdInIndexDb: string;
    };
    availableAgents: {
        metricId: string;
        metricIdInIndexDb: string;
    };
    unavailableAgents: {
        metricId: string;
        metricIdInIndexDb: string;
    };
    offlineAgents: {
        metricId: string;
        metricIdInIndexDb: string;
    };
};

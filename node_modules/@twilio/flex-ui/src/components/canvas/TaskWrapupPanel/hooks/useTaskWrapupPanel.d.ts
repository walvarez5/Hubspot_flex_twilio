import * as React from "react";
import { DispositionCode, Topic } from "../../../../core/FlexDataClient";
import { SelectedTopic, SummaryValidationError } from "../state/WrapupSummaryState";
import { TaskWrapupPanelChildrenProps } from "../TaskWrapupPanel.definitions";
export declare const CREATE_SUMMARY: import("graphql").DocumentNode;
export declare const UPDATE_SUMMARY: import("graphql").DocumentNode;
export declare const useTaskWrapupPanel: (props: TaskWrapupPanelChildrenProps) => {
    dismissCharacterLimitError: () => void;
    dismissGenerationErrorMessage: () => void;
    handleDispositionSelectedChange: (newDispositionSid: string) => void;
    handleSentimentChange: (newSentiment: string) => void;
    handleLoaderTimeout: () => void;
    handleManualAdd: () => void;
    handleSummaryEdit: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;
    handleDismissionSubmissionError: () => void;
    handleSubmitWithoutNotes: () => void;
    sentimentHelpText: string;
    dispositionHelpText: string;
    dispositionHelpTextVariant: "error" | "default";
    characterLimitWarningThreshold: number;
    finalSummary: string;
    dispositionOptions: DispositionCode[];
    dispositionCodeSid: string;
    codes: import("../../../../core/FlexDataClient").ChannelNoteCodes;
    sentiment: string;
    detectedLanguage: string;
    hasGenerationCharacterLimitError: boolean;
    hasGenerationFailedError: boolean;
    hasSubmissionFailedError: boolean;
    hasSummaryValidationError: boolean;
    isLoading: boolean;
    maxCharacterCount: number;
    summaryValidationErrorProps: SummaryValidationError;
    wrapupSummaryRef: React.MutableRefObject<HTMLTextAreaElement>;
    supportedLanguageCodes: Record<any, string>;
    isEditMode: boolean;
    enterEditMode: () => void;
    handleEditModeUpdate: () => boolean;
    enterReadMode: () => void;
    topics: Topic[];
    topicsFetchFailed: boolean;
    selectedTopicInEditMode: SelectedTopic[];
    handleSelectedTopicInEditModeChange: (selectedTopics: SelectedTopic[]) => void;
    subTopicsByParentSid: import("../state/WrapupSummaryState").SubTopicsByParentSid;
    dispositionCodesByParentSid: import("../state/WrapupSummaryState").DispositionCodesByParentSid;
    hasAgentUpdated: boolean;
    handleAgentUpdate: (value: boolean) => void;
    isManuallyAdding: boolean;
};

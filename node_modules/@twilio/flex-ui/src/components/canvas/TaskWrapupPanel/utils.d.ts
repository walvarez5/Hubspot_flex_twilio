import type { ConversationState } from "../../../flex-ui-core/src";
import { ChannelNoteCode, ChannelNoteCodes } from "../../../core/FlexDataClient";
import { ITask } from "../../../models";
import { ConferenceState } from "../../../state/Conferences";
import { ParticipantState } from "../../../state/Participants/participants.types";
import { SentimentOption } from "./constants";
import { SelectedTopic } from "./state/WrapupSummaryState";
import { NotesSubmittedEventPayload } from "./TaskWrapupPanel.definitions";
export declare const getAgentParticipantSid: (task: ITask, channelSid?: string, conference?: ConferenceState) => Promise<any>;
export declare const getInteractionAndChannelSids: (task?: ITask, participants?: ParticipantState, conversation?: ConversationState.ConversationState, conference?: ConferenceState) => Promise<{
    interactionSid: string;
    channelSid: string;
}>;
export declare const isLastAgent: (task: ITask) => boolean;
export declare const parseTopicPath: (topicPath?: string, dispositionCode?: string) => {
    topic: string;
    subtopic: string;
};
export declare const convertSelectedTopicsToChannelNoteCode: (selectedTopics: SelectedTopic[]) => ChannelNoteCode[];
export declare const getSentimentOptionsForLanguage: (language?: string) => SentimentOption[];
export declare const getDispositionCodeForSFDC: (codes: ChannelNoteCodes | undefined, dispositionCodeSid?: string) => Pick<NotesSubmittedEventPayload, "dispositionCode">;

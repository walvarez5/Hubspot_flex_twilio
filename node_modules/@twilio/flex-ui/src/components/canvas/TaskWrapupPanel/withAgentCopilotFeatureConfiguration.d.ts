import * as React from "react";
export declare const withAgentCopilotFeatureConfigurationContext: (Component: any) => (props: any) => JSX.Element;
export declare const TaskCanvasTabsWithAgentCopilotConfiguration: {
    new (props: Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof import("../../context").TaskContextProps> | Readonly<Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof import("../../context").TaskContextProps>>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../context").TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../context").TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../context").TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../context").TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../context").TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../context").TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, keyof import("../../context").TaskContextProps>, context: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../context").TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../context").TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../context").TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../context").TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../context").TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../context").TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }, keyof import("../../context").TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    readonly displayName: string;
    contextType?: React.Context<any> | undefined;
} & import("hoist-non-react-statics").NonReactStatics<{
    new (props: (Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }) | Readonly<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
        task: {
            taskSid: string;
        };
    }, context: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">, keyof import("../../context/ProfileConnectorContext").ProfileConnectorContextProps> & {
            task: {
                taskSid: string;
            };
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    readonly displayName: string;
    contextType?: React.Context<any> | undefined;
} & import("hoist-non-react-statics").NonReactStatics<import("react-redux").ConnectedComponent<(props: any) => JSX.Element, import("react-redux").Omit<any, "participants" | "dispatch" | "agentCopilotConfiguration">>, {}>, {}>;

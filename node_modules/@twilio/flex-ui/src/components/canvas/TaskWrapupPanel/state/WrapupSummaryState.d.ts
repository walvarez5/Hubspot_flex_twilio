import type { PayloadAction } from "@reduxjs/toolkit";
import { CompiledTemplate } from "../../../../flex-ui-core/src";
import { ChannelNoteCodes, DispositionCode, Topic } from "../../../../core/FlexDataClient";
export interface SummaryValidationError {
    source?: CompiledTemplate;
    numCharactersOverMax?: number;
    isPlural?: boolean;
    maxCharCount?: number;
}
export interface CustomState {
    flex?: any;
    wrapupSummaries?: WrapupSummaryMap;
}
interface WrapupSummaryMap {
    [index: string]: WrapupSummaryState;
}
interface SummaryRequestSids {
    interactionSid: string;
    channelSid: string;
    participantSid?: string;
}
export interface SubTopicsByParentSid {
    [key: string]: DataFetchResponse<Topic[]>;
}
export interface DispositionCodesByParentSid {
    [key: string]: DataFetchResponse<DispositionCode[]>;
}
export interface SelectedTopic {
    topic?: string;
    topicSid?: string;
    subtopic?: string;
    dispositionCode?: string;
    errors?: {
        topicsError?: string;
        subtopicsError?: string;
        dispositionCodeError?: string;
        duplicateTopic?: boolean;
    };
}
export declare enum SummaryGenerationStatus {
    Pending = "Pending",
    Succeeded = "Succeeded",
    Failed = "Failed"
}
export interface WrapupSummaryState {
    isManuallyAdding?: boolean;
    isEditMode?: boolean;
    hasGenerationFailedError?: boolean;
    hasSubmissionFailedError?: boolean;
    hasGenerationCharacterLimitError?: boolean;
    hasValidationError?: boolean;
    summaryValidationErrorProps?: SummaryValidationError;
    hasAgentUpdated?: boolean;
    generatedSummary?: string;
    finalSummary?: string;
    taskSid?: string;
    summarySid?: string;
    interactionSid?: string;
    channelSid?: string;
    participantSid?: string;
    summaryGenerationStatus?: SummaryGenerationStatus;
    currentVersion?: number;
    generatedSentiment?: string;
    sentiment?: string;
    detectedLanguage?: string;
    generatedDispositionCodeSid?: string;
    dispositionCodeSid?: string;
    dispositionCodeOptions?: DispositionCode[];
    codes?: ChannelNoteCodes;
    parentTopics?: DataFetchResponse<Topic[]>;
    subTopicsByParentSid?: SubTopicsByParentSid;
    dispositionCodesByParentSid?: DispositionCodesByParentSid;
    selectedTopicInEditMode?: SelectedTopic[];
    dispositionHelpText?: string;
    dispositionHelpTextVariant?: "error" | "default";
    dispositionCodeFetched?: boolean;
    twilioErrorCode?: number;
    httpStatusCode?: number;
    wrapupStartTime?: string;
    wrapupSummaryReceivedTime?: string;
}
export interface DataFetchResponse<T> {
    isLoading: boolean;
    hasError: boolean;
    data: T;
}
export declare const initialState: WrapupSummaryMap;
interface PayloadTemplate<T> {
    taskSid: string;
    value: T;
}
export declare const customWrapupSummarySlice: import("@reduxjs/toolkit").Slice<WrapupSummaryMap, {
    addEmptySummaryEntry: (state: WrapupSummaryMap, action: PayloadAction<string>) => void;
    removeEntry: (state: WrapupSummaryMap, action: PayloadAction<string>) => void;
    setIsManuallyAdding: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<boolean>>) => void;
    setIsEditMode: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<boolean>>) => void;
    setHasGenerationFailedError: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<boolean>>) => void;
    setHasSubmissionFailedError: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<boolean>>) => void;
    setHTTPStatusCode: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<number>>) => void;
    setTwilioErrorCode: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<number>>) => void;
    setHasGenerationCharacterLimitError: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<boolean>>) => void;
    removeValidationError: (state: WrapupSummaryMap, action: PayloadAction<string>) => void;
    setSummaryValidationError: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<SummaryValidationError>>) => void;
    setRequestSids: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<SummaryRequestSids>>) => void;
    setSummaryGenerationStatus: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<SummaryGenerationStatus>>) => void;
    setSummarySid: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setGeneratedSummary: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setFinalSummary: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setGeneratedSentiment: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setSentiment: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setDetectedLanguage: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setCurrentVersion: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<number>>) => void;
    setGeneratedDispositionCodeSid: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setDispositionCodeSid: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setParentTopics: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<DataFetchResponse<Topic[]>>>) => void;
    setSubTopicsByParentSid: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<SubTopicsByParentSid>>) => void;
    setDispositionCodesByParentSid: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<DispositionCodesByParentSid>>) => void;
    setSelectedTopicInEditMode: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<SelectedTopic[]>>) => void;
    setDispositionCodeOptions: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<DispositionCode[]>>) => void;
    setCodes: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<ChannelNoteCodes>>) => void;
    setDispositionFetched: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<boolean>>) => void;
    setDispositionHelpText: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setDispositionHelpTextVariant: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<"error" | "default">>) => void;
    setWrapupStartTime: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setSummaryEditStartTime: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setHasAgentUpdated: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<boolean>>) => void;
}, "wrapupSummaries">;
export declare const selectors: {
    useStateEntry: (key: string) => WrapupSummaryState;
    useFinalSummary: (key: string) => string;
    useSentiment: (key: string) => string;
    useDispositionCodeSid: (key: string) => string;
    useDetectedLanguage: (key: string) => string;
    useParentTopics: (key: string) => DataFetchResponse<Topic[]>;
    useSubTopicsByParentSid: (key: string) => SubTopicsByParentSid;
    useDispositionCodesByParentSid: (key: string) => DispositionCodesByParentSid;
    useSelectedTopicInEditMode: (key: string) => SelectedTopic[];
    useDispositionCodeOptions: (key: string) => DispositionCode[];
    useCodes: (key: string) => ChannelNoteCodes;
    useDispositionFetched: (key: string) => boolean;
    useIsEditMode: (key: string) => boolean;
    useDispositionHelpText: (key: string) => string;
    useDispositionHelpTextVariant: (key: string) => "error" | "default";
    useHasSummaryValidationError: (key: string) => boolean;
    useHasGenerationFailedError: (key: string) => boolean;
    useHasSubmissionFailedError: (key: string) => boolean;
    useHasGenerationCharacterLimitError: (key: string) => boolean;
    useSummaryValidationErrorProps: (key: string) => SummaryValidationError;
    useHasAgentUpdated: (key: string) => boolean;
};
export declare const actions: import("@reduxjs/toolkit").CaseReducerActions<{
    addEmptySummaryEntry: (state: WrapupSummaryMap, action: PayloadAction<string>) => void;
    removeEntry: (state: WrapupSummaryMap, action: PayloadAction<string>) => void;
    setIsManuallyAdding: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<boolean>>) => void;
    setIsEditMode: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<boolean>>) => void;
    setHasGenerationFailedError: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<boolean>>) => void;
    setHasSubmissionFailedError: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<boolean>>) => void;
    setHTTPStatusCode: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<number>>) => void;
    setTwilioErrorCode: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<number>>) => void;
    setHasGenerationCharacterLimitError: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<boolean>>) => void;
    removeValidationError: (state: WrapupSummaryMap, action: PayloadAction<string>) => void;
    setSummaryValidationError: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<SummaryValidationError>>) => void;
    setRequestSids: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<SummaryRequestSids>>) => void;
    setSummaryGenerationStatus: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<SummaryGenerationStatus>>) => void;
    setSummarySid: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setGeneratedSummary: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setFinalSummary: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setGeneratedSentiment: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setSentiment: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setDetectedLanguage: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setCurrentVersion: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<number>>) => void;
    setGeneratedDispositionCodeSid: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setDispositionCodeSid: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setParentTopics: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<DataFetchResponse<Topic[]>>>) => void;
    setSubTopicsByParentSid: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<SubTopicsByParentSid>>) => void;
    setDispositionCodesByParentSid: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<DispositionCodesByParentSid>>) => void;
    setSelectedTopicInEditMode: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<SelectedTopic[]>>) => void;
    setDispositionCodeOptions: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<DispositionCode[]>>) => void;
    setCodes: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<ChannelNoteCodes>>) => void;
    setDispositionFetched: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<boolean>>) => void;
    setDispositionHelpText: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setDispositionHelpTextVariant: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<"error" | "default">>) => void;
    setWrapupStartTime: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setSummaryEditStartTime: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<string>>) => void;
    setHasAgentUpdated: (state: WrapupSummaryMap, action: PayloadAction<PayloadTemplate<boolean>>) => void;
}, "wrapupSummaries">, reducer: import("redux").Reducer<WrapupSummaryMap>;
export {};

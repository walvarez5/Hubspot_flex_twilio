import * as React from "react";
import { ChannelNoteCodes, DispositionCode, Topic } from "../../../../../core/FlexDataClient";
import { DispositionCodesByParentSid, SelectedTopic, SubTopicsByParentSid, SummaryValidationError } from "../../state/WrapupSummaryState";
export interface NotesContentEditModeProps {
    isLoading: boolean;
    handleTimeout: () => void;
    handleManualAdd: () => void;
    generationErrorMessage: string;
    renderMultiLangWarning: () => JSX.Element | null;
    isWrapupSentimentVisible: boolean;
    detectedLanguage?: string;
    sentiment?: string;
    wrapupSummaryRef: React.RefObject<HTMLTextAreaElement>;
    sentimentHelpText: string;
    handleSentimentChange: (newSentiment: string) => void;
    dispositionOptions: DispositionCode[] | undefined;
    dispositionCodeSid: string | undefined;
    dispositionHelpText: string;
    topics?: Topic[];
    topicsFetchFailed?: boolean;
    codes: ChannelNoteCodes;
    dispositionHelpTextVariant: "error" | "default";
    handleDispositionSelectedChange: (newDispositionSid: string) => void;
    handleSummaryEdit: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;
    finalSummary: string;
    hasGenerationCharacterLimitError: boolean;
    maxCharacterCount: number;
    dismissCharacterLimitError: () => void;
    dismissGenerationErrorMessage: () => void;
    hasSummaryValidationError: boolean;
    summaryValidationErrorProps: SummaryValidationError;
    characterLimitWarningThreshold: number;
    renderLanguageName: () => JSX.Element | null;
    enterReadMode: () => void;
    handleEditModeUpdate: () => void;
    selectedTopicInEditMode?: SelectedTopic[];
    handleSelectedTopicInEditModeChange: (t: SelectedTopic[]) => void;
    subTopicsByParentSid?: SubTopicsByParentSid;
    dispositionCodesByParentSid?: DispositionCodesByParentSid;
    handleAgentUpdate: (value: boolean) => void;
    isManuallyAdding: boolean;
}
export declare const NotesContentEditMode: React.FC<NotesContentEditModeProps>;

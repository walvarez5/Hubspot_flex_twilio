import { DynamicContentStore } from "../../../flex-ui-core/src";
import * as React from "react";
import { TaskContextProps } from "../../context/TaskContext";
import { CallCanvasChildrenKeys, CallCanvasChildrenProps } from "./CallCanvas.definitions";
/**
 * @classdesc This component renders a canvas for call based task.
 * Can be themed with `Theme.CallCanvas` in [Theme](Theme).
 * @component
 * @hideconstructor
 * @category Components / Programmable
 * @subcategory Components
 */
export declare class CallCanvas extends React.PureComponent {
    static readonly friendlyName = "CallCanvas";
    static readonly displayName = "CallCanvas";
    /**
     * Dynamic content store
     *
     * @static
     * @type {DynamicContentStore<CallCanvas.CallCanvasChildrenProps, CallCanvasChildrenKeys>}
     * @readonly
     */
    static readonly Content: DynamicContentStore<CallCanvasChildrenProps, CallCanvasChildrenKeys>;
    render(): JSX.Element;
}
export declare const Connected: {
    new (props: Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    }, "dialpadState"> & TaskContextProps & {
        children?: React.ReactNode;
    }, keyof TaskContextProps> | Readonly<Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    }, "dialpadState"> & TaskContextProps & {
        children?: React.ReactNode;
    }, keyof TaskContextProps>>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        }, "dialpadState"> & TaskContextProps & {
            children?: React.ReactNode;
        }, keyof TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        }, "dialpadState"> & TaskContextProps & {
            children?: React.ReactNode;
        }, keyof TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        }, "dialpadState"> & TaskContextProps & {
            children?: React.ReactNode;
        }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        }, "dialpadState"> & TaskContextProps & {
            children?: React.ReactNode;
        }, keyof TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        }, "dialpadState"> & TaskContextProps & {
            children?: React.ReactNode;
        }, keyof TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        }, "dialpadState"> & TaskContextProps & {
            children?: React.ReactNode;
        }, keyof TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        }, "dialpadState"> & TaskContextProps & {
            children?: React.ReactNode;
        }, keyof TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        }, "dialpadState"> & TaskContextProps & {
            children?: React.ReactNode;
        }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        }, "dialpadState"> & TaskContextProps & {
            children?: React.ReactNode;
        }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
        theme?: import("@emotion/react").Theme;
    }, "dialpadState"> & TaskContextProps & {
        children?: React.ReactNode;
    }, keyof TaskContextProps>, context: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        }, "dialpadState"> & TaskContextProps & {
            children?: React.ReactNode;
        }, keyof TaskContextProps>>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        }, "dialpadState"> & TaskContextProps & {
            children?: React.ReactNode;
        }, keyof TaskContextProps>> & Readonly<{
            children?: React.ReactNode | undefined;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        }, "dialpadState"> & TaskContextProps & {
            children?: React.ReactNode;
        }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        }, "dialpadState"> & TaskContextProps & {
            children?: React.ReactNode;
        }, keyof TaskContextProps>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        }, "dialpadState"> & TaskContextProps & {
            children?: React.ReactNode;
        }, keyof TaskContextProps>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        }, "dialpadState"> & TaskContextProps & {
            children?: React.ReactNode;
        }, keyof TaskContextProps>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        }, "dialpadState"> & TaskContextProps & {
            children?: React.ReactNode;
        }, keyof TaskContextProps>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        }, "dialpadState"> & TaskContextProps & {
            children?: React.ReactNode;
        }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
            theme?: import("@emotion/react").Theme;
        }, "dialpadState"> & TaskContextProps & {
            children?: React.ReactNode;
        }, keyof TaskContextProps>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    readonly displayName: string;
    contextType?: React.Context<any> | undefined;
} & import("hoist-non-react-statics").NonReactStatics<import("react-redux").ConnectedComponent<React.FC<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
    theme?: import("@emotion/react").Theme;
}>, import("react-redux").Omit<Pick<CallCanvasChildrenProps, keyof CallCanvasChildrenProps> & {
    theme?: import("@emotion/react").Theme;
}, "dialpadState"> & TaskContextProps & {
    children?: React.ReactNode;
}>, {}>;

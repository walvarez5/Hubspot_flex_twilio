import { ConnectedProps } from "react-redux";
import { FlexState } from "../../../../store";
import { TaskContextProps } from "../../../context";
import { ThemeProps } from "../../../theme";
import { TaskCanvasChildrenProps } from "../../TaskCanvas";
/**
 * Properties of Call canvas action.
 * @typedef {TaskCanvasChildrenProps} CallCanvasActionsProps
 */
export interface CallCanvasActionsProps extends TaskCanvasChildrenProps, ThemeProps {
}
/**
 * Properties of children in call canvas action.
 * @typedef {TaskContextProps} CallCanvasActions.CallCanvasActionsChildrenProps
 * @property {boolean} isOpen - isOpen.
 * @property {Theme.CallCanvasThemeProps} [theme.CallCanvas] - Theme
 */
export interface CallCanvasActionsChildrenProps extends TaskContextProps, ThemeProps {
    isOpen: boolean;
}
export declare enum CallCanvasActionsChildrenKeys {
    hold = "hold",
    toggleMute = "toggleMute",
    directory = "directory",
    dialpad = "dialpad",
    hangup = "hangup",
    callCanvasActionsContainer = "callCanvasActionsContainer"
}
export declare const mapStateToProps: (state: FlexState) => {
    isOpen: boolean;
};
export declare const connector: import("react-redux").InferableComponentEnhancerWithProps<{
    isOpen: boolean;
} & {}, {}>;
type PropsFromRedux = ConnectedProps<typeof connector>;
export type ActionsProps = PropsFromRedux & CallCanvasActionsChildrenProps;
export {};

import { TaskQueue } from "twilio-taskrouter";
import { ITask } from "../../models";
import { TaskContextProps } from "../context/TaskContext";
import { Theme, ThemeProps } from "../theme";
/**
 * Properties of WorkerDirectory
 *
 * @typedef {TaskContextProps} WorkerDirectoryTabs.WorkerDirectoryTabsProps
 * @property {boolean} isWarmTransferEnabled - Whether warm transfer is enabled.
 * @property {string} [hiddenWorkerFilter] - Extra query filter applied to the query of workers in addition to typed search.
 * @property {string} [hiddenQueueFilter] - DEPRECATED: use queueFilter instead. Extra query filter applied to the query of queues in addition to typed search.
 * @property {Function} [queueFilter] - Predicate function applied for custom queue filtering in addition to typed search.
 * @property {Theme} theme Theme
 */
export interface WorkerDirectoryTabsProps extends TaskContextProps {
    isWarmTransferEnabled: boolean;
    hiddenWorkerFilter?: string;
    hiddenQueueFilter?: string;
    queueFilter?: (queue: TaskQueue) => boolean;
    theme: Theme;
}
export declare enum WorkerDirectoryChildrenKeys {
    header = "header",
    tabs = "tabs"
}
export declare enum WorkerDirectoryTabsChildrenKeys {
    tabs = "tabs",
    workers = "workers",
    workersContainer = "workers-container",
    workersInputContainer = "workers-input-container",
    workersInputField = "workers-input-field",
    queues = "queues",
    queuesContainer = "queues-container",
    queuesInputContainer = "queues-input-container",
    queuesInputField = "queues-input-field",
    directory = "directory",
    directoryContainer = "directory-container",
    itemContainer = "item-container"
}
/**
 * @typedef WorkerDirectory.WorkerDirectoryProps
 * @property {DynamicContentStore.DynamicComponentChildren<WorkerDirectory.WorkerDirectoryChildrenProps>} [children] - children
 */
export interface WorkerDirectoryProps extends ThemeProps {
}
/**
 * Properties of WorkerDirectory
 *
 * @typedef {WorkerDirectory.WorkerDirectoryProps} WorkerDirectory.WorkerDirectoryChildrenProps
 * @property {boolean} [isOpen] - Whether the worker directory is opened or not.
 * @property {ITask} [task] - Task to be transferred
 * @property {boolean} [isWarmTransferEnabled] - Whether warm transfer is enabled.
 */
export interface WorkerDirectoryChildrenProps extends WorkerDirectoryProps {
    isOpen?: boolean;
    task?: ITask;
    isWarmTransferEnabled?: boolean;
}

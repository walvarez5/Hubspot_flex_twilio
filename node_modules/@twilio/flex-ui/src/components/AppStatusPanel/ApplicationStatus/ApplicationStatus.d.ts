import * as React from "react";
import { ApplicationStatusContainerProps } from "./ApplicationStatus.definitions";
export declare class ApplicationStatus extends React.PureComponent<ApplicationStatusContainerProps> {
    render(): JSX.Element;
}
export declare const Connected: import("react-redux").ConnectedComponent<React.FC<Pick<Pick<import("./ApplicationStatus.definitions").ApplicationStatusContainerChildrenProps, "tokenExpired" | "callNetworkIssues" | "componentAffected" | "incidentAffected" | "isTwilioStatusAvailable" | "flexErrors"> & {
    theme?: import("@emotion/react").Theme;
} & {
    children?: React.ReactNode | undefined;
}, "children" | "tokenExpired" | "callNetworkIssues" | "componentAffected" | "incidentAffected" | "isTwilioStatusAvailable" | "flexErrors"> & {
    theme?: import("@emotion/react").Theme;
}>, import("react-redux").Omit<Pick<Pick<import("./ApplicationStatus.definitions").ApplicationStatusContainerChildrenProps, "tokenExpired" | "callNetworkIssues" | "componentAffected" | "incidentAffected" | "isTwilioStatusAvailable" | "flexErrors"> & {
    theme?: import("@emotion/react").Theme;
} & {
    children?: React.ReactNode | undefined;
}, "children" | "tokenExpired" | "callNetworkIssues" | "componentAffected" | "incidentAffected" | "isTwilioStatusAvailable" | "flexErrors"> & {
    theme?: import("@emotion/react").Theme;
}, "tokenExpired" | "callNetworkIssues" | "componentAffected" | "incidentAffected" | "isTwilioStatusAvailable" | "flexErrors">>;

import * as React from "react";
import { Theme } from "../../theme";
import { ParsedComponent } from "../../../state/AppStatusState";
export interface PlatformServiceContainerChildrenProps extends PlatformServiceContainerProps {
    componentAffected: ParsedComponent[];
    incidentAffected: ParsedComponent[];
    theme: Theme;
    isTwilioStatusAvailable: boolean;
}
export interface PlatformServiceContainerProps {
}
export declare class PlatformService extends React.PureComponent<PlatformServiceContainerProps> {
    render(): JSX.Element;
}
export declare const Connected: import("react-redux").ConnectedComponent<React.FC<Pick<Pick<PlatformServiceContainerChildrenProps, "componentAffected" | "incidentAffected" | "isTwilioStatusAvailable"> & {
    theme?: import("@emotion/react").Theme;
} & {
    children?: React.ReactNode | undefined;
}, "children" | "componentAffected" | "incidentAffected" | "isTwilioStatusAvailable"> & {
    theme?: import("@emotion/react").Theme;
}>, import("react-redux").Omit<Pick<Pick<PlatformServiceContainerChildrenProps, "componentAffected" | "incidentAffected" | "isTwilioStatusAvailable"> & {
    theme?: import("@emotion/react").Theme;
} & {
    children?: React.ReactNode | undefined;
}, "children" | "componentAffected" | "incidentAffected" | "isTwilioStatusAvailable"> & {
    theme?: import("@emotion/react").Theme;
}, "componentAffected" | "incidentAffected" | "isTwilioStatusAvailable">>;

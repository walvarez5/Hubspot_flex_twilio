import * as React from "react";
import { AppErrorChildrenProps, AppErrorProps } from "./AppError.definitions";
export declare class AppError extends React.PureComponent {
    render(): JSX.Element;
}
export declare const Connected: import("react-redux").ConnectedComponent<React.FC<Pick<Pick<AppErrorChildrenProps & import("../..").ThemeProps, keyof AppErrorChildrenProps> & {
    theme?: import("@emotion/react").Theme;
} & {
    children?: React.ReactNode | undefined;
}, "children" | keyof AppErrorChildrenProps> & {
    theme?: import("@emotion/react").Theme;
}>, import("react-redux").Omit<Pick<Pick<AppErrorChildrenProps & import("../..").ThemeProps, keyof AppErrorChildrenProps> & {
    theme?: import("@emotion/react").Theme;
} & {
    children?: React.ReactNode | undefined;
}, "children" | keyof AppErrorChildrenProps> & {
    theme?: import("@emotion/react").Theme;
}, "callSid" | "tokenExpired" | "errors" | "callNetworkIssues" | "startCallTimestamp" | "componentAffected" | "incidentAffected" | "isTwilioStatusAvailable"> & {
    children?: React.ReactNode;
} & AppErrorProps>;

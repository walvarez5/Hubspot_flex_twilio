/**
 * THIS FILE IS AUTO-GENERATED, DO NOT EDIT.
 */
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
export type MakeEmpty<T extends {
    [key: string]: unknown;
}, K extends keyof T> = {
    [_ in K]?: never;
};
export type Incremental<T> = T | {
    [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never;
};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
    ID: {
        input: string;
        output: string;
    };
    String: {
        input: string;
        output: string;
    };
    Boolean: {
        input: boolean;
        output: boolean;
    };
    Int: {
        input: number;
        output: number;
    };
    Float: {
        input: number;
        output: number;
    };
    JSON: {
        input: {
            [key: string]: any;
        };
        output: {
            [key: string]: any;
        };
    };
    Long: {
        input: number;
        output: number;
    };
};
export type AiCopilotAssistApiChatMessage = AiCopilotAssistApiEvent & {
    __typename?: 'AICopilotAssistAPIChatMessage';
    author: AiCopilotAssistMessageAuthor;
    content: Scalars['String']['output'];
    id: Scalars['ID']['output'];
    references?: Maybe<Array<Maybe<AiCopilotAssistApiReference>>>;
    timestamp: Scalars['String']['output'];
};
export type AiCopilotAssistApiDeleteMessagesInput = {
    instanceSid: Scalars['ID']['input'];
    sessionId: Scalars['ID']['input'];
};
export type AiCopilotAssistApiEvent = {
    id: Scalars['ID']['output'];
    timestamp: Scalars['String']['output'];
};
export type AiCopilotAssistApiEventStreamInput = {
    request: AiCopilotAssistApiEventsInput;
};
export type AiCopilotAssistApiEventsInput = {
    channelSid?: InputMaybe<Scalars['ID']['input']>;
    conversationSid?: InputMaybe<Scalars['ID']['input']>;
    instanceSid: Scalars['ID']['input'];
    interactionSid?: InputMaybe<Scalars['ID']['input']>;
    sessionId: Scalars['ID']['input'];
    startFromTimestamp?: InputMaybe<Scalars['String']['input']>;
};
export type AiCopilotAssistApiEventsPayload = {
    __typename?: 'AICopilotAssistAPIEventsPayload';
    events: Array<Maybe<AiCopilotAssistApiChatMessage | AiCopilotAssistApiSuggestion>>;
};
export type AiCopilotAssistApiListEventsInput = {
    pagination: PaginationInput;
    request: AiCopilotAssistApiEventsInput;
};
export type AiCopilotAssistApiListEventsPayload = {
    __typename?: 'AICopilotAssistAPIListEventsPayload';
    events: Array<Maybe<AiCopilotAssistApiChatMessage | AiCopilotAssistApiSuggestion>>;
    meta: MetaPagination;
};
export type AiCopilotAssistApiListMessagesInput = {
    instanceSid: Scalars['ID']['input'];
    pagination: PaginationInput;
    sessionId: Scalars['ID']['input'];
};
export type AiCopilotAssistApiListMessagesResponse = {
    __typename?: 'AICopilotAssistAPIListMessagesResponse';
    messages: Array<Maybe<AiCopilotAssistApiChatMessage>>;
    meta: MetaPagination;
};
export type AiCopilotAssistApiReference = {
    __typename?: 'AICopilotAssistAPIReference';
    href?: Maybe<Scalars['String']['output']>;
    title: Scalars['String']['output'];
    type: AiCopilotAssistApiReferenceType;
};
export declare enum AiCopilotAssistApiReferenceType {
    File = "FILE",
    Web = "WEB"
}
export type AiCopilotAssistApiResponse = {
    __typename?: 'AICopilotAssistAPIResponse';
    success: Scalars['Boolean']['output'];
};
export type AiCopilotAssistApiSendMessageInput = {
    channelSid?: InputMaybe<Scalars['ID']['input']>;
    conversationSid?: InputMaybe<Scalars['ID']['input']>;
    instanceSid: Scalars['ID']['input'];
    interactionSid?: InputMaybe<Scalars['ID']['input']>;
    message: Scalars['String']['input'];
    sessionId: Scalars['ID']['input'];
};
export type AiCopilotAssistApiSendMessageResponse = {
    __typename?: 'AICopilotAssistAPISendMessageResponse';
    answer?: Maybe<AiCopilotAssistApiChatMessage>;
};
export type AiCopilotAssistApiSuggestion = AiCopilotAssistApiEvent & {
    __typename?: 'AICopilotAssistAPISuggestion';
    id: Scalars['ID']['output'];
    references?: Maybe<Array<Maybe<AiCopilotAssistApiReference>>>;
    response: Scalars['String']['output'];
    timestamp: Scalars['String']['output'];
    trigger: Scalars['String']['output'];
};
export declare enum AiCopilotAssistMessageAuthor {
    Copilot = "COPILOT",
    User = "USER"
}
export type AiSummarizationChannel = {
    __typename?: 'AISummarizationChannel';
    channelSid?: Maybe<Scalars['String']['output']>;
    codes?: Maybe<Array<Maybe<AiSummarizationChannelCode>>>;
    dateCreated?: Maybe<Scalars['String']['output']>;
    dateUpdated?: Maybe<Scalars['String']['output']>;
    /** @deprecated Use codes instead. */
    dispositionCode?: Maybe<DispositionCode>;
    generatedSentiment?: Maybe<Scalars['String']['output']>;
    generatedSummary?: Maybe<Scalars['String']['output']>;
    instanceSid?: Maybe<Scalars['String']['output']>;
    interactionSid?: Maybe<Scalars['String']['output']>;
    participantSid?: Maybe<Scalars['String']['output']>;
    profileConnectSid?: Maybe<Scalars['String']['output']>;
    sentiment?: Maybe<AiSummarizationSentiment>;
    sid?: Maybe<Scalars['String']['output']>;
    summary?: Maybe<Scalars['String']['output']>;
    version?: Maybe<Scalars['String']['output']>;
};
export type AiSummarizationChannelCode = {
    __typename?: 'AISummarizationChannelCode';
    dispositionCode?: Maybe<Scalars['String']['output']>;
    subtopic?: Maybe<Scalars['String']['output']>;
    topic?: Maybe<Scalars['String']['output']>;
};
export type AiSummarizationChannelNoteInput = {
    instanceSid: Scalars['String']['input'];
    noteSid: Scalars['String']['input'];
};
export declare enum AiSummarizationChannelNoteType {
    Transfer = "TRANSFER",
    Wrapup = "WRAPUP"
}
export type AiSummarizationCreateChannelNoteInput = {
    channelSid: Scalars['String']['input'];
    dispositionCodeSid?: InputMaybe<Scalars['String']['input']>;
    generatedDispositionCodeSid?: InputMaybe<Scalars['String']['input']>;
    generatedSentiment?: InputMaybe<AiSummarizationSentiment>;
    generatedSummary?: InputMaybe<Scalars['String']['input']>;
    instanceSid: Scalars['String']['input'];
    interactionSid: Scalars['String']['input'];
    participantSid?: InputMaybe<Scalars['String']['input']>;
    profileConnectSid?: InputMaybe<Scalars['String']['input']>;
    sentiment?: InputMaybe<AiSummarizationSentiment>;
    summary?: InputMaybe<Scalars['String']['input']>;
    type?: InputMaybe<AiSummarizationChannelNoteType>;
};
export type AiSummarizationCreateCustomerProfileSummaryInput = {
    profileConnectSid: Scalars['String']['input'];
};
export type AiSummarizationCustomerProfileSummary = {
    __typename?: 'AISummarizationCustomerProfileSummary';
    dateCreated?: Maybe<Scalars['String']['output']>;
    dateUpdated?: Maybe<Scalars['String']['output']>;
    profileConnectSid?: Maybe<Scalars['String']['output']>;
    status?: Maybe<Scalars['String']['output']>;
    summary?: Maybe<Scalars['String']['output']>;
};
export type AiSummarizationCustomerProfileSummaryInput = {
    profileConnectSid: Scalars['String']['input'];
};
export declare enum AiSummarizationSentiment {
    Negative = "NEGATIVE",
    Neutral = "NEUTRAL",
    Positive = "POSITIVE"
}
export type AiSummarizationUpdateChannelNoteInput = {
    dispositionCodeSid?: InputMaybe<Scalars['String']['input']>;
    generatedDispositionCodeSid?: InputMaybe<Scalars['String']['input']>;
    generatedSentiment?: InputMaybe<AiSummarizationSentiment>;
    generatedSummary?: InputMaybe<Scalars['String']['input']>;
    instanceSid: Scalars['String']['input'];
    noteSid: Scalars['String']['input'];
    sentiment?: InputMaybe<AiSummarizationSentiment>;
    summary?: InputMaybe<Scalars['String']['input']>;
    version: Scalars['String']['input'];
};
export declare enum Action {
    Create = "CREATE",
    Delete = "DELETE",
    Read = "READ",
    Update = "UPDATE"
}
export type Activities = {
    __typename?: 'Activities';
    activities?: Maybe<Array<Maybe<Activity | ActivityDetails | ActivityView>>>;
    meta?: Maybe<MetaPagination>;
    warnings?: Maybe<Array<Maybe<Warning>>>;
};
export type ActivitiesInput = {
    pagination?: InputMaybe<PaginationInput>;
    profileConnectSid: Scalars['ID']['input'];
    profileEventConfigType?: InputMaybe<ProfileEventConfigType>;
};
export type Activity = ActivityBase & {
    __typename?: 'Activity';
    attributes?: Maybe<ActivityAttributes>;
    label?: Maybe<Scalars['String']['output']>;
    sid: Scalars['ID']['output'];
    timestamp?: Maybe<Scalars['String']['output']>;
    version?: Maybe<Scalars['Long']['output']>;
};
export type ActivityAttributes = CustomAttributes | InteractionAttributes | MapAttributes | ProfileEventUiAttributes;
export type ActivityBase = {
    attributes?: Maybe<ActivityAttributes>;
    label?: Maybe<Scalars['String']['output']>;
    /** @deprecated Will be removed */
    sid?: Maybe<Scalars['ID']['output']>;
    timestamp?: Maybe<Scalars['String']['output']>;
    version?: Maybe<Scalars['Long']['output']>;
};
export type ActivityDetail = {
    label?: Maybe<Scalars['String']['output']>;
    timestamp?: Maybe<Scalars['String']['output']>;
};
export type ActivityDetails = ActivityBase & {
    __typename?: 'ActivityDetails';
    attributes?: Maybe<ActivityAttributes>;
    details: Array<Maybe<ChannelDetail | CustomDetail | MapDetail | ProfileEventDetail | TranscriptionDetail>>;
    label?: Maybe<Scalars['String']['output']>;
    sid: Scalars['ID']['output'];
    timestamp?: Maybe<Scalars['String']['output']>;
    version?: Maybe<Scalars['Long']['output']>;
};
export type ActivityDetailsInput = {
    activitySid: Scalars['ID']['input'];
    profileConnectSid: Scalars['ID']['input'];
};
export type ActivityView = ActivityBase & {
    __typename?: 'ActivityView';
    attributes?: Maybe<ActivityAttributes>;
    details: Array<Maybe<ChannelDetail | CustomDetail | MapDetail | ProfileEventDetail | TranscriptionDetail>>;
    label?: Maybe<Scalars['String']['output']>;
    /** @deprecated Will be removed. Always null */
    sid?: Maybe<Scalars['ID']['output']>;
    timestamp?: Maybe<Scalars['String']['output']>;
    version?: Maybe<Scalars['Long']['output']>;
};
export type Agent = Participant & {
    __typename?: 'Agent';
    callDuration?: Maybe<Scalars['Int']['output']>;
    channelNote?: Maybe<AiSummarizationChannel>;
    mediaSid?: Maybe<Scalars['ID']['output']>;
    queue?: Maybe<TaskRouterQueue>;
    sid: Scalars['ID']['output'];
    timestamp?: Maybe<Scalars['String']['output']>;
    workerName?: Maybe<Scalars['String']['output']>;
    workerSid: Scalars['ID']['output'];
};
export type AgentCopilotTranscriptionSentence = {
    __typename?: 'AgentCopilotTranscriptionSentence';
    content: Scalars['String']['output'];
    end_timestamp: Scalars['String']['output'];
    is_final: Scalars['Boolean']['output'];
    participant_name?: Maybe<Scalars['String']['output']>;
    participant_sid?: Maybe<Scalars['String']['output']>;
    participant_type: Scalars['String']['output'];
};
export type AgentMetrics = {
    __typename?: 'AgentMetrics';
    availableAgents?: Maybe<Scalars['Int']['output']>;
    longestAvailableAgent?: Maybe<Scalars['String']['output']>;
    offlineAgents?: Maybe<Scalars['Int']['output']>;
    unavailableAgents?: Maybe<Scalars['Int']['output']>;
};
export type AiConversation = {
    __typename?: 'AiConversation';
    instanceSid?: Maybe<Scalars['String']['output']>;
    messages?: Maybe<Array<Maybe<Messages>>>;
    sid?: Maybe<Scalars['String']['output']>;
    tags?: Maybe<Array<Maybe<Tags>>>;
};
export type AiConversationInput = {
    instanceSid: Scalars['String']['input'];
    meetingSid: Scalars['String']['input'];
};
export type AiReport = {
    __typename?: 'AiReport';
    meta?: Maybe<MetaPagination>;
    rows?: Maybe<Array<Maybe<AiReportRows>>>;
};
export type AiReportExcerpts = {
    __typename?: 'AiReportExcerpts';
    text?: Maybe<Scalars['String']['output']>;
    timestamp?: Maybe<Scalars['String']['output']>;
};
export type AiReportFactors = {
    __typename?: 'AiReportFactors';
    excerpts?: Maybe<Array<Maybe<AiReportExcerpts>>>;
    factorId?: Maybe<Scalars['String']['output']>;
    impact?: Maybe<Scalars['String']['output']>;
};
export declare enum AiReportGranularity {
    Days = "DAYS",
    Months = "MONTHS",
    Quarters = "QUARTERS",
    Weeks = "WEEKS",
    Years = "YEARS"
}
export type AiReportInput = {
    channels?: InputMaybe<Scalars['String']['input']>;
    endIncludeDate?: InputMaybe<Scalars['String']['input']>;
    granularity: AiReportGranularity;
    includeDate: Scalars['String']['input'];
    instanceSid: Scalars['String']['input'];
    name: AiReportName;
    pagination?: InputMaybe<PaginationInput>;
    queues?: InputMaybe<Scalars['String']['input']>;
    scoreId?: InputMaybe<Scalars['String']['input']>;
    sortBy: Scalars['String']['input'];
    sortDirection?: InputMaybe<Scalars['String']['input']>;
    teams?: InputMaybe<Scalars['String']['input']>;
    tier?: InputMaybe<Scalars['String']['input']>;
    tierId?: InputMaybe<Scalars['String']['input']>;
    topics?: InputMaybe<Scalars['String']['input']>;
    type: AiReportType;
    workers?: InputMaybe<Scalars['String']['input']>;
};
export type AiReportModules = {
    __typename?: 'AiReportModules';
    baseline?: Maybe<Scalars['String']['output']>;
    score?: Maybe<Scalars['String']['output']>;
    scoreColumn?: Maybe<Scalars['String']['output']>;
    significance?: Maybe<Scalars['String']['output']>;
    summary?: Maybe<Scalars['String']['output']>;
    title?: Maybe<Scalars['String']['output']>;
    type?: Maybe<Scalars['String']['output']>;
    value?: Maybe<Scalars['String']['output']>;
};
export declare enum AiReportName {
    AgentsCsatSummary = "AGENTS_CSAT_SUMMARY",
    AgentMetrics = "AGENT_METRICS",
    ChannelMetrics = "CHANNEL_METRICS",
    ConversationMetrics = "CONVERSATION_METRICS",
    PredictiveScores = "PREDICTIVE_SCORES",
    QueueMetrics = "QUEUE_METRICS",
    TopicMetrics = "TOPIC_METRICS",
    TrendMetrics = "TREND_METRICS"
}
export type AiReportRows = {
    __typename?: 'AiReportRows';
    conversationTimestamp?: Maybe<Scalars['String']['output']>;
    messageCount?: Maybe<Scalars['Int']['output']>;
    modules?: Maybe<Array<Maybe<AiReportModules>>>;
    recordCount?: Maybe<Scalars['Int']['output']>;
    rowId?: Maybe<Scalars['String']['output']>;
    scores?: Maybe<Array<Maybe<AiReportScores>>>;
    significance?: Maybe<Scalars['String']['output']>;
    updated?: Maybe<Scalars['String']['output']>;
};
export type AiReportScores = {
    __typename?: 'AiReportScores';
    conversationPreview?: Maybe<Scalars['String']['output']>;
    factors?: Maybe<Array<Maybe<AiReportFactors>>>;
    periodEnd?: Maybe<Scalars['String']['output']>;
    periodStart?: Maybe<Scalars['String']['output']>;
    recordCount?: Maybe<Scalars['Int']['output']>;
    score?: Maybe<Scalars['String']['output']>;
    scoreId?: Maybe<Scalars['String']['output']>;
    scoreStatus?: Maybe<Scalars['String']['output']>;
    scoredCount?: Maybe<Scalars['Int']['output']>;
    sourceScore?: Maybe<Scalars['String']['output']>;
    subtitle?: Maybe<Scalars['String']['output']>;
    tiers?: Maybe<Array<Maybe<AiReportTiers>>>;
    title?: Maybe<Scalars['String']['output']>;
    trend?: Maybe<Scalars['String']['output']>;
    trendDirection?: Maybe<Scalars['String']['output']>;
};
export type AiReportTiers = {
    __typename?: 'AiReportTiers';
    recordCount?: Maybe<Scalars['Int']['output']>;
    tierId?: Maybe<Scalars['String']['output']>;
};
export declare enum AiReportType {
    Metrics = "METRICS",
    Summary = "SUMMARY",
    Trend = "TREND"
}
export declare enum AlertLevel {
    Critical = "CRITICAL",
    Default = "DEFAULT",
    Warning = "WARNING"
}
export declare enum Api {
    FlexV1 = "FLEX_V1",
    ProfileConnectorV1 = "PROFILE_CONNECTOR_V1",
    TaskRouterV1 = "TASK_ROUTER_V1",
    VoiceV1 = "VOICE_V1"
}
export type ChannelDetail = ActivityDetail & {
    __typename?: 'ChannelDetail';
    channelSid: Scalars['ID']['output'];
    channelType?: Maybe<ChannelType>;
    direction?: Maybe<Direction>;
    duration?: Maybe<Scalars['Int']['output']>;
    label?: Maybe<Scalars['String']['output']>;
    participants: Array<Maybe<Agent | Customer | UnknownParticipant>>;
    timestamp?: Maybe<Scalars['String']['output']>;
};
export type ChannelNoteCode = {
    __typename?: 'ChannelNoteCode';
    disposition_code?: Maybe<Scalars['String']['output']>;
    topic_path?: Maybe<Scalars['String']['output']>;
};
export type ChannelNoteCodeInput = {
    disposition_code?: InputMaybe<Scalars['String']['input']>;
    topic_path?: InputMaybe<Scalars['String']['input']>;
};
export type ChannelNoteCodes = {
    __typename?: 'ChannelNoteCodes';
    generated?: Maybe<Array<Maybe<ChannelNoteCode>>>;
    selected?: Maybe<Array<Maybe<ChannelNoteCode>>>;
};
export type ChannelNoteCodesInput = {
    generated?: InputMaybe<Array<InputMaybe<ChannelNoteCodeInput>>>;
    selected?: InputMaybe<Array<InputMaybe<ChannelNoteCodeInput>>>;
};
export type ChannelStatsAlert = {
    __typename?: 'ChannelStatsAlert';
    channelSid: Scalars['ID']['output'];
    healthStatus: AlertLevel;
    highlightedMetrics?: Maybe<InsightsMetrics>;
    stableMetrics: StableMetrics;
};
export declare enum ChannelType {
    Email = "EMAIL",
    Sms = "SMS",
    Unknown = "UNKNOWN",
    Voice = "VOICE",
    Web = "WEB",
    Whatsapp = "WHATSAPP"
}
export type ConferenceInput = {
    source?: InputMaybe<ConferenceSourceInput>;
};
export type ConferenceSourceInput = {
    participants?: InputMaybe<Array<InputMaybe<TranscriptionParticipantInput>>>;
};
export type CreateInteractionContextInput = {
    attributeGroup?: InputMaybe<Scalars['String']['input']>;
    attributes?: InputMaybe<Scalars['JSON']['input']>;
    namespace?: InputMaybe<Scalars['String']['input']>;
};
export declare enum CreationType {
    Generate = "generate",
    Manual = "manual"
}
export type CustomAttributes = {
    __typename?: 'CustomAttributes';
    data: Scalars['JSON']['output'];
};
export type CustomDetail = ActivityDetail & {
    __typename?: 'CustomDetail';
    data: Scalars['JSON']['output'];
    label?: Maybe<Scalars['String']['output']>;
    timestamp?: Maybe<Scalars['String']['output']>;
};
export type Customer = Participant & {
    __typename?: 'Customer';
    callDuration?: Maybe<Scalars['Int']['output']>;
    mediaSid?: Maybe<Scalars['ID']['output']>;
    sid: Scalars['ID']['output'];
    timestamp?: Maybe<Scalars['String']['output']>;
};
export declare enum Direction {
    Inbound = "INBOUND",
    Outbound = "OUTBOUND"
}
export type DispositionCode = {
    __typename?: 'DispositionCode';
    accountSid?: Maybe<Scalars['String']['output']>;
    dateCreated?: Maybe<Scalars['String']['output']>;
    dateUpdated?: Maybe<Scalars['String']['output']>;
    description?: Maybe<Scalars['String']['output']>;
    friendlyName?: Maybe<Scalars['String']['output']>;
    instanceSid?: Maybe<Scalars['String']['output']>;
    sid?: Maybe<Scalars['String']['output']>;
    state?: Maybe<DispositionCodeState>;
    topicSid?: Maybe<Scalars['String']['output']>;
    uniqueName?: Maybe<Scalars['String']['output']>;
    version?: Maybe<Scalars['Long']['output']>;
};
export declare enum DispositionCodeState {
    Active = "ACTIVE",
    Inactive = "INACTIVE"
}
export type FeatureConfiguration = {
    __typename?: 'FeatureConfiguration';
    account_sid: Scalars['String']['output'];
    instance_sid: Scalars['String']['output'];
    queues?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
    ui_config: FeatureConfigurationUiConfig;
};
export type FeatureConfigurationUiConfig = {
    __typename?: 'FeatureConfigurationUiConfig';
    display_note?: Maybe<Scalars['Boolean']['output']>;
    display_sentiment?: Maybe<Scalars['Boolean']['output']>;
    multilang_enabled?: Maybe<Scalars['Boolean']['output']>;
};
export type FeatureEnablementStatus = {
    __typename?: 'FeatureEnablementStatus';
    features: Array<Maybe<FeatureEnablementStatusItem>>;
    queueSid?: Maybe<Scalars['String']['output']>;
    userSid?: Maybe<Scalars['String']['output']>;
};
export type FeatureEnablementStatusInput = {
    featureName?: InputMaybe<Scalars['String']['input']>;
    instanceSid: Scalars['String']['input'];
    queueSid?: InputMaybe<Scalars['String']['input']>;
    userSid?: InputMaybe<Scalars['String']['input']>;
};
export type FeatureEnablementStatusItem = {
    __typename?: 'FeatureEnablementStatusItem';
    enabled?: Maybe<Scalars['Boolean']['output']>;
    featureName?: Maybe<Scalars['String']['output']>;
};
export type FlexInAppNotification = {
    __typename?: 'FlexInAppNotification';
    accountSid: Scalars['ID']['output'];
    instanceSid: Scalars['ID']['output'];
    message?: Maybe<Scalars['String']['output']>;
    notificationSid: Scalars['ID']['output'];
    recipients?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
    sentTime?: Maybe<Scalars['String']['output']>;
    severity?: Maybe<Scalars['String']['output']>;
    sourceId?: Maybe<Scalars['ID']['output']>;
    type: NotificationType;
};
export type FlexNotification = {
    __typename?: 'FlexNotification';
    accountSid: Scalars['ID']['output'];
    instanceSid: Scalars['ID']['output'];
    notification?: Maybe<FlexNotificationItem>;
    notificationSid?: Maybe<Scalars['String']['output']>;
    recipientId?: Maybe<Scalars['String']['output']>;
    sentTime?: Maybe<Scalars['String']['output']>;
    sourceId?: Maybe<Scalars['ID']['output']>;
    type: NotificationType;
};
export type FlexNotificationInput = {
    days?: InputMaybe<Scalars['Int']['input']>;
    pagination: PaginationInput;
    recipientSid: Scalars['String']['input'];
};
export type FlexNotificationItem = {
    __typename?: 'FlexNotificationItem';
    message?: Maybe<Scalars['String']['output']>;
    severity?: Maybe<Scalars['String']['output']>;
    status?: Maybe<Scalars['String']['output']>;
};
export type FlexNotificationStatusUpdateInput = {
    notificationSid: Scalars['String']['input'];
    recipientSid: Scalars['String']['input'];
    status: Scalars['String']['input'];
};
export type FlexNotificationSubscriptionInput = {
    recipientSid: Scalars['String']['input'];
};
export type FlexNotificationUpdateAllStatusInput = {
    days?: InputMaybe<Scalars['Int']['input']>;
    recipientSid: Scalars['String']['input'];
};
export type FlexNotificationsStatusUpdateResponse = {
    __typename?: 'FlexNotificationsStatusUpdateResponse';
    updated: Scalars['Boolean']['output'];
};
export type FlexTeamInfo = {
    __typename?: 'FlexTeamInfo';
    description?: Maybe<Scalars['String']['output']>;
    friendlyName?: Maybe<Scalars['String']['output']>;
    level?: Maybe<Scalars['Int']['output']>;
    memberCount?: Maybe<Scalars['Int']['output']>;
    owners?: Maybe<Array<Maybe<FlexTeamMemberInfo>>>;
    parentTeamSid?: Maybe<Scalars['String']['output']>;
    teamSid?: Maybe<Scalars['String']['output']>;
};
export type FlexTeamMemberInfo = {
    __typename?: 'FlexTeamMemberInfo';
    email?: Maybe<Scalars['String']['output']>;
    flexUserSid?: Maybe<Scalars['String']['output']>;
    friendlyName?: Maybe<Scalars['String']['output']>;
    workerSid?: Maybe<Scalars['String']['output']>;
};
export type FlexTeamMembers = {
    __typename?: 'FlexTeamMembers';
    accountSid?: Maybe<Scalars['String']['output']>;
    instanceSid?: Maybe<Scalars['String']['output']>;
    members?: Maybe<Array<Maybe<FlexTeamMemberInfo>>>;
    meta?: Maybe<MetaPagination>;
};
export type FlexTeamMembersInput = {
    pagination?: InputMaybe<PaginationInput>;
    teamSid: Scalars['String']['input'];
};
export type FlexTeams = {
    __typename?: 'FlexTeams';
    accountSid?: Maybe<Scalars['String']['output']>;
    instanceSid?: Maybe<Scalars['String']['output']>;
    meta?: Maybe<MetaPagination>;
    teams?: Maybe<Array<Maybe<FlexTeamInfo>>>;
};
export type FlexTeamsContext = {
    __typename?: 'FlexTeamsContext';
    teamSetupComplete?: Maybe<Scalars['Boolean']['output']>;
};
export type FlexTeamsInput = {
    flexUserSid?: InputMaybe<Scalars['String']['input']>;
    includeTransitive?: InputMaybe<Scalars['Boolean']['input']>;
    pagination?: InputMaybe<PaginationInput>;
};
export type FlexUserInfo = {
    __typename?: 'FlexUserInfo';
    accountSid?: Maybe<Scalars['String']['output']>;
    createdDate?: Maybe<Scalars['String']['output']>;
    email?: Maybe<Scalars['String']['output']>;
    firstName?: Maybe<Scalars['String']['output']>;
    flexTeamSid?: Maybe<Scalars['String']['output']>;
    flexUserSid?: Maybe<Scalars['String']['output']>;
    friendlyName?: Maybe<Scalars['String']['output']>;
    instanceSid?: Maybe<Scalars['String']['output']>;
    lastName?: Maybe<Scalars['String']['output']>;
    locale?: Maybe<Scalars['String']['output']>;
    roles?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
    updatedDate?: Maybe<Scalars['String']['output']>;
    userSid?: Maybe<Scalars['String']['output']>;
    username?: Maybe<Scalars['String']['output']>;
    version?: Maybe<Scalars['Long']['output']>;
    workerSid?: Maybe<Scalars['String']['output']>;
    workspaceSid?: Maybe<Scalars['String']['output']>;
};
export type FlexUsers = {
    __typename?: 'FlexUsers';
    accountSid?: Maybe<Scalars['String']['output']>;
    instanceSid?: Maybe<Scalars['String']['output']>;
    meta?: Maybe<MetaPagination>;
    users?: Maybe<Array<Maybe<FlexUserInfo>>>;
};
export type FlexUsersInput = {
    email?: InputMaybe<Scalars['String']['input']>;
    pagination?: InputMaybe<PaginationInput>;
    username?: InputMaybe<Scalars['String']['input']>;
    workerSid?: InputMaybe<Scalars['String']['input']>;
};
export type GetOrCreateProfilesAttributesInput = {
    key?: InputMaybe<Scalars['String']['input']>;
    value?: InputMaybe<Scalars['String']['input']>;
};
export type GetOrCreateProfilesInput = {
    attributes: Array<InputMaybe<GetOrCreateProfilesAttributesInput>>;
    instanceIdentifier?: InputMaybe<Scalars['String']['input']>;
    uniqueName?: InputMaybe<Scalars['String']['input']>;
    writeIfNotFound?: InputMaybe<Scalars['Boolean']['input']>;
};
export type GrantInput = {
    act: Action;
    api: Api;
    res: Scalars['String']['input'];
};
export type HighlightedMetricDetail = {
    __typename?: 'HighlightedMetricDetail';
    alertLevel: AlertLevel;
    metricValue: Scalars['String']['output'];
    thresholdValue?: Maybe<Scalars['String']['output']>;
};
export type HighlightedMetrics = {
    __typename?: 'HighlightedMetrics';
    accountSid: Scalars['ID']['output'];
    channelStatsAlerts: Array<Maybe<ChannelStatsAlert>>;
    healthStatus: AlertLevel;
    instanceSid: Scalars['ID']['output'];
    metricType: MetricType;
    queueLevelMetrics?: Maybe<InsightsMetrics>;
    queueSid: Scalars['String']['output'];
    queuesStatsTimestamp?: Maybe<Scalars['String']['output']>;
    ruleEvaluatorTimestamp?: Maybe<Scalars['String']['output']>;
    stableMetrics: StableMetrics;
};
export type HighlightedMetricsInput = {
    queues?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};
export type InsightsMetrics = {
    __typename?: 'InsightsMetrics';
    abandonedTasksCount?: Maybe<HighlightedMetricDetail>;
    abandonedTasksPercentage?: Maybe<HighlightedMetricDetail>;
    activeTasks?: Maybe<HighlightedMetricDetail>;
    availableAgents?: Maybe<HighlightedMetricDetail>;
    averageHandleTime?: Maybe<HighlightedMetricDetail>;
    averageWaitingTime?: Maybe<HighlightedMetricDetail>;
    handledTasksCount?: Maybe<HighlightedMetricDetail>;
    handledTasksWithinSlThresholdPercentage?: Maybe<HighlightedMetricDetail>;
    longestAvailableAgent?: Maybe<HighlightedMetricDetail>;
    longestTaskWaitingFrom?: Maybe<HighlightedMetricDetail>;
    offlineAgents?: Maybe<HighlightedMetricDetail>;
    slaPercentage?: Maybe<HighlightedMetricDetail>;
    totalMissedInvitations?: Maybe<HighlightedMetricDetail>;
    unavailableAgents?: Maybe<HighlightedMetricDetail>;
    waitingTasks?: Maybe<HighlightedMetricDetail>;
};
export type InteractionAttributes = {
    __typename?: 'InteractionAttributes';
    channelType?: Maybe<ChannelType>;
    direction?: Maybe<Direction>;
    duration?: Maybe<Scalars['Int']['output']>;
    interactionSid: Scalars['ID']['output'];
};
export type InteractionContext = {
    __typename?: 'InteractionContext';
    accountSid: Scalars['ID']['output'];
    attributes?: Maybe<Scalars['JSON']['output']>;
    createdBy: Scalars['String']['output'];
    dateCreated?: Maybe<Scalars['String']['output']>;
    dateUpdated?: Maybe<Scalars['String']['output']>;
    lastUpdateBy?: Maybe<Scalars['String']['output']>;
    sid: Scalars['ID']['output'];
    version: Scalars['Int']['output'];
};
export type InteractionContextInput = {
    contextSid: Scalars['ID']['input'];
};
export type InteractionSummary = {
    __typename?: 'InteractionSummary';
    channel_sid: Scalars['String']['output'];
    codes?: Maybe<ChannelNoteCodes>;
    date_created: Scalars['String']['output'];
    date_updated: Scalars['String']['output'];
    detected_language?: Maybe<Scalars['String']['output']>;
    disposition_code_sid?: Maybe<Scalars['String']['output']>;
    generated_disposition_code_sid?: Maybe<Scalars['String']['output']>;
    generated_sentiment?: Maybe<Scalars['String']['output']>;
    generated_summary?: Maybe<Scalars['String']['output']>;
    instance_sid: Scalars['String']['output'];
    interaction_sid: Scalars['String']['output'];
    participant_sid?: Maybe<Scalars['String']['output']>;
    profile_connect_sid?: Maybe<Scalars['String']['output']>;
    sentiment?: Maybe<Scalars['String']['output']>;
    sid: Scalars['String']['output'];
    summary?: Maybe<Scalars['String']['output']>;
    version: Scalars['Int']['output'];
};
export type ListTranscriptionSentencesInput = {
    channelSid: Scalars['ID']['input'];
    /** Used for resolving the worker identity for participant name field. */
    conference?: InputMaybe<ConferenceInput>;
    interactionSid: Scalars['ID']['input'];
    /** Used for resolving the customer identity for participant name field. */
    task?: InputMaybe<TaskInput>;
    /** Used for resolving the worker identity for participant name field. */
    worker?: InputMaybe<WorkerInput>;
};
export type MapAttributes = {
    __typename?: 'MapAttributes';
    data: Scalars['JSON']['output'];
};
export type MapDetail = ActivityDetail & {
    __typename?: 'MapDetail';
    data: Scalars['JSON']['output'];
    label?: Maybe<Scalars['String']['output']>;
    timestamp?: Maybe<Scalars['String']['output']>;
};
export type Messages = {
    __typename?: 'Messages';
    dateCreated?: Maybe<Scalars['String']['output']>;
    message?: Maybe<Scalars['String']['output']>;
    messageId?: Maybe<Scalars['String']['output']>;
    participantSid?: Maybe<Scalars['String']['output']>;
    participantType?: Maybe<Scalars['String']['output']>;
};
export type MetaPagination = {
    __typename?: 'MetaPagination';
    nextPageToken?: Maybe<Scalars['String']['output']>;
    pageSize?: Maybe<Scalars['Int']['output']>;
};
export declare enum MetricType {
    ActivityStats = "ACTIVITY_STATS",
    TasksNow = "TASKS_NOW",
    TasksThirtyMinutes = "TASKS_THIRTY_MINUTES",
    TasksToday = "TASKS_TODAY",
    Unknown = "UNKNOWN"
}
export type Mutation = {
    __typename?: 'Mutation';
    createChannelNote?: Maybe<AiSummarizationChannel>;
    createCustomerProfileSummary?: Maybe<AiSummarizationCustomerProfileSummary>;
    createInteractionContext?: Maybe<InteractionContext>;
    createInteractionSummary?: Maybe<InteractionSummary>;
    deleteMessages: AiCopilotAssistApiResponse;
    getOrCreateProfiles?: Maybe<Array<Maybe<Profile>>>;
    markAllNotificationsRead?: Maybe<FlexNotificationsStatusUpdateResponse>;
    sendMessage: AiCopilotAssistApiSendMessageResponse;
    updateChannelNote?: Maybe<AiSummarizationChannel>;
    updateInteractionSummary?: Maybe<InteractionSummary>;
    updateNotificationStatus?: Maybe<FlexNotification>;
};
export type MutationCreateChannelNoteArgs = {
    input: AiSummarizationCreateChannelNoteInput;
};
export type MutationCreateCustomerProfileSummaryArgs = {
    input: AiSummarizationCreateCustomerProfileSummaryInput;
};
export type MutationCreateInteractionContextArgs = {
    input: CreateInteractionContextInput;
};
export type MutationCreateInteractionSummaryArgs = {
    channelSid: Scalars['String']['input'];
    codes?: InputMaybe<ChannelNoteCodesInput>;
    detectedLanguage?: InputMaybe<Scalars['String']['input']>;
    dispositionCodeSid?: InputMaybe<Scalars['String']['input']>;
    instanceSid: Scalars['String']['input'];
    interactionSid: Scalars['String']['input'];
    participantSid?: InputMaybe<Scalars['String']['input']>;
    profileConnectSid?: InputMaybe<Scalars['String']['input']>;
    sentiment?: InputMaybe<Scalars['String']['input']>;
    summary?: InputMaybe<Scalars['String']['input']>;
    taskSid?: InputMaybe<Scalars['String']['input']>;
};
export type MutationDeleteMessagesArgs = {
    input: AiCopilotAssistApiDeleteMessagesInput;
};
export type MutationGetOrCreateProfilesArgs = {
    input: GetOrCreateProfilesInput;
};
export type MutationMarkAllNotificationsReadArgs = {
    input?: InputMaybe<FlexNotificationUpdateAllStatusInput>;
};
export type MutationSendMessageArgs = {
    input: AiCopilotAssistApiSendMessageInput;
};
export type MutationUpdateChannelNoteArgs = {
    input: AiSummarizationUpdateChannelNoteInput;
};
export type MutationUpdateInteractionSummaryArgs = {
    channelSid: Scalars['String']['input'];
    codes?: InputMaybe<ChannelNoteCodesInput>;
    currentVersion: Scalars['Int']['input'];
    detectedLanguage?: InputMaybe<Scalars['String']['input']>;
    dispositionCodeSid?: InputMaybe<Scalars['String']['input']>;
    generatedDispositionCodeSid?: InputMaybe<Scalars['String']['input']>;
    generatedSentiment?: InputMaybe<Scalars['String']['input']>;
    generatedSummary?: InputMaybe<Scalars['String']['input']>;
    instanceSid: Scalars['String']['input'];
    interactionSid: Scalars['String']['input'];
    participantSid?: InputMaybe<Scalars['String']['input']>;
    profileConnectSid?: InputMaybe<Scalars['String']['input']>;
    sentiment?: InputMaybe<Scalars['String']['input']>;
    sid: Scalars['String']['input'];
    summary: Scalars['String']['input'];
    taskSid?: InputMaybe<Scalars['String']['input']>;
};
export type MutationUpdateNotificationStatusArgs = {
    input: FlexNotificationStatusUpdateInput;
};
export declare enum NotificationType {
    Email = "EMAIL",
    Inapp = "INAPP",
    Slack = "SLACK",
    Unknown = "UNKNOWN"
}
export type Notifications = {
    __typename?: 'Notifications';
    meta?: Maybe<MetaPagination>;
    notifications?: Maybe<Array<Maybe<FlexNotification>>>;
};
export type NowMetrics = {
    __typename?: 'NowMetrics';
    assignedTasks: Scalars['Int']['output'];
    longestTaskWaitingAge: Scalars['Int']['output'];
    longestTaskWaitingFrom?: Maybe<Scalars['String']['output']>;
    longestTaskWaitingSid?: Maybe<Scalars['String']['output']>;
    pendingTasks: Scalars['Int']['output'];
    reservedTasks: Scalars['Int']['output'];
    timestampUpdated: Scalars['Int']['output'];
    totalTasks: Scalars['Int']['output'];
    wrappingTasks: Scalars['Int']['output'];
};
export type PaginationInput = {
    pageSize?: InputMaybe<Scalars['Int']['input']>;
    pageToken?: InputMaybe<Scalars['String']['input']>;
};
export type Participant = {
    callDuration?: Maybe<Scalars['Int']['output']>;
    mediaSid?: Maybe<Scalars['ID']['output']>;
    sid: Scalars['ID']['output'];
    timestamp?: Maybe<Scalars['String']['output']>;
};
export type Profile = {
    __typename?: 'Profile';
    additionalContacts?: Maybe<Array<Maybe<ProfileContact>>>;
    additionalName?: Maybe<Scalars['String']['output']>;
    addresses?: Maybe<Array<Maybe<ProfileAddress>>>;
    businessName?: Maybe<Scalars['String']['output']>;
    contactType?: Maybe<Scalars['String']['output']>;
    dateCreated?: Maybe<Scalars['String']['output']>;
    dateUpdated?: Maybe<Scalars['String']['output']>;
    emailAddress?: Maybe<Scalars['String']['output']>;
    /** @deprecated Will be removed. Always null */
    externalId?: Maybe<Scalars['ID']['output']>;
    familyName?: Maybe<Scalars['String']['output']>;
    givenName?: Maybe<Scalars['String']['output']>;
    phoneNumber?: Maybe<Scalars['String']['output']>;
    profileImageUrl?: Maybe<Scalars['String']['output']>;
    sid?: Maybe<Scalars['ID']['output']>;
    type?: Maybe<Scalars['String']['output']>;
};
export type ProfileAddress = {
    __typename?: 'ProfileAddress';
    address1?: Maybe<Scalars['String']['output']>;
    address2?: Maybe<Scalars['String']['output']>;
    address3?: Maybe<Scalars['String']['output']>;
    city?: Maybe<Scalars['String']['output']>;
    country?: Maybe<Scalars['String']['output']>;
    id?: Maybe<Scalars['ID']['output']>;
    state?: Maybe<Scalars['String']['output']>;
    type?: Maybe<Scalars['String']['output']>;
    zipCode?: Maybe<Scalars['String']['output']>;
};
export type ProfileConfigurationSid = {
    __typename?: 'ProfileConfigurationSid';
    profileConfigurationSid?: Maybe<Scalars['String']['output']>;
};
export type ProfileContact = {
    __typename?: 'ProfileContact';
    additionalName?: Maybe<Scalars['String']['output']>;
    addressId?: Maybe<Scalars['String']['output']>;
    businessName?: Maybe<Scalars['String']['output']>;
    emailAddress?: Maybe<Scalars['String']['output']>;
    familyName?: Maybe<Scalars['String']['output']>;
    givenName?: Maybe<Scalars['String']['output']>;
    phoneNumber?: Maybe<Scalars['String']['output']>;
    type?: Maybe<Scalars['String']['output']>;
};
export declare enum ProfileEventConfigType {
    Recent = "RECENT",
    Timeline = "TIMELINE"
}
export type ProfileEventDetail = ActivityDetail & {
    __typename?: 'ProfileEventDetail';
    data: Scalars['JSON']['output'];
    label?: Maybe<Scalars['String']['output']>;
    timestamp?: Maybe<Scalars['String']['output']>;
};
export type ProfileEventUiAttributes = {
    __typename?: 'ProfileEventUIAttributes';
    descriptionLabel?: Maybe<Scalars['String']['output']>;
    eventName?: Maybe<Scalars['String']['output']>;
};
export type ProfileInput = {
    sid: Scalars['ID']['input'];
};
export type ProfilesAndHistoryConfiguration = {
    __typename?: 'ProfilesAndHistoryConfiguration';
    context?: Maybe<ProfilesAndHistoryConfigurationContextSchema>;
    data?: Maybe<ProfilesAndHistoryConfigurationDataModel>;
    dateCreated?: Maybe<Scalars['String']['output']>;
    dateUpdated?: Maybe<Scalars['String']['output']>;
    sid: Scalars['ID']['output'];
    version?: Maybe<Scalars['String']['output']>;
};
export type ProfilesAndHistoryConfigurationActivityCustomization = {
    __typename?: 'ProfilesAndHistoryConfigurationActivityCustomization';
    eventDateProperty?: Maybe<Scalars['String']['output']>;
    eventName?: Maybe<Scalars['String']['output']>;
    friendlyName?: Maybe<Scalars['String']['output']>;
    imageProperty?: Maybe<ProfilesAndHistoryConfigurationEventProperty>;
    primaryProperty?: Maybe<ProfilesAndHistoryConfigurationEventProperty>;
    profileEventConfigType?: Maybe<ProfilesAndHistoryConfigurationProfileEventConfigType>;
    secondaryProperties?: Maybe<Array<Maybe<ProfilesAndHistoryConfigurationEventProperty>>>;
};
export declare enum ProfilesAndHistoryConfigurationAddress {
    Email = "EMAIL",
    Phone = "PHONE"
}
export type ProfilesAndHistoryConfigurationAddressMapping = {
    __typename?: 'ProfilesAndHistoryConfigurationAddressMapping';
    address?: Maybe<ProfilesAndHistoryConfigurationAddress>;
    enabled?: Maybe<Scalars['Boolean']['output']>;
    identifier?: Maybe<Scalars['String']['output']>;
};
export type ProfilesAndHistoryConfigurationChannelAddressMapping = {
    __typename?: 'ProfilesAndHistoryConfigurationChannelAddressMapping';
    address?: Maybe<ProfilesAndHistoryConfigurationAddress>;
    enabled?: Maybe<Scalars['Boolean']['output']>;
    identifier?: Maybe<ProfilesAndHistoryConfigurationOrderedConfigurationReference>;
};
export declare enum ProfilesAndHistoryConfigurationConfigurationType {
    ActivityCustomization = "ACTIVITY_CUSTOMIZATION",
    AddressMapping = "ADDRESS_MAPPING",
    ChannelAddressMapping = "CHANNEL_ADDRESS_MAPPING",
    CustomerHeader = "CUSTOMER_HEADER",
    FlexUnifyWriteKey = "FLEX_UNIFY_WRITE_KEY",
    GenericConnectorConfiguration = "GENERIC_CONNECTOR_CONFIGURATION",
    IdentifierMapping = "IDENTIFIER_MAPPING",
    IdentifierMappings = "IDENTIFIER_MAPPINGS",
    IncludeTraitsByDefault = "INCLUDE_TRAITS_BY_DEFAULT",
    ManualProfileSearchOptions = "MANUAL_PROFILE_SEARCH_OPTIONS",
    ProfileDetailsEnabled = "PROFILE_DETAILS_ENABLED",
    ProfileHighlightsEnabled = "PROFILE_HIGHLIGHTS_ENABLED",
    ProfileHistoryEnabled = "PROFILE_HISTORY_ENABLED",
    ProfileTraitGroups = "PROFILE_TRAIT_GROUPS",
    RecentActivityGroup = "RECENT_ACTIVITY_GROUP",
    SegmentUnifyApiKey = "SEGMENT_UNIFY_API_KEY",
    SegmentUnifySpaceId = "SEGMENT_UNIFY_SPACE_ID",
    SegmentWorkspaceId = "SEGMENT_WORKSPACE_ID",
    TraitMapping = "TRAIT_MAPPING",
    UnidentifiedProfileSearchOptions = "UNIDENTIFIED_PROFILE_SEARCH_OPTIONS"
}
export declare enum ProfilesAndHistoryConfigurationContextSchema {
    ProfileConnectorCredentials = "PROFILE_CONNECTOR_CREDENTIALS",
    ProfileConnectorIdentifierConfiguration = "PROFILE_CONNECTOR_IDENTIFIER_CONFIGURATION",
    ProfileConnectorOptions = "PROFILE_CONNECTOR_OPTIONS",
    ProfileConnectorTraitMappingConfiguration = "PROFILE_CONNECTOR_TRAIT_MAPPING_CONFIGURATION",
    ProfileDetailsGroups = "PROFILE_DETAILS_GROUPS",
    ProfileDetailsTraitGroups = "PROFILE_DETAILS_TRAIT_GROUPS",
    ProfileHeaderConfigurations = "PROFILE_HEADER_CONFIGURATIONS",
    ProfileHistoryActivitySelections = "PROFILE_HISTORY_ACTIVITY_SELECTIONS",
    UnifyComponentVisibility = "UNIFY_COMPONENT_VISIBILITY"
}
export type ProfilesAndHistoryConfigurationCustomerHeader = {
    __typename?: 'ProfilesAndHistoryConfigurationCustomerHeader';
    avatarTrait?: Maybe<ProfilesAndHistoryConfigurationOrderedConfigurationReference>;
    profileName?: Maybe<ProfilesAndHistoryConfigurationCustomerHeaderProfileName>;
    secondaryTrait?: Maybe<ProfilesAndHistoryConfigurationOrderedConfigurationReference>;
};
export type ProfilesAndHistoryConfigurationCustomerHeaderProfileName = {
    __typename?: 'ProfilesAndHistoryConfigurationCustomerHeaderProfileName';
    customerNameTraits?: Maybe<Array<Maybe<ProfilesAndHistoryConfigurationOrderedConfigurationReference>>>;
};
export type ProfilesAndHistoryConfigurationDataModel = ProfilesAndHistoryConfigurationActivityCustomization | ProfilesAndHistoryConfigurationAddressMapping | ProfilesAndHistoryConfigurationChannelAddressMapping | ProfilesAndHistoryConfigurationCustomerHeader | ProfilesAndHistoryConfigurationFlexUnifyWriteKey | ProfilesAndHistoryConfigurationGenericConnectorConfiguration | ProfilesAndHistoryConfigurationIdentifierMapping | ProfilesAndHistoryConfigurationIdentifierMappings | ProfilesAndHistoryConfigurationIncludeTraitsByDefault | ProfilesAndHistoryConfigurationManualProfileSearchOptions | ProfilesAndHistoryConfigurationProfileDetailsEnabled | ProfilesAndHistoryConfigurationProfileHighlightsEnabled | ProfilesAndHistoryConfigurationProfileHistoryEnabled | ProfilesAndHistoryConfigurationProfileTraitGroups | ProfilesAndHistoryConfigurationRecentActivityGroup | ProfilesAndHistoryConfigurationSegmentUnifyApiKey | ProfilesAndHistoryConfigurationSegmentUnifySpaceId | ProfilesAndHistoryConfigurationSegmentWorkspaceId | ProfilesAndHistoryConfigurationTraitMapping | ProfilesAndHistoryConfigurationUnidentifiedProfileSearchOptions;
export type ProfilesAndHistoryConfigurationEventProperty = {
    __typename?: 'ProfilesAndHistoryConfigurationEventProperty';
    label?: Maybe<Scalars['String']['output']>;
    order?: Maybe<Scalars['Int']['output']>;
    propertyKey?: Maybe<Scalars['String']['output']>;
    type?: Maybe<ProfilesAndHistoryConfigurationEventPropertyType>;
};
export declare enum ProfilesAndHistoryConfigurationEventPropertyType {
    Currency = "CURRENCY",
    Date = "DATE",
    Link = "LINK",
    Number = "NUMBER",
    String = "STRING"
}
export type ProfilesAndHistoryConfigurationFlexUnifyWriteKey = {
    __typename?: 'ProfilesAndHistoryConfigurationFlexUnifyWriteKey';
    flexUnifyWriteKey?: Maybe<Scalars['String']['output']>;
};
export type ProfilesAndHistoryConfigurationGenericConnectorConfiguration = {
    __typename?: 'ProfilesAndHistoryConfigurationGenericConnectorConfiguration';
    baseUrl?: Maybe<Scalars['String']['output']>;
    genericCredentialSid?: Maybe<Scalars['String']['output']>;
};
export type ProfilesAndHistoryConfigurationIdentifierMapping = {
    __typename?: 'ProfilesAndHistoryConfigurationIdentifierMapping';
    friendlyName?: Maybe<Scalars['String']['output']>;
    identifier?: Maybe<Scalars['String']['output']>;
    priority?: Maybe<Scalars['Int']['output']>;
    transformations?: Maybe<Array<Maybe<ProfilesAndHistoryConfigurationIdentifierTransformation>>>;
};
export type ProfilesAndHistoryConfigurationIdentifierMappings = {
    __typename?: 'ProfilesAndHistoryConfigurationIdentifierMappings';
    identifierMappings?: Maybe<Array<Maybe<ProfilesAndHistoryConfigurationIdentifierMapping>>>;
};
export type ProfilesAndHistoryConfigurationIdentifierTransformation = {
    __typename?: 'ProfilesAndHistoryConfigurationIdentifierTransformation';
    formats?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
    matchRegex?: Maybe<Scalars['String']['output']>;
};
export type ProfilesAndHistoryConfigurationIncludeTraitsByDefault = {
    __typename?: 'ProfilesAndHistoryConfigurationIncludeTraitsByDefault';
    includeTraitsByDefault?: Maybe<Scalars['Boolean']['output']>;
};
export type ProfilesAndHistoryConfigurationInput = {
    configurationSid: Scalars['ID']['input'];
    secondaryIdentifier?: InputMaybe<Scalars['String']['input']>;
};
export type ProfilesAndHistoryConfigurationManualProfileSearchOptions = {
    __typename?: 'ProfilesAndHistoryConfigurationManualProfileSearchOptions';
    identifiers?: Maybe<Array<Maybe<ProfilesAndHistoryConfigurationOrderedConfigurationReference>>>;
};
export type ProfilesAndHistoryConfigurationOrderedConfigurationReference = {
    __typename?: 'ProfilesAndHistoryConfigurationOrderedConfigurationReference';
    friendlyNameOverride?: Maybe<Scalars['String']['output']>;
    order?: Maybe<Scalars['Int']['output']>;
    referenceSid?: Maybe<Scalars['String']['output']>;
    type?: Maybe<ProfilesAndHistoryConfigurationConfigurationType>;
};
export type ProfilesAndHistoryConfigurationProfileDetailsEnabled = {
    __typename?: 'ProfilesAndHistoryConfigurationProfileDetailsEnabled';
    profileDetailsEnabled?: Maybe<Scalars['Boolean']['output']>;
};
export declare enum ProfilesAndHistoryConfigurationProfileEventConfigType {
    Recent = "RECENT",
    Timeline = "TIMELINE"
}
export type ProfilesAndHistoryConfigurationProfileHighlightsEnabled = {
    __typename?: 'ProfilesAndHistoryConfigurationProfileHighlightsEnabled';
    profileHighlightsEnabled?: Maybe<Scalars['Boolean']['output']>;
};
export type ProfilesAndHistoryConfigurationProfileHistoryEnabled = {
    __typename?: 'ProfilesAndHistoryConfigurationProfileHistoryEnabled';
    profileHistoryEnabled?: Maybe<Scalars['Boolean']['output']>;
};
export type ProfilesAndHistoryConfigurationProfileTraitGroup = {
    __typename?: 'ProfilesAndHistoryConfigurationProfileTraitGroup';
    groupName?: Maybe<Scalars['String']['output']>;
    order?: Maybe<Scalars['Int']['output']>;
    traits?: Maybe<Array<Maybe<ProfilesAndHistoryConfigurationOrderedConfigurationReference>>>;
};
export type ProfilesAndHistoryConfigurationProfileTraitGroups = {
    __typename?: 'ProfilesAndHistoryConfigurationProfileTraitGroups';
    profileTraitGroups?: Maybe<Array<Maybe<ProfilesAndHistoryConfigurationProfileTraitGroup>>>;
};
export type ProfilesAndHistoryConfigurationRecentActivityGroup = {
    __typename?: 'ProfilesAndHistoryConfigurationRecentActivityGroup';
    activities?: Maybe<Array<Maybe<ProfilesAndHistoryConfigurationOrderedConfigurationReference>>>;
    limit?: Maybe<Scalars['Int']['output']>;
    timeFrame?: Maybe<Scalars['Int']['output']>;
};
export type ProfilesAndHistoryConfigurationSegmentUnifyApiKey = {
    __typename?: 'ProfilesAndHistoryConfigurationSegmentUnifyApiKey';
    segmentUnifyApiKey?: Maybe<Scalars['String']['output']>;
};
export type ProfilesAndHistoryConfigurationSegmentUnifySpaceId = {
    __typename?: 'ProfilesAndHistoryConfigurationSegmentUnifySpaceId';
    segmentUnifySpaceId?: Maybe<Scalars['String']['output']>;
};
export type ProfilesAndHistoryConfigurationSegmentWorkspaceId = {
    __typename?: 'ProfilesAndHistoryConfigurationSegmentWorkspaceId';
    segmentWorkspaceId?: Maybe<Scalars['String']['output']>;
};
export declare enum ProfilesAndHistoryConfigurationTraitFieldType {
    Currency = "CURRENCY",
    Date = "DATE",
    DateTime = "DATE_TIME",
    Link = "LINK",
    Number = "NUMBER",
    Percentile = "PERCENTILE",
    PercentileReversed = "PERCENTILE_REVERSED",
    String = "STRING"
}
export type ProfilesAndHistoryConfigurationTraitMapping = {
    __typename?: 'ProfilesAndHistoryConfigurationTraitMapping';
    categories?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
    defaultFriendlyName?: Maybe<Scalars['String']['output']>;
    from?: Maybe<Scalars['String']['output']>;
    to?: Maybe<Scalars['String']['output']>;
    traitFieldType?: Maybe<ProfilesAndHistoryConfigurationTraitFieldType>;
};
export type ProfilesAndHistoryConfigurationUnidentifiedProfileSearchOptions = {
    __typename?: 'ProfilesAndHistoryConfigurationUnidentifiedProfileSearchOptions';
    bridgeLabel?: Maybe<Scalars['String']['output']>;
    showUnidentifiedProfileToAgents?: Maybe<Scalars['Boolean']['output']>;
};
export type ProfilesAndHistoryConfigurations = {
    __typename?: 'ProfilesAndHistoryConfigurations';
    configurations?: Maybe<Array<Maybe<ProfilesAndHistoryConfiguration>>>;
    meta?: Maybe<MetaPagination>;
};
export type ProfilesAndHistoryConfigurationsInput = {
    context: ProfilesAndHistoryConfigurationContextSchema;
    pagination?: InputMaybe<PaginationInput>;
    secondaryIdentifier?: InputMaybe<Scalars['String']['input']>;
};
export type Query = {
    __typename?: 'Query';
    activities?: Maybe<Activities>;
    activityDetails?: Maybe<ActivityDetails>;
    aiConversations?: Maybe<AiConversation>;
    aiReports?: Maybe<AiReport>;
    channelNote?: Maybe<AiSummarizationChannel>;
    copilotAssistEvents: AiCopilotAssistApiListEventsPayload;
    customerProfileSummary?: Maybe<AiSummarizationCustomerProfileSummary>;
    featureEnablementStatus?: Maybe<FeatureEnablementStatus>;
    fetchDispositionCodes?: Maybe<Array<Maybe<DispositionCode>>>;
    fetchFeatureConfiguration?: Maybe<FeatureConfiguration>;
    fetchTopics?: Maybe<Array<Maybe<Topic>>>;
    fetchTranscriptionSentences?: Maybe<Array<Maybe<AgentCopilotTranscriptionSentence>>>;
    flexInstanceSid?: Maybe<Scalars['ID']['output']>;
    flexNotifications?: Maybe<Notifications>;
    flexTeamMembers?: Maybe<FlexTeamMembers>;
    flexTeams?: Maybe<FlexTeams>;
    flexTeamsContext?: Maybe<FlexTeamsContext>;
    flexUsers?: Maybe<FlexUsers>;
    getProfileConfigurationSid?: Maybe<ProfileConfigurationSid>;
    interactionContext?: Maybe<InteractionContext>;
    listMessages: AiCopilotAssistApiListMessagesResponse;
    listTranscriptionSentences?: Maybe<Array<Maybe<TranscriptionSentence>>>;
    profile?: Maybe<Profile>;
    profileAndHistoryConfiguration?: Maybe<ProfilesAndHistoryConfiguration>;
    profileAndHistoryConfigurations?: Maybe<ProfilesAndHistoryConfigurations>;
};
export type QueryActivitiesArgs = {
    input: ActivitiesInput;
};
export type QueryActivityDetailsArgs = {
    input: ActivityDetailsInput;
};
export type QueryAiConversationsArgs = {
    input: AiConversationInput;
};
export type QueryAiReportsArgs = {
    input: AiReportInput;
};
export type QueryChannelNoteArgs = {
    input: AiSummarizationChannelNoteInput;
};
export type QueryCopilotAssistEventsArgs = {
    input: AiCopilotAssistApiListEventsInput;
};
export type QueryCustomerProfileSummaryArgs = {
    input: AiSummarizationCustomerProfileSummaryInput;
};
export type QueryFeatureEnablementStatusArgs = {
    input: FeatureEnablementStatusInput;
};
export type QueryFetchDispositionCodesArgs = {
    archived?: InputMaybe<Scalars['Boolean']['input']>;
    instanceSid: Scalars['String']['input'];
    topicSid?: InputMaybe<Scalars['String']['input']>;
};
export type QueryFetchFeatureConfigurationArgs = {
    featureName: Scalars['String']['input'];
    instanceSid: Scalars['String']['input'];
};
export type QueryFetchTopicsArgs = {
    instanceSid: Scalars['String']['input'];
    parentSid?: InputMaybe<Scalars['String']['input']>;
    type?: InputMaybe<TopicType>;
};
export type QueryFetchTranscriptionSentencesArgs = {
    channelSid: Scalars['String']['input'];
    interactionSid: Scalars['String']['input'];
};
export type QueryFlexNotificationsArgs = {
    input: FlexNotificationInput;
};
export type QueryFlexTeamMembersArgs = {
    input: FlexTeamMembersInput;
};
export type QueryFlexTeamsArgs = {
    input: FlexTeamsInput;
};
export type QueryFlexUsersArgs = {
    input: FlexUsersInput;
};
export type QueryGetProfileConfigurationSidArgs = {
    account_sid: Scalars['ID']['input'];
};
export type QueryInteractionContextArgs = {
    input: InteractionContextInput;
};
export type QueryListMessagesArgs = {
    input: AiCopilotAssistApiListMessagesInput;
};
export type QueryListTranscriptionSentencesArgs = {
    input: ListTranscriptionSentencesInput;
};
export type QueryProfileArgs = {
    input: ProfileInput;
};
export type QueryProfileAndHistoryConfigurationArgs = {
    input: ProfilesAndHistoryConfigurationInput;
};
export type QueryProfileAndHistoryConfigurationsArgs = {
    input: ProfilesAndHistoryConfigurationsInput;
};
export type SlaMetrics = {
    __typename?: 'SlaMetrics';
    abandonedTasksCount: Scalars['Int']['output'];
    abandonedTasksPercentage: Scalars['Float']['output'];
    averageAbandonTime: Scalars['Float']['output'];
    averageHandleTime: Scalars['Float']['output'];
    averageRingTime: Scalars['Float']['output'];
    averageTalkTime: Scalars['Float']['output'];
    averageWaitingTime: Scalars['Float']['output'];
    averageWrapUpTime: Scalars['Float']['output'];
    flowOutTasksCount: Scalars['Int']['output'];
    flowOutTasksPercentage: Scalars['Float']['output'];
    handledTasksCount: Scalars['Int']['output'];
    handledTasksWithinSlThresholdCount: Scalars['Int']['output'];
    handledTasksWithinSlThresholdPercentage: Scalars['Float']['output'];
    shortAbandonedTasksCount: Scalars['Int']['output'];
    shortAbandonedTasksPercentage: Scalars['Float']['output'];
    slaPercentage: Scalars['Float']['output'];
    totalHandledTasks: Scalars['Int']['output'];
    totalMissedInvitations: Scalars['Int']['output'];
    totalRejectedInvitations: Scalars['Int']['output'];
    totalTasksCount: Scalars['Int']['output'];
};
export type StableMetrics = AgentMetrics | NowMetrics | SlaMetrics;
export type Subscription = {
    __typename?: 'Subscription';
    copilotAssistEventStream: AiCopilotAssistApiEventsPayload;
    flexInAppNotification?: Maybe<FlexInAppNotification>;
    highlightedMetrics?: Maybe<HighlightedMetrics>;
};
export type SubscriptionCopilotAssistEventStreamArgs = {
    input: AiCopilotAssistApiEventStreamInput;
};
export type SubscriptionFlexInAppNotificationArgs = {
    input: FlexNotificationSubscriptionInput;
};
export type SubscriptionHighlightedMetricsArgs = {
    input?: InputMaybe<HighlightedMetricsInput>;
};
export type Tags = {
    __typename?: 'Tags';
    messageIds?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
    tag?: Maybe<Scalars['String']['output']>;
    tagGroup?: Maybe<Scalars['String']['output']>;
};
export type TaskAttributesInput = {
    from?: InputMaybe<Scalars['String']['input']>;
    name?: InputMaybe<Scalars['String']['input']>;
};
export type TaskInput = {
    attributes?: InputMaybe<TaskAttributesInput>;
};
export type TaskRouterQueue = {
    __typename?: 'TaskRouterQueue';
    name?: Maybe<Scalars['String']['output']>;
    sid?: Maybe<Scalars['ID']['output']>;
};
export type Topic = {
    __typename?: 'Topic';
    friendlyName: Scalars['String']['output'];
    parentSid?: Maybe<Scalars['String']['output']>;
    sid: Scalars['String']['output'];
    type: TopicType;
};
export declare enum TopicType {
    Subtopic = "subtopic",
    Topic = "topic"
}
export type TranscriptionDetail = ActivityDetail & {
    __typename?: 'TranscriptionDetail';
    label?: Maybe<Scalars['String']['output']>;
    timestamp?: Maybe<Scalars['String']['output']>;
};
export type TranscriptionParticipantInput = {
    participantSid?: InputMaybe<Scalars['ID']['input']>;
    participantType?: InputMaybe<TranscriptionParticipantType>;
};
export declare enum TranscriptionParticipantType {
    Worker = "WORKER"
}
export type TranscriptionSentence = {
    __typename?: 'TranscriptionSentence';
    accountSid?: Maybe<Scalars['ID']['output']>;
    channelSid?: Maybe<Scalars['ID']['output']>;
    content?: Maybe<Scalars['String']['output']>;
    endTimestamp?: Maybe<Scalars['String']['output']>;
    instanceSid?: Maybe<Scalars['ID']['output']>;
    interactionSid?: Maybe<Scalars['ID']['output']>;
    isFinal?: Maybe<Scalars['Boolean']['output']>;
    participantName?: Maybe<Scalars['String']['output']>;
    participantSid?: Maybe<Scalars['ID']['output']>;
    participantType?: Maybe<Scalars['String']['output']>;
};
export type UnknownParticipant = Participant & {
    __typename?: 'UnknownParticipant';
    callDuration?: Maybe<Scalars['Int']['output']>;
    mediaSid?: Maybe<Scalars['ID']['output']>;
    sid: Scalars['ID']['output'];
    timestamp?: Maybe<Scalars['String']['output']>;
};
export type Warning = {
    __typename?: 'Warning';
    code?: Maybe<Scalars['Int']['output']>;
    message?: Maybe<Scalars['String']['output']>;
};
export type WorkerAttributesInput = {
    fullName?: InputMaybe<Scalars['String']['input']>;
};
export type WorkerInput = {
    attributes?: InputMaybe<WorkerAttributesInput>;
    source?: InputMaybe<WorkerSourceInput>;
};
export type WorkerSourceInput = {
    name?: InputMaybe<Scalars['String']['input']>;
};
export type CopilotAssistEventStreamSubscriptionVariables = Exact<{
    input: AiCopilotAssistApiEventStreamInput;
}>;
export type CopilotAssistEventStreamSubscription = {
    __typename?: 'Subscription';
    copilotAssistEventStream: {
        __typename?: 'AICopilotAssistAPIEventsPayload';
        events: Array<{
            __typename: 'AICopilotAssistAPIChatMessage';
            id: string;
            timestamp: string;
        } | {
            __typename: 'AICopilotAssistAPISuggestion';
            trigger: string;
            response: string;
            id: string;
            timestamp: string;
            references?: Array<{
                __typename?: 'AICopilotAssistAPIReference';
                type: AiCopilotAssistApiReferenceType;
                href?: string | null;
                title: string;
            } | null> | null;
        } | null>;
    };
};
export type ListMessagesQueryVariables = Exact<{
    input: AiCopilotAssistApiListMessagesInput;
}>;
export type ListMessagesQuery = {
    __typename?: 'Query';
    listMessages: {
        __typename?: 'AICopilotAssistAPIListMessagesResponse';
        messages: Array<{
            __typename?: 'AICopilotAssistAPIChatMessage';
            id: string;
            content: string;
            author: AiCopilotAssistMessageAuthor;
            references?: Array<{
                __typename?: 'AICopilotAssistAPIReference';
                type: AiCopilotAssistApiReferenceType;
                title: string;
                href?: string | null;
            } | null> | null;
        } | null>;
    };
};
export type SendMessageMutationVariables = Exact<{
    input: AiCopilotAssistApiSendMessageInput;
}>;
export type SendMessageMutation = {
    __typename?: 'Mutation';
    sendMessage: {
        __typename?: 'AICopilotAssistAPISendMessageResponse';
        answer?: {
            __typename?: 'AICopilotAssistAPIChatMessage';
            id: string;
            content: string;
            author: AiCopilotAssistMessageAuthor;
            references?: Array<{
                __typename?: 'AICopilotAssistAPIReference';
                type: AiCopilotAssistApiReferenceType;
                title: string;
                href?: string | null;
            } | null> | null;
        } | null;
    };
};
export type ProfileAndHistoryConfigurationQueryVariables = Exact<{
    input: ProfilesAndHistoryConfigurationsInput;
}>;
export type ProfileAndHistoryConfigurationQuery = {
    __typename?: 'Query';
    profileAndHistoryConfigurations?: {
        __typename?: 'ProfilesAndHistoryConfigurations';
        configurations?: Array<{
            __typename?: 'ProfilesAndHistoryConfiguration';
            sid: string;
            data?: {
                __typename: 'ProfilesAndHistoryConfigurationActivityCustomization';
            } | {
                __typename: 'ProfilesAndHistoryConfigurationAddressMapping';
            } | {
                __typename: 'ProfilesAndHistoryConfigurationChannelAddressMapping';
            } | {
                __typename: 'ProfilesAndHistoryConfigurationCustomerHeader';
            } | {
                __typename: 'ProfilesAndHistoryConfigurationFlexUnifyWriteKey';
            } | {
                __typename: 'ProfilesAndHistoryConfigurationGenericConnectorConfiguration';
            } | {
                __typename: 'ProfilesAndHistoryConfigurationIdentifierMapping';
            } | {
                __typename: 'ProfilesAndHistoryConfigurationIdentifierMappings';
            } | {
                __typename: 'ProfilesAndHistoryConfigurationIncludeTraitsByDefault';
            } | {
                __typename: 'ProfilesAndHistoryConfigurationManualProfileSearchOptions';
            } | {
                __typename: 'ProfilesAndHistoryConfigurationProfileDetailsEnabled';
            } | {
                __typename: 'ProfilesAndHistoryConfigurationProfileHighlightsEnabled';
            } | {
                __typename: 'ProfilesAndHistoryConfigurationProfileHistoryEnabled';
            } | {
                __typename: 'ProfilesAndHistoryConfigurationProfileTraitGroups';
                profileTraitGroups?: Array<{
                    __typename: 'ProfilesAndHistoryConfigurationProfileTraitGroup';
                    groupName?: string | null;
                    order?: number | null;
                    traits?: Array<{
                        __typename: 'ProfilesAndHistoryConfigurationOrderedConfigurationReference';
                        friendlyNameOverride?: string | null;
                        order?: number | null;
                        referenceSid?: string | null;
                    } | null> | null;
                } | null> | null;
            } | {
                __typename: 'ProfilesAndHistoryConfigurationRecentActivityGroup';
            } | {
                __typename: 'ProfilesAndHistoryConfigurationSegmentUnifyApiKey';
            } | {
                __typename: 'ProfilesAndHistoryConfigurationSegmentUnifySpaceId';
            } | {
                __typename: 'ProfilesAndHistoryConfigurationSegmentWorkspaceId';
            } | {
                __typename: 'ProfilesAndHistoryConfigurationTraitMapping';
            } | {
                __typename: 'ProfilesAndHistoryConfigurationUnidentifiedProfileSearchOptions';
            } | null;
        } | null> | null;
    } | null;
};
export type TraitMappingsConfigurationQueryVariables = Exact<{
    input: ProfilesAndHistoryConfigurationInput;
}>;
export type TraitMappingsConfigurationQuery = {
    __typename?: 'Query';
    profileAndHistoryConfiguration?: {
        __typename?: 'ProfilesAndHistoryConfiguration';
        sid: string;
        version?: string | null;
        context?: ProfilesAndHistoryConfigurationContextSchema | null;
        data?: {
            __typename: 'ProfilesAndHistoryConfigurationActivityCustomization';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationAddressMapping';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationChannelAddressMapping';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationCustomerHeader';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationFlexUnifyWriteKey';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationGenericConnectorConfiguration';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationIdentifierMapping';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationIdentifierMappings';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationIncludeTraitsByDefault';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationManualProfileSearchOptions';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationProfileDetailsEnabled';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationProfileHighlightsEnabled';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationProfileHistoryEnabled';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationProfileTraitGroups';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationRecentActivityGroup';
            limit?: number | null;
            timeFrame?: number | null;
            activities?: Array<{
                __typename: 'ProfilesAndHistoryConfigurationOrderedConfigurationReference';
                friendlyNameOverride?: string | null;
                order?: number | null;
                referenceSid?: string | null;
                type?: ProfilesAndHistoryConfigurationConfigurationType | null;
            } | null> | null;
        } | {
            __typename: 'ProfilesAndHistoryConfigurationSegmentUnifyApiKey';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationSegmentUnifySpaceId';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationSegmentWorkspaceId';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationTraitMapping';
            categories?: Array<string | null> | null;
            defaultFriendlyName?: string | null;
            from?: string | null;
            to?: string | null;
            traitFieldType?: ProfilesAndHistoryConfigurationTraitFieldType | null;
        } | {
            __typename: 'ProfilesAndHistoryConfigurationUnidentifiedProfileSearchOptions';
        } | null;
    } | null;
};
export type RecentActivityMappingsConfigurationQueryVariables = Exact<{
    input: ProfilesAndHistoryConfigurationInput;
}>;
export type RecentActivityMappingsConfigurationQuery = {
    __typename?: 'Query';
    profileAndHistoryConfiguration?: {
        __typename?: 'ProfilesAndHistoryConfiguration';
        sid: string;
        version?: string | null;
        context?: ProfilesAndHistoryConfigurationContextSchema | null;
        data?: {
            __typename: 'ProfilesAndHistoryConfigurationActivityCustomization';
            eventName?: string | null;
            imageProperty?: {
                __typename: 'ProfilesAndHistoryConfigurationEventProperty';
                label?: string | null;
                order?: number | null;
                propertyKey?: string | null;
                type?: ProfilesAndHistoryConfigurationEventPropertyType | null;
            } | null;
            primaryProperty?: {
                __typename: 'ProfilesAndHistoryConfigurationEventProperty';
                label?: string | null;
                order?: number | null;
                propertyKey?: string | null;
                type?: ProfilesAndHistoryConfigurationEventPropertyType | null;
            } | null;
            secondaryProperties?: Array<{
                __typename: 'ProfilesAndHistoryConfigurationEventProperty';
                label?: string | null;
                order?: number | null;
                propertyKey?: string | null;
                type?: ProfilesAndHistoryConfigurationEventPropertyType | null;
            } | null> | null;
        } | {
            __typename: 'ProfilesAndHistoryConfigurationAddressMapping';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationChannelAddressMapping';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationCustomerHeader';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationFlexUnifyWriteKey';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationGenericConnectorConfiguration';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationIdentifierMapping';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationIdentifierMappings';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationIncludeTraitsByDefault';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationManualProfileSearchOptions';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationProfileDetailsEnabled';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationProfileHighlightsEnabled';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationProfileHistoryEnabled';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationProfileTraitGroups';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationRecentActivityGroup';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationSegmentUnifyApiKey';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationSegmentUnifySpaceId';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationSegmentWorkspaceId';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationTraitMapping';
        } | {
            __typename: 'ProfilesAndHistoryConfigurationUnidentifiedProfileSearchOptions';
        } | null;
    } | null;
};
export type FlexUnifyGetActivitiesQueryVariables = Exact<{
    input: ActivitiesInput;
}>;
export type FlexUnifyGetActivitiesQuery = {
    __typename?: 'Query';
    activities?: {
        __typename?: 'Activities';
        activities?: Array<{
            __typename?: 'Activity';
        } | {
            __typename?: 'ActivityDetails';
        } | {
            __typename: 'ActivityView';
            timestamp?: string | null;
            label?: string | null;
            attributes?: {
                __typename?: 'CustomAttributes';
            } | {
                __typename?: 'InteractionAttributes';
            } | {
                __typename?: 'MapAttributes';
            } | {
                __typename?: 'ProfileEventUIAttributes';
                eventName?: string | null;
                descriptionLabel?: string | null;
            } | null;
            details: Array<{
                __typename?: 'ChannelDetail';
            } | {
                __typename?: 'CustomDetail';
            } | {
                __typename?: 'MapDetail';
            } | {
                __typename?: 'ProfileEventDetail';
                timestamp?: string | null;
                label?: string | null;
                data: any;
            } | {
                __typename?: 'TranscriptionDetail';
            } | null>;
        } | null> | null;
        meta?: {
            __typename?: 'MetaPagination';
            nextPageToken?: string | null;
            pageSize?: number | null;
        } | null;
    } | null;
};
export type ProfileHeaderConfigurationQueryVariables = Exact<{
    input: ProfilesAndHistoryConfigurationsInput;
}>;
export type ProfileHeaderConfigurationQuery = {
    __typename?: 'Query';
    profileAndHistoryConfigurations?: {
        __typename?: 'ProfilesAndHistoryConfigurations';
        configurations?: Array<{
            __typename?: 'ProfilesAndHistoryConfiguration';
            data?: {
                __typename?: 'ProfilesAndHistoryConfigurationActivityCustomization';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationAddressMapping';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationChannelAddressMapping';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationCustomerHeader';
                profileName?: {
                    __typename?: 'ProfilesAndHistoryConfigurationCustomerHeaderProfileName';
                    customerNameTraits?: Array<{
                        __typename?: 'ProfilesAndHistoryConfigurationOrderedConfigurationReference';
                        referenceSid?: string | null;
                        friendlyNameOverride?: string | null;
                        type?: ProfilesAndHistoryConfigurationConfigurationType | null;
                        order?: number | null;
                    } | null> | null;
                } | null;
                secondaryTrait?: {
                    __typename?: 'ProfilesAndHistoryConfigurationOrderedConfigurationReference';
                    referenceSid?: string | null;
                    friendlyNameOverride?: string | null;
                    type?: ProfilesAndHistoryConfigurationConfigurationType | null;
                    order?: number | null;
                } | null;
                avatarTrait?: {
                    __typename?: 'ProfilesAndHistoryConfigurationOrderedConfigurationReference';
                    referenceSid?: string | null;
                    friendlyNameOverride?: string | null;
                    type?: ProfilesAndHistoryConfigurationConfigurationType | null;
                    order?: number | null;
                } | null;
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationFlexUnifyWriteKey';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationGenericConnectorConfiguration';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationIdentifierMapping';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationIdentifierMappings';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationIncludeTraitsByDefault';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationManualProfileSearchOptions';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationProfileDetailsEnabled';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationProfileHighlightsEnabled';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationProfileHistoryEnabled';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationProfileTraitGroups';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationRecentActivityGroup';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationSegmentUnifyApiKey';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationSegmentUnifySpaceId';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationSegmentWorkspaceId';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationTraitMapping';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationUnidentifiedProfileSearchOptions';
            } | null;
        } | null> | null;
    } | null;
};
export type CustomerProfileSummaryQueryVariables = Exact<{
    input: AiSummarizationCustomerProfileSummaryInput;
}>;
export type CustomerProfileSummaryQuery = {
    __typename?: 'Query';
    customerProfileSummary?: {
        __typename?: 'AISummarizationCustomerProfileSummary';
        summary?: string | null;
        status?: string | null;
        dateCreated?: string | null;
        dateUpdated?: string | null;
        profileConnectSid?: string | null;
    } | null;
};
export type CreateCustomerProfileSummaryMutationVariables = Exact<{
    input: AiSummarizationCreateCustomerProfileSummaryInput;
}>;
export type CreateCustomerProfileSummaryMutation = {
    __typename?: 'Mutation';
    createCustomerProfileSummary?: {
        __typename?: 'AISummarizationCustomerProfileSummary';
        summary?: string | null;
        status?: string | null;
        dateCreated?: string | null;
        dateUpdated?: string | null;
        profileConnectSid?: string | null;
    } | null;
};
export type FlexUnifyShowComponentConfigQueryVariables = Exact<{
    input: ProfilesAndHistoryConfigurationsInput;
}>;
export type FlexUnifyShowComponentConfigQuery = {
    __typename?: 'Query';
    profileAndHistoryConfigurations?: {
        __typename?: 'ProfilesAndHistoryConfigurations';
        configurations?: Array<{
            __typename?: 'ProfilesAndHistoryConfiguration';
            data?: {
                __typename?: 'ProfilesAndHistoryConfigurationActivityCustomization';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationAddressMapping';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationChannelAddressMapping';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationCustomerHeader';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationFlexUnifyWriteKey';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationGenericConnectorConfiguration';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationIdentifierMapping';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationIdentifierMappings';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationIncludeTraitsByDefault';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationManualProfileSearchOptions';
                identifiers?: Array<{
                    __typename?: 'ProfilesAndHistoryConfigurationOrderedConfigurationReference';
                    friendlyNameOverride?: string | null;
                    order?: number | null;
                    referenceSid?: string | null;
                    type?: ProfilesAndHistoryConfigurationConfigurationType | null;
                } | null> | null;
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationProfileDetailsEnabled';
                profileDetailsEnabled?: boolean | null;
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationProfileHighlightsEnabled';
                profileHighlightsEnabled?: boolean | null;
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationProfileHistoryEnabled';
                profileHistoryEnabled?: boolean | null;
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationProfileTraitGroups';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationRecentActivityGroup';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationSegmentUnifyApiKey';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationSegmentUnifySpaceId';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationSegmentWorkspaceId';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationTraitMapping';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationUnidentifiedProfileSearchOptions';
                showUnidentifiedProfileToAgents?: boolean | null;
                bridgeLabel?: string | null;
            } | null;
        } | null> | null;
    } | null;
};
export type ChannelAddressMappingConfigurationQueryVariables = Exact<{
    input: ProfilesAndHistoryConfigurationsInput;
}>;
export type ChannelAddressMappingConfigurationQuery = {
    __typename?: 'Query';
    profileAndHistoryConfigurations?: {
        __typename?: 'ProfilesAndHistoryConfigurations';
        configurations?: Array<{
            __typename?: 'ProfilesAndHistoryConfiguration';
            data?: {
                __typename?: 'ProfilesAndHistoryConfigurationActivityCustomization';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationAddressMapping';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationChannelAddressMapping';
                address?: ProfilesAndHistoryConfigurationAddress | null;
                identifier?: {
                    __typename?: 'ProfilesAndHistoryConfigurationOrderedConfigurationReference';
                    referenceSid?: string | null;
                } | null;
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationCustomerHeader';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationFlexUnifyWriteKey';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationGenericConnectorConfiguration';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationIdentifierMapping';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationIdentifierMappings';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationIncludeTraitsByDefault';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationManualProfileSearchOptions';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationProfileDetailsEnabled';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationProfileHighlightsEnabled';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationProfileHistoryEnabled';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationProfileTraitGroups';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationRecentActivityGroup';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationSegmentUnifyApiKey';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationSegmentUnifySpaceId';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationSegmentWorkspaceId';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationTraitMapping';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationUnidentifiedProfileSearchOptions';
            } | null;
        } | null> | null;
    } | null;
};
export type IdentifierConfigurationQueryVariables = Exact<{
    input: ProfilesAndHistoryConfigurationInput;
}>;
export type IdentifierConfigurationQuery = {
    __typename?: 'Query';
    profileAndHistoryConfiguration?: {
        __typename?: 'ProfilesAndHistoryConfiguration';
        data?: {
            __typename?: 'ProfilesAndHistoryConfigurationActivityCustomization';
        } | {
            __typename?: 'ProfilesAndHistoryConfigurationAddressMapping';
        } | {
            __typename?: 'ProfilesAndHistoryConfigurationChannelAddressMapping';
        } | {
            __typename?: 'ProfilesAndHistoryConfigurationCustomerHeader';
        } | {
            __typename?: 'ProfilesAndHistoryConfigurationFlexUnifyWriteKey';
        } | {
            __typename?: 'ProfilesAndHistoryConfigurationGenericConnectorConfiguration';
        } | {
            __typename?: 'ProfilesAndHistoryConfigurationIdentifierMapping';
            friendlyName?: string | null;
            identifier?: string | null;
            priority?: number | null;
        } | {
            __typename?: 'ProfilesAndHistoryConfigurationIdentifierMappings';
        } | {
            __typename?: 'ProfilesAndHistoryConfigurationIncludeTraitsByDefault';
        } | {
            __typename?: 'ProfilesAndHistoryConfigurationManualProfileSearchOptions';
        } | {
            __typename?: 'ProfilesAndHistoryConfigurationProfileDetailsEnabled';
        } | {
            __typename?: 'ProfilesAndHistoryConfigurationProfileHighlightsEnabled';
        } | {
            __typename?: 'ProfilesAndHistoryConfigurationProfileHistoryEnabled';
        } | {
            __typename?: 'ProfilesAndHistoryConfigurationProfileTraitGroups';
        } | {
            __typename?: 'ProfilesAndHistoryConfigurationRecentActivityGroup';
        } | {
            __typename?: 'ProfilesAndHistoryConfigurationSegmentUnifyApiKey';
        } | {
            __typename?: 'ProfilesAndHistoryConfigurationSegmentUnifySpaceId';
        } | {
            __typename?: 'ProfilesAndHistoryConfigurationSegmentWorkspaceId';
        } | {
            __typename?: 'ProfilesAndHistoryConfigurationTraitMapping';
        } | {
            __typename?: 'ProfilesAndHistoryConfigurationUnidentifiedProfileSearchOptions';
        } | null;
    } | null;
};
export type GetProfileConfigurationSidQueryVariables = Exact<{
    accountSid: Scalars['ID']['input'];
}>;
export type GetProfileConfigurationSidQuery = {
    __typename?: 'Query';
    getProfileConfigurationSid?: {
        __typename?: 'ProfileConfigurationSid';
        profileConfigurationSid?: string | null;
    } | null;
};
export type ListNotificationsQueryVariables = Exact<{
    input: FlexNotificationInput;
}>;
export type ListNotificationsQuery = {
    __typename?: 'Query';
    flexNotifications?: {
        __typename?: 'Notifications';
        notifications?: Array<{
            __typename: 'FlexNotification';
            notificationSid?: string | null;
            recipientId?: string | null;
            sentTime?: string | null;
            sourceId?: string | null;
            type: NotificationType;
            notification?: {
                __typename?: 'FlexNotificationItem';
                message?: string | null;
                severity?: string | null;
                status?: string | null;
            } | null;
        } | null> | null;
        meta?: {
            __typename?: 'MetaPagination';
            nextPageToken?: string | null;
            pageSize?: number | null;
        } | null;
    } | null;
};
export type UpdateNotificationStatusMutationVariables = Exact<{
    input: FlexNotificationStatusUpdateInput;
}>;
export type UpdateNotificationStatusMutation = {
    __typename?: 'Mutation';
    updateNotificationStatus?: {
        __typename?: 'FlexNotification';
        notificationSid?: string | null;
    } | null;
};
export type MarkAllNotificationsReadMutationVariables = Exact<{
    input?: InputMaybe<FlexNotificationUpdateAllStatusInput>;
}>;
export type MarkAllNotificationsReadMutation = {
    __typename?: 'Mutation';
    markAllNotificationsRead?: {
        __typename?: 'FlexNotificationsStatusUpdateResponse';
        updated: boolean;
    } | null;
};
export type FlexNotificationSubscriptionVariables = Exact<{
    input: FlexNotificationSubscriptionInput;
}>;
export type FlexNotificationSubscription = {
    __typename?: 'Subscription';
    flexInAppNotification?: {
        __typename?: 'FlexInAppNotification';
        severity?: string | null;
        message?: string | null;
        type: NotificationType;
        sourceId?: string | null;
        sentTime?: string | null;
        instanceSid: string;
        accountSid: string;
        notificationSid: string;
    } | null;
};
export type TimelineViewGetActivitiesQueryVariables = Exact<{
    input: ActivitiesInput;
}>;
export type TimelineViewGetActivitiesQuery = {
    __typename?: 'Query';
    activities?: {
        __typename?: 'Activities';
        activities?: Array<{
            __typename: 'Activity';
            sid: string;
            timestamp?: string | null;
            label?: string | null;
            attributes?: {
                __typename?: 'CustomAttributes';
                data: any;
            } | {
                __typename?: 'InteractionAttributes';
                interactionSid: string;
                channelType?: ChannelType | null;
                direction?: Direction | null;
                duration?: number | null;
            } | {
                __typename?: 'MapAttributes';
            } | {
                __typename?: 'ProfileEventUIAttributes';
            } | null;
        } | {
            __typename?: 'ActivityDetails';
        } | {
            __typename: 'ActivityView';
            timestamp?: string | null;
            label?: string | null;
            attributes?: {
                __typename?: 'CustomAttributes';
            } | {
                __typename?: 'InteractionAttributes';
            } | {
                __typename?: 'MapAttributes';
            } | {
                __typename?: 'ProfileEventUIAttributes';
                eventName?: string | null;
                descriptionLabel?: string | null;
            } | null;
            details: Array<{
                __typename?: 'ChannelDetail';
            } | {
                __typename?: 'CustomDetail';
            } | {
                __typename?: 'MapDetail';
            } | {
                __typename?: 'ProfileEventDetail';
                timestamp?: string | null;
                label?: string | null;
                data: any;
            } | {
                __typename?: 'TranscriptionDetail';
            } | null>;
        } | null> | null;
        warnings?: Array<{
            __typename?: 'Warning';
            code?: number | null;
            message?: string | null;
        } | null> | null;
        meta?: {
            __typename?: 'MetaPagination';
            nextPageToken?: string | null;
            pageSize?: number | null;
        } | null;
    } | null;
};
export type TimelineViewActivityDetailsQueryVariables = Exact<{
    input: ActivityDetailsInput;
}>;
export type TimelineViewActivityDetailsQuery = {
    __typename?: 'Query';
    activityDetails?: {
        __typename?: 'ActivityDetails';
        sid: string;
        label?: string | null;
        timestamp?: string | null;
        attributes?: {
            __typename: 'CustomAttributes';
            data: any;
        } | {
            __typename: 'InteractionAttributes';
            interactionSid: string;
            channelType?: ChannelType | null;
            direction?: Direction | null;
        } | {
            __typename: 'MapAttributes';
        } | {
            __typename: 'ProfileEventUIAttributes';
        } | null;
        details: Array<{
            __typename: 'ChannelDetail';
            timestamp?: string | null;
            label?: string | null;
            channelSid: string;
            channelType?: ChannelType | null;
            direction?: Direction | null;
            participants: Array<{
                __typename: 'Agent';
                sid: string;
                timestamp?: string | null;
                mediaSid?: string | null;
                workerSid: string;
                workerName?: string | null;
                queue?: {
                    __typename?: 'TaskRouterQueue';
                    name?: string | null;
                } | null;
                channelNote?: {
                    __typename?: 'AISummarizationChannel';
                    sentiment?: AiSummarizationSentiment | null;
                    summary?: string | null;
                    codes?: Array<{
                        __typename?: 'AISummarizationChannelCode';
                        topic?: string | null;
                        subtopic?: string | null;
                        dispositionCode?: string | null;
                    } | null> | null;
                } | null;
            } | {
                __typename: 'Customer';
                sid: string;
                timestamp?: string | null;
                mediaSid?: string | null;
            } | {
                __typename: 'UnknownParticipant';
                sid: string;
                timestamp?: string | null;
                mediaSid?: string | null;
            } | null>;
        } | {
            __typename: 'CustomDetail';
            timestamp?: string | null;
            label?: string | null;
            data: any;
        } | {
            __typename: 'MapDetail';
        } | {
            __typename: 'ProfileEventDetail';
        } | {
            __typename: 'TranscriptionDetail';
        } | null>;
    } | null;
};
export type ActivityCustomizationsConfigQueryVariables = Exact<{
    input: ProfilesAndHistoryConfigurationsInput;
}>;
export type ActivityCustomizationsConfigQuery = {
    __typename?: 'Query';
    profileAndHistoryConfigurations?: {
        __typename?: 'ProfilesAndHistoryConfigurations';
        configurations?: Array<{
            __typename?: 'ProfilesAndHistoryConfiguration';
            dateCreated?: string | null;
            dateUpdated?: string | null;
            data?: {
                __typename?: 'ProfilesAndHistoryConfigurationActivityCustomization';
                eventName?: string | null;
                profileEventConfigType?: ProfilesAndHistoryConfigurationProfileEventConfigType | null;
                secondaryProperties?: Array<{
                    __typename?: 'ProfilesAndHistoryConfigurationEventProperty';
                    propertyKey?: string | null;
                    type?: ProfilesAndHistoryConfigurationEventPropertyType | null;
                    label?: string | null;
                    order?: number | null;
                } | null> | null;
                primaryProperty?: {
                    __typename?: 'ProfilesAndHistoryConfigurationEventProperty';
                    propertyKey?: string | null;
                    type?: ProfilesAndHistoryConfigurationEventPropertyType | null;
                    label?: string | null;
                    order?: number | null;
                } | null;
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationAddressMapping';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationChannelAddressMapping';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationCustomerHeader';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationFlexUnifyWriteKey';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationGenericConnectorConfiguration';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationIdentifierMapping';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationIdentifierMappings';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationIncludeTraitsByDefault';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationManualProfileSearchOptions';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationProfileDetailsEnabled';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationProfileHighlightsEnabled';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationProfileHistoryEnabled';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationProfileTraitGroups';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationRecentActivityGroup';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationSegmentUnifyApiKey';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationSegmentUnifySpaceId';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationSegmentWorkspaceId';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationTraitMapping';
            } | {
                __typename?: 'ProfilesAndHistoryConfigurationUnidentifiedProfileSearchOptions';
            } | null;
        } | null> | null;
    } | null;
};
export type FetchTranscriptionSentencesQueryVariables = Exact<{
    interactionSid: Scalars['String']['input'];
    channelSid: Scalars['String']['input'];
}>;
export type FetchTranscriptionSentencesQuery = {
    __typename?: 'Query';
    fetchTranscriptionSentences?: Array<{
        __typename?: 'AgentCopilotTranscriptionSentence';
        content: string;
        participant_type: string;
        participant_sid?: string | null;
        participant_name?: string | null;
        end_timestamp: string;
        is_final: boolean;
    } | null> | null;
};
export type FetchFeatureConfigurationQueryVariables = Exact<{
    instanceSid: Scalars['String']['input'];
    featureName: Scalars['String']['input'];
}>;
export type FetchFeatureConfigurationQuery = {
    __typename?: 'Query';
    fetchFeatureConfiguration?: {
        __typename?: 'FeatureConfiguration';
        queues?: Array<string | null> | null;
        ui_config: {
            __typename?: 'FeatureConfigurationUiConfig';
            display_note?: boolean | null;
            display_sentiment?: boolean | null;
            multilang_enabled?: boolean | null;
        };
    } | null;
};
export type FetchDispositionCodesQueryVariables = Exact<{
    instanceSid: Scalars['String']['input'];
    topicSid?: InputMaybe<Scalars['String']['input']>;
    archived?: InputMaybe<Scalars['Boolean']['input']>;
}>;
export type FetchDispositionCodesQuery = {
    __typename?: 'Query';
    fetchDispositionCodes?: Array<{
        __typename?: 'DispositionCode';
        sid?: string | null;
        state?: DispositionCodeState | null;
        instanceSid?: string | null;
        description?: string | null;
        uniqueName?: string | null;
        friendlyName?: string | null;
        version?: any | null;
        accountSid?: string | null;
    } | null> | null;
};
export type FetchTopicsQueryVariables = Exact<{
    instanceSid: Scalars['String']['input'];
    type?: InputMaybe<TopicType>;
    parentSid?: InputMaybe<Scalars['String']['input']>;
}>;
export type FetchTopicsQuery = {
    __typename?: 'Query';
    fetchTopics?: Array<{
        __typename?: 'Topic';
        sid: string;
        friendlyName: string;
        parentSid?: string | null;
        type: TopicType;
    } | null> | null;
};
export type CreateInteractionSummaryMutationVariables = Exact<{
    interactionSid: Scalars['String']['input'];
    instanceSid: Scalars['String']['input'];
    channelSid: Scalars['String']['input'];
    taskSid?: InputMaybe<Scalars['String']['input']>;
    participantSid?: InputMaybe<Scalars['String']['input']>;
    profileConnectSid?: InputMaybe<Scalars['String']['input']>;
    summary?: InputMaybe<Scalars['String']['input']>;
    sentiment?: InputMaybe<Scalars['String']['input']>;
    detectedLanguage?: InputMaybe<Scalars['String']['input']>;
    dispositionCodeSid?: InputMaybe<Scalars['String']['input']>;
    codes?: InputMaybe<ChannelNoteCodesInput>;
}>;
export type CreateInteractionSummaryMutation = {
    __typename?: 'Mutation';
    createInteractionSummary?: {
        __typename?: 'InteractionSummary';
        sid: string;
        summary?: string | null;
        disposition_code_sid?: string | null;
        sentiment?: string | null;
        generated_summary?: string | null;
        generated_sentiment?: string | null;
        detected_language?: string | null;
        generated_disposition_code_sid?: string | null;
        date_updated: string;
        version: number;
        codes?: {
            __typename?: 'ChannelNoteCodes';
            generated?: Array<{
                __typename?: 'ChannelNoteCode';
                topic_path?: string | null;
                disposition_code?: string | null;
            } | null> | null;
            selected?: Array<{
                __typename?: 'ChannelNoteCode';
                topic_path?: string | null;
                disposition_code?: string | null;
            } | null> | null;
        } | null;
    } | null;
};
export type UpdateInteractionSummaryMutationVariables = Exact<{
    sid: Scalars['String']['input'];
    instanceSid: Scalars['String']['input'];
    interactionSid: Scalars['String']['input'];
    channelSid: Scalars['String']['input'];
    taskSid?: InputMaybe<Scalars['String']['input']>;
    participantSid?: InputMaybe<Scalars['String']['input']>;
    profileConnectSid?: InputMaybe<Scalars['String']['input']>;
    generatedSummary?: InputMaybe<Scalars['String']['input']>;
    summary: Scalars['String']['input'];
    sentiment?: InputMaybe<Scalars['String']['input']>;
    detectedLanguage?: InputMaybe<Scalars['String']['input']>;
    dispositionCodeSid?: InputMaybe<Scalars['String']['input']>;
    currentVersion: Scalars['Int']['input'];
    codes?: InputMaybe<ChannelNoteCodesInput>;
}>;
export type UpdateInteractionSummaryMutation = {
    __typename?: 'Mutation';
    updateInteractionSummary?: {
        __typename?: 'InteractionSummary';
        sid: string;
        summary?: string | null;
        disposition_code_sid?: string | null;
        sentiment?: string | null;
        generated_summary?: string | null;
        generated_sentiment?: string | null;
        detected_language?: string | null;
        generated_disposition_code_sid?: string | null;
        date_updated: string;
        codes?: {
            __typename?: 'ChannelNoteCodes';
            selected?: Array<{
                __typename?: 'ChannelNoteCode';
                topic_path?: string | null;
                disposition_code?: string | null;
            } | null> | null;
            generated?: Array<{
                __typename?: 'ChannelNoteCode';
                topic_path?: string | null;
                disposition_code?: string | null;
            } | null> | null;
        } | null;
    } | null;
};
export type HighlightedMetricsSubscriptionVariables = Exact<{
    input?: InputMaybe<HighlightedMetricsInput>;
}>;
export type HighlightedMetricsSubscription = {
    __typename?: 'Subscription';
    highlightedMetrics?: {
        __typename?: 'HighlightedMetrics';
        accountSid: string;
        instanceSid: string;
        healthStatus: AlertLevel;
        metricType: MetricType;
        queueSid: string;
        queueLevelMetrics?: {
            __typename?: 'InsightsMetrics';
            longestTaskWaitingFrom?: {
                __typename?: 'HighlightedMetricDetail';
                metricValue: string;
                alertLevel: AlertLevel;
                thresholdValue?: string | null;
            } | null;
            activeTasks?: {
                __typename?: 'HighlightedMetricDetail';
                metricValue: string;
                alertLevel: AlertLevel;
            } | null;
            waitingTasks?: {
                __typename?: 'HighlightedMetricDetail';
                metricValue: string;
                alertLevel: AlertLevel;
            } | null;
            averageWaitingTime?: {
                __typename?: 'HighlightedMetricDetail';
                metricValue: string;
                alertLevel: AlertLevel;
            } | null;
            averageHandleTime?: {
                __typename?: 'HighlightedMetricDetail';
                metricValue: string;
                alertLevel: AlertLevel;
            } | null;
            slaPercentage?: {
                __typename?: 'HighlightedMetricDetail';
                metricValue: string;
                alertLevel: AlertLevel;
            } | null;
            totalMissedInvitations?: {
                __typename?: 'HighlightedMetricDetail';
                metricValue: string;
                alertLevel: AlertLevel;
            } | null;
            handledTasksCount?: {
                __typename?: 'HighlightedMetricDetail';
                metricValue: string;
                alertLevel: AlertLevel;
            } | null;
            handledTasksWithinSlThresholdPercentage?: {
                __typename?: 'HighlightedMetricDetail';
                metricValue: string;
                alertLevel: AlertLevel;
            } | null;
            abandonedTasksCount?: {
                __typename?: 'HighlightedMetricDetail';
                metricValue: string;
                alertLevel: AlertLevel;
            } | null;
            abandonedTasksPercentage?: {
                __typename?: 'HighlightedMetricDetail';
                metricValue: string;
                alertLevel: AlertLevel;
            } | null;
            availableAgents?: {
                __typename?: 'HighlightedMetricDetail';
                metricValue: string;
                alertLevel: AlertLevel;
            } | null;
            unavailableAgents?: {
                __typename?: 'HighlightedMetricDetail';
                metricValue: string;
                alertLevel: AlertLevel;
            } | null;
            offlineAgents?: {
                __typename?: 'HighlightedMetricDetail';
                metricValue: string;
                alertLevel: AlertLevel;
            } | null;
            longestAvailableAgent?: {
                __typename?: 'HighlightedMetricDetail';
                metricValue: string;
                alertLevel: AlertLevel;
            } | null;
        } | null;
        stableMetrics: {
            __typename?: 'AgentMetrics';
            availableAgents?: number | null;
            unavailableAgents?: number | null;
            offlineAgents?: number | null;
            longestAvailableAgent?: string | null;
        } | {
            __typename?: 'NowMetrics';
            reservedTasks: number;
            totalTasks: number;
            pendingTasks: number;
            wrappingTasks: number;
            timestampUpdated: number;
            assignedTasks: number;
            longestTaskWaitingSid?: string | null;
            longestTaskWaitingFrom?: string | null;
            longestTaskWaitingAge: number;
        } | {
            __typename?: 'SlaMetrics';
            abandonedTasksCount: number;
            abandonedTasksPercentage: number;
            averageAbandonTime: number;
            averageHandleTime: number;
            averageRingTime: number;
            averageTalkTime: number;
            averageWaitingTime: number;
            averageWrapUpTime: number;
            flowOutTasksCount: number;
            flowOutTasksPercentage: number;
            handledTasksCount: number;
            handledTasksWithinSlThresholdCount: number;
            handledTasksWithinSlThresholdPercentage: number;
            shortAbandonedTasksCount: number;
            shortAbandonedTasksPercentage: number;
            slaPercentage: number;
            totalHandledTasks: number;
            totalMissedInvitations: number;
            totalRejectedInvitations: number;
            totalTasksCount: number;
        };
        channelStatsAlerts: Array<{
            __typename?: 'ChannelStatsAlert';
            channelSid: string;
            healthStatus: AlertLevel;
            highlightedMetrics?: {
                __typename?: 'InsightsMetrics';
                longestTaskWaitingFrom?: {
                    __typename?: 'HighlightedMetricDetail';
                    metricValue: string;
                    alertLevel: AlertLevel;
                    thresholdValue?: string | null;
                } | null;
                activeTasks?: {
                    __typename?: 'HighlightedMetricDetail';
                    metricValue: string;
                    alertLevel: AlertLevel;
                } | null;
                waitingTasks?: {
                    __typename?: 'HighlightedMetricDetail';
                    metricValue: string;
                    alertLevel: AlertLevel;
                } | null;
                averageWaitingTime?: {
                    __typename?: 'HighlightedMetricDetail';
                    metricValue: string;
                    alertLevel: AlertLevel;
                } | null;
                averageHandleTime?: {
                    __typename?: 'HighlightedMetricDetail';
                    metricValue: string;
                    alertLevel: AlertLevel;
                } | null;
                slaPercentage?: {
                    __typename?: 'HighlightedMetricDetail';
                    metricValue: string;
                    alertLevel: AlertLevel;
                } | null;
                totalMissedInvitations?: {
                    __typename?: 'HighlightedMetricDetail';
                    metricValue: string;
                    alertLevel: AlertLevel;
                } | null;
                handledTasksCount?: {
                    __typename?: 'HighlightedMetricDetail';
                    metricValue: string;
                    alertLevel: AlertLevel;
                } | null;
                handledTasksWithinSlThresholdPercentage?: {
                    __typename?: 'HighlightedMetricDetail';
                    metricValue: string;
                    alertLevel: AlertLevel;
                } | null;
                abandonedTasksCount?: {
                    __typename?: 'HighlightedMetricDetail';
                    metricValue: string;
                    alertLevel: AlertLevel;
                } | null;
                abandonedTasksPercentage?: {
                    __typename?: 'HighlightedMetricDetail';
                    metricValue: string;
                    alertLevel: AlertLevel;
                } | null;
                availableAgents?: {
                    __typename?: 'HighlightedMetricDetail';
                    metricValue: string;
                    alertLevel: AlertLevel;
                } | null;
                unavailableAgents?: {
                    __typename?: 'HighlightedMetricDetail';
                    metricValue: string;
                    alertLevel: AlertLevel;
                } | null;
                offlineAgents?: {
                    __typename?: 'HighlightedMetricDetail';
                    metricValue: string;
                    alertLevel: AlertLevel;
                } | null;
                longestAvailableAgent?: {
                    __typename?: 'HighlightedMetricDetail';
                    metricValue: string;
                    alertLevel: AlertLevel;
                } | null;
            } | null;
            stableMetrics: {
                __typename?: 'AgentMetrics';
                longestAvailableAgent?: string | null;
            } | {
                __typename?: 'NowMetrics';
                reservedTasks: number;
                totalTasks: number;
                pendingTasks: number;
                wrappingTasks: number;
                timestampUpdated: number;
                assignedTasks: number;
                longestTaskWaitingSid?: string | null;
                longestTaskWaitingFrom?: string | null;
                longestTaskWaitingAge: number;
            } | {
                __typename?: 'SlaMetrics';
                abandonedTasksCount: number;
                abandonedTasksPercentage: number;
                averageAbandonTime: number;
                averageHandleTime: number;
                averageRingTime: number;
                averageTalkTime: number;
                averageWaitingTime: number;
                averageWrapUpTime: number;
                flowOutTasksCount: number;
                flowOutTasksPercentage: number;
                handledTasksCount: number;
                handledTasksWithinSlThresholdCount: number;
                handledTasksWithinSlThresholdPercentage: number;
                shortAbandonedTasksCount: number;
                shortAbandonedTasksPercentage: number;
                slaPercentage: number;
                totalHandledTasks: number;
                totalMissedInvitations: number;
                totalRejectedInvitations: number;
                totalTasksCount: number;
            };
        } | null>;
    } | null;
};
export type AgentMetricsFragmentFragment = {
    __typename?: 'AgentMetrics';
    availableAgents?: number | null;
    unavailableAgents?: number | null;
    offlineAgents?: number | null;
    longestAvailableAgent?: string | null;
};
export type NowMetricsFragmentFragment = {
    __typename?: 'NowMetrics';
    reservedTasks: number;
    totalTasks: number;
    pendingTasks: number;
    wrappingTasks: number;
    timestampUpdated: number;
    assignedTasks: number;
    longestTaskWaitingSid?: string | null;
    longestTaskWaitingFrom?: string | null;
    longestTaskWaitingAge: number;
};
export type SlaMetricsFragmentFragment = {
    __typename?: 'SlaMetrics';
    abandonedTasksCount: number;
    abandonedTasksPercentage: number;
    averageAbandonTime: number;
    averageHandleTime: number;
    averageRingTime: number;
    averageTalkTime: number;
    averageWaitingTime: number;
    averageWrapUpTime: number;
    flowOutTasksCount: number;
    flowOutTasksPercentage: number;
    handledTasksCount: number;
    handledTasksWithinSlThresholdCount: number;
    handledTasksWithinSlThresholdPercentage: number;
    shortAbandonedTasksCount: number;
    shortAbandonedTasksPercentage: number;
    slaPercentage: number;
    totalHandledTasks: number;
    totalMissedInvitations: number;
    totalRejectedInvitations: number;
    totalTasksCount: number;
};
export type InsightsMetricsFragmentFragment = {
    __typename?: 'InsightsMetrics';
    longestTaskWaitingFrom?: {
        __typename?: 'HighlightedMetricDetail';
        metricValue: string;
        alertLevel: AlertLevel;
        thresholdValue?: string | null;
    } | null;
    activeTasks?: {
        __typename?: 'HighlightedMetricDetail';
        metricValue: string;
        alertLevel: AlertLevel;
    } | null;
    waitingTasks?: {
        __typename?: 'HighlightedMetricDetail';
        metricValue: string;
        alertLevel: AlertLevel;
    } | null;
    averageWaitingTime?: {
        __typename?: 'HighlightedMetricDetail';
        metricValue: string;
        alertLevel: AlertLevel;
    } | null;
    averageHandleTime?: {
        __typename?: 'HighlightedMetricDetail';
        metricValue: string;
        alertLevel: AlertLevel;
    } | null;
    slaPercentage?: {
        __typename?: 'HighlightedMetricDetail';
        metricValue: string;
        alertLevel: AlertLevel;
    } | null;
    totalMissedInvitations?: {
        __typename?: 'HighlightedMetricDetail';
        metricValue: string;
        alertLevel: AlertLevel;
    } | null;
    handledTasksCount?: {
        __typename?: 'HighlightedMetricDetail';
        metricValue: string;
        alertLevel: AlertLevel;
    } | null;
    handledTasksWithinSlThresholdPercentage?: {
        __typename?: 'HighlightedMetricDetail';
        metricValue: string;
        alertLevel: AlertLevel;
    } | null;
    abandonedTasksCount?: {
        __typename?: 'HighlightedMetricDetail';
        metricValue: string;
        alertLevel: AlertLevel;
    } | null;
    abandonedTasksPercentage?: {
        __typename?: 'HighlightedMetricDetail';
        metricValue: string;
        alertLevel: AlertLevel;
    } | null;
    availableAgents?: {
        __typename?: 'HighlightedMetricDetail';
        metricValue: string;
        alertLevel: AlertLevel;
    } | null;
    unavailableAgents?: {
        __typename?: 'HighlightedMetricDetail';
        metricValue: string;
        alertLevel: AlertLevel;
    } | null;
    offlineAgents?: {
        __typename?: 'HighlightedMetricDetail';
        metricValue: string;
        alertLevel: AlertLevel;
    } | null;
    longestAvailableAgent?: {
        __typename?: 'HighlightedMetricDetail';
        metricValue: string;
        alertLevel: AlertLevel;
    } | null;
};
export type ConversationInsightsFetchReportQueryVariables = Exact<{
    input: AiReportInput;
}>;
export type ConversationInsightsFetchReportQuery = {
    __typename?: 'Query';
    aiReports?: {
        __typename?: 'AiReport';
        rows?: Array<{
            __typename?: 'AiReportRows';
            updated?: string | null;
            significance?: string | null;
            row_id?: string | null;
            record_count?: number | null;
            message_count?: number | null;
            conversation_timestamp?: string | null;
            scores?: Array<{
                __typename?: 'AiReportScores';
                title?: string | null;
                subtitle?: string | null;
                score?: string | null;
                trend?: string | null;
                score_id?: string | null;
                record_count?: number | null;
                source_score?: string | null;
                trend_direction?: string | null;
                score_status?: string | null;
                conversation_preview?: string | null;
                period_start?: string | null;
                period_end?: string | null;
                tiers?: Array<{
                    __typename?: 'AiReportTiers';
                    tier_id?: string | null;
                    record_count?: number | null;
                } | null> | null;
            } | null> | null;
            modules?: Array<{
                __typename?: 'AiReportModules';
                title?: string | null;
                type?: string | null;
                score?: string | null;
                baseline?: string | null;
                value?: string | null;
                significance?: string | null;
                summary?: string | null;
                score_column?: string | null;
            } | null> | null;
        } | null> | null;
        meta?: {
            __typename?: 'MetaPagination';
            nextPageToken?: string | null;
            pageSize?: number | null;
        } | null;
    } | null;
};
export type ConversationInsightsFetchConversationQueryVariables = Exact<{
    input: AiConversationInput;
}>;
export type ConversationInsightsFetchConversationQuery = {
    __typename?: 'Query';
    aiConversations?: {
        __typename?: 'AiConversation';
        sid?: string | null;
        instance_sid?: string | null;
        messages?: Array<{
            __typename?: 'Messages';
            message?: string | null;
            date_created?: string | null;
            participant_type?: string | null;
            message_id?: string | null;
            participant_sid?: string | null;
        } | null> | null;
        tags?: Array<{
            __typename?: 'Tags';
            tag?: string | null;
            tag_group?: string | null;
            message_ids?: Array<string | null> | null;
        } | null> | null;
    } | null;
};
export type ConversationInsightsGetFlexUserQueryVariables = Exact<{
    input: FlexUsersInput;
}>;
export type ConversationInsightsGetFlexUserQuery = {
    __typename?: 'Query';
    flexUsers?: {
        __typename?: 'FlexUsers';
        users?: Array<{
            __typename?: 'FlexUserInfo';
            friendly_name?: string | null;
        } | null> | null;
    } | null;
};
export type ConversationInsightsListTeamsQueryVariables = Exact<{
    input: FlexTeamsInput;
}>;
export type ConversationInsightsListTeamsQuery = {
    __typename?: 'Query';
    flexTeams?: {
        __typename?: 'FlexTeams';
        teams?: Array<{
            __typename?: 'FlexTeamInfo';
            team_sid?: string | null;
            friendly_name?: string | null;
        } | null> | null;
    } | null;
};
export type ConversationInsightsListTeamMembersQueryVariables = Exact<{
    input: FlexTeamMembersInput;
}>;
export type ConversationInsightsListTeamMembersQuery = {
    __typename?: 'Query';
    flexTeamMembers?: {
        __typename?: 'FlexTeamMembers';
        members?: Array<{
            __typename?: 'FlexTeamMemberInfo';
            worker_sid?: string | null;
            friendly_name?: string | null;
        } | null> | null;
    } | null;
};

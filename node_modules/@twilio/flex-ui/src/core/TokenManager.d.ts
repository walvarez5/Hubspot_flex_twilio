import { TokenData } from "@twilio/flex-sdk";
import type { Config } from "../state";
import type { SSOTokenPayload } from "./TokenStorage";
import { Permissions } from "./TokenStorage";
export declare function triggerLogout(): void;
type TokenManagerConfig = {
    autoRefreshEnabled: boolean;
} & Config;
export declare const TokenManager: {
    isUpdatingToken: () => boolean;
    setUpdatingToken: (isUpdatingToken: boolean) => void;
    initialize(c: TokenManagerConfig): Promise<void>;
    destroy(): void;
    hasActiveToken(): Promise<boolean>;
    validate(token: string): Promise<TokenData | undefined>;
    getPermissions(roles: Array<string>): Permissions;
    getActiveTokenPayload(): Promise<SSOTokenPayload | undefined>;
    parseTokenPayloadFromQueryString(): SSOTokenPayload | undefined;
    clearTokenPayload(): void;
    storeTokenPayload(tokenPayload: SSOTokenPayload): void;
    verifyToken(): Promise<void>;
    isTokenCloseToExpiry(): boolean;
    updateSSOToken(): Promise<void>;
    updateOauthToken(): Promise<void>;
};
export {};

import { EventEmitter } from "events";
import { OAuthConfig } from "../state/AppConfig";
export declare class OAuthLoginHandler extends EventEmitter {
    private _config;
    private constructor();
    static create(config?: OAuthConfig): Promise<OAuthLoginHandler>;
    /**
     * Tries to log in with provided information. Does not initialize token expiration checker.
     * @param {OAuthConfig} config OAuth2.0 configuration object
     * @returns {Promise<boolean>} Returns a promise that resolves to a boolean
     * @example
     * import { OAuthLoginHandler } from "@twilio/flex-ui";
     * OAuthLoginHandler.tryLogin({ clientId: "clientId", connection: "connectionId", loginPopup: false});
     */
    static tryLogin(config?: OAuthConfig): Promise<boolean>;
    private initialize;
    private tryLoginInNewWindow;
    private getToken;
    private getProofKeyFromStorageOrCreate;
    private getAuthorizeUrl;
    private openLoginWindow;
    private isInIFrame;
    private isInLoginWindow;
    private coerceQueryStringToString;
    private parsePayloadFromQueryString;
}

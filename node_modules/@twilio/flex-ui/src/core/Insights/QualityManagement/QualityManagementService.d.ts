import { Question } from "../../../components/Insights/QualityManagementView/QualityManagement.definitions";
import { QualityManagementAction } from "../../../state/QualityManagementState";
import { QMManageQuestionnairesResponse } from "./QualityManagement.definitions";
export declare class QualityManagementService {
    private static instance;
    private dispatch;
    private assessmentsApiUrl;
    private insightsService;
    constructor();
    static getInstance(): QualityManagementService;
    fetchData: () => Promise<void>;
    private fetchAsessmentConfig;
    private fetchQuestionnaires;
    saveAndPublishQuestionnaireData: (payload: QMManageQuestionnairesResponse) => Promise<QMManageQuestionnairesResponse>;
    dispatchAction: (action: QualityManagementAction) => Promise<void>;
    dispatchActionOptimistically: (action: QualityManagementAction) => Promise<void>;
    createOrUpdateCategory: (categoryName: string, categoryId?: string, questions?: string[]) => Promise<{
        name: string;
        id: string;
        questions: string[];
    }>;
    createOrUpdateQuestion: (questionName: string, category: string, description: string, answer: string, enableNAAnswer: boolean, questionId?: string) => Promise<void>;
    createOrUpdateQuestionnaire: (name: string, description: string, id?: string) => Promise<{
        id: string;
        name: string;
        description: string;
    }>;
    duplicateQuestionnaire: (questionnaireId: string) => string;
    updateQuestionnaireActiveStatus: (questionnaireId: string, active: boolean) => Promise<void>;
    updateQuestionsForQuestionnaire: (questionnaireId: string, questions: string[]) => Promise<void>;
    updateQuestionsForCategory: (categoryId: string, questions: Question[]) => Promise<void>;
    deleteQuestion: (questionId: string) => Promise<void>;
    deleteCategory: (categoryId: string) => Promise<void>;
    deleteQuestionnaire: (questionnaireId: string) => Promise<void>;
}

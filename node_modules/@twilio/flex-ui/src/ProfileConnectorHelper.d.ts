import { ITask } from "./models";
/**
 * Profile Connector
 * @interface IProfileConnector
 * @property {string} sid profileConnectSid that identifies a profile
 * @property {string} unique_name name of the profile connector
 * @property {string} taskSid taskSid that the profile connector is associated with
 * @property {string} contextSid contextSid that the taskSid is associated with
 */
export interface IProfileConnector {
    sid?: string;
    unique_name?: string;
    taskSid: string;
    contextSid?: string;
    displayName?: string;
}
export declare const UNMAPPED_TRAITS_PREFIX = "$__trait_not_yet_mapped";
export declare const ERROR_CONTEXT = "ProfileConnectorHelper";
export declare const JWE_TOKEN_USERNAME = "token";
export declare const ERROR_NO_CONNECTOR = "profileConnector is required";
export declare const ERROR_NO_CONTEXT_SID = "Cannot update Context: contextSid is missing.";
export declare const ERROR_NO_TASK = "Cannot create Context: task is missing.";
export declare const ERROR_CREATE_CONTEXT = "Could not create interaction context";
export declare const ERROR_UPDATE_CONTEXT = "Could not update interaction context";
export declare const ERROR_CREATE_CONTEXT_LOOKUP = "Could not create an interaction context ContextLookupSid";
export declare const UNSET_PROFILE_CONNECTOR_SID = "";
export declare const DEFAULT_PROFILE_CONNECTOR_NAME = "flex_connector";
export declare const IS_FETCHING = "isFetching";
export declare const HAS_FETCHED = "hasFetched";
export declare const IC_INITIALIZING = "initializing";
export declare const IC_UPDATE_NAMESPACE = "Twilio";
export declare const IC_UPDATE_ATTRIBUTE_GROUP = "ProfileData";
export declare const CONTENT_TYPE_URLENCODED = "application/x-www-form-urlencoded";
/**
 * @classdesc Helper class for Profile Connector.
 * @category Helpers
 */
export declare class ProfileConnectorHelper {
    /**
     * Check if a task is supported for profile connector - call, sms, whatsapp, or email are supported
     * @param {ITask} task The active task in the Flex UI
     * @returns {boolean} true if the task is supported for profile connector
     * @example
     * import { ProfileConnectorHelper } from "@twilio/flex-ui";
     * const boolAnswer = ProfileConnectorHelper.isSupportedTask(task);
     */
    static isSupportedTask(task?: ITask): boolean | undefined;
    /**
     * Check if a task has a valid Status for linking to a profile connector - assigned or wrapping are supported
     * @param {ITask} task The active task in the Flex UI
     * @returns {boolean} true if the task has a valid Status for linking to a profile connector
     * @example
     * import { ProfileConnectorHelper } from "@twilio/flex-ui";
     * const boolAnswer = ProfileConnectorHelper.isTaskValidForLinking(task);
     */
    static isTaskValidForLinking(task?: ITask): boolean | undefined;
    /**
     * Fetch profile connector for a task from existing InteractionContext, store it in the context
     * @param {ITask} task The active task to which the profile connector is associated
     * @private
     * @throws {FlexError}
     */
    static fetchAndSetProfileConnectorForTask(task: ITask): Promise<IProfileConnector | undefined>;
    /**
     * Set profile connector for a task in ProfileConnectorContext, and interaction context
     * @param {ITask} task The active task to which the profile connector is associated
     * @param {IProfileConnector} profileConnector The profileConnector to set
     * @example
     * import { ProfileConnectorHelper } from "@twilio/flex-ui";
     * ProfileConnectorHelper.setProfileConnectorForTask(task, profileConnector);
     */
    static setProfileConnectorForTask(task: ITask, profileConnector: IProfileConnector): Promise<void>;
    /**
     * Fetches the profile and adds to local cache to set the display name
     * @param profileConnector
     * @param displayNameConfig
     * @private
     */
    static fetchProfileAndSetDisplayName(profileConnector: IProfileConnector, displayNameConfig: any): Promise<void>;
    /**
     * Grabs the display name from the profile using the traits and setting the name in ProfileConnectorContext
     * @param taskSid
     * @param singleProfile the profile associated with the task
     * @param displayNameConfig the configuration for the display name
     * @private
     */
    private static setProfileDisplayName;
    /**
     * Erase profileConnectSid for a task
     * @param {ITask} task the task to erase profileConnectSid for
     * @param {IProfileConnector} profileConnector the profileConnector to erase
     * @since 2.9.0
     * @example
     * import { ProfileConnectorHelper } from "@twilio/flex-ui";
     * ProfileConnectorHelper.eraseProfileConnectSidForTask(task, profileConnector);
     */
    static eraseProfileConnectSidForTask(task: ITask, profileConnector?: IProfileConnector): Promise<void>;
    /**
     * Helper function to extract display name from profile using traits in redux
     * @param {Profile} profile profile associated with Task
     * @param {Object} trait trait mapping stored in redux
     * @private
     * @returns {string} display name of profile
     */
    private static getTraitFromAdditionalAttributes;
    /**
     * Create and Link IC - entry point for the setup of a new Context in the case of an outbound call
     * @param task The task to create interaction context for
     * @param profileConnector The profile connector to create interaction context for
     * @private
     * @throws {Error} if profileConnector or task is missing, or if one of the IC operations fails
     */
    private static createAndLinkIC;
    /**
     * Fetch the Flex Connector Instance SID from customer-profiles /Instances mapping for the account sid
     * @returns {string} profileConfigSid
     * @private
     */
    private static fetchProfileConfigSid;
    /**
     * Create interaction context for a profile connector
     * @param task The task to create interaction context for
     * @param profileConnector The profile connector to create interaction context for
     * @private
     * @throws {Error}
     */
    private static createInteractionContext;
    /**
     * Wait for the context to be created before proceeding
     * @private
     */
    private static verifyContextCreation;
    /**
     * Create interaction context lookup sid for a task
     * @param {string} taskSid - the active taskSid to which the new contextLookupSid is created
     * @param {string} contextSid - the active Interaction Context sid that we are associating
     * @private
     * @throws {Error}
     */
    private static createInteractionContextLookupSid;
    /**
     * Update profile connector sid in interaction context
     * @param profileConnector The updated profile connector with the new sid
     * @private
     * @throws {Error}
     */
    private static updateProfileConnectorSidInInteractionContext;
}

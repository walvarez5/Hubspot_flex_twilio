import { Client as ConversationsClient } from "@twilio/conversations";
import { Device } from "@twilio/voice-sdk";
import { CbmSdk } from "@twiliointernal/cbm-sdk";
import { Store } from "redux";
import * as TwilioChat from "twilio-chat";
import { SyncClient } from "twilio-sync";
import { Supervisor, Workspace } from "twilio-taskrouter";
import { FlexEventEmitter } from "./FlexEvents";
import { AppState } from "./state/AppState";
import { FlexState } from "./store";
export declare const pastTokens: Array<string>;
export type FlexStateCallback = (storeState: FlexState) => AppState;
export declare class FlexModule {
    private static store;
    static stateCallback: FlexStateCallback;
    static events: FlexEventEmitter;
    static init(store: Store<FlexState>, stateCb?: FlexStateCallback): void;
    static get state(): AppState;
    static get flexState(): FlexState;
    static dispatch(action: any): any;
    private static _conversationsClient;
    static get initialized(): boolean;
    /**
     * Deprecated
     * @ignore
     */
    static get chatClient(): TwilioChat.Client;
    static get conversationsClient(): ConversationsClient | undefined;
    static set conversationsClient(value: ConversationsClient | undefined);
    private static _workerClient;
    static get workerClient(): Supervisor | undefined;
    static set workerClient(value: Supervisor | undefined);
    private static _workspaceClient;
    static get workspaceClient(): Workspace | undefined;
    static set workspaceClient(value: Workspace | undefined);
    private static _insightsClient?;
    static get insightsClient(): SyncClient | undefined;
    static set insightsClient(value: SyncClient | undefined);
    private static _voiceClient?;
    static get voiceClient(): Device | undefined;
    static set voiceClient(value: Device | undefined);
    private static _cbmClient?;
    static get cbmClient(): CbmSdk | undefined;
    static set cbmClient(value: CbmSdk | undefined);
}
export type StateToProps<OwnProps, StateProps, State> = (state: State, ownProps: OwnProps) => StateProps;
export type StateToPropsFactory<OwnProps, StateProps, State> = (state: State, props: OwnProps) => StateToProps<OwnProps, StateProps, State>;
export type StateToPropsParam<OwnProps, StateProps, State> = StateToProps<OwnProps, StateProps, State> | StateToPropsFactory<OwnProps, StateProps, State>;

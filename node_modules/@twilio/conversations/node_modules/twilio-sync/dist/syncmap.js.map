{"version":3,"file":"syncmap.js","sources":["../src/syncmap.ts"],"sourcesContent":["import { deepClone, isPositiveInteger, validatePageSize } from './utils/sanitize';\nimport { UriBuilder } from './utils/uri';\nimport { SyncError } from './utils/syncerror';\nimport log from './utils/logger';\n\nimport { SyncEntity, EntityServices, RemovalHandler } from './entity';\nimport { SyncMapItemDescriptor, SyncMapItem } from './syncmapitem';\nimport { Paginator } from './paginator';\nimport { Cache } from './cache';\n\nimport { Mutator } from './interfaces/mutator';\nimport { NamespacedMergingQueue } from './mergingqueue';\nimport { Closeable } from './closeable';\nimport { validateTypesAsync, nonNegativeInteger, pureObject, objectSchema, custom } from '@twilio/declarative-type-validator';\n\nexport interface SyncMapServices extends EntityServices {\n}\n\nexport interface SyncMapDescriptor {\n  sid: string;\n  url: string;\n  revision: string;\n  last_event_id: number;\n  links: any;\n  unique_name: string;\n  date_updated: Date;\n  date_expires: string;\n\n  items?: SyncMapItemDescriptor[];\n}\n\ninterface PutItemResult {\n  item: SyncMapItemDescriptor;\n  added: boolean;\n}\n\n/**\n * Map item metadata.\n */\ninterface SyncMapItemMetadata {\n  /**\n   * Specifies the time-to-live in seconds after which the map item is subject to automatic deletion.\n   * The value 0 means infinity.\n   */\n  ttl?: number;\n}\n\n/**\n * Map item query options.\n */\ninterface SyncMapItemQueryOptions {\n  /**\n   * SyncMapItem key, which should be used as the offset. If undefined, starts from the beginning or end depending\n   * on queryOptions.order.\n   */\n  from?: string;\n\n  /**\n   * Result page size.\n   */\n  pageSize?: number | string;\n\n  /**\n   * Lexicographical order of results.\n   */\n  order?: 'asc' | 'desc';\n\n  key?: string;\n\n  limit?: number;\n}\n\nclass SyncMapImpl extends SyncEntity {\n  private readonly descriptor: SyncMapDescriptor;\n  private readonly updateMergingQueue: NamespacedMergingQueue<string, SyncMapItemMetadata, SyncMapItem>;\n  private readonly cache: Cache<string, SyncMapItem>;\n\n  /**\n   * @private\n   */\n  constructor(services: SyncMapServices, descriptor: SyncMapDescriptor, removalHandler: RemovalHandler) {\n    super(services, removalHandler);\n    const updateRequestReducer = (acc, input) => (typeof input.ttl === 'number') ? {ttl: input.ttl}\n      : acc;\n    this.updateMergingQueue = new NamespacedMergingQueue<string, SyncMapItemMetadata, SyncMapItem>(updateRequestReducer);\n    this.cache = new Cache<string, SyncMapItem>();\n    this.descriptor = descriptor;\n    this.descriptor.date_updated = new Date(this.descriptor.date_updated);\n\n    if (descriptor.items) {\n      descriptor.items.forEach(itemDescriptor => {\n        itemDescriptor.date_updated = new Date(itemDescriptor.date_updated);\n        this.cache.store(itemDescriptor.key, new SyncMapItem(itemDescriptor), itemDescriptor.last_event_id);\n      });\n    }\n  }\n\n  // private props\n  get uri(): string {\n    return this.descriptor.url;\n  }\n\n  get links(): any {\n    return this.descriptor.links;\n  }\n\n  get revision(): string {\n    return this.descriptor.revision;\n  }\n\n  get lastEventId(): number {\n    return this.descriptor.last_event_id;\n  }\n\n  get dateExpires(): string {\n    return this.descriptor.date_expires;\n  }\n\n  static get type() {\n    return 'map';\n  }\n\n  get type() {\n    return 'map';\n  }\n\n  // below properties are specific to Insights only\n  get indexName(): string {\n    return undefined;\n  }\n\n  get queryString(): string {\n    return undefined;\n  }\n\n  // public props, documented along with class description\n  get sid() {\n    return this.descriptor.sid;\n  }\n\n  get uniqueName() {\n    return this.descriptor.unique_name || null;\n  }\n\n  get dateUpdated(): Date {\n    return this.descriptor.date_updated;\n  }\n\n  public async set(key: string, value: Object, itemMetadataUpdates?: SyncMapItemMetadata) {\n    const input: SyncMapItemMetadata = itemMetadataUpdates || {};\n    return this.updateMergingQueue.squashAndAdd(key, input, (input) => this._putItemUnconditionally(key, value, input.ttl));\n  }\n\n  public async get(key: string): Promise<SyncMapItem> {\n    if (key === null || key === undefined) {\n      throw new SyncError('SyncMapItem key may not be empty', 400, 54209);\n    }\n\n    if (this.cache.has(key)) {\n      return this.cache.get(key);\n    } else {\n      return this._getItemFromServer(key);\n    }\n  }\n\n  private async _getItemFromServer(key: string): Promise<SyncMapItem> {\n    let result = await this.queryItems({key: key});\n    if (result.items.length < 1) {\n      throw new SyncError(`The specified Map Item does not exist`, 404, 54201);\n    } else {\n      return result.items[0];\n    }\n  }\n\n  public async mutate(key: string, mutator: Mutator, itemMetadataUpdates?: SyncMapItemMetadata): Promise<SyncMapItem> {\n    const input: SyncMapItemMetadata = itemMetadataUpdates || {};\n    return this.updateMergingQueue.add(key, input, (input) => this._putItemWithIfMatch(key, mutator, input.ttl));\n  }\n\n  public async update(key: string, obj: Object, itemMetadataUpdates?: SyncMapItemMetadata): Promise<SyncMapItem> {\n    return this.mutate(key, remote => Object.assign(remote, obj), itemMetadataUpdates);\n  }\n\n  private async _putItemUnconditionally(key: string, data: Object, ttl: number): Promise<SyncMapItem> {\n    const result: PutItemResult = await this._putItemToServer(key, data, undefined, ttl);\n    const item = result.item;\n    this._handleItemMutated(item.key, item.url, item.last_event_id, item.revision, item.data,\n      item.date_updated, item.date_expires, result.added, false);\n    return this.cache.get(item.key);\n  }\n\n  private async _putItemWithIfMatch(key: string, mutatorFunction: Mutator, ttl: number): Promise<SyncMapItem> {\n    const currentItem = await this.get(key)\n      .catch(error => {\n        if (error.status === 404) {\n          // PUT /Items/myKey with `If-Match: -1` acts as \"put if not exists\"\n          return new SyncMapItem({key: key, data: {}, last_event_id: -1, revision: '-1', url: null, date_updated: null, date_expires: null});\n        } else {\n          throw error;\n        }\n      });\n    let data = mutatorFunction(deepClone(currentItem.data));\n    if (data) {\n      let ifMatch = currentItem.revision;\n      try {\n        const result: PutItemResult = await this._putItemToServer(key, data, ifMatch, ttl);\n        const item = result.item;\n        this._handleItemMutated(item.key, item.url, item.last_event_id, item.revision, item.data,\n          item.date_updated, item.date_expires, result.added, false);\n        return this.cache.get(item.key);\n      } catch (error) {\n        if (error.status === 412) {\n          await this._getItemFromServer(key);\n          return this._putItemWithIfMatch(key, mutatorFunction, ttl);\n        } else {\n          throw error;\n        }\n      }\n    } else {\n      return currentItem;\n    }\n  }\n\n  private async _putItemToServer(key: string, data: Object, ifMatch: string, ttl: number): Promise<PutItemResult> {\n    const url = new UriBuilder(this.links.items).pathSegment(key).build();\n    const requestBody: any = {data};\n\n    if (ttl !== undefined) {\n      requestBody.ttl = ttl;\n    }\n\n    try {\n      const response = await this.services.network.put(url, requestBody, ifMatch);\n      const mapItemDescriptor = response.body;\n      mapItemDescriptor.data = data; // The server does not return the data in the response\n      mapItemDescriptor.date_updated = new Date(mapItemDescriptor.date_updated);\n      const added = response.status.code === 201;\n      return {added, item: mapItemDescriptor};\n    } catch (error) {\n      if (error.status === 404) {\n        this.onRemoved(false);\n      }\n      throw error;\n    }\n  }\n\n  async remove(key: string): Promise<void> {\n    const item = await this.get(key);\n    const previousItemData = deepClone(item.data);\n    const response = await this.services.network.delete(item.uri);\n    this._handleItemRemoved(key, response.body.last_event_id, previousItemData, new Date(response.body.date_updated), false);\n  }\n\n  /**\n   * @private\n   */\n  protected async queryItems(args?): Promise<Paginator<SyncMapItem>> {\n    args = args || {};\n    const uri = new UriBuilder(this.links.items)\n      .queryParam('From', args.from)\n      .queryParam('PageSize', args.limit)\n      .queryParam('Key', args.key)\n      .queryParam('PageToken', args.pageToken)\n      .queryParam('Order', args.order)\n      .build();\n\n    let response = await this.services.network.get(uri);\n    let items = response.body.items.map(el => {\n      el.date_updated = new Date(el.date_updated);\n      let itemInCache = this.cache.get(el.key);\n      if (itemInCache) {\n        this._handleItemMutated(el.key, el.url, el.last_event_id, el.revision, el.data, el.date_updated, el.date_expires, false, true);\n      } else {\n        this.cache.store(el.key, new SyncMapItem(el), el.last_event_id);\n      }\n      return this.cache.get(el.key);\n    });\n    const meta = response.body.meta;\n    return new Paginator<SyncMapItem>(items\n      , pageToken => this.queryItems({pageToken})\n      , meta.previous_token\n      , meta.next_token);\n  }\n\n  async getItems(args?: any): Promise<Paginator<SyncMapItem>> {\n    args = args || {};\n    validatePageSize(args.pageSize);\n    args.limit = args.pageSize || args.limit || 50;\n    args.order = args.order || 'asc';\n    return this.queryItems(args);\n  }\n\n  private shouldIgnoreEvent(key: string, eventId: number) {\n    return this.cache.isKnown(key, eventId);\n  }\n\n  /**\n   * Handle update from the server\n   * @private\n   */\n  _update(update, isStrictlyOrdered: boolean): void {\n    update.date_created = new Date(update.date_created);\n    switch (update.type) {\n      case 'map_item_added':\n      case 'map_item_updated': {\n        this._handleItemMutated(\n          update.item_key,\n          update.item_url,\n          update.id,\n          update.item_revision,\n          update.item_data,\n          update.date_created,\n          undefined, // orchestration events do not include date_expires\n          update.type === 'map_item_added',\n          true);\n      }\n        break;\n      case 'map_item_removed': {\n        this._handleItemRemoved(update.item_key, update.id, update.item_data, update.date_created, true);\n      }\n        break;\n      case 'map_removed': {\n        this.onRemoved(false);\n      }\n        break;\n    }\n\n    if (isStrictlyOrdered) {\n      this._advanceLastEventId(update.id, update.map_revision);\n    }\n  }\n\n  _advanceLastEventId(eventId: number, revision?: string): void {\n    if (this.lastEventId < eventId) {\n      this.descriptor.last_event_id = eventId;\n      if (revision) {\n        this.descriptor.revision = revision;\n      }\n    }\n  }\n\n  private _updateRootDateUpdated(dateUpdated: Date) {\n    if (!this.descriptor.date_updated || dateUpdated.getTime() > this.descriptor.date_updated.getTime()) {\n      this.descriptor.date_updated = dateUpdated;\n      this.services.storage.update(this.type, this.sid, this.uniqueName, {date_updated: dateUpdated});\n    }\n  }\n\n  private _handleItemMutated(\n    key: string,\n    url: string,\n    lastEventId: number,\n    revision: string,\n    data: Object,\n    dateUpdated: Date,\n    dateExpires: string,\n    added: boolean,\n    remote: boolean\n  ): void {\n    if (this.shouldIgnoreEvent(key, lastEventId)) {\n      log.trace('SyncMapItem ', key, ' update skipped, current:', this.lastEventId, ', remote:', lastEventId);\n      return;\n    }\n\n    this._updateRootDateUpdated(dateUpdated);\n    const item = this.cache.get(key);\n\n    if (!item) {\n      const newItem = new SyncMapItem({\n        key: key,\n        url,\n        last_event_id: lastEventId,\n        revision,\n        data,\n        date_updated: dateUpdated,\n        date_expires: dateExpires,\n      });\n\n      this.cache.store(key, newItem, lastEventId);\n      this.emitItemMutationEvent(newItem, remote, added);\n\n      return;\n    }\n\n    const previousItemData = deepClone(item.data);\n    item.update(lastEventId, revision, data, dateUpdated);\n    this.cache.store(key, item, lastEventId);\n\n    if (dateExpires !== undefined) {\n      item.updateDateExpires(dateExpires);\n    }\n\n    this.emitItemMutationEvent(item, remote, false, previousItemData);\n  }\n\n  private emitItemMutationEvent(item: SyncMapItem, remote: boolean, added: boolean, previousItemData: null | Object = null): void {\n    const eventName = added ? 'itemAdded' : 'itemUpdated';\n    const args: any = { item, isLocal: !remote };\n\n    if (!added) {\n      args.previousItemData = previousItemData;\n    }\n\n    this.broadcastEventToListeners(eventName, args);\n  }\n\n  /**\n   * @private\n   */\n  protected _handleItemRemoved(key, eventId, oldData, dateUpdated: Date, remote: boolean) {\n    this._updateRootDateUpdated(dateUpdated);\n    this.cache.delete(key, eventId);\n    this.broadcastEventToListeners('itemRemoved', {key: key, isLocal: !remote, previousItemData: oldData});\n  }\n\n  protected onRemoved(locally: boolean) {\n    this._unsubscribe();\n    this.removalHandler(this.type, this.sid, this.uniqueName);\n    this.broadcastEventToListeners('removed', {isLocal: locally});\n  }\n\n  public async setTtl(ttl: number): Promise<void> {\n    try {\n      const requestBody = {ttl};\n      const response = await this.services.network.post(this.uri, requestBody);\n      this.descriptor.date_expires = response.body.date_expires;\n    } catch (error) {\n      if (error.status === 404) {\n        this.onRemoved(false);\n      }\n      throw error;\n    }\n  }\n\n  public async setItemTtl(key: string, ttl: number): Promise<void> {\n    let existingItem = await this.get(key);\n    const requestBody = {ttl};\n    const response = await this.services.network.post(existingItem.uri, requestBody);\n    existingItem.updateDateExpires(response.body.date_expires);\n  }\n\n  async removeMap() {\n    await this.services.network.delete(this.uri);\n    this.onRemoved(true);\n  }\n}\n\n/**\n * Represents a Sync map, which is a data structure that stores an unordered set of key-value pairs.\n * Use the {@link SyncClient.map} method to obtain a reference to a Sync map.\n * Information about rate limits can be found [here](https://www.twilio.com/docs/sync/limits).\n */\nclass SyncMap extends Closeable {\n  private readonly syncMapImpl: SyncMapImpl;\n\n  // private props\n  get uri(): string {\n    return this.syncMapImpl.uri;\n  }\n\n  get links(): any {\n    return this.syncMapImpl.links;\n  }\n\n  get revision(): string {\n    return this.syncMapImpl.revision;\n  }\n\n  get lastEventId(): number {\n    return this.syncMapImpl.lastEventId;\n  }\n\n  get dateExpires(): string {\n    return this.syncMapImpl.dateExpires;\n  }\n\n  static get type() {\n    return SyncMapImpl.type;\n  }\n\n  get type() {\n    return SyncMapImpl.type;\n  }\n\n  /**\n   * An immutable identifier (a SID) assigned by the system on creation.\n   */\n  get sid() {\n    return this.syncMapImpl.sid;\n  }\n\n  /**\n   * An optional immutable identifier that may be assigned by the\n   * programmer to this map on creation. Unique among other Maps.\n   */\n  get uniqueName() {\n    return this.syncMapImpl.uniqueName;\n  }\n\n  /**\n   * Date when the map was last updated.\n   */\n  get dateUpdated(): Date {\n    return this.syncMapImpl.dateUpdated;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(syncMapImpl: SyncMapImpl) {\n    super();\n    this.syncMapImpl = syncMapImpl;\n    this.syncMapImpl.attach(this);\n  }\n\n  /**\n   * Fired when a new item appears in the map, regardless of whether its creator was local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * {@link SyncMapItem} `item` - added item\n   *     * boolean `isLocal` - equals true if the item was added by a local actor, false otherwise\n   * @example\n   * ```typescript\n   * map.on('itemAdded', (args) => {\n   *   console.log(`Map item ${args.item.key} was added`);\n   *   console.log('args.item.data:', args.item.data);\n   *   console.log('args.isLocal:', args.isLocal);\n   * });\n   * ```\n   * @event\n   */\n  static readonly itemAdded = 'itemAdded';\n\n  /**\n   * Fired when a map item is updated (not added or removed, but changed), regardless of whether the updater was local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * {@link SyncMapItem} `item` - updated item\n   *     * boolean `isLocal` - equals true if the item was updated by a local actor, false otherwise\n   *     * object `previousItemData` - contains a snapshot of the item data before the update\n   * @example\n   * ```typescript\n   * map.on('itemUpdated', (args) => {\n   *   console.log(`Map item ${args.item.key} was updated`);\n   *   console.log('args.item.data:', args.item.data);\n   *   console.log('args.isLocal:', args.isLocal);\n   *   console.log('args.previousItemData:', args.previousItemData);\n   * });\n   * ```\n   * @event\n   */\n  static readonly itemUpdated = 'itemUpdated';\n\n  /**\n   * Fired when a map item is removed, regardless of whether the remover was local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * string `key` - the key of the removed item\n   *     * boolean `isLocal` - equals true if the item was added by a local actor, false otherwise\n   *     * object `previousItemData` - contains a snapshot of the item data before removal\n   * @example\n   * ```typescript\n   * map.on('itemRemoved', (args) => {\n   *   console.log(`Map item ${args.key} was removed`);\n   *   console.log('args.previousItemData:', args.previousItemData);\n   *   console.log('args.isLocal:', args.isLocal);\n   * });\n   * ```\n   * @event\n   */\n  static readonly itemRemoved = 'itemRemoved';\n\n  /**\n   * Fired when a map is deleted entirely, by any actor local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * boolean `isLocal` - equals true if the map was removed by a local actor, false otherwise\n   * @example\n   * ```typescript\n   * map.on('removed', (args) => {\n   *   console.log(`Map ${map.sid} was removed`);\n   *   console.log('args.isLocal:', args.isLocal);\n   * });\n   * ```\n   * @event\n   */\n  static readonly removed = 'removed';\n\n  /**\n   * Add a new item to the map with the given key-value pair. Overwrites any data that might already exist with that key.\n   * @param key Unique item identifier.\n   * @param data Data to be set.\n   * @param itemMetadataUpdates New item metadata.\n   * @return Newly added item, or modified one if already exists, with the latest known data.\n   * @example\n   * ```typescript\n   * map.set('myKey', { name: 'John Smith' }, { ttl: 86400 })\n   *   .then((item) => {\n   *     console.log('Map SyncMapItem set() successful, item data:', item.data);\n   *   })\n   *   .catch((error) => {\n   *     console.error('Map SyncMapItem set() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(\n    'string',\n    pureObject,\n    [\n      'undefined',\n      objectSchema('item metadata', {\n        ttl: [nonNegativeInteger, 'undefined']\n      })\n    ]\n  )\n  public async set(key: string, data: Object, itemMetadataUpdates?: SyncMapItemMetadata) {\n    this.ensureNotClosed();\n    return this.syncMapImpl.set(key, data, itemMetadataUpdates);\n  }\n\n  /**\n   * Retrieve an item by key.\n   * @param key Identifies the desired item.\n   * @return A promise that resolves when the item has been fetched.\n   * This promise will be rejected if item was not found.\n   * @example\n   * ```typescript\n   * map.get('myKey')\n   *   .then((item) => {\n   *     console.log('Map SyncMapItem get() successful, item data:', item.data)\n   *   })\n   *   .catch((error) => {\n   *     console.error('Map SyncMapItem get() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync('string')\n  public async get(key: string): Promise<SyncMapItem> {\n    this.ensureNotClosed();\n    return this.syncMapImpl.get(key);\n  }\n\n  /**\n   * Schedules a modification to this Map SyncMapItem that will apply a mutation function.\n   * If no SyncMapItem with the given key exists, it will first be created, having the default data (`{}`).\n   * @param key Selects the map item to be mutated.\n   * @param mutator A function that outputs a new data based on the existing data.\n   * May be called multiple times, particularly if this Map SyncMapItem is modified concurrently by remote code.\n   * If the mutation ultimately succeeds, the Map SyncMapItem will have made the particular transition described\n   * by this function.\n   * @param itemMetadataUpdates New item metadata.\n   * @return Resolves with the most recent item state, the output of a successful\n   * mutation or a state that prompted graceful cancellation (mutator returned `null`).\n   * @example\n   * ```typescript\n   * const mutatorFunction = (currentData) => {\n   *     currentData.viewCount = (currentData.viewCount || 0) + 1;\n   *     return currentData;\n   * };\n   * map.mutate('myKey', mutatorFunction, { ttl: 86400 })\n   *   .then((item) => {\n   *     console.log('Map SyncMapItem mutate() successful, new data:', item.data)\n   *   })\n   *   .catch((error) => {\n   *     console.error('Map SyncMapItem mutate() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(\n    'string',\n    'function',\n    [\n      'undefined',\n      objectSchema('item metadata', {\n        ttl: [nonNegativeInteger, 'undefined']\n      })\n    ]\n  )\n  public async mutate(key: string, mutator: Mutator, itemMetadataUpdates?: SyncMapItemMetadata): Promise<SyncMapItem> {\n    this.ensureNotClosed();\n    return this.syncMapImpl.mutate(key, mutator, itemMetadataUpdates);\n  }\n\n  /**\n   * Modify a map item by appending new fields (or by overwriting existing ones) with the values from\n   * the provided Object. Creates a new item if no item by this key exists, copying all given fields and values\n   * into it.\n   * This is equivalent to\n   * ```typescript\n   * map.mutate('myKey', (currentData) => Object.assign(currentData, obj));\n   * ```\n   * @param key Selects the map item to update.\n   * @param obj Specifies the particular (top-level) attributes that will receive new values.\n   * @param itemMetadataUpdates New item metadata.\n   * @return A promise resolving to the modified item in its new state.\n   * @example\n   * ```typescript\n   * // Say, the Map SyncMapItem (key: `'myKey'`) data is `{ name: 'John Smith' }`\n   * map.update('myKey', { age: 34 }, { ttl: 86400 })\n   *   .then((item) => {\n   *     // Now the Map SyncMapItem data is `{ name: 'John Smith', age: 34 }`\n   *     console.log('Map SyncMapItem update() successful, new data:', item.data);\n   *   })\n   *   .catch((error) => {\n   *     console.error('Map SyncMapItem update() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(\n    'string',\n    pureObject,\n    [\n      'undefined',\n      objectSchema('item metadata', {\n        ttl: [nonNegativeInteger, 'undefined']\n      })\n    ]\n  )\n  public async update(key: string, obj: Object, itemMetadataUpdates?: SyncMapItemMetadata): Promise<SyncMapItem> {\n    this.ensureNotClosed();\n    return this.syncMapImpl.update(key, obj, itemMetadataUpdates);\n  }\n\n  /**\n   * Delete an item, given its key.\n   * @param key Selects the item to delete.\n   * @return A promise to remove an item.\n   * The promise will be rejected if 'key' is undefined or an item was not found.\n   * @example\n   * ```typescript\n   * map.remove('myKey')\n   *   .then(() => {\n   *     console.log('Map SyncMapItem remove() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('Map SyncMapItem remove() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync('string')\n  async remove(key: string): Promise<void> {\n    this.ensureNotClosed();\n    return this.syncMapImpl.remove(key);\n  }\n\n  /**\n   * Get a complete list of items from the map.\n   * Information about the query limits can be found [here](https://www.twilio.com/docs/sync/limits).\n   * @param queryOptions Query options.\n   * @example\n   * ```typescript\n   * const pageHandler = (paginator) => {\n   *   paginator.items.forEach((item) => {\n   *     console.log(`SyncMapItem ${item.key}: `, item.data);\n   *   });\n   *   return paginator.hasNextPage\n   *     ? paginator.nextPage().then(pageHandler)\n   *     : null;\n   * };\n   * map.getItems({ from: 'myKey', order: 'asc' })\n   *   .then(pageHandler)\n   *   .catch((error) => {\n   *     console.error('Map getItems() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync([\n    'undefined',\n    objectSchema('query options', {\n      from: ['string', 'undefined'],\n      pageSize: [custom((value) => [isPositiveInteger(value), 'a positive integer']), 'undefined']\n    })\n  ])\n  async getItems(queryOptions?: SyncMapItemQueryOptions): Promise<Paginator<SyncMapItem>> {\n    this.ensureNotClosed();\n    return this.syncMapImpl.getItems(queryOptions);\n  }\n\n  /**\n   * Update the time-to-live of the map.\n   * @param ttl Specifies the TTL in seconds after which the map is subject to automatic deletion. The value 0 means infinity.\n   * @return A promise that resolves after the TTL update was successful.\n   * @example\n   * ```typescript\n   * map.setTtl(3600)\n   *   .then(() => {\n   *     console.log('Map setTtl() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('Map setTtl() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(nonNegativeInteger)\n  public async setTtl(ttl: number): Promise<void> {\n    this.ensureNotClosed();\n    return this.syncMapImpl.setTtl(ttl);\n  }\n\n  /**\n   * Update the time-to-live of a map item.\n   * @param key SyncMapItem key.\n   * @param ttl Specifies the TTL in seconds after which the map item is subject to automatic deletion. The value 0 means infinity.\n   * @return A promise that resolves after the TTL update was successful.\n   * @example\n   * ```typescript\n   * map.setItemTtl('myKey', 86400)\n   *   .then(() => {\n   *     console.log('Map setItemTtl() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('Map setItemTtl() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync('string', nonNegativeInteger)\n  public async setItemTtl(key: string, ttl: number): Promise<void> {\n    this.ensureNotClosed();\n    return this.syncMapImpl.setItemTtl(key, ttl);\n  }\n\n  /**\n   * Delete this map. It will be impossible to restore it.\n   * @return A promise that resolves when the map has been deleted.\n   * @example\n   * ```typescript\n   * map.removeMap()\n   *   .then(() => {\n   *     console.log('Map removeMap() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('Map removeMap() failed', error);\n   *   });\n   * ```\n   */\n  async removeMap() {\n    this.ensureNotClosed();\n    await this.syncMapImpl.removeMap();\n  }\n\n  /**\n   * Conclude work with the map instance and remove all event listeners attached to it.\n   * Any subsequent operation on this object will be rejected with error.\n   * Other local copies of this map will continue operating and receiving events normally.\n   * @example\n   * ```typescript\n   * map.close();\n   * ````\n   */\n  public close(): void {\n    super.close();\n    this.syncMapImpl.detach(this.listenerUuid);\n  }\n\n}\n\nexport { SyncMapItemMetadata, SyncMapItemQueryOptions, SyncMapImpl, SyncMap };\n\nexport default SyncMap;\n"],"names":["SyncEntity","NamespacedMergingQueue","Cache","SyncMapItem","SyncError","deepClone","UriBuilder","uri","Paginator","validatePageSize","log","Closeable","__decorate","validateTypesAsync","pureObject","objectSchema","nonNegativeInteger","custom","isPositiveInteger"],"mappings":"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"}
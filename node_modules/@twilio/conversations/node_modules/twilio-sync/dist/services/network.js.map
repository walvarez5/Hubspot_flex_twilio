{"version":3,"file":"network.js","sources":["../../src/services/network.ts"],"sourcesContent":["import * as uuid from 'uuid';\n\nimport { SyncError, SyncNetworkError } from '../utils/syncerror';\nimport log from '../utils/logger';\n\nimport { ClientInfo } from '../clientInfo';\nimport { Retrier } from '@twilio/operation-retrier';\nimport { Network } from '../interfaces/services';\n\nimport { TransportUnavailableError } from 'twilsock';\n\nconst MINIMUM_RETRY_DELAY = 4000;\nconst MAXIMUM_RETRY_DELAY = 60000;\nconst MAXIMUM_ATTEMPTS_TIME = 90000;\nconst RETRY_DELAY_RANDOMNESS = 0.2;\n\nfunction messageFromErrorBody(transportError: any): string {\n  if (transportError.body) {\n    if (transportError.body.message) {\n      return transportError.body.message;\n    }\n  }\n  switch (transportError.status) {\n    case 429:\n      return 'Throttled by server';\n    case 404:\n      return 'Not found from server';\n    default:\n      return 'Error from server';\n  }\n}\n\nfunction codeFromErrorBody(trasportError: any): number {\n  if (trasportError.body) {\n    return trasportError.body.code;\n  }\n  return 0;\n}\n\nfunction mapTransportError(transportError: any): Error {\n  if (transportError.status === 409) {\n    return new SyncNetworkError(messageFromErrorBody(transportError),\n      transportError.status,\n      codeFromErrorBody(transportError),\n      transportError.body);\n  } else if (transportError.status) {\n    return new SyncError(messageFromErrorBody(transportError),\n      transportError.status,\n      codeFromErrorBody(transportError));\n  } else if (transportError instanceof TransportUnavailableError) {\n    return transportError;\n  } else {\n    return new SyncError(transportError.message, 0, 0);\n  }\n}\n\n/**\n * @classdesc Incapsulates network operations to make it possible to add some optimization/caching strategies\n */\nclass NetworkService implements Network {\n  clientInfo: ClientInfo;\n  config: any;\n  transport: any;\n\n  constructor(clientInfo: ClientInfo, config: any, transport: any) {\n    this.clientInfo = clientInfo;\n    this.config = config;\n    this.transport = transport;\n  }\n\n  private createHeaders() {\n    return {\n      'Content-Type': 'application/json',\n      'Twilio-Sync-Client-Info': JSON.stringify(this.clientInfo),\n      'Twilio-Request-Id': 'RQ' + uuid.v4().replace(/-/g, '')\n    };\n  }\n\n  private backoffConfig() {\n    return Object.assign({\n      min: MINIMUM_RETRY_DELAY,\n      max: MAXIMUM_RETRY_DELAY,\n      maxAttemptsTime: MAXIMUM_ATTEMPTS_TIME,\n      randomness: RETRY_DELAY_RANDOMNESS\n    }, this.config.backoffConfig);\n  }\n\n  private executeWithRetry<T>(request: () => Promise<T>, retryWhenThrottled = true): Promise<T> {\n    return new Promise((resolve, reject) => {\n      let codesToRetryOn = [502, 503, 504];\n      if (retryWhenThrottled) {\n        codesToRetryOn.push(429);\n      }\n\n      let retrier = new Retrier(this.backoffConfig());\n      retrier.on('attempt', () => {\n        request()\n          .then(result => retrier.succeeded(result))\n          .catch(err => {\n            if (codesToRetryOn.includes(err.status)) {\n              let delayOverride = parseInt(err.headers ? err.headers['Retry-After'] : null);\n              retrier.failed(mapTransportError(err),\n                isNaN(delayOverride) ? null : delayOverride * 1000);\n            } else if (err.message === 'Twilsock disconnected') {\n              // Ugly hack. We must make a proper exceptions for twilsock\n              retrier.failed(mapTransportError(err));\n            } else {\n              // Fatal error\n              retrier.removeAllListeners();\n              retrier.cancel();\n              reject(mapTransportError(err));\n            }\n          });\n      });\n\n      retrier.on('succeeded', result => {\n        resolve(result);\n      });\n      retrier.on('cancelled', err => reject(mapTransportError(err)));\n      retrier.on('failed', err => reject(mapTransportError(err)));\n\n      retrier.start();\n    });\n  }\n\n  /**\n   * Make a GET request by given URI\n   * @Returns Promise<Response> Result of successful get request\n   */\n  get(uri: string): Promise<Response> {\n    let headers = this.createHeaders();\n    log.debug('GET', uri, 'ID:', headers['Twilio-Request-Id']);\n\n    return this.executeWithRetry(() => this.transport.get(uri, headers, this.config.productId), true);\n  }\n\n  post(uri: string, body: Object, revision?: string, retryWhenThrottled: boolean = false): Promise<Response> {\n    let headers = this.createHeaders();\n    if (typeof revision !== 'undefined' && revision !== null) {\n      headers['If-Match'] = revision;\n    }\n\n    log.debug('POST', uri, 'ID:', headers['Twilio-Request-Id']);\n    return this.executeWithRetry(() => this.transport.post(uri, headers, body, this.config.productId), retryWhenThrottled);\n  }\n\n  put(uri: string, body: Object, revision: string): Promise<Response> {\n    let headers = this.createHeaders();\n    if (typeof revision !== 'undefined' && revision !== null) {\n      headers['If-Match'] = revision;\n    }\n\n    log.debug('PUT', uri, 'ID:', headers['Twilio-Request-Id']);\n    return this.executeWithRetry(() => this.transport.put(uri, headers, body, this.config.productId), false);\n  }\n\n  delete(uri: string): Promise<Response> {\n    let headers = this.createHeaders();\n    log.debug('DELETE', uri, 'ID:', headers['Twilio-Request-Id']);\n    return this.executeWithRetry(() => this.transport.delete(uri, headers, this.config.productId), false);\n  }\n}\n\nexport { NetworkService };\n"],"names":["SyncNetworkError","SyncError","TransportUnavailableError","uuid","Retrier","log"],"mappings":"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"}
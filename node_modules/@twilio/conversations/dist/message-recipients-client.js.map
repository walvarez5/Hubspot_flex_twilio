{"version":3,"file":"message-recipients-client.js","sources":["../src/message-recipients-client.ts"],"sourcesContent":["import { CommandExecutor } from \"./command-executor\";\nimport { Configuration } from \"./configuration\";\nimport QuickLRU from \"quick-lru\";\nimport {\n  MessageRecipient,\n  MessageRecipientsResponse,\n} from \"./interfaces/commands/message-recipients-response\";\nimport { Paginator } from \"./interfaces/paginator\";\nimport { UriBuilder } from \"./util\";\nimport { ResponseMeta } from \"./interfaces/commands/response-meta\";\nimport { RestPaginator } from \"./rest-paginator\";\n\ntype MessageRecipientsClientServices = {\n  commandExecutor: CommandExecutor;\n};\n\ntype MessageRecipientsCacheEntry = {\n  item: RecipientDescriptor[];\n};\n\n/**\n * Message recipient descriptor.\n */\ntype RecipientDescriptor =\n  | EmailRecipientDescriptor\n  | UnknownRecipientDescriptor;\n\n/**\n * Email recipient level.\n */\ntype EmailRecipientLevel = \"to\" | \"from\" | \"cc\";\n\n/**\n * Email recipient descriptor.\n */\nclass EmailRecipientDescriptor {\n  /**\n   * Type of recipient.\n   */\n  public readonly type = \"email\";\n\n  /**\n   * Sid of the message that this recipient belongs to.\n   */\n  public readonly messageSid: string;\n\n  /**\n   * Email recipient level.\n   */\n  public readonly level: EmailRecipientLevel;\n\n  /**\n   * Name of the recipient.\n   */\n  public readonly name: string;\n\n  /**\n   * Address of the recipient.\n   */\n  public readonly address: string;\n\n  /**\n   * @internal\n   */\n  public constructor(recipient: MessageRecipient) {\n    this.messageSid = recipient.message_sid;\n    this.level = recipient.level;\n    this.name = recipient.name;\n    this.address = recipient.address;\n  }\n}\n\n/**\n * Unknown recipient descriptor. Used to be able to handle recipient types that\n * are not supported by the current version of the SDK.\n */\nclass UnknownRecipientDescriptor {\n  /**\n   * Type of recipient.\n   */\n  public readonly type: string;\n\n  /**\n   * Sid of the message that this recipient belongs to.\n   */\n  public readonly messageSid: string;\n\n  /**\n   * Recipient data as a JSON string.\n   */\n  public readonly rawData: string;\n\n  /**\n   * @internal\n   */\n  public constructor(recipient: MessageRecipient) {\n    this.type = recipient.type;\n    this.messageSid = recipient.message_sid;\n    this.rawData = JSON.stringify(recipient);\n  }\n}\n\nclass MessageRecipientsClient {\n  private readonly _services: MessageRecipientsClientServices;\n  private readonly _configuration: Configuration;\n  private readonly _cache: QuickLRU<string, MessageRecipientsCacheEntry>;\n\n  public constructor(\n    services: MessageRecipientsClientServices,\n    configuration: Configuration\n  ) {\n    this._services = services;\n    this._configuration = configuration;\n    this._cache = new QuickLRU({\n      maxSize: configuration.messageRecipientsCacheCapacity,\n    });\n  }\n\n  public async getRecipientsFromMessage(\n    conversationSid: string,\n    messageSid: string\n  ): Promise<RecipientDescriptor[]> {\n    const key = `${conversationSid},${messageSid}`;\n    const cachedItem = this._cache.get(key);\n\n    if (cachedItem) {\n      return cachedItem.item;\n    }\n\n    const url = new UriBuilder(this._configuration.links.conversations)\n      .path(conversationSid)\n      .path(\"MessageRecipients\")\n      .arg(\"MessageSid\", messageSid)\n      .build();\n    const recipientsResponse =\n      await this._services.commandExecutor.fetchResource<\n        void,\n        MessageRecipientsResponse\n      >(url);\n    const recipients: RecipientDescriptor[] =\n      recipientsResponse.message_recipients.map((recipient) =>\n        this._wrapResponse(recipient)\n      );\n\n    if (recipients.length > 0) {\n      this._cache.set(key, { item: recipients });\n    }\n\n    return recipients;\n  }\n\n  public async getRecipientsFromConversation(\n    conversationSid: string,\n    paginatorOptions?: {\n      pageToken?: string;\n      pageSize?: number;\n    }\n  ): Promise<Paginator<RecipientDescriptor>> {\n    const url = new UriBuilder(this._configuration.links.conversations)\n      .path(conversationSid)\n      .path(\"MessageRecipients\")\n      .arg(\"PageToken\", paginatorOptions?.pageToken ?? undefined)\n      .arg(\"PageSize\", paginatorOptions?.pageSize ?? undefined)\n      .build();\n    const recipientsResponse =\n      await this._services.commandExecutor.fetchResource<\n        void,\n        { message_recipients: MessageRecipient[] } & ResponseMeta\n      >(url);\n    const allRecipients = recipientsResponse.message_recipients.map(\n      (recipient) => this._wrapResponse(recipient)\n    );\n\n    for (const recipient of allRecipients) {\n      const key = `${conversationSid},${recipient.messageSid}`;\n      const existingMessageRecipients = this._cache.get(key)?.item ?? [];\n      this._cache.set(key, { item: [...existingMessageRecipients, recipient] });\n    }\n\n    return new RestPaginator<RecipientDescriptor>(\n      allRecipients,\n      (pageToken, pageSize) =>\n        this.getRecipientsFromConversation(conversationSid, {\n          pageToken,\n          pageSize,\n        }),\n      recipientsResponse.meta.previous_token,\n      recipientsResponse.meta.next_token\n    );\n  }\n\n  private _wrapResponse(recipient: MessageRecipient): RecipientDescriptor {\n    switch (recipient.type) {\n      case \"email\":\n        return new EmailRecipientDescriptor(recipient);\n      default:\n        return new UnknownRecipientDescriptor(recipient);\n    }\n  }\n}\n\nexport {\n  MessageRecipientsClient,\n  EmailRecipientDescriptor,\n  UnknownRecipientDescriptor,\n  RecipientDescriptor,\n  EmailRecipientLevel,\n};\n"],"names":["QuickLRU","UriBuilder","RestPaginator"],"mappings":"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"}
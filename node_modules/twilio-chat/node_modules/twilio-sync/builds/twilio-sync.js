/*
@license
The following license applies to all parts of this software except as
documented below.

    Copyright (c) 2016, Twilio, inc.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

      1. Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.

      2. Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in
         the documentation and/or other materials provided with the
         distribution.

      3. Neither the name of Twilio nor the names of its contributors may
         be used to endorse or promote products derived from this software
         without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This software includes loglevel under the following license.

    Copyright (c) 2013 Tim Perry

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.

This software includes Backoff library under the following license

    Copyright (C) 2012 Mathieu Turcotte

    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

This software includes Event-to-Promise library under the following license

    Copyright (c) 2014, Julien Fontanet <julien.fontanet@isonoe.net>.

    Permission to use, copy, modify, and/or distribute this software for any purpose
    with or without fee is hereby granted, provided that the above copyright notice
    and this permission notice appear in all copies.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
    FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
    OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
    TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
    THIS SOFTWARE.

*/
this.Twilio = this.Twilio || {};
this.Twilio.Sync = (function (exports) {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getAugmentedNamespace(n) {
		if (n.__esModule) return n;
		var a = Object.defineProperty({}, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	var check = function (it) {
	  return it && it.Math == Math && it;
	};

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global$B =
	  // eslint-disable-next-line es/no-global-this -- safe
	  check(typeof globalThis == 'object' && globalThis) ||
	  check(typeof window == 'object' && window) ||
	  // eslint-disable-next-line no-restricted-globals -- safe
	  check(typeof self == 'object' && self) ||
	  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
	  // eslint-disable-next-line no-new-func -- fallback
	  (function () { return this; })() || Function('return this')();

	var objectGetOwnPropertyDescriptor = {};

	var fails$z = function (exec) {
	  try {
	    return !!exec();
	  } catch (error) {
	    return true;
	  }
	};

	var fails$y = fails$z;

	// Detect IE8's incomplete defineProperty implementation
	var descriptors = !fails$y(function () {
	  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
	  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
	});

	var objectPropertyIsEnumerable = {};

	var $propertyIsEnumerable$1 = {}.propertyIsEnumerable;
	// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	var getOwnPropertyDescriptor$3 = Object.getOwnPropertyDescriptor;

	// Nashorn ~ JDK8 bug
	var NASHORN_BUG = getOwnPropertyDescriptor$3 && !$propertyIsEnumerable$1.call({ 1: 2 }, 1);

	// `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
	objectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
	  var descriptor = getOwnPropertyDescriptor$3(this, V);
	  return !!descriptor && descriptor.enumerable;
	} : $propertyIsEnumerable$1;

	var createPropertyDescriptor$6 = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var toString$c = {}.toString;

	var classofRaw$1 = function (it) {
	  return toString$c.call(it).slice(8, -1);
	};

	var fails$x = fails$z;
	var classof$a = classofRaw$1;

	var split = ''.split;

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var indexedObject = fails$x(function () {
	  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	  // eslint-disable-next-line no-prototype-builtins -- safe
	  return !Object('z').propertyIsEnumerable(0);
	}) ? function (it) {
	  return classof$a(it) == 'String' ? split.call(it, '') : Object(it);
	} : Object;

	// `RequireObjectCoercible` abstract operation
	// https://tc39.es/ecma262/#sec-requireobjectcoercible
	var requireObjectCoercible$8 = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on " + it);
	  return it;
	};

	// toObject with fallback for non-array-like ES3 strings
	var IndexedObject$4 = indexedObject;
	var requireObjectCoercible$7 = requireObjectCoercible$8;

	var toIndexedObject$c = function (it) {
	  return IndexedObject$4(requireObjectCoercible$7(it));
	};

	var isObject$n = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	var global$A = global$B;

	var aFunction$a = function (variable) {
	  return typeof variable == 'function' ? variable : undefined;
	};

	var getBuiltIn$9 = function (namespace, method) {
	  return arguments.length < 2 ? aFunction$a(global$A[namespace]) : global$A[namespace] && global$A[namespace][method];
	};

	var getBuiltIn$8 = getBuiltIn$9;

	var engineUserAgent = getBuiltIn$8('navigator', 'userAgent') || '';

	var global$z = global$B;
	var userAgent$5 = engineUserAgent;

	var process$3 = global$z.process;
	var Deno = global$z.Deno;
	var versions = process$3 && process$3.versions || Deno && Deno.version;
	var v8 = versions && versions.v8;
	var match, version$1;

	if (v8) {
	  match = v8.split('.');
	  version$1 = match[0] < 4 ? 1 : match[0] + match[1];
	} else if (userAgent$5) {
	  match = userAgent$5.match(/Edge\/(\d+)/);
	  if (!match || match[1] >= 74) {
	    match = userAgent$5.match(/Chrome\/(\d+)/);
	    if (match) version$1 = match[1];
	  }
	}

	var engineV8Version = version$1 && +version$1;

	/* eslint-disable es/no-symbol -- required for testing */

	var V8_VERSION$3 = engineV8Version;
	var fails$w = fails$z;

	// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
	var nativeSymbol$1 = !!Object.getOwnPropertySymbols && !fails$w(function () {
	  var symbol = Symbol();
	  // Chrome 38 Symbol has incorrect toString conversion
	  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
	  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
	    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
	    !Symbol.sham && V8_VERSION$3 && V8_VERSION$3 < 41;
	});

	/* eslint-disable es/no-symbol -- required for testing */

	var NATIVE_SYMBOL$2 = nativeSymbol$1;

	var useSymbolAsUid = NATIVE_SYMBOL$2
	  && !Symbol.sham
	  && typeof Symbol.iterator == 'symbol';

	var getBuiltIn$7 = getBuiltIn$9;
	var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;

	var isSymbol$6 = USE_SYMBOL_AS_UID$1 ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  var $Symbol = getBuiltIn$7('Symbol');
	  return typeof $Symbol == 'function' && Object(it) instanceof $Symbol;
	};

	var isObject$m = isObject$n;

	// `OrdinaryToPrimitive` abstract operation
	// https://tc39.es/ecma262/#sec-ordinarytoprimitive
	var ordinaryToPrimitive$1 = function (input, pref) {
	  var fn, val;
	  if (pref === 'string' && typeof (fn = input.toString) == 'function' && !isObject$m(val = fn.call(input))) return val;
	  if (typeof (fn = input.valueOf) == 'function' && !isObject$m(val = fn.call(input))) return val;
	  if (pref !== 'string' && typeof (fn = input.toString) == 'function' && !isObject$m(val = fn.call(input))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var shared$5 = {exports: {}};

	var global$y = global$B;

	var setGlobal$3 = function (key, value) {
	  try {
	    // eslint-disable-next-line es/no-object-defineproperty -- safe
	    Object.defineProperty(global$y, key, { value: value, configurable: true, writable: true });
	  } catch (error) {
	    global$y[key] = value;
	  } return value;
	};

	var global$x = global$B;
	var setGlobal$2 = setGlobal$3;

	var SHARED = '__core-js_shared__';
	var store$3 = global$x[SHARED] || setGlobal$2(SHARED, {});

	var sharedStore = store$3;

	var store$2 = sharedStore;

	(shared$5.exports = function (key, value) {
	  return store$2[key] || (store$2[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: '3.17.3',
	  mode: 'global',
	  copyright: '© 2021 Denis Pushkarev (zloirock.ru)'
	});

	var requireObjectCoercible$6 = requireObjectCoercible$8;

	// `ToObject` abstract operation
	// https://tc39.es/ecma262/#sec-toobject
	var toObject$g = function (argument) {
	  return Object(requireObjectCoercible$6(argument));
	};

	var toObject$f = toObject$g;

	var hasOwnProperty = {}.hasOwnProperty;

	var has$f = Object.hasOwn || function hasOwn(it, key) {
	  return hasOwnProperty.call(toObject$f(it), key);
	};

	var id$1 = 0;
	var postfix = Math.random();

	var uid$5 = function (key) {
	  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id$1 + postfix).toString(36);
	};

	var global$w = global$B;
	var shared$4 = shared$5.exports;
	var has$e = has$f;
	var uid$4 = uid$5;
	var NATIVE_SYMBOL$1 = nativeSymbol$1;
	var USE_SYMBOL_AS_UID = useSymbolAsUid;

	var WellKnownSymbolsStore$1 = shared$4('wks');
	var Symbol$1 = global$w.Symbol;
	var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid$4;

	var wellKnownSymbol$p = function (name) {
	  if (!has$e(WellKnownSymbolsStore$1, name) || !(NATIVE_SYMBOL$1 || typeof WellKnownSymbolsStore$1[name] == 'string')) {
	    if (NATIVE_SYMBOL$1 && has$e(Symbol$1, name)) {
	      WellKnownSymbolsStore$1[name] = Symbol$1[name];
	    } else {
	      WellKnownSymbolsStore$1[name] = createWellKnownSymbol('Symbol.' + name);
	    }
	  } return WellKnownSymbolsStore$1[name];
	};

	var isObject$l = isObject$n;
	var isSymbol$5 = isSymbol$6;
	var ordinaryToPrimitive = ordinaryToPrimitive$1;
	var wellKnownSymbol$o = wellKnownSymbol$p;

	var TO_PRIMITIVE$1 = wellKnownSymbol$o('toPrimitive');

	// `ToPrimitive` abstract operation
	// https://tc39.es/ecma262/#sec-toprimitive
	var toPrimitive$2 = function (input, pref) {
	  if (!isObject$l(input) || isSymbol$5(input)) return input;
	  var exoticToPrim = input[TO_PRIMITIVE$1];
	  var result;
	  if (exoticToPrim !== undefined) {
	    if (pref === undefined) pref = 'default';
	    result = exoticToPrim.call(input, pref);
	    if (!isObject$l(result) || isSymbol$5(result)) return result;
	    throw TypeError("Can't convert object to primitive value");
	  }
	  if (pref === undefined) pref = 'number';
	  return ordinaryToPrimitive(input, pref);
	};

	var toPrimitive$1 = toPrimitive$2;
	var isSymbol$4 = isSymbol$6;

	// `ToPropertyKey` abstract operation
	// https://tc39.es/ecma262/#sec-topropertykey
	var toPropertyKey$5 = function (argument) {
	  var key = toPrimitive$1(argument, 'string');
	  return isSymbol$4(key) ? key : String(key);
	};

	var global$v = global$B;
	var isObject$k = isObject$n;

	var document$3 = global$v.document;
	// typeof document.createElement is 'object' in old IE
	var EXISTS = isObject$k(document$3) && isObject$k(document$3.createElement);

	var documentCreateElement$2 = function (it) {
	  return EXISTS ? document$3.createElement(it) : {};
	};

	var DESCRIPTORS$h = descriptors;
	var fails$v = fails$z;
	var createElement$1 = documentCreateElement$2;

	// Thank's IE8 for his funny defineProperty
	var ie8DomDefine = !DESCRIPTORS$h && !fails$v(function () {
	  // eslint-disable-next-line es/no-object-defineproperty -- requied for testing
	  return Object.defineProperty(createElement$1('div'), 'a', {
	    get: function () { return 7; }
	  }).a != 7;
	});

	var DESCRIPTORS$g = descriptors;
	var propertyIsEnumerableModule$2 = objectPropertyIsEnumerable;
	var createPropertyDescriptor$5 = createPropertyDescriptor$6;
	var toIndexedObject$b = toIndexedObject$c;
	var toPropertyKey$4 = toPropertyKey$5;
	var has$d = has$f;
	var IE8_DOM_DEFINE$1 = ie8DomDefine;

	// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
	objectGetOwnPropertyDescriptor.f = DESCRIPTORS$g ? $getOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor(O, P) {
	  O = toIndexedObject$b(O);
	  P = toPropertyKey$4(P);
	  if (IE8_DOM_DEFINE$1) try {
	    return $getOwnPropertyDescriptor$1(O, P);
	  } catch (error) { /* empty */ }
	  if (has$d(O, P)) return createPropertyDescriptor$5(!propertyIsEnumerableModule$2.f.call(O, P), O[P]);
	};

	var objectDefineProperty = {};

	var isObject$j = isObject$n;

	var anObject$j = function (it) {
	  if (!isObject$j(it)) {
	    throw TypeError(String(it) + ' is not an object');
	  } return it;
	};

	var DESCRIPTORS$f = descriptors;
	var IE8_DOM_DEFINE = ie8DomDefine;
	var anObject$i = anObject$j;
	var toPropertyKey$3 = toPropertyKey$5;

	// eslint-disable-next-line es/no-object-defineproperty -- safe
	var $defineProperty$1 = Object.defineProperty;

	// `Object.defineProperty` method
	// https://tc39.es/ecma262/#sec-object.defineproperty
	objectDefineProperty.f = DESCRIPTORS$f ? $defineProperty$1 : function defineProperty(O, P, Attributes) {
	  anObject$i(O);
	  P = toPropertyKey$3(P);
	  anObject$i(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return $defineProperty$1(O, P, Attributes);
	  } catch (error) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var DESCRIPTORS$e = descriptors;
	var definePropertyModule$7 = objectDefineProperty;
	var createPropertyDescriptor$4 = createPropertyDescriptor$6;

	var createNonEnumerableProperty$c = DESCRIPTORS$e ? function (object, key, value) {
	  return definePropertyModule$7.f(object, key, createPropertyDescriptor$4(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var redefine$b = {exports: {}};

	var store$1 = sharedStore;

	var functionToString = Function.toString;

	// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
	if (typeof store$1.inspectSource != 'function') {
	  store$1.inspectSource = function (it) {
	    return functionToString.call(it);
	  };
	}

	var inspectSource$3 = store$1.inspectSource;

	var global$u = global$B;
	var inspectSource$2 = inspectSource$3;

	var WeakMap$1 = global$u.WeakMap;

	var nativeWeakMap = typeof WeakMap$1 === 'function' && /native code/.test(inspectSource$2(WeakMap$1));

	var shared$3 = shared$5.exports;
	var uid$3 = uid$5;

	var keys$3 = shared$3('keys');

	var sharedKey$4 = function (key) {
	  return keys$3[key] || (keys$3[key] = uid$3(key));
	};

	var hiddenKeys$6 = {};

	var NATIVE_WEAK_MAP = nativeWeakMap;
	var global$t = global$B;
	var isObject$i = isObject$n;
	var createNonEnumerableProperty$b = createNonEnumerableProperty$c;
	var objectHas = has$f;
	var shared$2 = sharedStore;
	var sharedKey$3 = sharedKey$4;
	var hiddenKeys$5 = hiddenKeys$6;

	var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
	var WeakMap = global$t.WeakMap;
	var set$2, get$2, has$c;

	var enforce = function (it) {
	  return has$c(it) ? get$2(it) : set$2(it, {});
	};

	var getterFor = function (TYPE) {
	  return function (it) {
	    var state;
	    if (!isObject$i(it) || (state = get$2(it)).type !== TYPE) {
	      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
	    } return state;
	  };
	};

	if (NATIVE_WEAK_MAP || shared$2.state) {
	  var store = shared$2.state || (shared$2.state = new WeakMap());
	  var wmget = store.get;
	  var wmhas = store.has;
	  var wmset = store.set;
	  set$2 = function (it, metadata) {
	    if (wmhas.call(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
	    metadata.facade = it;
	    wmset.call(store, it, metadata);
	    return metadata;
	  };
	  get$2 = function (it) {
	    return wmget.call(store, it) || {};
	  };
	  has$c = function (it) {
	    return wmhas.call(store, it);
	  };
	} else {
	  var STATE = sharedKey$3('state');
	  hiddenKeys$5[STATE] = true;
	  set$2 = function (it, metadata) {
	    if (objectHas(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
	    metadata.facade = it;
	    createNonEnumerableProperty$b(it, STATE, metadata);
	    return metadata;
	  };
	  get$2 = function (it) {
	    return objectHas(it, STATE) ? it[STATE] : {};
	  };
	  has$c = function (it) {
	    return objectHas(it, STATE);
	  };
	}

	var internalState = {
	  set: set$2,
	  get: get$2,
	  has: has$c,
	  enforce: enforce,
	  getterFor: getterFor
	};

	var global$s = global$B;
	var createNonEnumerableProperty$a = createNonEnumerableProperty$c;
	var has$b = has$f;
	var setGlobal$1 = setGlobal$3;
	var inspectSource$1 = inspectSource$3;
	var InternalStateModule$7 = internalState;

	var getInternalState$7 = InternalStateModule$7.get;
	var enforceInternalState = InternalStateModule$7.enforce;
	var TEMPLATE = String(String).split('String');

	(redefine$b.exports = function (O, key, value, options) {
	  var unsafe = options ? !!options.unsafe : false;
	  var simple = options ? !!options.enumerable : false;
	  var noTargetGet = options ? !!options.noTargetGet : false;
	  var state;
	  if (typeof value == 'function') {
	    if (typeof key == 'string' && !has$b(value, 'name')) {
	      createNonEnumerableProperty$a(value, 'name', key);
	    }
	    state = enforceInternalState(value);
	    if (!state.source) {
	      state.source = TEMPLATE.join(typeof key == 'string' ? key : '');
	    }
	  }
	  if (O === global$s) {
	    if (simple) O[key] = value;
	    else setGlobal$1(key, value);
	    return;
	  } else if (!unsafe) {
	    delete O[key];
	  } else if (!noTargetGet && O[key]) {
	    simple = true;
	  }
	  if (simple) O[key] = value;
	  else createNonEnumerableProperty$a(O, key, value);
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, 'toString', function toString() {
	  return typeof this == 'function' && getInternalState$7(this).source || inspectSource$1(this);
	});

	var objectGetOwnPropertyNames = {};

	var ceil = Math.ceil;
	var floor$5 = Math.floor;

	// `ToInteger` abstract operation
	// https://tc39.es/ecma262/#sec-tointeger
	var toInteger$9 = function (argument) {
	  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor$5 : ceil)(argument);
	};

	var toInteger$8 = toInteger$9;

	var min$6 = Math.min;

	// `ToLength` abstract operation
	// https://tc39.es/ecma262/#sec-tolength
	var toLength$m = function (argument) {
	  return argument > 0 ? min$6(toInteger$8(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	var toInteger$7 = toInteger$9;

	var max$3 = Math.max;
	var min$5 = Math.min;

	// Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
	var toAbsoluteIndex$6 = function (index, length) {
	  var integer = toInteger$7(index);
	  return integer < 0 ? max$3(integer + length, 0) : min$5(integer, length);
	};

	var toIndexedObject$a = toIndexedObject$c;
	var toLength$l = toLength$m;
	var toAbsoluteIndex$5 = toAbsoluteIndex$6;

	// `Array.prototype.{ indexOf, includes }` methods implementation
	var createMethod$5 = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIndexedObject$a($this);
	    var length = toLength$l(O.length);
	    var index = toAbsoluteIndex$5(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare -- NaN check
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare -- NaN check
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) {
	      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var arrayIncludes = {
	  // `Array.prototype.includes` method
	  // https://tc39.es/ecma262/#sec-array.prototype.includes
	  includes: createMethod$5(true),
	  // `Array.prototype.indexOf` method
	  // https://tc39.es/ecma262/#sec-array.prototype.indexof
	  indexOf: createMethod$5(false)
	};

	var has$a = has$f;
	var toIndexedObject$9 = toIndexedObject$c;
	var indexOf = arrayIncludes.indexOf;
	var hiddenKeys$4 = hiddenKeys$6;

	var objectKeysInternal = function (object, names) {
	  var O = toIndexedObject$9(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) !has$a(hiddenKeys$4, key) && has$a(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has$a(O, key = names[i++])) {
	    ~indexOf(result, key) || result.push(key);
	  }
	  return result;
	};

	// IE8- don't enum bug keys
	var enumBugKeys$3 = [
	  'constructor',
	  'hasOwnProperty',
	  'isPrototypeOf',
	  'propertyIsEnumerable',
	  'toLocaleString',
	  'toString',
	  'valueOf'
	];

	var internalObjectKeys$1 = objectKeysInternal;
	var enumBugKeys$2 = enumBugKeys$3;

	var hiddenKeys$3 = enumBugKeys$2.concat('length', 'prototype');

	// `Object.getOwnPropertyNames` method
	// https://tc39.es/ecma262/#sec-object.getownpropertynames
	// eslint-disable-next-line es/no-object-getownpropertynames -- safe
	objectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return internalObjectKeys$1(O, hiddenKeys$3);
	};

	var objectGetOwnPropertySymbols = {};

	// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
	objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;

	var getBuiltIn$6 = getBuiltIn$9;
	var getOwnPropertyNamesModule$2 = objectGetOwnPropertyNames;
	var getOwnPropertySymbolsModule$2 = objectGetOwnPropertySymbols;
	var anObject$h = anObject$j;

	// all object keys, includes non-enumerable and symbols
	var ownKeys$5 = getBuiltIn$6('Reflect', 'ownKeys') || function ownKeys(it) {
	  var keys = getOwnPropertyNamesModule$2.f(anObject$h(it));
	  var getOwnPropertySymbols = getOwnPropertySymbolsModule$2.f;
	  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
	};

	var has$9 = has$f;
	var ownKeys$4 = ownKeys$5;
	var getOwnPropertyDescriptorModule$3 = objectGetOwnPropertyDescriptor;
	var definePropertyModule$6 = objectDefineProperty;

	var copyConstructorProperties$2 = function (target, source) {
	  var keys = ownKeys$4(source);
	  var defineProperty = definePropertyModule$6.f;
	  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule$3.f;
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (!has$9(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
	  }
	};

	var fails$u = fails$z;

	var replacement = /#|\.prototype\./;

	var isForced$4 = function (feature, detection) {
	  var value = data[normalize(feature)];
	  return value == POLYFILL ? true
	    : value == NATIVE ? false
	    : typeof detection == 'function' ? fails$u(detection)
	    : !!detection;
	};

	var normalize = isForced$4.normalize = function (string) {
	  return String(string).replace(replacement, '.').toLowerCase();
	};

	var data = isForced$4.data = {};
	var NATIVE = isForced$4.NATIVE = 'N';
	var POLYFILL = isForced$4.POLYFILL = 'P';

	var isForced_1 = isForced$4;

	var global$r = global$B;
	var getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;
	var createNonEnumerableProperty$9 = createNonEnumerableProperty$c;
	var redefine$a = redefine$b.exports;
	var setGlobal = setGlobal$3;
	var copyConstructorProperties$1 = copyConstructorProperties$2;
	var isForced$3 = isForced_1;

	/*
	  options.target      - name of the target object
	  options.global      - target is the global object
	  options.stat        - export as static methods of target
	  options.proto       - export as prototype methods of target
	  options.real        - real prototype method for the `pure` version
	  options.forced      - export even if the native feature is available
	  options.bind        - bind methods to the target, required for the `pure` version
	  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	  options.sham        - add a flag to not completely full polyfills
	  options.enumerable  - export as enumerable property
	  options.noTargetGet - prevent calling a getter on target
	*/
	var _export = function (options, source) {
	  var TARGET = options.target;
	  var GLOBAL = options.global;
	  var STATIC = options.stat;
	  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
	  if (GLOBAL) {
	    target = global$r;
	  } else if (STATIC) {
	    target = global$r[TARGET] || setGlobal(TARGET, {});
	  } else {
	    target = (global$r[TARGET] || {}).prototype;
	  }
	  if (target) for (key in source) {
	    sourceProperty = source[key];
	    if (options.noTargetGet) {
	      descriptor = getOwnPropertyDescriptor$2(target, key);
	      targetProperty = descriptor && descriptor.value;
	    } else targetProperty = target[key];
	    FORCED = isForced$3(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
	    // contained in target
	    if (!FORCED && targetProperty !== undefined) {
	      if (typeof sourceProperty === typeof targetProperty) continue;
	      copyConstructorProperties$1(sourceProperty, targetProperty);
	    }
	    // add a flag to not completely full polyfills
	    if (options.sham || (targetProperty && targetProperty.sham)) {
	      createNonEnumerableProperty$9(sourceProperty, 'sham', true);
	    }
	    // extend global
	    redefine$a(target, key, sourceProperty, options);
	  }
	};

	var internalObjectKeys = objectKeysInternal;
	var enumBugKeys$1 = enumBugKeys$3;

	// `Object.keys` method
	// https://tc39.es/ecma262/#sec-object.keys
	// eslint-disable-next-line es/no-object-keys -- safe
	var objectKeys$4 = Object.keys || function keys(O) {
	  return internalObjectKeys(O, enumBugKeys$1);
	};

	var $$q = _export;
	var toObject$e = toObject$g;
	var nativeKeys = objectKeys$4;
	var fails$t = fails$z;

	var FAILS_ON_PRIMITIVES$1 = fails$t(function () { nativeKeys(1); });

	// `Object.keys` method
	// https://tc39.es/ecma262/#sec-object.keys
	$$q({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$1 }, {
	  keys: function keys(it) {
	    return nativeKeys(toObject$e(it));
	  }
	});

	var classof$9 = classofRaw$1;

	// `IsArray` abstract operation
	// https://tc39.es/ecma262/#sec-isarray
	// eslint-disable-next-line es/no-array-isarray -- safe
	var isArray$4 = Array.isArray || function isArray(arg) {
	  return classof$9(arg) == 'Array';
	};

	var isSymbol$3 = isSymbol$6;

	var toString$b = function (argument) {
	  if (isSymbol$3(argument)) throw TypeError('Cannot convert a Symbol value to a string');
	  return String(argument);
	};

	var DESCRIPTORS$d = descriptors;
	var definePropertyModule$5 = objectDefineProperty;
	var anObject$g = anObject$j;
	var objectKeys$3 = objectKeys$4;

	// `Object.defineProperties` method
	// https://tc39.es/ecma262/#sec-object.defineproperties
	// eslint-disable-next-line es/no-object-defineproperties -- safe
	var objectDefineProperties = DESCRIPTORS$d ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject$g(O);
	  var keys = objectKeys$3(Properties);
	  var length = keys.length;
	  var index = 0;
	  var key;
	  while (length > index) definePropertyModule$5.f(O, key = keys[index++], Properties[key]);
	  return O;
	};

	var getBuiltIn$5 = getBuiltIn$9;

	var html$2 = getBuiltIn$5('document', 'documentElement');

	/* global ActiveXObject -- old IE, WSH */

	var anObject$f = anObject$j;
	var defineProperties = objectDefineProperties;
	var enumBugKeys = enumBugKeys$3;
	var hiddenKeys$2 = hiddenKeys$6;
	var html$1 = html$2;
	var documentCreateElement$1 = documentCreateElement$2;
	var sharedKey$2 = sharedKey$4;

	var GT = '>';
	var LT = '<';
	var PROTOTYPE$2 = 'prototype';
	var SCRIPT = 'script';
	var IE_PROTO$1 = sharedKey$2('IE_PROTO');

	var EmptyConstructor = function () { /* empty */ };

	var scriptTag = function (content) {
	  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
	};

	// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
	var NullProtoObjectViaActiveX = function (activeXDocument) {
	  activeXDocument.write(scriptTag(''));
	  activeXDocument.close();
	  var temp = activeXDocument.parentWindow.Object;
	  activeXDocument = null; // avoid memory leak
	  return temp;
	};

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var NullProtoObjectViaIFrame = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = documentCreateElement$1('iframe');
	  var JS = 'java' + SCRIPT + ':';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  html$1.appendChild(iframe);
	  // https://github.com/zloirock/core-js/issues/475
	  iframe.src = String(JS);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(scriptTag('document.F=Object'));
	  iframeDocument.close();
	  return iframeDocument.F;
	};

	// Check for document.domain and active x support
	// No need to use active x approach when document.domain is not set
	// see https://github.com/es-shims/es5-shim/issues/150
	// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
	// avoid IE GC bug
	var activeXDocument;
	var NullProtoObject = function () {
	  try {
	    activeXDocument = new ActiveXObject('htmlfile');
	  } catch (error) { /* ignore */ }
	  NullProtoObject = typeof document != 'undefined'
	    ? document.domain && activeXDocument
	      ? NullProtoObjectViaActiveX(activeXDocument) // old IE
	      : NullProtoObjectViaIFrame()
	    : NullProtoObjectViaActiveX(activeXDocument); // WSH
	  var length = enumBugKeys.length;
	  while (length--) delete NullProtoObject[PROTOTYPE$2][enumBugKeys[length]];
	  return NullProtoObject();
	};

	hiddenKeys$2[IE_PROTO$1] = true;

	// `Object.create` method
	// https://tc39.es/ecma262/#sec-object.create
	var objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    EmptyConstructor[PROTOTYPE$2] = anObject$f(O);
	    result = new EmptyConstructor();
	    EmptyConstructor[PROTOTYPE$2] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO$1] = O;
	  } else result = NullProtoObject();
	  return Properties === undefined ? result : defineProperties(result, Properties);
	};

	var objectGetOwnPropertyNamesExternal = {};

	/* eslint-disable es/no-object-getownpropertynames -- safe */

	var toIndexedObject$8 = toIndexedObject$c;
	var $getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;

	var toString$a = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return $getOwnPropertyNames$1(it);
	  } catch (error) {
	    return windowNames.slice();
	  }
	};

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	objectGetOwnPropertyNamesExternal.f = function getOwnPropertyNames(it) {
	  return windowNames && toString$a.call(it) == '[object Window]'
	    ? getWindowNames(it)
	    : $getOwnPropertyNames$1(toIndexedObject$8(it));
	};

	var wellKnownSymbolWrapped = {};

	var wellKnownSymbol$n = wellKnownSymbol$p;

	wellKnownSymbolWrapped.f = wellKnownSymbol$n;

	var global$q = global$B;

	var path$1 = global$q;

	var path = path$1;
	var has$8 = has$f;
	var wrappedWellKnownSymbolModule$1 = wellKnownSymbolWrapped;
	var defineProperty$a = objectDefineProperty.f;

	var defineWellKnownSymbol$2 = function (NAME) {
	  var Symbol = path.Symbol || (path.Symbol = {});
	  if (!has$8(Symbol, NAME)) defineProperty$a(Symbol, NAME, {
	    value: wrappedWellKnownSymbolModule$1.f(NAME)
	  });
	};

	var defineProperty$9 = objectDefineProperty.f;
	var has$7 = has$f;
	var wellKnownSymbol$m = wellKnownSymbol$p;

	var TO_STRING_TAG$4 = wellKnownSymbol$m('toStringTag');

	var setToStringTag$7 = function (it, TAG, STATIC) {
	  if (it && !has$7(it = STATIC ? it : it.prototype, TO_STRING_TAG$4)) {
	    defineProperty$9(it, TO_STRING_TAG$4, { configurable: true, value: TAG });
	  }
	};

	var aFunction$9 = function (it) {
	  if (typeof it != 'function') {
	    throw TypeError(String(it) + ' is not a function');
	  } return it;
	};

	var aFunction$8 = aFunction$9;

	// optional / simple context binding
	var functionBindContext = function (fn, that, length) {
	  aFunction$8(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 0: return function () {
	      return fn.call(that);
	    };
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var isObject$h = isObject$n;
	var isArray$3 = isArray$4;
	var wellKnownSymbol$l = wellKnownSymbol$p;

	var SPECIES$6 = wellKnownSymbol$l('species');

	// a part of `ArraySpeciesCreate` abstract operation
	// https://tc39.es/ecma262/#sec-arrayspeciescreate
	var arraySpeciesConstructor$1 = function (originalArray) {
	  var C;
	  if (isArray$3(originalArray)) {
	    C = originalArray.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || isArray$3(C.prototype))) C = undefined;
	    else if (isObject$h(C)) {
	      C = C[SPECIES$6];
	      if (C === null) C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};

	var arraySpeciesConstructor = arraySpeciesConstructor$1;

	// `ArraySpeciesCreate` abstract operation
	// https://tc39.es/ecma262/#sec-arrayspeciescreate
	var arraySpeciesCreate$3 = function (originalArray, length) {
	  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
	};

	var bind$7 = functionBindContext;
	var IndexedObject$3 = indexedObject;
	var toObject$d = toObject$g;
	var toLength$k = toLength$m;
	var arraySpeciesCreate$2 = arraySpeciesCreate$3;

	var push = [].push;

	// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
	var createMethod$4 = function (TYPE) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var IS_FILTER_REJECT = TYPE == 7;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  return function ($this, callbackfn, that, specificCreate) {
	    var O = toObject$d($this);
	    var self = IndexedObject$3(O);
	    var boundFunction = bind$7(callbackfn, that, 3);
	    var length = toLength$k(self.length);
	    var index = 0;
	    var create = specificCreate || arraySpeciesCreate$2;
	    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
	    var value, result;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      value = self[index];
	      result = boundFunction(value, index, O);
	      if (TYPE) {
	        if (IS_MAP) target[index] = result; // map
	        else if (result) switch (TYPE) {
	          case 3: return true;              // some
	          case 5: return value;             // find
	          case 6: return index;             // findIndex
	          case 2: push.call(target, value); // filter
	        } else switch (TYPE) {
	          case 4: return false;             // every
	          case 7: push.call(target, value); // filterReject
	        }
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
	  };
	};

	var arrayIteration = {
	  // `Array.prototype.forEach` method
	  // https://tc39.es/ecma262/#sec-array.prototype.foreach
	  forEach: createMethod$4(0),
	  // `Array.prototype.map` method
	  // https://tc39.es/ecma262/#sec-array.prototype.map
	  map: createMethod$4(1),
	  // `Array.prototype.filter` method
	  // https://tc39.es/ecma262/#sec-array.prototype.filter
	  filter: createMethod$4(2),
	  // `Array.prototype.some` method
	  // https://tc39.es/ecma262/#sec-array.prototype.some
	  some: createMethod$4(3),
	  // `Array.prototype.every` method
	  // https://tc39.es/ecma262/#sec-array.prototype.every
	  every: createMethod$4(4),
	  // `Array.prototype.find` method
	  // https://tc39.es/ecma262/#sec-array.prototype.find
	  find: createMethod$4(5),
	  // `Array.prototype.findIndex` method
	  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
	  findIndex: createMethod$4(6),
	  // `Array.prototype.filterReject` method
	  // https://github.com/tc39/proposal-array-filtering
	  filterReject: createMethod$4(7)
	};

	var $$p = _export;
	var global$p = global$B;
	var getBuiltIn$4 = getBuiltIn$9;
	var DESCRIPTORS$c = descriptors;
	var NATIVE_SYMBOL = nativeSymbol$1;
	var fails$s = fails$z;
	var has$6 = has$f;
	var isArray$2 = isArray$4;
	var isObject$g = isObject$n;
	var isSymbol$2 = isSymbol$6;
	var anObject$e = anObject$j;
	var toObject$c = toObject$g;
	var toIndexedObject$7 = toIndexedObject$c;
	var toPropertyKey$2 = toPropertyKey$5;
	var $toString$1 = toString$b;
	var createPropertyDescriptor$3 = createPropertyDescriptor$6;
	var nativeObjectCreate = objectCreate;
	var objectKeys$2 = objectKeys$4;
	var getOwnPropertyNamesModule$1 = objectGetOwnPropertyNames;
	var getOwnPropertyNamesExternal = objectGetOwnPropertyNamesExternal;
	var getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;
	var getOwnPropertyDescriptorModule$2 = objectGetOwnPropertyDescriptor;
	var definePropertyModule$4 = objectDefineProperty;
	var propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;
	var createNonEnumerableProperty$8 = createNonEnumerableProperty$c;
	var redefine$9 = redefine$b.exports;
	var shared$1 = shared$5.exports;
	var sharedKey$1 = sharedKey$4;
	var hiddenKeys$1 = hiddenKeys$6;
	var uid$2 = uid$5;
	var wellKnownSymbol$k = wellKnownSymbol$p;
	var wrappedWellKnownSymbolModule = wellKnownSymbolWrapped;
	var defineWellKnownSymbol$1 = defineWellKnownSymbol$2;
	var setToStringTag$6 = setToStringTag$7;
	var InternalStateModule$6 = internalState;
	var $forEach$2 = arrayIteration.forEach;

	var HIDDEN = sharedKey$1('hidden');
	var SYMBOL = 'Symbol';
	var PROTOTYPE$1 = 'prototype';
	var TO_PRIMITIVE = wellKnownSymbol$k('toPrimitive');
	var setInternalState$6 = InternalStateModule$6.set;
	var getInternalState$6 = InternalStateModule$6.getterFor(SYMBOL);
	var ObjectPrototype$3 = Object[PROTOTYPE$1];
	var $Symbol$1 = global$p.Symbol;
	var $stringify$1 = getBuiltIn$4('JSON', 'stringify');
	var nativeGetOwnPropertyDescriptor$2 = getOwnPropertyDescriptorModule$2.f;
	var nativeDefineProperty$1 = definePropertyModule$4.f;
	var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
	var nativePropertyIsEnumerable = propertyIsEnumerableModule$1.f;
	var AllSymbols = shared$1('symbols');
	var ObjectPrototypeSymbols = shared$1('op-symbols');
	var StringToSymbolRegistry = shared$1('string-to-symbol-registry');
	var SymbolToStringRegistry = shared$1('symbol-to-string-registry');
	var WellKnownSymbolsStore = shared$1('wks');
	var QObject = global$p.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var USE_SETTER = !QObject || !QObject[PROTOTYPE$1] || !QObject[PROTOTYPE$1].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDescriptor = DESCRIPTORS$c && fails$s(function () {
	  return nativeObjectCreate(nativeDefineProperty$1({}, 'a', {
	    get: function () { return nativeDefineProperty$1(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (O, P, Attributes) {
	  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$2(ObjectPrototype$3, P);
	  if (ObjectPrototypeDescriptor) delete ObjectPrototype$3[P];
	  nativeDefineProperty$1(O, P, Attributes);
	  if (ObjectPrototypeDescriptor && O !== ObjectPrototype$3) {
	    nativeDefineProperty$1(ObjectPrototype$3, P, ObjectPrototypeDescriptor);
	  }
	} : nativeDefineProperty$1;

	var wrap$1 = function (tag, description) {
	  var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol$1[PROTOTYPE$1]);
	  setInternalState$6(symbol, {
	    type: SYMBOL,
	    tag: tag,
	    description: description
	  });
	  if (!DESCRIPTORS$c) symbol.description = description;
	  return symbol;
	};

	var $defineProperty = function defineProperty(O, P, Attributes) {
	  if (O === ObjectPrototype$3) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
	  anObject$e(O);
	  var key = toPropertyKey$2(P);
	  anObject$e(Attributes);
	  if (has$6(AllSymbols, key)) {
	    if (!Attributes.enumerable) {
	      if (!has$6(O, HIDDEN)) nativeDefineProperty$1(O, HIDDEN, createPropertyDescriptor$3(1, {}));
	      O[HIDDEN][key] = true;
	    } else {
	      if (has$6(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
	      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor$3(0, false) });
	    } return setSymbolDescriptor(O, key, Attributes);
	  } return nativeDefineProperty$1(O, key, Attributes);
	};

	var $defineProperties = function defineProperties(O, Properties) {
	  anObject$e(O);
	  var properties = toIndexedObject$7(Properties);
	  var keys = objectKeys$2(properties).concat($getOwnPropertySymbols(properties));
	  $forEach$2(keys, function (key) {
	    if (!DESCRIPTORS$c || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
	  });
	  return O;
	};

	var $create = function create(O, Properties) {
	  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
	};

	var $propertyIsEnumerable = function propertyIsEnumerable(V) {
	  var P = toPropertyKey$2(V);
	  var enumerable = nativePropertyIsEnumerable.call(this, P);
	  if (this === ObjectPrototype$3 && has$6(AllSymbols, P) && !has$6(ObjectPrototypeSymbols, P)) return false;
	  return enumerable || !has$6(this, P) || !has$6(AllSymbols, P) || has$6(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
	};

	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
	  var it = toIndexedObject$7(O);
	  var key = toPropertyKey$2(P);
	  if (it === ObjectPrototype$3 && has$6(AllSymbols, key) && !has$6(ObjectPrototypeSymbols, key)) return;
	  var descriptor = nativeGetOwnPropertyDescriptor$2(it, key);
	  if (descriptor && has$6(AllSymbols, key) && !(has$6(it, HIDDEN) && it[HIDDEN][key])) {
	    descriptor.enumerable = true;
	  }
	  return descriptor;
	};

	var $getOwnPropertyNames = function getOwnPropertyNames(O) {
	  var names = nativeGetOwnPropertyNames(toIndexedObject$7(O));
	  var result = [];
	  $forEach$2(names, function (key) {
	    if (!has$6(AllSymbols, key) && !has$6(hiddenKeys$1, key)) result.push(key);
	  });
	  return result;
	};

	var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
	  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$3;
	  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject$7(O));
	  var result = [];
	  $forEach$2(names, function (key) {
	    if (has$6(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has$6(ObjectPrototype$3, key))) {
	      result.push(AllSymbols[key]);
	    }
	  });
	  return result;
	};

	// `Symbol` constructor
	// https://tc39.es/ecma262/#sec-symbol-constructor
	if (!NATIVE_SYMBOL) {
	  $Symbol$1 = function Symbol() {
	    if (this instanceof $Symbol$1) throw TypeError('Symbol is not a constructor');
	    var description = !arguments.length || arguments[0] === undefined ? undefined : $toString$1(arguments[0]);
	    var tag = uid$2(description);
	    var setter = function (value) {
	      if (this === ObjectPrototype$3) setter.call(ObjectPrototypeSymbols, value);
	      if (has$6(this, HIDDEN) && has$6(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDescriptor(this, tag, createPropertyDescriptor$3(1, value));
	    };
	    if (DESCRIPTORS$c && USE_SETTER) setSymbolDescriptor(ObjectPrototype$3, tag, { configurable: true, set: setter });
	    return wrap$1(tag, description);
	  };

	  redefine$9($Symbol$1[PROTOTYPE$1], 'toString', function toString() {
	    return getInternalState$6(this).tag;
	  });

	  redefine$9($Symbol$1, 'withoutSetter', function (description) {
	    return wrap$1(uid$2(description), description);
	  });

	  propertyIsEnumerableModule$1.f = $propertyIsEnumerable;
	  definePropertyModule$4.f = $defineProperty;
	  getOwnPropertyDescriptorModule$2.f = $getOwnPropertyDescriptor;
	  getOwnPropertyNamesModule$1.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
	  getOwnPropertySymbolsModule$1.f = $getOwnPropertySymbols;

	  wrappedWellKnownSymbolModule.f = function (name) {
	    return wrap$1(wellKnownSymbol$k(name), name);
	  };

	  if (DESCRIPTORS$c) {
	    // https://github.com/tc39/proposal-Symbol-description
	    nativeDefineProperty$1($Symbol$1[PROTOTYPE$1], 'description', {
	      configurable: true,
	      get: function description() {
	        return getInternalState$6(this).description;
	      }
	    });
	    {
	      redefine$9(ObjectPrototype$3, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
	    }
	  }
	}

	$$p({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
	  Symbol: $Symbol$1
	});

	$forEach$2(objectKeys$2(WellKnownSymbolsStore), function (name) {
	  defineWellKnownSymbol$1(name);
	});

	$$p({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
	  // `Symbol.for` method
	  // https://tc39.es/ecma262/#sec-symbol.for
	  'for': function (key) {
	    var string = $toString$1(key);
	    if (has$6(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
	    var symbol = $Symbol$1(string);
	    StringToSymbolRegistry[string] = symbol;
	    SymbolToStringRegistry[symbol] = string;
	    return symbol;
	  },
	  // `Symbol.keyFor` method
	  // https://tc39.es/ecma262/#sec-symbol.keyfor
	  keyFor: function keyFor(sym) {
	    if (!isSymbol$2(sym)) throw TypeError(sym + ' is not a symbol');
	    if (has$6(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
	  },
	  useSetter: function () { USE_SETTER = true; },
	  useSimple: function () { USE_SETTER = false; }
	});

	$$p({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS$c }, {
	  // `Object.create` method
	  // https://tc39.es/ecma262/#sec-object.create
	  create: $create,
	  // `Object.defineProperty` method
	  // https://tc39.es/ecma262/#sec-object.defineproperty
	  defineProperty: $defineProperty,
	  // `Object.defineProperties` method
	  // https://tc39.es/ecma262/#sec-object.defineproperties
	  defineProperties: $defineProperties,
	  // `Object.getOwnPropertyDescriptor` method
	  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
	});

	$$p({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {
	  // `Object.getOwnPropertyNames` method
	  // https://tc39.es/ecma262/#sec-object.getownpropertynames
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // `Object.getOwnPropertySymbols` method
	  // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443
	$$p({ target: 'Object', stat: true, forced: fails$s(function () { getOwnPropertySymbolsModule$1.f(1); }) }, {
	  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
	    return getOwnPropertySymbolsModule$1.f(toObject$c(it));
	  }
	});

	// `JSON.stringify` method behavior with symbols
	// https://tc39.es/ecma262/#sec-json.stringify
	if ($stringify$1) {
	  var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails$s(function () {
	    var symbol = $Symbol$1();
	    // MS Edge converts symbol values to JSON as {}
	    return $stringify$1([symbol]) != '[null]'
	      // WebKit converts symbol values to JSON as null
	      || $stringify$1({ a: symbol }) != '{}'
	      // V8 throws on boxed symbols
	      || $stringify$1(Object(symbol)) != '{}';
	  });

	  $$p({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
	    // eslint-disable-next-line no-unused-vars -- required for `.length`
	    stringify: function stringify(it, replacer, space) {
	      var args = [it];
	      var index = 1;
	      var $replacer;
	      while (arguments.length > index) args.push(arguments[index++]);
	      $replacer = replacer;
	      if (!isObject$g(replacer) && it === undefined || isSymbol$2(it)) return; // IE8 returns string on undefined
	      if (!isArray$2(replacer)) replacer = function (key, value) {
	        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	        if (!isSymbol$2(value)) return value;
	      };
	      args[1] = replacer;
	      return $stringify$1.apply(null, args);
	    }
	  });
	}

	// `Symbol.prototype[@@toPrimitive]` method
	// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
	if (!$Symbol$1[PROTOTYPE$1][TO_PRIMITIVE]) {
	  createNonEnumerableProperty$8($Symbol$1[PROTOTYPE$1], TO_PRIMITIVE, $Symbol$1[PROTOTYPE$1].valueOf);
	}
	// `Symbol.prototype[@@toStringTag]` property
	// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
	setToStringTag$6($Symbol$1, SYMBOL);

	hiddenKeys$1[HIDDEN] = true;

	var fails$r = fails$z;
	var wellKnownSymbol$j = wellKnownSymbol$p;
	var V8_VERSION$2 = engineV8Version;

	var SPECIES$5 = wellKnownSymbol$j('species');

	var arrayMethodHasSpeciesSupport$5 = function (METHOD_NAME) {
	  // We can't use this feature detection in V8 since it causes
	  // deoptimization and serious performance degradation
	  // https://github.com/zloirock/core-js/issues/677
	  return V8_VERSION$2 >= 51 || !fails$r(function () {
	    var array = [];
	    var constructor = array.constructor = {};
	    constructor[SPECIES$5] = function () {
	      return { foo: 1 };
	    };
	    return array[METHOD_NAME](Boolean).foo !== 1;
	  });
	};

	var $$o = _export;
	var $filter$1 = arrayIteration.filter;
	var arrayMethodHasSpeciesSupport$4 = arrayMethodHasSpeciesSupport$5;

	var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport$4('filter');

	// `Array.prototype.filter` method
	// https://tc39.es/ecma262/#sec-array.prototype.filter
	// with adding support of @@species
	$$o({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$3 }, {
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var $$n = _export;
	var fails$q = fails$z;
	var toIndexedObject$6 = toIndexedObject$c;
	var nativeGetOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
	var DESCRIPTORS$b = descriptors;

	var FAILS_ON_PRIMITIVES = fails$q(function () { nativeGetOwnPropertyDescriptor$1(1); });
	var FORCED$9 = !DESCRIPTORS$b || FAILS_ON_PRIMITIVES;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
	$$n({ target: 'Object', stat: true, forced: FORCED$9, sham: !DESCRIPTORS$b }, {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
	    return nativeGetOwnPropertyDescriptor$1(toIndexedObject$6(it), key);
	  }
	});

	// iterable DOM collections
	// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
	var domIterables = {
	  CSSRuleList: 0,
	  CSSStyleDeclaration: 0,
	  CSSValueList: 0,
	  ClientRectList: 0,
	  DOMRectList: 0,
	  DOMStringList: 0,
	  DOMTokenList: 1,
	  DataTransferItemList: 0,
	  FileList: 0,
	  HTMLAllCollection: 0,
	  HTMLCollection: 0,
	  HTMLFormElement: 0,
	  HTMLSelectElement: 0,
	  MediaList: 0,
	  MimeTypeArray: 0,
	  NamedNodeMap: 0,
	  NodeList: 1,
	  PaintRequestList: 0,
	  Plugin: 0,
	  PluginArray: 0,
	  SVGLengthList: 0,
	  SVGNumberList: 0,
	  SVGPathSegList: 0,
	  SVGPointList: 0,
	  SVGStringList: 0,
	  SVGTransformList: 0,
	  SourceBufferList: 0,
	  StyleSheetList: 0,
	  TextTrackCueList: 0,
	  TextTrackList: 0,
	  TouchList: 0
	};

	// in old WebKit versions, `element.classList` is not an instance of global `DOMTokenList`
	var documentCreateElement = documentCreateElement$2;

	var classList = documentCreateElement('span').classList;
	var DOMTokenListPrototype$2 = classList && classList.constructor && classList.constructor.prototype;

	var domTokenListPrototype = DOMTokenListPrototype$2 === Object.prototype ? undefined : DOMTokenListPrototype$2;

	var fails$p = fails$z;

	var arrayMethodIsStrict$4 = function (METHOD_NAME, argument) {
	  var method = [][METHOD_NAME];
	  return !!method && fails$p(function () {
	    // eslint-disable-next-line no-useless-call,no-throw-literal -- required for testing
	    method.call(null, argument || function () { throw 1; }, 1);
	  });
	};

	var $forEach$1 = arrayIteration.forEach;
	var arrayMethodIsStrict$3 = arrayMethodIsStrict$4;

	var STRICT_METHOD$3 = arrayMethodIsStrict$3('forEach');

	// `Array.prototype.forEach` method implementation
	// https://tc39.es/ecma262/#sec-array.prototype.foreach
	var arrayForEach = !STRICT_METHOD$3 ? function forEach(callbackfn /* , thisArg */) {
	  return $forEach$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	// eslint-disable-next-line es/no-array-prototype-foreach -- safe
	} : [].forEach;

	var global$o = global$B;
	var DOMIterables$1 = domIterables;
	var DOMTokenListPrototype$1 = domTokenListPrototype;
	var forEach$1 = arrayForEach;
	var createNonEnumerableProperty$7 = createNonEnumerableProperty$c;

	var handlePrototype$1 = function (CollectionPrototype) {
	  // some Chrome versions have non-configurable methods on DOMTokenList
	  if (CollectionPrototype && CollectionPrototype.forEach !== forEach$1) try {
	    createNonEnumerableProperty$7(CollectionPrototype, 'forEach', forEach$1);
	  } catch (error) {
	    CollectionPrototype.forEach = forEach$1;
	  }
	};

	for (var COLLECTION_NAME$1 in DOMIterables$1) {
	  handlePrototype$1(global$o[COLLECTION_NAME$1] && global$o[COLLECTION_NAME$1].prototype);
	}

	handlePrototype$1(DOMTokenListPrototype$1);

	var toPropertyKey$1 = toPropertyKey$5;
	var definePropertyModule$3 = objectDefineProperty;
	var createPropertyDescriptor$2 = createPropertyDescriptor$6;

	var createProperty$5 = function (object, key, value) {
	  var propertyKey = toPropertyKey$1(key);
	  if (propertyKey in object) definePropertyModule$3.f(object, propertyKey, createPropertyDescriptor$2(0, value));
	  else object[propertyKey] = value;
	};

	var $$m = _export;
	var DESCRIPTORS$a = descriptors;
	var ownKeys$3 = ownKeys$5;
	var toIndexedObject$5 = toIndexedObject$c;
	var getOwnPropertyDescriptorModule$1 = objectGetOwnPropertyDescriptor;
	var createProperty$4 = createProperty$5;

	// `Object.getOwnPropertyDescriptors` method
	// https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
	$$m({ target: 'Object', stat: true, sham: !DESCRIPTORS$a }, {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
	    var O = toIndexedObject$5(object);
	    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule$1.f;
	    var keys = ownKeys$3(O);
	    var result = {};
	    var index = 0;
	    var key, descriptor;
	    while (keys.length > index) {
	      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
	      if (descriptor !== undefined) createProperty$4(result, key, descriptor);
	    }
	    return result;
	  }
	});

	var $$l = _export;
	var global$n = global$B;
	var setToStringTag$5 = setToStringTag$7;

	$$l({ global: true }, { Reflect: {} });

	// Reflect[@@toStringTag] property
	// https://tc39.es/ecma262/#sec-reflect-@@tostringtag
	setToStringTag$5(global$n.Reflect, 'Reflect', true);

	var aFunction$7 = aFunction$9;
	var isObject$f = isObject$n;

	var slice = [].slice;
	var factories = {};

	var construct$1 = function (C, argsLength, args) {
	  if (!(argsLength in factories)) {
	    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';
	    // eslint-disable-next-line no-new-func -- we have no proper alternatives, IE8- only
	    factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
	  } return factories[argsLength](C, args);
	};

	// `Function.prototype.bind` method implementation
	// https://tc39.es/ecma262/#sec-function.prototype.bind
	var functionBind = Function.bind || function bind(that /* , ...args */) {
	  var fn = aFunction$7(this);
	  var partArgs = slice.call(arguments, 1);
	  var boundFunction = function bound(/* args... */) {
	    var args = partArgs.concat(slice.call(arguments));
	    return this instanceof boundFunction ? construct$1(fn, args.length, args) : fn.apply(that, args);
	  };
	  if (isObject$f(fn.prototype)) boundFunction.prototype = fn.prototype;
	  return boundFunction;
	};

	var $$k = _export;
	var getBuiltIn$3 = getBuiltIn$9;
	var aFunction$6 = aFunction$9;
	var anObject$d = anObject$j;
	var isObject$e = isObject$n;
	var create$6 = objectCreate;
	var bind$6 = functionBind;
	var fails$o = fails$z;

	var nativeConstruct = getBuiltIn$3('Reflect', 'construct');

	// `Reflect.construct` method
	// https://tc39.es/ecma262/#sec-reflect.construct
	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = fails$o(function () {
	  function F() { /* empty */ }
	  return !(nativeConstruct(function () { /* empty */ }, [], F) instanceof F);
	});
	var ARGS_BUG = !fails$o(function () {
	  nativeConstruct(function () { /* empty */ });
	});
	var FORCED$8 = NEW_TARGET_BUG || ARGS_BUG;

	$$k({ target: 'Reflect', stat: true, forced: FORCED$8, sham: FORCED$8 }, {
	  construct: function construct(Target, args /* , newTarget */) {
	    aFunction$6(Target);
	    anObject$d(args);
	    var newTarget = arguments.length < 3 ? Target : aFunction$6(arguments[2]);
	    if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
	    if (Target == newTarget) {
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch (args.length) {
	        case 0: return new Target();
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      $args.push.apply($args, args);
	      return new (bind$6.apply(Target, $args))();
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto = newTarget.prototype;
	    var instance = create$6(isObject$e(proto) ? proto : Object.prototype);
	    var result = Function.apply.call(Target, instance, args);
	    return isObject$e(result) ? result : instance;
	  }
	});

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	function _classCallCheck$3(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass$3(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  Object.defineProperty(Constructor, "prototype", {
	    writable: false
	  });
	  return Constructor;
	}

	function _assertThisInitialized$2(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	function _inherits$3(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  Object.defineProperty(subClass, "prototype", {
	    writable: false
	  });
	  if (superClass) _setPrototypeOf(subClass, superClass);
	}

	function _typeof$2(obj) {
	  "@babel/helpers - typeof";

	  return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  }, _typeof$2(obj);
	}

	function _possibleConstructorReturn$3(self, call) {
	  if (call && (_typeof$2(call) === "object" || typeof call === "function")) {
	    return call;
	  } else if (call !== void 0) {
	    throw new TypeError("Derived constructors may only return object or undefined");
	  }

	  return _assertThisInitialized$2(self);
	}

	function _getPrototypeOf$3(o) {
	  _getPrototypeOf$3 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf$3(o);
	}

	function _defineProperty$2(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	var $$j = _export;
	var $map$1 = arrayIteration.map;
	var arrayMethodHasSpeciesSupport$3 = arrayMethodHasSpeciesSupport$5;

	var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport$3('map');

	// `Array.prototype.map` method
	// https://tc39.es/ecma262/#sec-array.prototype.map
	// with adding support of @@species
	$$j({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$2 }, {
	  map: function map(callbackfn /* , thisArg */) {
	    return $map$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var wellKnownSymbol$i = wellKnownSymbol$p;

	var TO_STRING_TAG$3 = wellKnownSymbol$i('toStringTag');
	var test$1 = {};

	test$1[TO_STRING_TAG$3] = 'z';

	var toStringTagSupport = String(test$1) === '[object z]';

	var TO_STRING_TAG_SUPPORT$2 = toStringTagSupport;
	var classofRaw = classofRaw$1;
	var wellKnownSymbol$h = wellKnownSymbol$p;

	var TO_STRING_TAG$2 = wellKnownSymbol$h('toStringTag');
	// ES3 wrong here
	var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (error) { /* empty */ }
	};

	// getting tag from ES6+ `Object.prototype.toString`
	var classof$8 = TO_STRING_TAG_SUPPORT$2 ? classofRaw : function (it) {
	  var O, tag, result;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG$2)) == 'string' ? tag
	    // builtinTag case
	    : CORRECT_ARGUMENTS ? classofRaw(O)
	    // ES3 arguments fallback
	    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
	};

	var TO_STRING_TAG_SUPPORT$1 = toStringTagSupport;
	var classof$7 = classof$8;

	// `Object.prototype.toString` method implementation
	// https://tc39.es/ecma262/#sec-object.prototype.tostring
	var objectToString = TO_STRING_TAG_SUPPORT$1 ? {}.toString : function toString() {
	  return '[object ' + classof$7(this) + ']';
	};

	var TO_STRING_TAG_SUPPORT = toStringTagSupport;
	var redefine$8 = redefine$b.exports;
	var toString$9 = objectToString;

	// `Object.prototype.toString` method
	// https://tc39.es/ecma262/#sec-object.prototype.tostring
	if (!TO_STRING_TAG_SUPPORT) {
	  redefine$8(Object.prototype, 'toString', toString$9, { unsafe: true });
	}

	var global$m = global$B;

	var nativePromiseConstructor = global$m.Promise;

	var redefine$7 = redefine$b.exports;

	var redefineAll$3 = function (target, src, options) {
	  for (var key in src) redefine$7(target, key, src[key], options);
	  return target;
	};

	var isObject$d = isObject$n;

	var aPossiblePrototype$1 = function (it) {
	  if (!isObject$d(it) && it !== null) {
	    throw TypeError("Can't set " + String(it) + ' as a prototype');
	  } return it;
	};

	/* eslint-disable no-proto -- safe */

	var anObject$c = anObject$j;
	var aPossiblePrototype = aPossiblePrototype$1;

	// `Object.setPrototypeOf` method
	// https://tc39.es/ecma262/#sec-object.setprototypeof
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	// eslint-disable-next-line es/no-object-setprototypeof -- safe
	var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
	  var CORRECT_SETTER = false;
	  var test = {};
	  var setter;
	  try {
	    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
	    setter.call(test, []);
	    CORRECT_SETTER = test instanceof Array;
	  } catch (error) { /* empty */ }
	  return function setPrototypeOf(O, proto) {
	    anObject$c(O);
	    aPossiblePrototype(proto);
	    if (CORRECT_SETTER) setter.call(O, proto);
	    else O.__proto__ = proto;
	    return O;
	  };
	}() : undefined);

	var getBuiltIn$2 = getBuiltIn$9;
	var definePropertyModule$2 = objectDefineProperty;
	var wellKnownSymbol$g = wellKnownSymbol$p;
	var DESCRIPTORS$9 = descriptors;

	var SPECIES$4 = wellKnownSymbol$g('species');

	var setSpecies$3 = function (CONSTRUCTOR_NAME) {
	  var Constructor = getBuiltIn$2(CONSTRUCTOR_NAME);
	  var defineProperty = definePropertyModule$2.f;

	  if (DESCRIPTORS$9 && Constructor && !Constructor[SPECIES$4]) {
	    defineProperty(Constructor, SPECIES$4, {
	      configurable: true,
	      get: function () { return this; }
	    });
	  }
	};

	var anInstance$5 = function (it, Constructor, name) {
	  if (!(it instanceof Constructor)) {
	    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
	  } return it;
	};

	var iterators = {};

	var wellKnownSymbol$f = wellKnownSymbol$p;
	var Iterators$4 = iterators;

	var ITERATOR$6 = wellKnownSymbol$f('iterator');
	var ArrayPrototype$1 = Array.prototype;

	// check on default Array iterator
	var isArrayIteratorMethod$3 = function (it) {
	  return it !== undefined && (Iterators$4.Array === it || ArrayPrototype$1[ITERATOR$6] === it);
	};

	var classof$6 = classof$8;
	var Iterators$3 = iterators;
	var wellKnownSymbol$e = wellKnownSymbol$p;

	var ITERATOR$5 = wellKnownSymbol$e('iterator');

	var getIteratorMethod$4 = function (it) {
	  if (it != undefined) return it[ITERATOR$5]
	    || it['@@iterator']
	    || Iterators$3[classof$6(it)];
	};

	var anObject$b = anObject$j;
	var getIteratorMethod$3 = getIteratorMethod$4;

	var getIterator$3 = function (it, usingIterator) {
	  var iteratorMethod = arguments.length < 2 ? getIteratorMethod$3(it) : usingIterator;
	  if (typeof iteratorMethod != 'function') {
	    throw TypeError(String(it) + ' is not iterable');
	  } return anObject$b(iteratorMethod.call(it));
	};

	var anObject$a = anObject$j;

	var iteratorClose$2 = function (iterator, kind, value) {
	  var innerResult, innerError;
	  anObject$a(iterator);
	  try {
	    innerResult = iterator['return'];
	    if (innerResult === undefined) {
	      if (kind === 'throw') throw value;
	      return value;
	    }
	    innerResult = innerResult.call(iterator);
	  } catch (error) {
	    innerError = true;
	    innerResult = error;
	  }
	  if (kind === 'throw') throw value;
	  if (innerError) throw innerResult;
	  anObject$a(innerResult);
	  return value;
	};

	var anObject$9 = anObject$j;
	var isArrayIteratorMethod$2 = isArrayIteratorMethod$3;
	var toLength$j = toLength$m;
	var bind$5 = functionBindContext;
	var getIterator$2 = getIterator$3;
	var getIteratorMethod$2 = getIteratorMethod$4;
	var iteratorClose$1 = iteratorClose$2;

	var Result = function (stopped, result) {
	  this.stopped = stopped;
	  this.result = result;
	};

	var iterate$3 = function (iterable, unboundFunction, options) {
	  var that = options && options.that;
	  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
	  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
	  var INTERRUPTED = !!(options && options.INTERRUPTED);
	  var fn = bind$5(unboundFunction, that, 1 + AS_ENTRIES + INTERRUPTED);
	  var iterator, iterFn, index, length, result, next, step;

	  var stop = function (condition) {
	    if (iterator) iteratorClose$1(iterator, 'normal', condition);
	    return new Result(true, condition);
	  };

	  var callFn = function (value) {
	    if (AS_ENTRIES) {
	      anObject$9(value);
	      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
	    } return INTERRUPTED ? fn(value, stop) : fn(value);
	  };

	  if (IS_ITERATOR) {
	    iterator = iterable;
	  } else {
	    iterFn = getIteratorMethod$2(iterable);
	    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
	    // optimisation for array iterators
	    if (isArrayIteratorMethod$2(iterFn)) {
	      for (index = 0, length = toLength$j(iterable.length); length > index; index++) {
	        result = callFn(iterable[index]);
	        if (result && result instanceof Result) return result;
	      } return new Result(false);
	    }
	    iterator = getIterator$2(iterable, iterFn);
	  }

	  next = iterator.next;
	  while (!(step = next.call(iterator)).done) {
	    try {
	      result = callFn(step.value);
	    } catch (error) {
	      iteratorClose$1(iterator, 'throw', error);
	    }
	    if (typeof result == 'object' && result && result instanceof Result) return result;
	  } return new Result(false);
	};

	var wellKnownSymbol$d = wellKnownSymbol$p;

	var ITERATOR$4 = wellKnownSymbol$d('iterator');
	var SAFE_CLOSING = false;

	try {
	  var called = 0;
	  var iteratorWithReturn = {
	    next: function () {
	      return { done: !!called++ };
	    },
	    'return': function () {
	      SAFE_CLOSING = true;
	    }
	  };
	  iteratorWithReturn[ITERATOR$4] = function () {
	    return this;
	  };
	  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
	  Array.from(iteratorWithReturn, function () { throw 2; });
	} catch (error) { /* empty */ }

	var checkCorrectnessOfIteration$4 = function (exec, SKIP_CLOSING) {
	  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
	  var ITERATION_SUPPORT = false;
	  try {
	    var object = {};
	    object[ITERATOR$4] = function () {
	      return {
	        next: function () {
	          return { done: ITERATION_SUPPORT = true };
	        }
	      };
	    };
	    exec(object);
	  } catch (error) { /* empty */ }
	  return ITERATION_SUPPORT;
	};

	var anObject$8 = anObject$j;
	var aFunction$5 = aFunction$9;
	var wellKnownSymbol$c = wellKnownSymbol$p;

	var SPECIES$3 = wellKnownSymbol$c('species');

	// `SpeciesConstructor` abstract operation
	// https://tc39.es/ecma262/#sec-speciesconstructor
	var speciesConstructor$3 = function (O, defaultConstructor) {
	  var C = anObject$8(O).constructor;
	  var S;
	  return C === undefined || (S = anObject$8(C)[SPECIES$3]) == undefined ? defaultConstructor : aFunction$5(S);
	};

	var userAgent$4 = engineUserAgent;

	var engineIsIos = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent$4);

	var classof$5 = classofRaw$1;
	var global$l = global$B;

	var engineIsNode = classof$5(global$l.process) == 'process';

	var global$k = global$B;
	var fails$n = fails$z;
	var bind$4 = functionBindContext;
	var html = html$2;
	var createElement = documentCreateElement$2;
	var IS_IOS$1 = engineIsIos;
	var IS_NODE$2 = engineIsNode;

	var set$1 = global$k.setImmediate;
	var clear = global$k.clearImmediate;
	var process$2 = global$k.process;
	var MessageChannel = global$k.MessageChannel;
	var Dispatch = global$k.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var location, defer, channel, port;

	try {
	  // Deno throws a ReferenceError on `location` access without `--location` flag
	  location = global$k.location;
	} catch (error) { /* empty */ }

	var run = function (id) {
	  // eslint-disable-next-line no-prototype-builtins -- safe
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};

	var runner = function (id) {
	  return function () {
	    run(id);
	  };
	};

	var listener = function (event) {
	  run(event.data);
	};

	var post = function (id) {
	  // old engines have not location.origin
	  global$k.postMessage(String(id), location.protocol + '//' + location.host);
	};

	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!set$1 || !clear) {
	  set$1 = function setImmediate(fn) {
	    var args = [];
	    var argumentsLength = arguments.length;
	    var i = 1;
	    while (argumentsLength > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func -- spec requirement
	      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clear = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (IS_NODE$2) {
	    defer = function (id) {
	      process$2.nextTick(runner(id));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(runner(id));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  // except iOS - https://github.com/zloirock/core-js/issues/624
	  } else if (MessageChannel && !IS_IOS$1) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = bind$4(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (
	    global$k.addEventListener &&
	    typeof postMessage == 'function' &&
	    !global$k.importScripts &&
	    location && location.protocol !== 'file:' &&
	    !fails$n(post)
	  ) {
	    defer = post;
	    global$k.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in createElement('script')) {
	    defer = function (id) {
	      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(runner(id), 0);
	    };
	  }
	}

	var task$1 = {
	  set: set$1,
	  clear: clear
	};

	var userAgent$3 = engineUserAgent;
	var global$j = global$B;

	var engineIsIosPebble = /ipad|iphone|ipod/i.test(userAgent$3) && global$j.Pebble !== undefined;

	var userAgent$2 = engineUserAgent;

	var engineIsWebosWebkit = /web0s(?!.*chrome)/i.test(userAgent$2);

	var global$i = global$B;
	var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
	var macrotask = task$1.set;
	var IS_IOS = engineIsIos;
	var IS_IOS_PEBBLE = engineIsIosPebble;
	var IS_WEBOS_WEBKIT = engineIsWebosWebkit;
	var IS_NODE$1 = engineIsNode;

	var MutationObserver = global$i.MutationObserver || global$i.WebKitMutationObserver;
	var document$2 = global$i.document;
	var process$1 = global$i.process;
	var Promise$1 = global$i.Promise;
	// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
	var queueMicrotaskDescriptor = getOwnPropertyDescriptor$1(global$i, 'queueMicrotask');
	var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

	var flush, head, last, notify$1, toggle, node, promise, then;

	// modern engines have queueMicrotask method
	if (!queueMicrotask) {
	  flush = function () {
	    var parent, fn;
	    if (IS_NODE$1 && (parent = process$1.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (error) {
	        if (head) notify$1();
	        else last = undefined;
	        throw error;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };

	  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
	  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
	  if (!IS_IOS && !IS_NODE$1 && !IS_WEBOS_WEBKIT && MutationObserver && document$2) {
	    toggle = true;
	    node = document$2.createTextNode('');
	    new MutationObserver(flush).observe(node, { characterData: true });
	    notify$1 = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (!IS_IOS_PEBBLE && Promise$1 && Promise$1.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    promise = Promise$1.resolve(undefined);
	    // workaround of WebKit ~ iOS Safari 10.1 bug
	    promise.constructor = Promise$1;
	    then = promise.then;
	    notify$1 = function () {
	      then.call(promise, flush);
	    };
	  // Node.js without promises
	  } else if (IS_NODE$1) {
	    notify$1 = function () {
	      process$1.nextTick(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify$1 = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global$i, flush);
	    };
	  }
	}

	var microtask$1 = queueMicrotask || function (fn) {
	  var task = { fn: fn, next: undefined };
	  if (last) last.next = task;
	  if (!head) {
	    head = task;
	    notify$1();
	  } last = task;
	};

	var newPromiseCapability$2 = {};

	var aFunction$4 = aFunction$9;

	var PromiseCapability = function (C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction$4(resolve);
	  this.reject = aFunction$4(reject);
	};

	// `NewPromiseCapability` abstract operation
	// https://tc39.es/ecma262/#sec-newpromisecapability
	newPromiseCapability$2.f = function (C) {
	  return new PromiseCapability(C);
	};

	var anObject$7 = anObject$j;
	var isObject$c = isObject$n;
	var newPromiseCapability$1 = newPromiseCapability$2;

	var promiseResolve$1 = function (C, x) {
	  anObject$7(C);
	  if (isObject$c(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability$1.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var global$h = global$B;

	var hostReportErrors$1 = function (a, b) {
	  var console = global$h.console;
	  if (console && console.error) {
	    arguments.length === 1 ? console.error(a) : console.error(a, b);
	  }
	};

	var perform$1 = function (exec) {
	  try {
	    return { error: false, value: exec() };
	  } catch (error) {
	    return { error: true, value: error };
	  }
	};

	var engineIsBrowser = typeof window == 'object';

	var $$i = _export;
	var global$g = global$B;
	var getBuiltIn$1 = getBuiltIn$9;
	var NativePromise = nativePromiseConstructor;
	var redefine$6 = redefine$b.exports;
	var redefineAll$2 = redefineAll$3;
	var setPrototypeOf$6 = objectSetPrototypeOf;
	var setToStringTag$4 = setToStringTag$7;
	var setSpecies$2 = setSpecies$3;
	var isObject$b = isObject$n;
	var aFunction$3 = aFunction$9;
	var anInstance$4 = anInstance$5;
	var inspectSource = inspectSource$3;
	var iterate$2 = iterate$3;
	var checkCorrectnessOfIteration$3 = checkCorrectnessOfIteration$4;
	var speciesConstructor$2 = speciesConstructor$3;
	var task = task$1.set;
	var microtask = microtask$1;
	var promiseResolve = promiseResolve$1;
	var hostReportErrors = hostReportErrors$1;
	var newPromiseCapabilityModule = newPromiseCapability$2;
	var perform = perform$1;
	var InternalStateModule$5 = internalState;
	var isForced$2 = isForced_1;
	var wellKnownSymbol$b = wellKnownSymbol$p;
	var IS_BROWSER = engineIsBrowser;
	var IS_NODE = engineIsNode;
	var V8_VERSION$1 = engineV8Version;

	var SPECIES$2 = wellKnownSymbol$b('species');
	var PROMISE = 'Promise';
	var getInternalState$5 = InternalStateModule$5.get;
	var setInternalState$5 = InternalStateModule$5.set;
	var getInternalPromiseState = InternalStateModule$5.getterFor(PROMISE);
	var NativePromisePrototype = NativePromise && NativePromise.prototype;
	var PromiseConstructor = NativePromise;
	var PromiseConstructorPrototype = NativePromisePrototype;
	var TypeError$1 = global$g.TypeError;
	var document$1 = global$g.document;
	var process = global$g.process;
	var newPromiseCapability = newPromiseCapabilityModule.f;
	var newGenericPromiseCapability = newPromiseCapability;
	var DISPATCH_EVENT = !!(document$1 && document$1.createEvent && global$g.dispatchEvent);
	var NATIVE_REJECTION_EVENT = typeof PromiseRejectionEvent == 'function';
	var UNHANDLED_REJECTION = 'unhandledrejection';
	var REJECTION_HANDLED = 'rejectionhandled';
	var PENDING = 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	var HANDLED = 1;
	var UNHANDLED = 2;
	var SUBCLASSING = false;
	var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

	var FORCED$7 = isForced$2(PROMISE, function () {
	  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(PromiseConstructor);
	  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(PromiseConstructor);
	  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	  // We can't detect it synchronously, so just check versions
	  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION$1 === 66) return true;
	  // We can't use @@species feature detection in V8 since it causes
	  // deoptimization and performance degradation
	  // https://github.com/zloirock/core-js/issues/679
	  if (V8_VERSION$1 >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) return false;
	  // Detect correctness of subclassing with @@species support
	  var promise = new PromiseConstructor(function (resolve) { resolve(1); });
	  var FakePromise = function (exec) {
	    exec(function () { /* empty */ }, function () { /* empty */ });
	  };
	  var constructor = promise.constructor = {};
	  constructor[SPECIES$2] = FakePromise;
	  SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;
	  if (!SUBCLASSING) return true;
	  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	  return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_REJECTION_EVENT;
	});

	var INCORRECT_ITERATION$1 = FORCED$7 || !checkCorrectnessOfIteration$3(function (iterable) {
	  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
	});

	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject$b(it) && typeof (then = it.then) == 'function' ? then : false;
	};

	var notify = function (state, isReject) {
	  if (state.notified) return;
	  state.notified = true;
	  var chain = state.reactions;
	  microtask(function () {
	    var value = state.value;
	    var ok = state.state == FULFILLED;
	    var index = 0;
	    // variable length - can't use forEach
	    while (chain.length > index) {
	      var reaction = chain[index++];
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (state.rejection === UNHANDLED) onHandleUnhandled(state);
	            state.rejection = HANDLED;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // can throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError$1('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (error) {
	        if (domain && !exited) domain.exit();
	        reject(error);
	      }
	    }
	    state.reactions = [];
	    state.notified = false;
	    if (isReject && !state.rejection) onUnhandled(state);
	  });
	};

	var dispatchEvent = function (name, promise, reason) {
	  var event, handler;
	  if (DISPATCH_EVENT) {
	    event = document$1.createEvent('Event');
	    event.promise = promise;
	    event.reason = reason;
	    event.initEvent(name, false, true);
	    global$g.dispatchEvent(event);
	  } else event = { promise: promise, reason: reason };
	  if (!NATIVE_REJECTION_EVENT && (handler = global$g['on' + name])) handler(event);
	  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
	};

	var onUnhandled = function (state) {
	  task.call(global$g, function () {
	    var promise = state.facade;
	    var value = state.value;
	    var IS_UNHANDLED = isUnhandled(state);
	    var result;
	    if (IS_UNHANDLED) {
	      result = perform(function () {
	        if (IS_NODE) {
	          process.emit('unhandledRejection', value, promise);
	        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
	      if (result.error) throw result.value;
	    }
	  });
	};

	var isUnhandled = function (state) {
	  return state.rejection !== HANDLED && !state.parent;
	};

	var onHandleUnhandled = function (state) {
	  task.call(global$g, function () {
	    var promise = state.facade;
	    if (IS_NODE) {
	      process.emit('rejectionHandled', promise);
	    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
	  });
	};

	var bind$3 = function (fn, state, unwrap) {
	  return function (value) {
	    fn(state, value, unwrap);
	  };
	};

	var internalReject = function (state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  state.value = value;
	  state.state = REJECTED;
	  notify(state, true);
	};

	var internalResolve = function (state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  try {
	    if (state.facade === value) throw TypeError$1("Promise can't be resolved itself");
	    var then = isThenable(value);
	    if (then) {
	      microtask(function () {
	        var wrapper = { done: false };
	        try {
	          then.call(value,
	            bind$3(internalResolve, wrapper, state),
	            bind$3(internalReject, wrapper, state)
	          );
	        } catch (error) {
	          internalReject(wrapper, error, state);
	        }
	      });
	    } else {
	      state.value = value;
	      state.state = FULFILLED;
	      notify(state, false);
	    }
	  } catch (error) {
	    internalReject({ done: false }, error, state);
	  }
	};

	// constructor polyfill
	if (FORCED$7) {
	  // 25.4.3.1 Promise(executor)
	  PromiseConstructor = function Promise(executor) {
	    anInstance$4(this, PromiseConstructor, PROMISE);
	    aFunction$3(executor);
	    Internal.call(this);
	    var state = getInternalState$5(this);
	    try {
	      executor(bind$3(internalResolve, state), bind$3(internalReject, state));
	    } catch (error) {
	      internalReject(state, error);
	    }
	  };
	  PromiseConstructorPrototype = PromiseConstructor.prototype;
	  // eslint-disable-next-line no-unused-vars -- required for `.length`
	  Internal = function Promise(executor) {
	    setInternalState$5(this, {
	      type: PROMISE,
	      done: false,
	      notified: false,
	      parent: false,
	      reactions: [],
	      rejection: false,
	      state: PENDING,
	      value: undefined
	    });
	  };
	  Internal.prototype = redefineAll$2(PromiseConstructorPrototype, {
	    // `Promise.prototype.then` method
	    // https://tc39.es/ecma262/#sec-promise.prototype.then
	    then: function then(onFulfilled, onRejected) {
	      var state = getInternalPromiseState(this);
	      var reaction = newPromiseCapability(speciesConstructor$2(this, PromiseConstructor));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = IS_NODE ? process.domain : undefined;
	      state.parent = true;
	      state.reactions.push(reaction);
	      if (state.state != PENDING) notify(state, false);
	      return reaction.promise;
	    },
	    // `Promise.prototype.catch` method
	    // https://tc39.es/ecma262/#sec-promise.prototype.catch
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    var state = getInternalState$5(promise);
	    this.promise = promise;
	    this.resolve = bind$3(internalResolve, state);
	    this.reject = bind$3(internalReject, state);
	  };
	  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
	    return C === PromiseConstructor || C === PromiseWrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };

	  if (typeof NativePromise == 'function' && NativePromisePrototype !== Object.prototype) {
	    nativeThen = NativePromisePrototype.then;

	    if (!SUBCLASSING) {
	      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
	      redefine$6(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {
	        var that = this;
	        return new PromiseConstructor(function (resolve, reject) {
	          nativeThen.call(that, resolve, reject);
	        }).then(onFulfilled, onRejected);
	      // https://github.com/zloirock/core-js/issues/640
	      }, { unsafe: true });

	      // makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
	      redefine$6(NativePromisePrototype, 'catch', PromiseConstructorPrototype['catch'], { unsafe: true });
	    }

	    // make `.constructor === Promise` work for native promise-based APIs
	    try {
	      delete NativePromisePrototype.constructor;
	    } catch (error) { /* empty */ }

	    // make `instanceof Promise` work for native promise-based APIs
	    if (setPrototypeOf$6) {
	      setPrototypeOf$6(NativePromisePrototype, PromiseConstructorPrototype);
	    }
	  }
	}

	$$i({ global: true, wrap: true, forced: FORCED$7 }, {
	  Promise: PromiseConstructor
	});

	setToStringTag$4(PromiseConstructor, PROMISE, false);
	setSpecies$2(PROMISE);

	PromiseWrapper = getBuiltIn$1(PROMISE);

	// statics
	$$i({ target: PROMISE, stat: true, forced: FORCED$7 }, {
	  // `Promise.reject` method
	  // https://tc39.es/ecma262/#sec-promise.reject
	  reject: function reject(r) {
	    var capability = newPromiseCapability(this);
	    capability.reject.call(undefined, r);
	    return capability.promise;
	  }
	});

	$$i({ target: PROMISE, stat: true, forced: FORCED$7 }, {
	  // `Promise.resolve` method
	  // https://tc39.es/ecma262/#sec-promise.resolve
	  resolve: function resolve(x) {
	    return promiseResolve(this, x);
	  }
	});

	$$i({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION$1 }, {
	  // `Promise.all` method
	  // https://tc39.es/ecma262/#sec-promise.all
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aFunction$3(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate$2(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        $promiseResolve.call(C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  },
	  // `Promise.race` method
	  // https://tc39.es/ecma262/#sec-promise.race
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aFunction$3(C.resolve);
	      iterate$2(iterable, function (promise) {
	        $promiseResolve.call(C, promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var Op = Object.prototype;
	var hasOwn = Op.hasOwnProperty;
	var undefined$1; // More compressible than void 0.

	var $Symbol = typeof Symbol === "function" ? Symbol : {};
	var iteratorSymbol = $Symbol.iterator || "@@iterator";
	var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	function wrap(innerFn, outerFn, self, tryLocsList) {
	  // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	  var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	  var generator = Object.create(protoGenerator.prototype);
	  var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
	  // .throw, and .return methods.

	  generator._invoke = makeInvokeMethod(innerFn, self, context);
	  return generator;
	} // Try/catch helper to minimize deoptimizations. Returns a completion
	// record like context.tryEntries[i].completion. This interface could
	// have been (and was previously) designed to take a closure to be
	// invoked without arguments, but in all the cases we care about we
	// already have an existing method we want to call, so there's no need
	// to create a new function object. We can even get away with assuming
	// the method takes exactly one argument, since that happens to be true
	// in every case, so we don't have to touch the arguments object. The
	// only additional allocation required is the completion record, which
	// has a stable shape and so hopefully should be cheap to allocate.


	function tryCatch(fn, obj, arg) {
	  try {
	    return {
	      type: "normal",
	      arg: fn.call(obj, arg)
	    };
	  } catch (err) {
	    return {
	      type: "throw",
	      arg: err
	    };
	  }
	}

	var GenStateSuspendedStart = "suspendedStart";
	var GenStateSuspendedYield = "suspendedYield";
	var GenStateExecuting = "executing";
	var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
	// breaking out of the dispatch switch statement.

	var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
	// .constructor.prototype properties for functions that return Generator
	// objects. For full spec compliance, you may wish to configure your
	// minifier not to mangle the names of these two functions.

	function Generator() {}

	function GeneratorFunction() {}

	function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
	// don't natively support it.


	var IteratorPrototype$3 = {};

	IteratorPrototype$3[iteratorSymbol] = function () {
	  return this;
	};

	var getProto = Object.getPrototypeOf;
	var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

	if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	  // This environment has a native %IteratorPrototype%; use it instead
	  // of the polyfill.
	  IteratorPrototype$3 = NativeIteratorPrototype;
	}

	var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype$3);
	GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	GeneratorFunctionPrototype.constructor = GeneratorFunction;
	GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
	// Iterator interface in terms of a single ._invoke method.

	function defineIteratorMethods(prototype) {
	  ["next", "throw", "return"].forEach(function (method) {
	    prototype[method] = function (arg) {
	      return this._invoke(method, arg);
	    };
	  });
	}

	function isGeneratorFunction(genFun) {
	  var ctor = typeof genFun === "function" && genFun.constructor;
	  return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
	  // do is to check its .name property.
	  (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
	}

	function mark(genFun) {
	  if (Object.setPrototypeOf) {
	    Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	  } else {
	    genFun.__proto__ = GeneratorFunctionPrototype;

	    if (!(toStringTagSymbol in genFun)) {
	      genFun[toStringTagSymbol] = "GeneratorFunction";
	    }
	  }

	  genFun.prototype = Object.create(Gp);
	  return genFun;
	}
	// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	// `hasOwn.call(value, "__await")` to determine if the yielded value is
	// meant to be awaited.

	function awrap(arg) {
	  return {
	    __await: arg
	  };
	}

	function AsyncIterator(generator, PromiseImpl) {
	  function invoke(method, arg, resolve, reject) {
	    var record = tryCatch(generator[method], generator, arg);

	    if (record.type === "throw") {
	      reject(record.arg);
	    } else {
	      var result = record.arg;
	      var value = result.value;

	      if (value && _typeof$2(value) === "object" && hasOwn.call(value, "__await")) {
	        return PromiseImpl.resolve(value.__await).then(function (value) {
	          invoke("next", value, resolve, reject);
	        }, function (err) {
	          invoke("throw", err, resolve, reject);
	        });
	      }

	      return PromiseImpl.resolve(value).then(function (unwrapped) {
	        // When a yielded Promise is resolved, its final value becomes
	        // the .value of the Promise<{value,done}> result for the
	        // current iteration.
	        result.value = unwrapped;
	        resolve(result);
	      }, function (error) {
	        // If a rejected Promise was yielded, throw the rejection back
	        // into the async generator function so it can be handled there.
	        return invoke("throw", error, resolve, reject);
	      });
	    }
	  }

	  var previousPromise;

	  function enqueue(method, arg) {
	    function callInvokeWithMethodAndArg() {
	      return new PromiseImpl(function (resolve, reject) {
	        invoke(method, arg, resolve, reject);
	      });
	    }

	    return previousPromise = // If enqueue has been called before, then we want to wait until
	    // all previous Promises have been resolved before calling invoke,
	    // so that results are always delivered in the correct order. If
	    // enqueue has not been called before, then it is important to
	    // call invoke immediately, without waiting on a callback to fire,
	    // so that the async generator function has the opportunity to do
	    // any necessary setup in a predictable way. This predictability
	    // is why the Promise constructor synchronously invokes its
	    // executor callback, and why async functions synchronously
	    // execute code before the first await. Since we implement simple
	    // async functions in terms of async generators, it is especially
	    // important to get this right, even though it requires care.
	    previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
	    // invocations of the iterator.
	    callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
	  } // Define the unified helper method that is used to implement .next,
	  // .throw, and .return (see defineIteratorMethods).


	  this._invoke = enqueue;
	}

	defineIteratorMethods(AsyncIterator.prototype);

	AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	  return this;
	}; // Note that simple async functions are implemented on top of
	// AsyncIterator objects; they just return a Promise for the value of
	// the final result produced by the iterator.


	function async(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	  if (PromiseImpl === void 0) PromiseImpl = Promise;
	  var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
	  return isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
	  : iter.next().then(function (result) {
	    return result.done ? result.value : iter.next();
	  });
	}

	function makeInvokeMethod(innerFn, self, context) {
	  var state = GenStateSuspendedStart;
	  return function invoke(method, arg) {
	    if (state === GenStateExecuting) {
	      throw new Error("Generator is already running");
	    }

	    if (state === GenStateCompleted) {
	      if (method === "throw") {
	        throw arg;
	      } // Be forgiving, per 25.3.3.3.3 of the spec:
	      // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


	      return doneResult();
	    }

	    context.method = method;
	    context.arg = arg;

	    while (true) {
	      var delegate = context.delegate;

	      if (delegate) {
	        var delegateResult = maybeInvokeDelegate(delegate, context);

	        if (delegateResult) {
	          if (delegateResult === ContinueSentinel) continue;
	          return delegateResult;
	        }
	      }

	      if (context.method === "next") {
	        // Setting context._sent for legacy support of Babel's
	        // function.sent implementation.
	        context.sent = context._sent = context.arg;
	      } else if (context.method === "throw") {
	        if (state === GenStateSuspendedStart) {
	          state = GenStateCompleted;
	          throw context.arg;
	        }

	        context.dispatchException(context.arg);
	      } else if (context.method === "return") {
	        context.abrupt("return", context.arg);
	      }

	      state = GenStateExecuting;
	      var record = tryCatch(innerFn, self, context);

	      if (record.type === "normal") {
	        // If an exception is thrown from innerFn, we leave state ===
	        // GenStateExecuting and loop back for another invocation.
	        state = context.done ? GenStateCompleted : GenStateSuspendedYield;

	        if (record.arg === ContinueSentinel) {
	          continue;
	        }

	        return {
	          value: record.arg,
	          done: context.done
	        };
	      } else if (record.type === "throw") {
	        state = GenStateCompleted; // Dispatch the exception by looping back around to the
	        // context.dispatchException(context.arg) call above.

	        context.method = "throw";
	        context.arg = record.arg;
	      }
	    }
	  };
	} // Call delegate.iterator[context.method](context.arg) and handle the
	// result, either by returning a { value, done } result from the
	// delegate iterator, or by modifying context.method and context.arg,
	// setting context.delegate to null, and returning the ContinueSentinel.


	function maybeInvokeDelegate(delegate, context) {
	  var method = delegate.iterator[context.method];

	  if (method === undefined$1) {
	    // A .throw or .return when the delegate iterator has no .throw
	    // method always terminates the yield* loop.
	    context.delegate = null;

	    if (context.method === "throw") {
	      // Note: ["return"] must be used for ES3 parsing compatibility.
	      if (delegate.iterator["return"]) {
	        // If the delegate iterator has a return method, give it a
	        // chance to clean up.
	        context.method = "return";
	        context.arg = undefined$1;
	        maybeInvokeDelegate(delegate, context);

	        if (context.method === "throw") {
	          // If maybeInvokeDelegate(context) changed context.method from
	          // "return" to "throw", let that override the TypeError below.
	          return ContinueSentinel;
	        }
	      }

	      context.method = "throw";
	      context.arg = new TypeError("The iterator does not provide a 'throw' method");
	    }

	    return ContinueSentinel;
	  }

	  var record = tryCatch(method, delegate.iterator, context.arg);

	  if (record.type === "throw") {
	    context.method = "throw";
	    context.arg = record.arg;
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  var info = record.arg;

	  if (!info) {
	    context.method = "throw";
	    context.arg = new TypeError("iterator result is not an object");
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  if (info.done) {
	    // Assign the result of the finished delegate to the temporary
	    // variable specified by delegate.resultName (see delegateYield).
	    context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

	    context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
	    // exception, let the outer generator proceed normally. If
	    // context.method was "next", forget context.arg since it has been
	    // "consumed" by the delegate iterator. If context.method was
	    // "return", allow the original .return call to continue in the
	    // outer generator.

	    if (context.method !== "return") {
	      context.method = "next";
	      context.arg = undefined$1;
	    }
	  } else {
	    // Re-yield the result returned by the delegate method.
	    return info;
	  } // The delegate iterator is finished, so forget it and continue with
	  // the outer generator.


	  context.delegate = null;
	  return ContinueSentinel;
	} // Define Generator.prototype.{next,throw,return} in terms of the
	// unified ._invoke helper method.


	defineIteratorMethods(Gp);
	Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
	// @@iterator function is called on it. Some browsers' implementations of the
	// iterator prototype chain incorrectly implement this, causing the Generator
	// object to not be returned from this call. This ensures that doesn't happen.
	// See https://github.com/facebook/regenerator/issues/274 for more details.

	Gp[iteratorSymbol] = function () {
	  return this;
	};

	Gp.toString = function () {
	  return "[object Generator]";
	};

	function pushTryEntry(locs) {
	  var entry = {
	    tryLoc: locs[0]
	  };

	  if (1 in locs) {
	    entry.catchLoc = locs[1];
	  }

	  if (2 in locs) {
	    entry.finallyLoc = locs[2];
	    entry.afterLoc = locs[3];
	  }

	  this.tryEntries.push(entry);
	}

	function resetTryEntry(entry) {
	  var record = entry.completion || {};
	  record.type = "normal";
	  delete record.arg;
	  entry.completion = record;
	}

	function Context(tryLocsList) {
	  // The root entry object (effectively a try statement without a catch
	  // or a finally block) gives us a place to store values thrown from
	  // locations where there is no enclosing try statement.
	  this.tryEntries = [{
	    tryLoc: "root"
	  }];
	  tryLocsList.forEach(pushTryEntry, this);
	  this.reset(true);
	}

	function keys$2(object) {
	  var keys = [];

	  for (var key in object) {
	    keys.push(key);
	  }

	  keys.reverse(); // Rather than returning an object with a next method, we keep
	  // things simple and return the next function itself.

	  return function next() {
	    while (keys.length) {
	      var key = keys.pop();

	      if (key in object) {
	        next.value = key;
	        next.done = false;
	        return next;
	      }
	    } // To avoid creating an additional object, we just hang the .value
	    // and .done properties off the next function object itself. This
	    // also ensures that the minifier will not anonymize the function.


	    next.done = true;
	    return next;
	  };
	}

	function values(iterable) {
	  if (iterable) {
	    var iteratorMethod = iterable[iteratorSymbol];

	    if (iteratorMethod) {
	      return iteratorMethod.call(iterable);
	    }

	    if (typeof iterable.next === "function") {
	      return iterable;
	    }

	    if (!isNaN(iterable.length)) {
	      var i = -1,
	          next = function next() {
	        while (++i < iterable.length) {
	          if (hasOwn.call(iterable, i)) {
	            next.value = iterable[i];
	            next.done = false;
	            return next;
	          }
	        }

	        next.value = undefined$1;
	        next.done = true;
	        return next;
	      };

	      return next.next = next;
	    }
	  } // Return an iterator with no values.


	  return {
	    next: doneResult
	  };
	}

	function doneResult() {
	  return {
	    value: undefined$1,
	    done: true
	  };
	}

	Context.prototype = {
	  constructor: Context,
	  reset: function reset(skipTempReset) {
	    this.prev = 0;
	    this.next = 0; // Resetting context._sent for legacy support of Babel's
	    // function.sent implementation.

	    this.sent = this._sent = undefined$1;
	    this.done = false;
	    this.delegate = null;
	    this.method = "next";
	    this.arg = undefined$1;
	    this.tryEntries.forEach(resetTryEntry);

	    if (!skipTempReset) {
	      for (var name in this) {
	        // Not sure about the optimal order of these conditions:
	        if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
	          this[name] = undefined$1;
	        }
	      }
	    }
	  },
	  stop: function stop() {
	    this.done = true;
	    var rootEntry = this.tryEntries[0];
	    var rootRecord = rootEntry.completion;

	    if (rootRecord.type === "throw") {
	      throw rootRecord.arg;
	    }

	    return this.rval;
	  },
	  dispatchException: function dispatchException(exception) {
	    if (this.done) {
	      throw exception;
	    }

	    var context = this;

	    function handle(loc, caught) {
	      record.type = "throw";
	      record.arg = exception;
	      context.next = loc;

	      if (caught) {
	        // If the dispatched exception was caught by a catch block,
	        // then let that catch block handle the exception normally.
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	      return !!caught;
	    }

	    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	      var entry = this.tryEntries[i];
	      var record = entry.completion;

	      if (entry.tryLoc === "root") {
	        // Exception thrown outside of any try block that could handle
	        // it, so set the completion value of the entire function to
	        // throw the exception.
	        return handle("end");
	      }

	      if (entry.tryLoc <= this.prev) {
	        var hasCatch = hasOwn.call(entry, "catchLoc");
	        var hasFinally = hasOwn.call(entry, "finallyLoc");

	        if (hasCatch && hasFinally) {
	          if (this.prev < entry.catchLoc) {
	            return handle(entry.catchLoc, true);
	          } else if (this.prev < entry.finallyLoc) {
	            return handle(entry.finallyLoc);
	          }
	        } else if (hasCatch) {
	          if (this.prev < entry.catchLoc) {
	            return handle(entry.catchLoc, true);
	          }
	        } else if (hasFinally) {
	          if (this.prev < entry.finallyLoc) {
	            return handle(entry.finallyLoc);
	          }
	        } else {
	          throw new Error("try statement without catch or finally");
	        }
	      }
	    }
	  },
	  abrupt: function abrupt(type, arg) {
	    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	      var entry = this.tryEntries[i];

	      if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
	        var finallyEntry = entry;
	        break;
	      }
	    }

	    if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
	      // Ignore the finally entry if control is not jumping to a
	      // location outside the try/catch block.
	      finallyEntry = null;
	    }

	    var record = finallyEntry ? finallyEntry.completion : {};
	    record.type = type;
	    record.arg = arg;

	    if (finallyEntry) {
	      this.method = "next";
	      this.next = finallyEntry.finallyLoc;
	      return ContinueSentinel;
	    }

	    return this.complete(record);
	  },
	  complete: function complete(record, afterLoc) {
	    if (record.type === "throw") {
	      throw record.arg;
	    }

	    if (record.type === "break" || record.type === "continue") {
	      this.next = record.arg;
	    } else if (record.type === "return") {
	      this.rval = this.arg = record.arg;
	      this.method = "return";
	      this.next = "end";
	    } else if (record.type === "normal" && afterLoc) {
	      this.next = afterLoc;
	    }

	    return ContinueSentinel;
	  },
	  finish: function finish(finallyLoc) {
	    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	      var entry = this.tryEntries[i];

	      if (entry.finallyLoc === finallyLoc) {
	        this.complete(entry.completion, entry.afterLoc);
	        resetTryEntry(entry);
	        return ContinueSentinel;
	      }
	    }
	  },
	  "catch": function _catch(tryLoc) {
	    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	      var entry = this.tryEntries[i];

	      if (entry.tryLoc === tryLoc) {
	        var record = entry.completion;

	        if (record.type === "throw") {
	          var thrown = record.arg;
	          resetTryEntry(entry);
	        }

	        return thrown;
	      }
	    } // The context.catch method must only be called with a location
	    // argument that corresponds to a known catch block.


	    throw new Error("illegal catch attempt");
	  },
	  delegateYield: function delegateYield(iterable, resultName, nextLoc) {
	    this.delegate = {
	      iterator: values(iterable),
	      resultName: resultName,
	      nextLoc: nextLoc
	    };

	    if (this.method === "next") {
	      // Deliberately forget the last sent value so that we don't
	      // accidentally pass it on to the delegate.
	      this.arg = undefined$1;
	    }

	    return ContinueSentinel;
	  }
	}; // Export a default namespace that plays well with Rollup

	var _regeneratorRuntime = {
	  wrap: wrap,
	  isGeneratorFunction: isGeneratorFunction,
	  AsyncIterator: AsyncIterator,
	  mark: mark,
	  awrap: awrap,
	  async: async,
	  keys: keys$2,
	  values: values
	};

	var regenerator = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': _regeneratorRuntime
	});

	function __decorate(decorators, target, key, desc) {
	  var c = arguments.length,
	      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
	      d;
	  if ((typeof Reflect === "undefined" ? "undefined" : _typeof$2(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
	    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	  }
	  return c > 3 && r && Object.defineProperty(target, key, r), r;
	}
	function __metadata(metadataKey, metadataValue) {
	  if ((typeof Reflect === "undefined" ? "undefined" : _typeof$2(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
	}

	var browser$3 = {};

	var _typeof$1 = {exports: {}};

	(function (module) {
	  function _typeof(obj) {
	    "@babel/helpers - typeof";

	    return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
	      return typeof obj;
	    } : function (obj) {
	      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
	  }

	  module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(_typeof$1);

	var DESCRIPTORS$8 = descriptors;
	var defineProperty$8 = objectDefineProperty.f;

	var FunctionPrototype = Function.prototype;
	var FunctionPrototypeToString = FunctionPrototype.toString;
	var nameRE = /^\s*function ([^ (]*)/;
	var NAME$1 = 'name';

	// Function instances `.name` property
	// https://tc39.es/ecma262/#sec-function-instances-name
	if (DESCRIPTORS$8 && !(NAME$1 in FunctionPrototype)) {
	  defineProperty$8(FunctionPrototype, NAME$1, {
	    configurable: true,
	    get: function () {
	      try {
	        return FunctionPrototypeToString.call(this).match(nameRE)[1];
	      } catch (error) {
	        return '';
	      }
	    }
	  });
	}

	var slicedToArray = {exports: {}};

	var arrayWithHoles = {exports: {}};

	(function (module) {
	  function _arrayWithHoles(arr) {
	    if (Array.isArray(arr)) return arr;
	  }

	  module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(arrayWithHoles);

	var iterableToArrayLimit = {exports: {}};

	(function (module) {
	  function _iterableToArrayLimit(arr, i) {
	    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

	    if (_i == null) return;
	    var _arr = [];
	    var _n = true;
	    var _d = false;

	    var _s, _e;

	    try {
	      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
	        _arr.push(_s.value);

	        if (i && _arr.length === i) break;
	      }
	    } catch (err) {
	      _d = true;
	      _e = err;
	    } finally {
	      try {
	        if (!_n && _i["return"] != null) _i["return"]();
	      } finally {
	        if (_d) throw _e;
	      }
	    }

	    return _arr;
	  }

	  module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(iterableToArrayLimit);

	var unsupportedIterableToArray = {exports: {}};

	var arrayLikeToArray = {exports: {}};

	(function (module) {
	  function _arrayLikeToArray(arr, len) {
	    if (len == null || len > arr.length) len = arr.length;

	    for (var i = 0, arr2 = new Array(len); i < len; i++) {
	      arr2[i] = arr[i];
	    }

	    return arr2;
	  }

	  module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(arrayLikeToArray);

	(function (module) {
	  var arrayLikeToArray$1 = arrayLikeToArray.exports;

	  function _unsupportedIterableToArray(o, minLen) {
	    if (!o) return;
	    if (typeof o === "string") return arrayLikeToArray$1(o, minLen);
	    var n = Object.prototype.toString.call(o).slice(8, -1);
	    if (n === "Object" && o.constructor) n = o.constructor.name;
	    if (n === "Map" || n === "Set") return Array.from(o);
	    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray$1(o, minLen);
	  }

	  module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(unsupportedIterableToArray);

	var nonIterableRest = {exports: {}};

	(function (module) {
	  function _nonIterableRest() {
	    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }

	  module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(nonIterableRest);

	(function (module) {
	  var arrayWithHoles$1 = arrayWithHoles.exports;
	  var iterableToArrayLimit$1 = iterableToArrayLimit.exports;
	  var unsupportedIterableToArray$1 = unsupportedIterableToArray.exports;
	  var nonIterableRest$1 = nonIterableRest.exports;

	  function _slicedToArray(arr, i) {
	    return arrayWithHoles$1(arr) || iterableToArrayLimit$1(arr, i) || unsupportedIterableToArray$1(arr, i) || nonIterableRest$1();
	  }

	  module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(slicedToArray);

	var wellKnownSymbol$a = wellKnownSymbol$p;
	var create$5 = objectCreate;
	var definePropertyModule$1 = objectDefineProperty;

	var UNSCOPABLES = wellKnownSymbol$a('unscopables');
	var ArrayPrototype = Array.prototype;

	// Array.prototype[@@unscopables]
	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	if (ArrayPrototype[UNSCOPABLES] == undefined) {
	  definePropertyModule$1.f(ArrayPrototype, UNSCOPABLES, {
	    configurable: true,
	    value: create$5(null)
	  });
	}

	// add a key to Array.prototype[@@unscopables]
	var addToUnscopables$2 = function (key) {
	  ArrayPrototype[UNSCOPABLES][key] = true;
	};

	var fails$m = fails$z;

	var correctPrototypeGetter = !fails$m(function () {
	  function F() { /* empty */ }
	  F.prototype.constructor = null;
	  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
	  return Object.getPrototypeOf(new F()) !== F.prototype;
	});

	var has$5 = has$f;
	var toObject$b = toObject$g;
	var sharedKey = sharedKey$4;
	var CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter;

	var IE_PROTO = sharedKey('IE_PROTO');
	var ObjectPrototype$2 = Object.prototype;

	// `Object.getPrototypeOf` method
	// https://tc39.es/ecma262/#sec-object.getprototypeof
	// eslint-disable-next-line es/no-object-getprototypeof -- safe
	var objectGetPrototypeOf = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
	  O = toObject$b(O);
	  if (has$5(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectPrototype$2 : null;
	};

	var fails$l = fails$z;
	var getPrototypeOf$4 = objectGetPrototypeOf;
	var createNonEnumerableProperty$6 = createNonEnumerableProperty$c;
	var wellKnownSymbol$9 = wellKnownSymbol$p;

	var ITERATOR$3 = wellKnownSymbol$9('iterator');
	var BUGGY_SAFARI_ITERATORS$1 = false;

	// `%IteratorPrototype%` object
	// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
	var IteratorPrototype$2, PrototypeOfArrayIteratorPrototype, arrayIterator;

	/* eslint-disable es/no-array-prototype-keys -- safe */
	if ([].keys) {
	  arrayIterator = [].keys();
	  // Safari 8 has buggy iterators w/o `next`
	  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS$1 = true;
	  else {
	    PrototypeOfArrayIteratorPrototype = getPrototypeOf$4(getPrototypeOf$4(arrayIterator));
	    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype$2 = PrototypeOfArrayIteratorPrototype;
	  }
	}

	var NEW_ITERATOR_PROTOTYPE = IteratorPrototype$2 == undefined || fails$l(function () {
	  var test = {};
	  // FF44- legacy iterators case
	  return IteratorPrototype$2[ITERATOR$3].call(test) !== test;
	});

	if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$2 = {};

	// `%IteratorPrototype%[@@iterator]()` method
	// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
	if (typeof IteratorPrototype$2[ITERATOR$3] !== 'function') {
	  createNonEnumerableProperty$6(IteratorPrototype$2, ITERATOR$3, function () {
	    return this;
	  });
	}

	var iteratorsCore = {
	  IteratorPrototype: IteratorPrototype$2,
	  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
	};

	var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;
	var create$4 = objectCreate;
	var createPropertyDescriptor$1 = createPropertyDescriptor$6;
	var setToStringTag$3 = setToStringTag$7;
	var Iterators$2 = iterators;

	var returnThis$1 = function () { return this; };

	var createIteratorConstructor$1 = function (IteratorConstructor, NAME, next) {
	  var TO_STRING_TAG = NAME + ' Iterator';
	  IteratorConstructor.prototype = create$4(IteratorPrototype$1, { next: createPropertyDescriptor$1(1, next) });
	  setToStringTag$3(IteratorConstructor, TO_STRING_TAG, false);
	  Iterators$2[TO_STRING_TAG] = returnThis$1;
	  return IteratorConstructor;
	};

	var $$h = _export;
	var createIteratorConstructor = createIteratorConstructor$1;
	var getPrototypeOf$3 = objectGetPrototypeOf;
	var setPrototypeOf$5 = objectSetPrototypeOf;
	var setToStringTag$2 = setToStringTag$7;
	var createNonEnumerableProperty$5 = createNonEnumerableProperty$c;
	var redefine$5 = redefine$b.exports;
	var wellKnownSymbol$8 = wellKnownSymbol$p;
	var Iterators$1 = iterators;
	var IteratorsCore = iteratorsCore;

	var IteratorPrototype = IteratorsCore.IteratorPrototype;
	var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
	var ITERATOR$2 = wellKnownSymbol$8('iterator');
	var KEYS = 'keys';
	var VALUES = 'values';
	var ENTRIES = 'entries';

	var returnThis = function () { return this; };

	var defineIterator$3 = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
	  createIteratorConstructor(IteratorConstructor, NAME, next);

	  var getIterationMethod = function (KIND) {
	    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
	    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
	    switch (KIND) {
	      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
	      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
	      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
	    } return function () { return new IteratorConstructor(this); };
	  };

	  var TO_STRING_TAG = NAME + ' Iterator';
	  var INCORRECT_VALUES_NAME = false;
	  var IterablePrototype = Iterable.prototype;
	  var nativeIterator = IterablePrototype[ITERATOR$2]
	    || IterablePrototype['@@iterator']
	    || DEFAULT && IterablePrototype[DEFAULT];
	  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
	  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
	  var CurrentIteratorPrototype, methods, KEY;

	  // fix native
	  if (anyNativeIterator) {
	    CurrentIteratorPrototype = getPrototypeOf$3(anyNativeIterator.call(new Iterable()));
	    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
	      if (getPrototypeOf$3(CurrentIteratorPrototype) !== IteratorPrototype) {
	        if (setPrototypeOf$5) {
	          setPrototypeOf$5(CurrentIteratorPrototype, IteratorPrototype);
	        } else if (typeof CurrentIteratorPrototype[ITERATOR$2] != 'function') {
	          createNonEnumerableProperty$5(CurrentIteratorPrototype, ITERATOR$2, returnThis);
	        }
	      }
	      // Set @@toStringTag to native iterators
	      setToStringTag$2(CurrentIteratorPrototype, TO_STRING_TAG, true);
	    }
	  }

	  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
	  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
	    INCORRECT_VALUES_NAME = true;
	    defaultIterator = function values() { return nativeIterator.call(this); };
	  }

	  // define iterator
	  if (IterablePrototype[ITERATOR$2] !== defaultIterator) {
	    createNonEnumerableProperty$5(IterablePrototype, ITERATOR$2, defaultIterator);
	  }
	  Iterators$1[NAME] = defaultIterator;

	  // export additional methods
	  if (DEFAULT) {
	    methods = {
	      values: getIterationMethod(VALUES),
	      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
	      entries: getIterationMethod(ENTRIES)
	    };
	    if (FORCED) for (KEY in methods) {
	      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
	        redefine$5(IterablePrototype, KEY, methods[KEY]);
	      }
	    } else $$h({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
	  }

	  return methods;
	};

	var toIndexedObject$4 = toIndexedObject$c;
	var addToUnscopables$1 = addToUnscopables$2;
	var Iterators = iterators;
	var InternalStateModule$4 = internalState;
	var defineIterator$2 = defineIterator$3;

	var ARRAY_ITERATOR = 'Array Iterator';
	var setInternalState$4 = InternalStateModule$4.set;
	var getInternalState$4 = InternalStateModule$4.getterFor(ARRAY_ITERATOR);

	// `Array.prototype.entries` method
	// https://tc39.es/ecma262/#sec-array.prototype.entries
	// `Array.prototype.keys` method
	// https://tc39.es/ecma262/#sec-array.prototype.keys
	// `Array.prototype.values` method
	// https://tc39.es/ecma262/#sec-array.prototype.values
	// `Array.prototype[@@iterator]` method
	// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
	// `CreateArrayIterator` internal method
	// https://tc39.es/ecma262/#sec-createarrayiterator
	var es_array_iterator = defineIterator$2(Array, 'Array', function (iterated, kind) {
	  setInternalState$4(this, {
	    type: ARRAY_ITERATOR,
	    target: toIndexedObject$4(iterated), // target
	    index: 0,                          // next index
	    kind: kind                         // kind
	  });
	// `%ArrayIteratorPrototype%.next` method
	// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
	}, function () {
	  var state = getInternalState$4(this);
	  var target = state.target;
	  var kind = state.kind;
	  var index = state.index++;
	  if (!target || index >= target.length) {
	    state.target = undefined;
	    return { value: undefined, done: true };
	  }
	  if (kind == 'keys') return { value: index, done: false };
	  if (kind == 'values') return { value: target[index], done: false };
	  return { value: [index, target[index]], done: false };
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values%
	// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
	// https://tc39.es/ecma262/#sec-createmappedargumentsobject
	Iterators.Arguments = Iterators.Array;

	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables$1('keys');
	addToUnscopables$1('values');
	addToUnscopables$1('entries');

	var global$f = global$B;
	var DOMIterables = domIterables;
	var DOMTokenListPrototype = domTokenListPrototype;
	var ArrayIteratorMethods = es_array_iterator;
	var createNonEnumerableProperty$4 = createNonEnumerableProperty$c;
	var wellKnownSymbol$7 = wellKnownSymbol$p;

	var ITERATOR$1 = wellKnownSymbol$7('iterator');
	var TO_STRING_TAG$1 = wellKnownSymbol$7('toStringTag');
	var ArrayValues = ArrayIteratorMethods.values;

	var handlePrototype = function (CollectionPrototype, COLLECTION_NAME) {
	  if (CollectionPrototype) {
	    // some Chrome versions have non-configurable methods on DOMTokenList
	    if (CollectionPrototype[ITERATOR$1] !== ArrayValues) try {
	      createNonEnumerableProperty$4(CollectionPrototype, ITERATOR$1, ArrayValues);
	    } catch (error) {
	      CollectionPrototype[ITERATOR$1] = ArrayValues;
	    }
	    if (!CollectionPrototype[TO_STRING_TAG$1]) {
	      createNonEnumerableProperty$4(CollectionPrototype, TO_STRING_TAG$1, COLLECTION_NAME);
	    }
	    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
	      // some Chrome versions have non-configurable methods on DOMTokenList
	      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
	        createNonEnumerableProperty$4(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
	      } catch (error) {
	        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
	      }
	    }
	  }
	};

	for (var COLLECTION_NAME in DOMIterables) {
	  handlePrototype(global$f[COLLECTION_NAME] && global$f[COLLECTION_NAME].prototype, COLLECTION_NAME);
	}

	handlePrototype(DOMTokenListPrototype, 'DOMTokenList');

	var $$g = _export;
	var fails$k = fails$z;
	var isArray$1 = isArray$4;
	var isObject$a = isObject$n;
	var toObject$a = toObject$g;
	var toLength$i = toLength$m;
	var createProperty$3 = createProperty$5;
	var arraySpeciesCreate$1 = arraySpeciesCreate$3;
	var arrayMethodHasSpeciesSupport$2 = arrayMethodHasSpeciesSupport$5;
	var wellKnownSymbol$6 = wellKnownSymbol$p;
	var V8_VERSION = engineV8Version;

	var IS_CONCAT_SPREADABLE = wellKnownSymbol$6('isConcatSpreadable');
	var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

	// We can't use this feature detection in V8 since it causes
	// deoptimization and serious performance degradation
	// https://github.com/zloirock/core-js/issues/679
	var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails$k(function () {
	  var array = [];
	  array[IS_CONCAT_SPREADABLE] = false;
	  return array.concat()[0] !== array;
	});

	var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport$2('concat');

	var isConcatSpreadable = function (O) {
	  if (!isObject$a(O)) return false;
	  var spreadable = O[IS_CONCAT_SPREADABLE];
	  return spreadable !== undefined ? !!spreadable : isArray$1(O);
	};

	var FORCED$6 = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

	// `Array.prototype.concat` method
	// https://tc39.es/ecma262/#sec-array.prototype.concat
	// with adding support of @@isConcatSpreadable and @@species
	$$g({ target: 'Array', proto: true, forced: FORCED$6 }, {
	  // eslint-disable-next-line no-unused-vars -- required for `.length`
	  concat: function concat(arg) {
	    var O = toObject$a(this);
	    var A = arraySpeciesCreate$1(O, 0);
	    var n = 0;
	    var i, k, length, len, E;
	    for (i = -1, length = arguments.length; i < length; i++) {
	      E = i === -1 ? O : arguments[i];
	      if (isConcatSpreadable(E)) {
	        len = toLength$i(E.length);
	        if (n + len > MAX_SAFE_INTEGER$1) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        for (k = 0; k < len; k++, n++) if (k in E) createProperty$3(A, n, E[k]);
	      } else {
	        if (n >= MAX_SAFE_INTEGER$1) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        createProperty$3(A, n++, E);
	      }
	    }
	    A.length = n;
	    return A;
	  }
	});

	var $$f = _export;
	var isObject$9 = isObject$n;
	var isArray = isArray$4;
	var toAbsoluteIndex$4 = toAbsoluteIndex$6;
	var toLength$h = toLength$m;
	var toIndexedObject$3 = toIndexedObject$c;
	var createProperty$2 = createProperty$5;
	var wellKnownSymbol$5 = wellKnownSymbol$p;
	var arrayMethodHasSpeciesSupport$1 = arrayMethodHasSpeciesSupport$5;

	var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport$1('slice');

	var SPECIES$1 = wellKnownSymbol$5('species');
	var nativeSlice = [].slice;
	var max$2 = Math.max;

	// `Array.prototype.slice` method
	// https://tc39.es/ecma262/#sec-array.prototype.slice
	// fallback for not array-like ES3 strings and DOM objects
	$$f({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$1 }, {
	  slice: function slice(start, end) {
	    var O = toIndexedObject$3(this);
	    var length = toLength$h(O.length);
	    var k = toAbsoluteIndex$4(start, length);
	    var fin = toAbsoluteIndex$4(end === undefined ? length : end, length);
	    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
	    var Constructor, result, n;
	    if (isArray(O)) {
	      Constructor = O.constructor;
	      // cross-realm fallback
	      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
	        Constructor = undefined;
	      } else if (isObject$9(Constructor)) {
	        Constructor = Constructor[SPECIES$1];
	        if (Constructor === null) Constructor = undefined;
	      }
	      if (Constructor === Array || Constructor === undefined) {
	        return nativeSlice.call(O, k, fin);
	      }
	    }
	    result = new (Constructor === undefined ? Array : Constructor)(max$2(fin - k, 0));
	    for (n = 0; k < fin; k++, n++) if (k in O) createProperty$2(result, n, O[k]);
	    result.length = n;
	    return result;
	  }
	});

	var anObject$6 = anObject$j;
	var iteratorClose = iteratorClose$2;

	// call something on iterator step with safe closing on error
	var callWithSafeIterationClosing$1 = function (iterator, fn, value, ENTRIES) {
	  try {
	    return ENTRIES ? fn(anObject$6(value)[0], value[1]) : fn(value);
	  } catch (error) {
	    iteratorClose(iterator, 'throw', error);
	  }
	};

	var bind$2 = functionBindContext;
	var toObject$9 = toObject$g;
	var callWithSafeIterationClosing = callWithSafeIterationClosing$1;
	var isArrayIteratorMethod$1 = isArrayIteratorMethod$3;
	var toLength$g = toLength$m;
	var createProperty$1 = createProperty$5;
	var getIterator$1 = getIterator$3;
	var getIteratorMethod$1 = getIteratorMethod$4;

	// `Array.from` method implementation
	// https://tc39.es/ecma262/#sec-array.from
	var arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	  var O = toObject$9(arrayLike);
	  var C = typeof this == 'function' ? this : Array;
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  var iteratorMethod = getIteratorMethod$1(O);
	  var index = 0;
	  var length, result, step, iterator, next, value;
	  if (mapping) mapfn = bind$2(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
	  // if the target is not iterable or it's an array with the default iterator - use a simple case
	  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod$1(iteratorMethod))) {
	    iterator = getIterator$1(O, iteratorMethod);
	    next = iterator.next;
	    result = new C();
	    for (;!(step = next.call(iterator)).done; index++) {
	      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
	      createProperty$1(result, index, value);
	    }
	  } else {
	    length = toLength$g(O.length);
	    result = new C(length);
	    for (;length > index; index++) {
	      value = mapping ? mapfn(O[index], index) : O[index];
	      createProperty$1(result, index, value);
	    }
	  }
	  result.length = index;
	  return result;
	};

	var $$e = _export;
	var from = arrayFrom;
	var checkCorrectnessOfIteration$2 = checkCorrectnessOfIteration$4;

	var INCORRECT_ITERATION = !checkCorrectnessOfIteration$2(function (iterable) {
	  // eslint-disable-next-line es/no-array-from -- required for testing
	  Array.from(iterable);
	});

	// `Array.from` method
	// https://tc39.es/ecma262/#sec-array.from
	$$e({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {
	  from: from
	});

	var toInteger$6 = toInteger$9;
	var toString$8 = toString$b;
	var requireObjectCoercible$5 = requireObjectCoercible$8;

	// `String.prototype.codePointAt` methods implementation
	var createMethod$3 = function (CONVERT_TO_STRING) {
	  return function ($this, pos) {
	    var S = toString$8(requireObjectCoercible$5($this));
	    var position = toInteger$6(pos);
	    var size = S.length;
	    var first, second;
	    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
	    first = S.charCodeAt(position);
	    return first < 0xD800 || first > 0xDBFF || position + 1 === size
	      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
	        ? CONVERT_TO_STRING ? S.charAt(position) : first
	        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
	  };
	};

	var stringMultibyte = {
	  // `String.prototype.codePointAt` method
	  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
	  codeAt: createMethod$3(false),
	  // `String.prototype.at` method
	  // https://github.com/mathiasbynens/String.prototype.at
	  charAt: createMethod$3(true)
	};

	var charAt$1 = stringMultibyte.charAt;
	var toString$7 = toString$b;
	var InternalStateModule$3 = internalState;
	var defineIterator$1 = defineIterator$3;

	var STRING_ITERATOR = 'String Iterator';
	var setInternalState$3 = InternalStateModule$3.set;
	var getInternalState$3 = InternalStateModule$3.getterFor(STRING_ITERATOR);

	// `String.prototype[@@iterator]` method
	// https://tc39.es/ecma262/#sec-string.prototype-@@iterator
	defineIterator$1(String, 'String', function (iterated) {
	  setInternalState$3(this, {
	    type: STRING_ITERATOR,
	    string: toString$7(iterated),
	    index: 0
	  });
	// `%StringIteratorPrototype%.next` method
	// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
	}, function next() {
	  var state = getInternalState$3(this);
	  var string = state.string;
	  var index = state.index;
	  var point;
	  if (index >= string.length) return { value: undefined, done: true };
	  point = charAt$1(string, index);
	  state.index += point.length;
	  return { value: point, done: false };
	});

	var anObject$5 = anObject$j;

	// `RegExp.prototype.flags` getter implementation
	// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
	var regexpFlags$1 = function () {
	  var that = anObject$5(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.dotAll) result += 's';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};

	var regexpStickyHelpers = {};

	var fails$j = fails$z;
	var global$e = global$B;

	// babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
	var $RegExp$2 = global$e.RegExp;

	regexpStickyHelpers.UNSUPPORTED_Y = fails$j(function () {
	  var re = $RegExp$2('a', 'y');
	  re.lastIndex = 2;
	  return re.exec('abcd') != null;
	});

	regexpStickyHelpers.BROKEN_CARET = fails$j(function () {
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
	  var re = $RegExp$2('^r', 'gy');
	  re.lastIndex = 2;
	  return re.exec('str') != null;
	});

	var fails$i = fails$z;
	var global$d = global$B;

	// babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError
	var $RegExp$1 = global$d.RegExp;

	var regexpUnsupportedDotAll = fails$i(function () {
	  var re = $RegExp$1('.', 's');
	  return !(re.dotAll && re.exec('\n') && re.flags === 's');
	});

	var fails$h = fails$z;
	var global$c = global$B;

	// babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError
	var $RegExp = global$c.RegExp;

	var regexpUnsupportedNcg = fails$h(function () {
	  var re = $RegExp('(?<a>b)', 'g');
	  return re.exec('b').groups.a !== 'b' ||
	    'b'.replace(re, '$<a>c') !== 'bc';
	});

	/* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */
	/* eslint-disable regexp/no-useless-quantifier -- testing */
	var toString$6 = toString$b;
	var regexpFlags = regexpFlags$1;
	var stickyHelpers$1 = regexpStickyHelpers;
	var shared = shared$5.exports;
	var create$3 = objectCreate;
	var getInternalState$2 = internalState.get;
	var UNSUPPORTED_DOT_ALL = regexpUnsupportedDotAll;
	var UNSUPPORTED_NCG = regexpUnsupportedNcg;

	var nativeExec = RegExp.prototype.exec;
	var nativeReplace = shared('native-string-replace', String.prototype.replace);

	var patchedExec = nativeExec;

	var UPDATES_LAST_INDEX_WRONG = (function () {
	  var re1 = /a/;
	  var re2 = /b*/g;
	  nativeExec.call(re1, 'a');
	  nativeExec.call(re2, 'a');
	  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
	})();

	var UNSUPPORTED_Y$1 = stickyHelpers$1.UNSUPPORTED_Y || stickyHelpers$1.BROKEN_CARET;

	// nonparticipating capturing group, copied from es5-shim's String#split patch.
	var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

	var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y$1 || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;

	if (PATCH) {
	  // eslint-disable-next-line max-statements -- TODO
	  patchedExec = function exec(string) {
	    var re = this;
	    var state = getInternalState$2(re);
	    var str = toString$6(string);
	    var raw = state.raw;
	    var result, reCopy, lastIndex, match, i, object, group;

	    if (raw) {
	      raw.lastIndex = re.lastIndex;
	      result = patchedExec.call(raw, str);
	      re.lastIndex = raw.lastIndex;
	      return result;
	    }

	    var groups = state.groups;
	    var sticky = UNSUPPORTED_Y$1 && re.sticky;
	    var flags = regexpFlags.call(re);
	    var source = re.source;
	    var charsAdded = 0;
	    var strCopy = str;

	    if (sticky) {
	      flags = flags.replace('y', '');
	      if (flags.indexOf('g') === -1) {
	        flags += 'g';
	      }

	      strCopy = str.slice(re.lastIndex);
	      // Support anchored sticky behavior.
	      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str.charAt(re.lastIndex - 1) !== '\n')) {
	        source = '(?: ' + source + ')';
	        strCopy = ' ' + strCopy;
	        charsAdded++;
	      }
	      // ^(? + rx + ) is needed, in combination with some str slicing, to
	      // simulate the 'y' flag.
	      reCopy = new RegExp('^(?:' + source + ')', flags);
	    }

	    if (NPCG_INCLUDED) {
	      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
	    }
	    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

	    match = nativeExec.call(sticky ? reCopy : re, strCopy);

	    if (sticky) {
	      if (match) {
	        match.input = match.input.slice(charsAdded);
	        match[0] = match[0].slice(charsAdded);
	        match.index = re.lastIndex;
	        re.lastIndex += match[0].length;
	      } else re.lastIndex = 0;
	    } else if (UPDATES_LAST_INDEX_WRONG && match) {
	      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
	    }
	    if (NPCG_INCLUDED && match && match.length > 1) {
	      // Fix browsers whose `exec` methods don't consistently return `undefined`
	      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
	      nativeReplace.call(match[0], reCopy, function () {
	        for (i = 1; i < arguments.length - 2; i++) {
	          if (arguments[i] === undefined) match[i] = undefined;
	        }
	      });
	    }

	    if (match && groups) {
	      match.groups = object = create$3(null);
	      for (i = 0; i < groups.length; i++) {
	        group = groups[i];
	        object[group[0]] = match[group[1]];
	      }
	    }

	    return match;
	  };
	}

	var regexpExec$3 = patchedExec;

	var $$d = _export;
	var exec = regexpExec$3;

	// `RegExp.prototype.exec` method
	// https://tc39.es/ecma262/#sec-regexp.prototype.exec
	$$d({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {
	  exec: exec
	});

	// TODO: Remove from `core-js@4` since it's moved to entry points

	var $$c = _export;
	var isObject$8 = isObject$n;

	var DELEGATES_TO_EXEC = function () {
	  var execCalled = false;
	  var re = /[ac]/;
	  re.exec = function () {
	    execCalled = true;
	    return /./.exec.apply(this, arguments);
	  };
	  return re.test('abc') === true && execCalled;
	}();

	var nativeTest = /./.test;

	// `RegExp.prototype.test` method
	// https://tc39.es/ecma262/#sec-regexp.prototype.test
	$$c({ target: 'RegExp', proto: true, forced: !DELEGATES_TO_EXEC }, {
	  test: function (str) {
	    if (typeof this.exec !== 'function') {
	      return nativeTest.call(this, str);
	    }
	    var result = this.exec(str);
	    if (result !== null && !isObject$8(result)) {
	      throw new Error('RegExp exec method returned something other than an Object or null');
	    }
	    return !!result;
	  }
	});

	var $$b = _export;
	var DESCRIPTORS$7 = descriptors;
	var global$b = global$B;
	var has$4 = has$f;
	var isObject$7 = isObject$n;
	var defineProperty$7 = objectDefineProperty.f;
	var copyConstructorProperties = copyConstructorProperties$2;

	var NativeSymbol = global$b.Symbol;

	if (DESCRIPTORS$7 && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||
	  // Safari 12 bug
	  NativeSymbol().description !== undefined
	)) {
	  var EmptyStringDescriptionStore = {};
	  // wrap Symbol constructor for correct work with undefined description
	  var SymbolWrapper = function Symbol() {
	    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
	    var result = this instanceof SymbolWrapper
	      ? new NativeSymbol(description)
	      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
	      : description === undefined ? NativeSymbol() : NativeSymbol(description);
	    if (description === '') EmptyStringDescriptionStore[result] = true;
	    return result;
	  };
	  copyConstructorProperties(SymbolWrapper, NativeSymbol);
	  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
	  symbolPrototype.constructor = SymbolWrapper;

	  var symbolToString = symbolPrototype.toString;
	  var nativeSymbol = String(NativeSymbol('test')) == 'Symbol(test)';
	  var regexp = /^Symbol\((.*)\)[^)]+$/;
	  defineProperty$7(symbolPrototype, 'description', {
	    configurable: true,
	    get: function description() {
	      var symbol = isObject$7(this) ? this.valueOf() : this;
	      var string = symbolToString.call(symbol);
	      if (has$4(EmptyStringDescriptionStore, symbol)) return '';
	      var desc = nativeSymbol ? string.slice(7, -1) : string.replace(regexp, '$1');
	      return desc === '' ? undefined : desc;
	    }
	  });

	  $$b({ global: true, forced: true }, {
	    Symbol: SymbolWrapper
	  });
	}

	var defineWellKnownSymbol = defineWellKnownSymbol$2;

	// `Symbol.iterator` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.iterator
	defineWellKnownSymbol('iterator');

	var toConsumableArray = {exports: {}};

	var arrayWithoutHoles = {exports: {}};

	(function (module) {
	  var arrayLikeToArray$1 = arrayLikeToArray.exports;

	  function _arrayWithoutHoles(arr) {
	    if (Array.isArray(arr)) return arrayLikeToArray$1(arr);
	  }

	  module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(arrayWithoutHoles);

	var iterableToArray = {exports: {}};

	(function (module) {
	  function _iterableToArray(iter) {
	    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
	  }

	  module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(iterableToArray);

	var nonIterableSpread = {exports: {}};

	(function (module) {
	  function _nonIterableSpread() {
	    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }

	  module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(nonIterableSpread);

	(function (module) {
	  var arrayWithoutHoles$1 = arrayWithoutHoles.exports;
	  var iterableToArray$1 = iterableToArray.exports;
	  var unsupportedIterableToArray$1 = unsupportedIterableToArray.exports;
	  var nonIterableSpread$1 = nonIterableSpread.exports;

	  function _toConsumableArray(arr) {
	    return arrayWithoutHoles$1(arr) || iterableToArray$1(arr) || unsupportedIterableToArray$1(arr) || nonIterableSpread$1();
	  }

	  module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(toConsumableArray);

	var createClass = {exports: {}};

	(function (module) {
	  function _defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }

	  function _createClass(Constructor, protoProps, staticProps) {
	    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) _defineProperties(Constructor, staticProps);
	    Object.defineProperty(Constructor, "prototype", {
	      writable: false
	    });
	    return Constructor;
	  }

	  module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(createClass);

	var classCallCheck = {exports: {}};

	(function (module) {
	  function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	      throw new TypeError("Cannot call a class as a function");
	    }
	  }

	  module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(classCallCheck);

	var inherits = {exports: {}};

	var setPrototypeOf$4 = {exports: {}};

	(function (module) {
	  function _setPrototypeOf(o, p) {
	    module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	      o.__proto__ = p;
	      return o;
	    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
	    return _setPrototypeOf(o, p);
	  }

	  module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(setPrototypeOf$4);

	(function (module) {
	  var setPrototypeOf = setPrototypeOf$4.exports;

	  function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	      throw new TypeError("Super expression must either be null or a function");
	    }

	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	      constructor: {
	        value: subClass,
	        writable: true,
	        configurable: true
	      }
	    });
	    Object.defineProperty(subClass, "prototype", {
	      writable: false
	    });
	    if (superClass) setPrototypeOf(subClass, superClass);
	  }

	  module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(inherits);

	var possibleConstructorReturn = {exports: {}};

	var assertThisInitialized = {exports: {}};

	(function (module) {
	  function _assertThisInitialized(self) {
	    if (self === void 0) {
	      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }

	    return self;
	  }

	  module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(assertThisInitialized);

	(function (module) {
	  var _typeof = _typeof$1.exports["default"];
	  var assertThisInitialized$1 = assertThisInitialized.exports;

	  function _possibleConstructorReturn(self, call) {
	    if (call && (_typeof(call) === "object" || typeof call === "function")) {
	      return call;
	    } else if (call !== void 0) {
	      throw new TypeError("Derived constructors may only return object or undefined");
	    }

	    return assertThisInitialized$1(self);
	  }

	  module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(possibleConstructorReturn);

	var getPrototypeOf$2 = {exports: {}};

	(function (module) {
	  function _getPrototypeOf(o) {
	    module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	      return o.__proto__ || Object.getPrototypeOf(o);
	    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
	    return _getPrototypeOf(o);
	  }

	  module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(getPrototypeOf$2);

	var $$a = _export;
	var $includes$1 = arrayIncludes.includes;
	var addToUnscopables = addToUnscopables$2;

	// `Array.prototype.includes` method
	// https://tc39.es/ecma262/#sec-array.prototype.includes
	$$a({ target: 'Array', proto: true }, {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes$1(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('includes');

	var $$9 = _export;
	var IndexedObject$2 = indexedObject;
	var toIndexedObject$2 = toIndexedObject$c;
	var arrayMethodIsStrict$2 = arrayMethodIsStrict$4;

	var nativeJoin = [].join;

	var ES3_STRINGS = IndexedObject$2 != Object;
	var STRICT_METHOD$2 = arrayMethodIsStrict$2('join', ',');

	// `Array.prototype.join` method
	// https://tc39.es/ecma262/#sec-array.prototype.join
	$$9({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD$2 }, {
	  join: function join(separator) {
	    return nativeJoin.call(toIndexedObject$2(this), separator === undefined ? ',' : separator);
	  }
	});

	var isObject$6 = isObject$n;

	var floor$4 = Math.floor;

	// `Number.isInteger` method implementation
	// https://tc39.es/ecma262/#sec-number.isinteger
	var isInteger$3 = function isInteger(it) {
	  return !isObject$6(it) && isFinite(it) && floor$4(it) === it;
	};

	var $$8 = _export;
	var isInteger$2 = isInteger$3;

	// `Number.isInteger` method
	// https://tc39.es/ecma262/#sec-number.isinteger
	$$8({ target: 'Number', stat: true }, {
	  isInteger: isInteger$2
	});

	var isObject$5 = isObject$n;
	var setPrototypeOf$3 = objectSetPrototypeOf;

	// makes subclassing work correct for wrapped built-ins
	var inheritIfRequired$3 = function ($this, dummy, Wrapper) {
	  var NewTarget, NewTargetPrototype;
	  if (
	    // it can work only with native `setPrototypeOf`
	    setPrototypeOf$3 &&
	    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
	    typeof (NewTarget = dummy.constructor) == 'function' &&
	    NewTarget !== Wrapper &&
	    isObject$5(NewTargetPrototype = NewTarget.prototype) &&
	    NewTargetPrototype !== Wrapper.prototype
	  ) setPrototypeOf$3($this, NewTargetPrototype);
	  return $this;
	};

	// a string of all valid unicode whitespaces
	var whitespaces$1 = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002' +
	  '\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

	var requireObjectCoercible$4 = requireObjectCoercible$8;
	var toString$5 = toString$b;
	var whitespaces = whitespaces$1;

	var whitespace = '[' + whitespaces + ']';
	var ltrim = RegExp('^' + whitespace + whitespace + '*');
	var rtrim = RegExp(whitespace + whitespace + '*$');

	// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
	var createMethod$2 = function (TYPE) {
	  return function ($this) {
	    var string = toString$5(requireObjectCoercible$4($this));
	    if (TYPE & 1) string = string.replace(ltrim, '');
	    if (TYPE & 2) string = string.replace(rtrim, '');
	    return string;
	  };
	};

	var stringTrim = {
	  // `String.prototype.{ trimLeft, trimStart }` methods
	  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
	  start: createMethod$2(1),
	  // `String.prototype.{ trimRight, trimEnd }` methods
	  // https://tc39.es/ecma262/#sec-string.prototype.trimend
	  end: createMethod$2(2),
	  // `String.prototype.trim` method
	  // https://tc39.es/ecma262/#sec-string.prototype.trim
	  trim: createMethod$2(3)
	};

	var DESCRIPTORS$6 = descriptors;
	var global$a = global$B;
	var isForced$1 = isForced_1;
	var redefine$4 = redefine$b.exports;
	var has$3 = has$f;
	var classof$4 = classofRaw$1;
	var inheritIfRequired$2 = inheritIfRequired$3;
	var isSymbol$1 = isSymbol$6;
	var toPrimitive = toPrimitive$2;
	var fails$g = fails$z;
	var create$2 = objectCreate;
	var getOwnPropertyNames$2 = objectGetOwnPropertyNames.f;
	var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	var defineProperty$6 = objectDefineProperty.f;
	var trim = stringTrim.trim;

	var NUMBER = 'Number';
	var NativeNumber = global$a[NUMBER];
	var NumberPrototype = NativeNumber.prototype;

	// Opera ~12 has broken Object#toString
	var BROKEN_CLASSOF = classof$4(create$2(NumberPrototype)) == NUMBER;

	// `ToNumber` abstract operation
	// https://tc39.es/ecma262/#sec-tonumber
	var toNumber = function (argument) {
	  if (isSymbol$1(argument)) throw TypeError('Cannot convert a Symbol value to a number');
	  var it = toPrimitive(argument, 'number');
	  var first, third, radix, maxCode, digits, length, index, code;
	  if (typeof it == 'string' && it.length > 2) {
	    it = trim(it);
	    first = it.charCodeAt(0);
	    if (first === 43 || first === 45) {
	      third = it.charCodeAt(2);
	      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if (first === 48) {
	      switch (it.charCodeAt(1)) {
	        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
	        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
	        default: return +it;
	      }
	      digits = it.slice(2);
	      length = digits.length;
	      for (index = 0; index < length; index++) {
	        code = digits.charCodeAt(index);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if (code < 48 || code > maxCode) return NaN;
	      } return parseInt(digits, radix);
	    }
	  } return +it;
	};

	// `Number` constructor
	// https://tc39.es/ecma262/#sec-number-constructor
	if (isForced$1(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
	  var NumberWrapper = function Number(value) {
	    var it = arguments.length < 1 ? 0 : value;
	    var dummy = this;
	    return dummy instanceof NumberWrapper
	      // check on 1..constructor(foo) case
	      && (BROKEN_CLASSOF ? fails$g(function () { NumberPrototype.valueOf.call(dummy); }) : classof$4(dummy) != NUMBER)
	        ? inheritIfRequired$2(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
	  };
	  for (var keys$1 = DESCRIPTORS$6 ? getOwnPropertyNames$2(NativeNumber) : (
	    // ES3:
	    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	    // ES2015 (in case, if modules with ES2015 Number statics required before):
	    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
	    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,' +
	    // ESNext
	    'fromString,range'
	  ).split(','), j$1 = 0, key$1; keys$1.length > j$1; j$1++) {
	    if (has$3(NativeNumber, key$1 = keys$1[j$1]) && !has$3(NumberWrapper, key$1)) {
	      defineProperty$6(NumberWrapper, key$1, getOwnPropertyDescriptor(NativeNumber, key$1));
	    }
	  }
	  NumberWrapper.prototype = NumberPrototype;
	  NumberPrototype.constructor = NumberWrapper;
	  redefine$4(global$a, NUMBER, NumberWrapper);
	}

	var DESCRIPTORS$5 = descriptors;
	var objectKeys$1 = objectKeys$4;
	var toIndexedObject$1 = toIndexedObject$c;
	var propertyIsEnumerable = objectPropertyIsEnumerable.f;

	// `Object.{ entries, values }` methods implementation
	var createMethod$1 = function (TO_ENTRIES) {
	  return function (it) {
	    var O = toIndexedObject$1(it);
	    var keys = objectKeys$1(O);
	    var length = keys.length;
	    var i = 0;
	    var result = [];
	    var key;
	    while (length > i) {
	      key = keys[i++];
	      if (!DESCRIPTORS$5 || propertyIsEnumerable.call(O, key)) {
	        result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
	      }
	    }
	    return result;
	  };
	};

	var objectToArray = {
	  // `Object.entries` method
	  // https://tc39.es/ecma262/#sec-object.entries
	  entries: createMethod$1(true),
	  // `Object.values` method
	  // https://tc39.es/ecma262/#sec-object.values
	  values: createMethod$1(false)
	};

	var $$7 = _export;
	var $entries = objectToArray.entries;

	// `Object.entries` method
	// https://tc39.es/ecma262/#sec-object.entries
	$$7({ target: 'Object', stat: true }, {
	  entries: function entries(O) {
	    return $entries(O);
	  }
	});

	Object.defineProperty(browser$3, '__esModule', {
	  value: true
	});
	var _typeof = _typeof$1.exports;
	var _slicedToArray$1 = slicedToArray.exports;
	var _toConsumableArray$2 = toConsumableArray.exports;
	var _createClass$2 = createClass.exports;
	var _classCallCheck$2 = classCallCheck.exports;
	var _inherits$2 = inherits.exports;
	var _possibleConstructorReturn$2 = possibleConstructorReturn.exports;
	var _getPrototypeOf$2 = getPrototypeOf$2.exports;

	function _interopDefaultLegacy$3(e) {
	  return e && _typeof$2(e) === 'object' && 'default' in e ? e : {
	    'default': e
	  };
	}

	var _typeof__default = /*#__PURE__*/_interopDefaultLegacy$3(_typeof);

	var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy$3(_slicedToArray$1);

	var _toConsumableArray__default$1 = /*#__PURE__*/_interopDefaultLegacy$3(_toConsumableArray$2);

	var _createClass__default$2 = /*#__PURE__*/_interopDefaultLegacy$3(_createClass$2);

	var _classCallCheck__default$2 = /*#__PURE__*/_interopDefaultLegacy$3(_classCallCheck$2);

	var _inherits__default$2 = /*#__PURE__*/_interopDefaultLegacy$3(_inherits$2);

	var _possibleConstructorReturn__default$2 = /*#__PURE__*/_interopDefaultLegacy$3(_possibleConstructorReturn$2);

	var _getPrototypeOf__default$2 = /*#__PURE__*/_interopDefaultLegacy$3(_getPrototypeOf$2);

	var custom = function custom() {
	  for (var _len = arguments.length, checks = new Array(_len), _key = 0; _key < _len; _key++) {
	    checks[_key] = arguments[_key];
	  }

	  return {
	    checks: checks
	  };
	};

	var type = function type() {
	  for (var _len = arguments.length, checks = new Array(_len), _key = 0; _key < _len; _key++) {
	    checks[_key] = arguments[_key];
	  }

	  return custom(function (value) {
	    var isValid = false;
	    var expectedTypes = [];

	    for (var _i = 0, _checks = checks; _i < _checks.length; _i++) {
	      var _type = _checks[_i];

	      if (typeof _type === "string") {
	        isValid = isValid || _typeof__default["default"](value) === _type;
	        expectedTypes.push("of type ".concat(_type));
	        continue;
	      }

	      isValid = isValid || value instanceof _type;
	      expectedTypes.push("an instance of ".concat(_type.name));
	    }

	    return [isValid, expectedTypes];
	  });
	};

	var literal = function literal() {
	  for (var _len = arguments.length, checks = new Array(_len), _key = 0; _key < _len; _key++) {
	    checks[_key] = arguments[_key];
	  }

	  return custom(function (value) {
	    var isValid = false;
	    var expectedTypes = [];

	    for (var _i = 0, _checks = checks; _i < _checks.length; _i++) {
	      var type = _checks[_i];
	      isValid = isValid || value === type;
	      expectedTypes.push(typeof type === "string" ? "\"".concat(type, "\"") : "".concat(type));
	    }

	    return [isValid, expectedTypes];
	  });
	};

	function _createSuper$a(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct$b();

	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf__default$2["default"](Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf__default$2["default"](this).constructor;

	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return _possibleConstructorReturn__default$2["default"](this, result);
	  };
	}

	function _isNativeReflectConstruct$b() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _createForOfIteratorHelper$2$1(o, allowArrayLike) {
	  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

	  if (!it) {
	    if (Array.isArray(o) || (it = _unsupportedIterableToArray$2$1(o)) || allowArrayLike && o && typeof o.length === "number") {
	      if (it) o = it;
	      var i = 0;

	      var F = function F() {};

	      return {
	        s: F,
	        n: function n() {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        },
	        e: function e(_e) {
	          throw _e;
	        },
	        f: F
	      };
	    }

	    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }

	  var normalCompletion = true,
	      didErr = false,
	      err;
	  return {
	    s: function s() {
	      it = it.call(o);
	    },
	    n: function n() {
	      var step = it.next();
	      normalCompletion = step.done;
	      return step;
	    },
	    e: function e(_e2) {
	      didErr = true;
	      err = _e2;
	    },
	    f: function f() {
	      try {
	        if (!normalCompletion && it.return != null) it.return();
	      } finally {
	        if (didErr) throw err;
	      }
	    }
	  };
	}

	function _unsupportedIterableToArray$2$1(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray$2$1(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2$1(o, minLen);
	}

	function _arrayLikeToArray$2$1(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	var runtimeTypeValidation = function runtimeTypeValidation(rules, values) {
	  if (values.length > rules.length) {
	    throw new Error("Expected at most ".concat(rules.length, " argument(s), but got ").concat(values.length));
	  }

	  while (values.length < rules.length) {
	    values.push(undefined);
	  }

	  var _iterator = _createForOfIteratorHelper$2$1(values.entries()),
	      _step;

	  try {
	    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	      var _step$value = _slicedToArray__default["default"](_step.value, 2),
	          index = _step$value[0],
	          value = _step$value[1];

	      var _validateValue = validateValue(rules[index], value),
	          _validateValue2 = _slicedToArray__default["default"](_validateValue, 4),
	          isValid = _validateValue2[0],
	          received = _validateValue2[1],
	          expected = _validateValue2[2],
	          delimeter = _validateValue2[3];

	      if (isValid) {
	        continue;
	      }

	      var argumentIndex = index + 1;
	      throw new Error("Argument ".concat(argumentIndex, " is expected to be ").concat(expected).concat(delimeter, " but got ").concat(received));
	    }
	  } catch (err) {
	    _iterator.e(err);
	  } finally {
	    _iterator.f();
	  }
	};

	var stringifyReceivedType = function stringifyReceivedType(value) {
	  var _value$constructor;

	  var receivedType;
	  var types = ["undefined", "boolean", "number", "bigint", "string"];

	  if (types.includes(_typeof__default["default"](value))) {
	    receivedType = typeof value === "string" ? "\"".concat(value, "\"") : "".concat(value);
	  }

	  if (_typeof__default["default"](value) === "object" && (value === null || value === void 0 ? void 0 : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name) !== "Object") {
	    var _value$constructor2;

	    receivedType = value === null ? "null" : "instance of ".concat(value === null || value === void 0 ? void 0 : (_value$constructor2 = value.constructor) === null || _value$constructor2 === void 0 ? void 0 : _value$constructor2.name);
	  }

	  if (!receivedType) {
	    receivedType = _typeof__default["default"](value);
	  }

	  return receivedType;
	};
	/* eslint-disable @typescript-eslint/no-explicit-any */


	var validateConstructorTypes = function validateConstructorTypes() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  var finalRuleSet = convertRuleArguments(args);
	  return function (ctor) {
	    return /*#__PURE__*/function (_ctor) {
	      _inherits__default$2["default"](_class, _ctor);

	      var _super = _createSuper$a(_class);

	      function _class() {
	        _classCallCheck__default$2["default"](this, _class);

	        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	          args[_key2] = arguments[_key2];
	        }

	        runtimeTypeValidation(finalRuleSet, args);
	        return _super.call.apply(_super, [this].concat(args));
	      }

	      return _createClass__default$2["default"](_class);
	    }(ctor);
	  };
	};
	/* eslint-enable @typescript-eslint/no-explicit-any */


	var validateTypes = function validateTypes() {
	  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	    args[_key3] = arguments[_key3];
	  }

	  var finalRuleSet = convertRuleArguments(args);
	  return function (target, propertyKey, descriptor) {
	    if (typeof descriptor.value !== "function") {
	      throw new Error("The validateTypes decorator can only be applied to methods");
	    }

	    var originalMethod = descriptor.value;

	    descriptor.value = function () {
	      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	        args[_key4] = arguments[_key4];
	      }

	      runtimeTypeValidation(finalRuleSet, args);
	      return originalMethod.apply(this, args);
	    };
	  };
	};

	var validateTypesAsync = function validateTypesAsync() {
	  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	    args[_key5] = arguments[_key5];
	  }

	  var finalRuleSet = convertRuleArguments(args);
	  return function (target, propertyKey, descriptor) {
	    if (typeof descriptor.value !== "function") {
	      throw new Error("The validateTypesAsync decorator can only be applied to methods");
	    }

	    var originalMethod = descriptor.value;

	    descriptor.value = function () {
	      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	        args[_key6] = arguments[_key6];
	      }

	      try {
	        runtimeTypeValidation(finalRuleSet, args);
	      } catch (e) {
	        return Promise.reject(e);
	      }

	      return originalMethod.apply(this, args);
	    };
	  };
	};

	var convertRuleArguments = function convertRuleArguments(args) {
	  var finalRuleDefinitionSet = [];

	  var _iterator2 = _createForOfIteratorHelper$2$1(args),
	      _step2;

	  try {
	    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	      var arg = _step2.value;
	      finalRuleDefinitionSet.push(convertRuleArgument(arg));
	    }
	  } catch (err) {
	    _iterator2.e(err);
	  } finally {
	    _iterator2.f();
	  }

	  return finalRuleDefinitionSet;
	};

	var convertRuleArgument = function convertRuleArgument(arg) {
	  var finalArgumentRuleDefinitions = [];
	  var declaredRules = Array.isArray(arg) ? arg : [arg];

	  var _iterator3 = _createForOfIteratorHelper$2$1(declaredRules),
	      _step3;

	  try {
	    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	      var rule = _step3.value;

	      if (typeof rule === "string" || typeof rule === "function") {
	        finalArgumentRuleDefinitions.push(type(rule));
	        continue;
	      }

	      finalArgumentRuleDefinitions.push(rule);
	    }
	  } catch (err) {
	    _iterator3.e(err);
	  } finally {
	    _iterator3.f();
	  }

	  return finalArgumentRuleDefinitions;
	};

	var validateValue = function validateValue(ruleDefinitions, value) {
	  var expectedTypes = [];
	  var customReceivedType;
	  var isValid = false;

	  var _iterator4 = _createForOfIteratorHelper$2$1(ruleDefinitions),
	      _step4;

	  try {
	    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
	      var definition = _step4.value;

	      var _iterator5 = _createForOfIteratorHelper$2$1(definition.checks),
	          _step5;

	      try {
	        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
	          var check = _step5.value;

	          var _check = check(value),
	              _check2 = _slicedToArray__default["default"](_check, 3),
	              checkPassed = _check2[0],
	              typeDescription = _check2[1],
	              _receivedType = _check2[2];

	          isValid = isValid || checkPassed;

	          if (!customReceivedType && _receivedType) {
	            customReceivedType = _receivedType;
	          }

	          if (typeDescription) {
	            expectedTypes = typeof typeDescription === "string" ? [].concat(_toConsumableArray__default$1["default"](expectedTypes), [typeDescription]) : [].concat(_toConsumableArray__default$1["default"](expectedTypes), _toConsumableArray__default$1["default"](typeDescription));
	          }
	        }
	      } catch (err) {
	        _iterator5.e(err);
	      } finally {
	        _iterator5.f();
	      }
	    }
	  } catch (err) {
	    _iterator4.e(err);
	  } finally {
	    _iterator4.f();
	  }

	  if (isValid) {
	    return [true];
	  }

	  var receivedType = customReceivedType || stringifyReceivedType(value);
	  var lastIndex = expectedTypes.length - 1;
	  var expectedTypesString = lastIndex > 0 ? "".concat(expectedTypes.slice(0, lastIndex).join(", "), " or ").concat(expectedTypes[lastIndex]) : expectedTypes.join(", ");
	  return [false, receivedType, expectedTypesString, lastIndex > 1 ? ";" : ","];
	};

	function _createForOfIteratorHelper$1$1(o, allowArrayLike) {
	  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

	  if (!it) {
	    if (Array.isArray(o) || (it = _unsupportedIterableToArray$1$1(o)) || allowArrayLike && o && typeof o.length === "number") {
	      if (it) o = it;
	      var i = 0;

	      var F = function F() {};

	      return {
	        s: F,
	        n: function n() {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        },
	        e: function e(_e) {
	          throw _e;
	        },
	        f: F
	      };
	    }

	    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }

	  var normalCompletion = true,
	      didErr = false,
	      err;
	  return {
	    s: function s() {
	      it = it.call(o);
	    },
	    n: function n() {
	      var step = it.next();
	      normalCompletion = step.done;
	      return step;
	    },
	    e: function e(_e2) {
	      didErr = true;
	      err = _e2;
	    },
	    f: function f() {
	      try {
	        if (!normalCompletion && it.return != null) it.return();
	      } finally {
	        if (didErr) throw err;
	      }
	    }
	  };
	}

	function _unsupportedIterableToArray$1$1(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray$1$1(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1$1(o, minLen);
	}

	function _arrayLikeToArray$1$1(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	var nonEmptyArray = function nonEmptyArray(name, rules) {
	  return custom(function (value) {
	    if (!Array.isArray(value) || value.length < 1) {
	      return [false, "a non-empty array of ".concat(name)];
	    }

	    var _iterator = _createForOfIteratorHelper$1$1(value.entries()),
	        _step;

	    try {
	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
	        var _step$value = _slicedToArray__default["default"](_step.value, 2),
	            key = _step$value[0],
	            valueOfKey = _step$value[1];

	        var _validateValue = validateValue(convertRuleArgument(rules), valueOfKey),
	            _validateValue2 = _slicedToArray__default["default"](_validateValue, 3),
	            isValid = _validateValue2[0],
	            received = _validateValue2[1],
	            expected = _validateValue2[2];

	        if (!isValid) {
	          return [false, "a valid non-empty array of ".concat(name, " (index ").concat(key, " should be ").concat(expected, ")"), "malformed array of ".concat(name, " (index ").concat(key, " is ").concat(received, ")")];
	        }
	      }
	    } catch (err) {
	      _iterator.e(err);
	    } finally {
	      _iterator.f();
	    }

	    return [true];
	  });
	};

	var nonEmptyString = custom(function (value) {
	  return [typeof value === "string" && value.length > 0, "a non-empty string"];
	});
	var nonNegativeInteger = custom(function (value) {
	  return [typeof value === "number" && Number.isInteger(value) && value >= 0, "a non-negative integer"];
	});
	var pureObject = custom(function (value) {
	  return [_typeof__default["default"](value) === "object" && value !== null && !Array.isArray(value), "a pure object (non-null and non-array)"];
	});

	var objectSchema = function objectSchema(name, schema) {
	  return custom(function (object) {
	    if (_typeof__default["default"](object) !== "object" || object === null || Array.isArray(object)) {
	      return [false, "valid ".concat(name, " (should be a pure object)")];
	    }

	    for (var _i = 0, _Object$entries = Object.entries(schema); _i < _Object$entries.length; _i++) {
	      var _Object$entries$_i = _slicedToArray__default["default"](_Object$entries[_i], 2),
	          key = _Object$entries$_i[0],
	          rules = _Object$entries$_i[1];

	      var _validateValue = validateValue(convertRuleArgument(rules), object[key]),
	          _validateValue2 = _slicedToArray__default["default"](_validateValue, 3),
	          isValid = _validateValue2[0],
	          received = _validateValue2[1],
	          expected = _validateValue2[2];

	      if (!isValid) {
	        return [false, "valid ".concat(name, " (key \"").concat(key, "\" should be ").concat(expected, ")"), "malformed ".concat(name, " (key \"").concat(key, "\" is ").concat(received, ")")];
	      }
	    }

	    return [true];
	  });
	};

	function _createForOfIteratorHelper$6(o, allowArrayLike) {
	  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

	  if (!it) {
	    if (Array.isArray(o) || (it = _unsupportedIterableToArray$7(o)) || allowArrayLike && o && typeof o.length === "number") {
	      if (it) o = it;
	      var i = 0;

	      var F = function F() {};

	      return {
	        s: F,
	        n: function n() {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        },
	        e: function e(_e) {
	          throw _e;
	        },
	        f: F
	      };
	    }

	    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }

	  var normalCompletion = true,
	      didErr = false,
	      err;
	  return {
	    s: function s() {
	      it = it.call(o);
	    },
	    n: function n() {
	      var step = it.next();
	      normalCompletion = step.done;
	      return step;
	    },
	    e: function e(_e2) {
	      didErr = true;
	      err = _e2;
	    },
	    f: function f() {
	      try {
	        if (!normalCompletion && it.return != null) it.return();
	      } finally {
	        if (didErr) throw err;
	      }
	    }
	  };
	}

	function _unsupportedIterableToArray$7(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray$7(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$7(o, minLen);
	}

	function _arrayLikeToArray$7(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	var array = function array(name, rules) {
	  return custom(function (value) {
	    if (!Array.isArray(value)) {
	      return [false, "an array of ".concat(name)];
	    }

	    var _iterator = _createForOfIteratorHelper$6(value.entries()),
	        _step;

	    try {
	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
	        var _step$value = _slicedToArray__default["default"](_step.value, 2),
	            key = _step$value[0],
	            valueOfKey = _step$value[1];

	        var _validateValue = validateValue(convertRuleArgument(rules), valueOfKey),
	            _validateValue2 = _slicedToArray__default["default"](_validateValue, 3),
	            isValid = _validateValue2[0],
	            received = _validateValue2[1],
	            expected = _validateValue2[2];

	        if (!isValid) {
	          return [false, "a valid array of ".concat(name, " (index ").concat(key, " should be ").concat(expected, ")"), "malformed array of ".concat(name, " (index ").concat(key, " is ").concat(received, ")")];
	        }
	      }
	    } catch (err) {
	      _iterator.e(err);
	    } finally {
	      _iterator.f();
	    }

	    return [true];
	  });
	};

	browser$3.array = array;
	var custom_1 = browser$3.custom = custom;
	var literal_1 = browser$3.literal = literal;
	browser$3.nonEmptyArray = nonEmptyArray;
	var nonEmptyString_1 = browser$3.nonEmptyString = nonEmptyString;
	var nonNegativeInteger_1 = browser$3.nonNegativeInteger = nonNegativeInteger;
	var objectSchema_1 = browser$3.objectSchema = objectSchema;
	var pureObject_1 = browser$3.pureObject = pureObject;
	browser$3.runtimeTypeValidation = runtimeTypeValidation;
	browser$3.stringifyReceivedType = stringifyReceivedType;
	browser$3.type = type;
	browser$3.validateConstructorTypes = validateConstructorTypes;
	var validateTypes_1 = browser$3.validateTypes = validateTypes;
	var validateTypesAsync_1 = browser$3.validateTypesAsync = validateTypesAsync;

	var browser$2 = {};

	var asyncToGenerator = {exports: {}};

	(function (module) {
	  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
	    try {
	      var info = gen[key](arg);
	      var value = info.value;
	    } catch (error) {
	      reject(error);
	      return;
	    }

	    if (info.done) {
	      resolve(value);
	    } else {
	      Promise.resolve(value).then(_next, _throw);
	    }
	  }

	  function _asyncToGenerator(fn) {
	    return function () {
	      var self = this,
	          args = arguments;
	      return new Promise(function (resolve, reject) {
	        var gen = fn.apply(self, args);

	        function _next(value) {
	          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
	        }

	        function _throw(err) {
	          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
	        }

	        _next(undefined);
	      });
	    };
	  }

	  module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(asyncToGenerator);

	var get$1 = {exports: {}};

	var superPropBase = {exports: {}};

	(function (module) {
	  var getPrototypeOf = getPrototypeOf$2.exports;

	  function _superPropBase(object, property) {
	    while (!Object.prototype.hasOwnProperty.call(object, property)) {
	      object = getPrototypeOf(object);
	      if (object === null) break;
	    }

	    return object;
	  }

	  module.exports = _superPropBase, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(superPropBase);

	(function (module) {
	  var superPropBase$1 = superPropBase.exports;

	  function _get() {
	    if (typeof Reflect !== "undefined" && Reflect.get) {
	      module.exports = _get = Reflect.get, module.exports.__esModule = true, module.exports["default"] = module.exports;
	    } else {
	      module.exports = _get = function _get(target, property, receiver) {
	        var base = superPropBase$1(target, property);
	        if (!base) return;
	        var desc = Object.getOwnPropertyDescriptor(base, property);

	        if (desc.get) {
	          return desc.get.call(arguments.length < 3 ? target : receiver);
	        }

	        return desc.value;
	      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
	    }

	    return _get.apply(this, arguments);
	  }

	  module.exports = _get, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(get$1);

	var defineProperty$5 = {exports: {}};

	(function (module) {
	  function _defineProperty(obj, key, value) {
	    if (key in obj) {
	      Object.defineProperty(obj, key, {
	        value: value,
	        enumerable: true,
	        configurable: true,
	        writable: true
	      });
	    } else {
	      obj[key] = value;
	    }

	    return obj;
	  }

	  module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(defineProperty$5);

	var require$$9 = /*@__PURE__*/getAugmentedNamespace(regenerator);

	var redefine$3 = redefine$b.exports;
	var anObject$4 = anObject$j;
	var $toString = toString$b;
	var fails$f = fails$z;
	var flags = regexpFlags$1;

	var TO_STRING = 'toString';
	var RegExpPrototype$1 = RegExp.prototype;
	var nativeToString = RegExpPrototype$1[TO_STRING];

	var NOT_GENERIC = fails$f(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
	// FF44- RegExp#toString has a wrong name
	var INCORRECT_NAME = nativeToString.name != TO_STRING;

	// `RegExp.prototype.toString` method
	// https://tc39.es/ecma262/#sec-regexp.prototype.tostring
	if (NOT_GENERIC || INCORRECT_NAME) {
	  redefine$3(RegExp.prototype, TO_STRING, function toString() {
	    var R = anObject$4(this);
	    var p = $toString(R.source);
	    var rf = R.flags;
	    var f = $toString(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype$1) ? flags.call(R) : rf);
	    return '/' + p + '/' + f;
	  }, { unsafe: true });
	}

	var loglevel = {exports: {}};

	(function (module) {
	  (function (root, definition) {

	    if (module.exports) {
	      module.exports = definition();
	    } else {
	      root.log = definition();
	    }
	  })(commonjsGlobal, function () {

	    var noop = function noop() {};

	    var undefinedType = "undefined";
	    var isIE = (typeof window === "undefined" ? "undefined" : _typeof$2(window)) !== undefinedType && _typeof$2(window.navigator) !== undefinedType && /Trident\/|MSIE /.test(window.navigator.userAgent);
	    var logMethods = ["trace", "debug", "info", "warn", "error"]; // Cross-browser bind equivalent that works at least back to IE6

	    function bindMethod(obj, methodName) {
	      var method = obj[methodName];

	      if (typeof method.bind === 'function') {
	        return method.bind(obj);
	      } else {
	        try {
	          return Function.prototype.bind.call(method, obj);
	        } catch (e) {
	          // Missing bind shim or IE8 + Modernizr, fallback to wrapping
	          return function () {
	            return Function.prototype.apply.apply(method, [obj, arguments]);
	          };
	        }
	      }
	    } // Trace() doesn't print the message in IE, so for that case we need to wrap it


	    function traceForIE() {
	      if (console.log) {
	        if (console.log.apply) {
	          console.log.apply(console, arguments);
	        } else {
	          // In old IE, native console methods themselves don't have apply().
	          Function.prototype.apply.apply(console.log, [console, arguments]);
	        }
	      }

	      if (console.trace) console.trace();
	    } // Build the best logging method possible for this env
	    // Wherever possible we want to bind, not wrap, to preserve stack traces


	    function realMethod(methodName) {
	      if (methodName === 'debug') {
	        methodName = 'log';
	      }

	      if ((typeof console === "undefined" ? "undefined" : _typeof$2(console)) === undefinedType) {
	        return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives
	      } else if (methodName === 'trace' && isIE) {
	        return traceForIE;
	      } else if (console[methodName] !== undefined) {
	        return bindMethod(console, methodName);
	      } else if (console.log !== undefined) {
	        return bindMethod(console, 'log');
	      } else {
	        return noop;
	      }
	    } // These private functions always need `this` to be set properly


	    function replaceLoggingMethods(level, loggerName) {
	      /*jshint validthis:true */
	      for (var i = 0; i < logMethods.length; i++) {
	        var methodName = logMethods[i];
	        this[methodName] = i < level ? noop : this.methodFactory(methodName, level, loggerName);
	      } // Define log.log as an alias for log.debug


	      this.log = this.debug;
	    } // In old IE versions, the console isn't present until you first open it.
	    // We build realMethod() replacements here that regenerate logging methods


	    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
	      return function () {
	        if ((typeof console === "undefined" ? "undefined" : _typeof$2(console)) !== undefinedType) {
	          replaceLoggingMethods.call(this, level, loggerName);
	          this[methodName].apply(this, arguments);
	        }
	      };
	    } // By default, we use closely bound real methods wherever possible, and
	    // otherwise we wait for a console to appear, and then try again.


	    function defaultMethodFactory(methodName, level, loggerName) {
	      /*jshint validthis:true */
	      return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);
	    }

	    function Logger(name, defaultLevel, factory) {
	      var self = this;
	      var currentLevel;
	      defaultLevel = defaultLevel == null ? "WARN" : defaultLevel;
	      var storageKey = "loglevel";

	      if (typeof name === "string") {
	        storageKey += ":" + name;
	      } else if (_typeof$2(name) === "symbol") {
	        storageKey = undefined;
	      }

	      function persistLevelIfPossible(levelNum) {
	        var levelName = (logMethods[levelNum] || 'silent').toUpperCase();
	        if ((typeof window === "undefined" ? "undefined" : _typeof$2(window)) === undefinedType || !storageKey) return; // Use localStorage if available

	        try {
	          window.localStorage[storageKey] = levelName;
	          return;
	        } catch (ignore) {} // Use session cookie as fallback


	        try {
	          window.document.cookie = encodeURIComponent(storageKey) + "=" + levelName + ";";
	        } catch (ignore) {}
	      }

	      function getPersistedLevel() {
	        var storedLevel;
	        if ((typeof window === "undefined" ? "undefined" : _typeof$2(window)) === undefinedType || !storageKey) return;

	        try {
	          storedLevel = window.localStorage[storageKey];
	        } catch (ignore) {} // Fallback to cookies if local storage gives us nothing


	        if (_typeof$2(storedLevel) === undefinedType) {
	          try {
	            var cookie = window.document.cookie;
	            var location = cookie.indexOf(encodeURIComponent(storageKey) + "=");

	            if (location !== -1) {
	              storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
	            }
	          } catch (ignore) {}
	        } // If the stored level is not valid, treat it as if nothing was stored.


	        if (self.levels[storedLevel] === undefined) {
	          storedLevel = undefined;
	        }

	        return storedLevel;
	      }

	      function clearPersistedLevel() {
	        if ((typeof window === "undefined" ? "undefined" : _typeof$2(window)) === undefinedType || !storageKey) return; // Use localStorage if available

	        try {
	          window.localStorage.removeItem(storageKey);
	          return;
	        } catch (ignore) {} // Use session cookie as fallback


	        try {
	          window.document.cookie = encodeURIComponent(storageKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
	        } catch (ignore) {}
	      }
	      /*
	       *
	       * Public logger API - see https://github.com/pimterry/loglevel for details
	       *
	       */


	      self.name = name;
	      self.levels = {
	        "TRACE": 0,
	        "DEBUG": 1,
	        "INFO": 2,
	        "WARN": 3,
	        "ERROR": 4,
	        "SILENT": 5
	      };
	      self.methodFactory = factory || defaultMethodFactory;

	      self.getLevel = function () {
	        return currentLevel;
	      };

	      self.setLevel = function (level, persist) {
	        if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
	          level = self.levels[level.toUpperCase()];
	        }

	        if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
	          currentLevel = level;

	          if (persist !== false) {
	            // defaults to true
	            persistLevelIfPossible(level);
	          }

	          replaceLoggingMethods.call(self, level, name);

	          if ((typeof console === "undefined" ? "undefined" : _typeof$2(console)) === undefinedType && level < self.levels.SILENT) {
	            return "No console available for logging";
	          }
	        } else {
	          throw "log.setLevel() called with invalid level: " + level;
	        }
	      };

	      self.setDefaultLevel = function (level) {
	        defaultLevel = level;

	        if (!getPersistedLevel()) {
	          self.setLevel(level, false);
	        }
	      };

	      self.resetLevel = function () {
	        self.setLevel(defaultLevel, false);
	        clearPersistedLevel();
	      };

	      self.enableAll = function (persist) {
	        self.setLevel(self.levels.TRACE, persist);
	      };

	      self.disableAll = function (persist) {
	        self.setLevel(self.levels.SILENT, persist);
	      }; // Initialize with the right level


	      var initialLevel = getPersistedLevel();

	      if (initialLevel == null) {
	        initialLevel = defaultLevel;
	      }

	      self.setLevel(initialLevel, false);
	    }
	    /*
	     *
	     * Top-level API
	     *
	     */


	    var defaultLogger = new Logger();
	    var _loggersByName = {};

	    defaultLogger.getLogger = function getLogger(name) {
	      if (_typeof$2(name) !== "symbol" && typeof name !== "string" || name === "") {
	        throw new TypeError("You must supply a name when creating a logger.");
	      }

	      var logger = _loggersByName[name];

	      if (!logger) {
	        logger = _loggersByName[name] = new Logger(name, defaultLogger.getLevel(), defaultLogger.methodFactory);
	      }

	      return logger;
	    }; // Grab the current global log variable in case of overwrite


	    var _log = (typeof window === "undefined" ? "undefined" : _typeof$2(window)) !== undefinedType ? window.log : undefined;

	    defaultLogger.noConflict = function () {
	      if ((typeof window === "undefined" ? "undefined" : _typeof$2(window)) !== undefinedType && window.log === defaultLogger) {
	        window.log = _log;
	      }

	      return defaultLogger;
	    };

	    defaultLogger.getLoggers = function getLoggers() {
	      return _loggersByName;
	    }; // ES6 default export, for compatibility


	    defaultLogger['default'] = defaultLogger;
	    return defaultLogger;
	  });
	})(loglevel);

	var internalMetadata = {exports: {}};

	var fails$e = fails$z;

	var freezing = !fails$e(function () {
	  // eslint-disable-next-line es/no-object-isextensible, es/no-object-preventextensions -- required for testing
	  return Object.isExtensible(Object.preventExtensions({}));
	});

	var $$6 = _export;
	var hiddenKeys = hiddenKeys$6;
	var isObject$4 = isObject$n;
	var has$2 = has$f;
	var defineProperty$4 = objectDefineProperty.f;
	var getOwnPropertyNamesModule = objectGetOwnPropertyNames;
	var getOwnPropertyNamesExternalModule = objectGetOwnPropertyNamesExternal;
	var uid$1 = uid$5;
	var FREEZING = freezing;

	var REQUIRED = false;
	var METADATA = uid$1('meta');
	var id = 0;

	// eslint-disable-next-line es/no-object-isextensible -- safe
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};

	var setMetadata = function (it) {
	  defineProperty$4(it, METADATA, { value: {
	    objectID: 'O' + id++, // object ID
	    weakData: {}          // weak collections IDs
	  } });
	};

	var fastKey$1 = function (it, create) {
	  // return a primitive with prefix
	  if (!isObject$4(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has$2(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMetadata(it);
	  // return object ID
	  } return it[METADATA].objectID;
	};

	var getWeakData = function (it, create) {
	  if (!has$2(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMetadata(it);
	  // return the store of weak collections IDs
	  } return it[METADATA].weakData;
	};

	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (FREEZING && REQUIRED && isExtensible(it) && !has$2(it, METADATA)) setMetadata(it);
	  return it;
	};

	var enable = function () {
	  meta.enable = function () { /* empty */ };
	  REQUIRED = true;
	  var getOwnPropertyNames = getOwnPropertyNamesModule.f;
	  var splice = [].splice;
	  var test = {};
	  test[METADATA] = 1;

	  // prevent exposing of metadata key
	  if (getOwnPropertyNames(test).length) {
	    getOwnPropertyNamesModule.f = function (it) {
	      var result = getOwnPropertyNames(it);
	      for (var i = 0, length = result.length; i < length; i++) {
	        if (result[i] === METADATA) {
	          splice.call(result, i, 1);
	          break;
	        }
	      } return result;
	    };

	    $$6({ target: 'Object', stat: true, forced: true }, {
	      getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
	    });
	  }
	};

	var meta = internalMetadata.exports = {
	  enable: enable,
	  fastKey: fastKey$1,
	  getWeakData: getWeakData,
	  onFreeze: onFreeze
	};

	hiddenKeys[METADATA] = true;

	var $$5 = _export;
	var global$9 = global$B;
	var isForced = isForced_1;
	var redefine$2 = redefine$b.exports;
	var InternalMetadataModule = internalMetadata.exports;
	var iterate$1 = iterate$3;
	var anInstance$3 = anInstance$5;
	var isObject$3 = isObject$n;
	var fails$d = fails$z;
	var checkCorrectnessOfIteration$1 = checkCorrectnessOfIteration$4;
	var setToStringTag$1 = setToStringTag$7;
	var inheritIfRequired$1 = inheritIfRequired$3;

	var collection$2 = function (CONSTRUCTOR_NAME, wrapper, common) {
	  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
	  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var NativeConstructor = global$9[CONSTRUCTOR_NAME];
	  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
	  var Constructor = NativeConstructor;
	  var exported = {};

	  var fixMethod = function (KEY) {
	    var nativeMethod = NativePrototype[KEY];
	    redefine$2(NativePrototype, KEY,
	      KEY == 'add' ? function add(value) {
	        nativeMethod.call(this, value === 0 ? 0 : value);
	        return this;
	      } : KEY == 'delete' ? function (key) {
	        return IS_WEAK && !isObject$3(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
	      } : KEY == 'get' ? function get(key) {
	        return IS_WEAK && !isObject$3(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);
	      } : KEY == 'has' ? function has(key) {
	        return IS_WEAK && !isObject$3(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
	      } : function set(key, value) {
	        nativeMethod.call(this, key === 0 ? 0 : key, value);
	        return this;
	      }
	    );
	  };

	  var REPLACE = isForced(
	    CONSTRUCTOR_NAME,
	    typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails$d(function () {
	      new NativeConstructor().entries().next();
	    }))
	  );

	  if (REPLACE) {
	    // create collection constructor
	    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
	    InternalMetadataModule.enable();
	  } else if (isForced(CONSTRUCTOR_NAME, true)) {
	    var instance = new Constructor();
	    // early implementations not supports chaining
	    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
	    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
	    var THROWS_ON_PRIMITIVES = fails$d(function () { instance.has(1); });
	    // most early implementations doesn't supports iterables, most modern - not close it correctly
	    // eslint-disable-next-line no-new -- required for testing
	    var ACCEPT_ITERABLES = checkCorrectnessOfIteration$1(function (iterable) { new NativeConstructor(iterable); });
	    // for early implementations -0 and +0 not the same
	    var BUGGY_ZERO = !IS_WEAK && fails$d(function () {
	      // V8 ~ Chromium 42- fails only with 5+ elements
	      var $instance = new NativeConstructor();
	      var index = 5;
	      while (index--) $instance[ADDER](index, index);
	      return !$instance.has(-0);
	    });

	    if (!ACCEPT_ITERABLES) {
	      Constructor = wrapper(function (dummy, iterable) {
	        anInstance$3(dummy, Constructor, CONSTRUCTOR_NAME);
	        var that = inheritIfRequired$1(new NativeConstructor(), dummy, Constructor);
	        if (iterable != undefined) iterate$1(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
	        return that;
	      });
	      Constructor.prototype = NativePrototype;
	      NativePrototype.constructor = Constructor;
	    }

	    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }

	    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

	    // weak collections should not contains .clear method
	    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
	  }

	  exported[CONSTRUCTOR_NAME] = Constructor;
	  $$5({ global: true, forced: Constructor != NativeConstructor }, exported);

	  setToStringTag$1(Constructor, CONSTRUCTOR_NAME);

	  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

	  return Constructor;
	};

	var defineProperty$3 = objectDefineProperty.f;
	var create$1 = objectCreate;
	var redefineAll$1 = redefineAll$3;
	var bind$1 = functionBindContext;
	var anInstance$2 = anInstance$5;
	var iterate = iterate$3;
	var defineIterator = defineIterator$3;
	var setSpecies$1 = setSpecies$3;
	var DESCRIPTORS$4 = descriptors;
	var fastKey = internalMetadata.exports.fastKey;
	var InternalStateModule$2 = internalState;

	var setInternalState$2 = InternalStateModule$2.set;
	var internalStateGetterFor = InternalStateModule$2.getterFor;

	var collectionStrong$2 = {
	  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance$2(that, C, CONSTRUCTOR_NAME);
	      setInternalState$2(that, {
	        type: CONSTRUCTOR_NAME,
	        index: create$1(null),
	        first: undefined,
	        last: undefined,
	        size: 0
	      });
	      if (!DESCRIPTORS$4) that.size = 0;
	      if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
	    });

	    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

	    var define = function (that, key, value) {
	      var state = getInternalState(that);
	      var entry = getEntry(that, key);
	      var previous, index;
	      // change existing entry
	      if (entry) {
	        entry.value = value;
	      // create new entry
	      } else {
	        state.last = entry = {
	          index: index = fastKey(key, true),
	          key: key,
	          value: value,
	          previous: previous = state.last,
	          next: undefined,
	          removed: false
	        };
	        if (!state.first) state.first = entry;
	        if (previous) previous.next = entry;
	        if (DESCRIPTORS$4) state.size++;
	        else that.size++;
	        // add to index
	        if (index !== 'F') state.index[index] = entry;
	      } return that;
	    };

	    var getEntry = function (that, key) {
	      var state = getInternalState(that);
	      // fast case
	      var index = fastKey(key);
	      var entry;
	      if (index !== 'F') return state.index[index];
	      // frozen object case
	      for (entry = state.first; entry; entry = entry.next) {
	        if (entry.key == key) return entry;
	      }
	    };

	    redefineAll$1(C.prototype, {
	      // `{ Map, Set }.prototype.clear()` methods
	      // https://tc39.es/ecma262/#sec-map.prototype.clear
	      // https://tc39.es/ecma262/#sec-set.prototype.clear
	      clear: function clear() {
	        var that = this;
	        var state = getInternalState(that);
	        var data = state.index;
	        var entry = state.first;
	        while (entry) {
	          entry.removed = true;
	          if (entry.previous) entry.previous = entry.previous.next = undefined;
	          delete data[entry.index];
	          entry = entry.next;
	        }
	        state.first = state.last = undefined;
	        if (DESCRIPTORS$4) state.size = 0;
	        else that.size = 0;
	      },
	      // `{ Map, Set }.prototype.delete(key)` methods
	      // https://tc39.es/ecma262/#sec-map.prototype.delete
	      // https://tc39.es/ecma262/#sec-set.prototype.delete
	      'delete': function (key) {
	        var that = this;
	        var state = getInternalState(that);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.next;
	          var prev = entry.previous;
	          delete state.index[entry.index];
	          entry.removed = true;
	          if (prev) prev.next = next;
	          if (next) next.previous = prev;
	          if (state.first == entry) state.first = next;
	          if (state.last == entry) state.last = prev;
	          if (DESCRIPTORS$4) state.size--;
	          else that.size--;
	        } return !!entry;
	      },
	      // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
	      // https://tc39.es/ecma262/#sec-map.prototype.foreach
	      // https://tc39.es/ecma262/#sec-set.prototype.foreach
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        var state = getInternalState(this);
	        var boundFunction = bind$1(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;
	        while (entry = entry ? entry.next : state.first) {
	          boundFunction(entry.value, entry.key, this);
	          // revert to the last existing entry
	          while (entry && entry.removed) entry = entry.previous;
	        }
	      },
	      // `{ Map, Set}.prototype.has(key)` methods
	      // https://tc39.es/ecma262/#sec-map.prototype.has
	      // https://tc39.es/ecma262/#sec-set.prototype.has
	      has: function has(key) {
	        return !!getEntry(this, key);
	      }
	    });

	    redefineAll$1(C.prototype, IS_MAP ? {
	      // `Map.prototype.get(key)` method
	      // https://tc39.es/ecma262/#sec-map.prototype.get
	      get: function get(key) {
	        var entry = getEntry(this, key);
	        return entry && entry.value;
	      },
	      // `Map.prototype.set(key, value)` method
	      // https://tc39.es/ecma262/#sec-map.prototype.set
	      set: function set(key, value) {
	        return define(this, key === 0 ? 0 : key, value);
	      }
	    } : {
	      // `Set.prototype.add(value)` method
	      // https://tc39.es/ecma262/#sec-set.prototype.add
	      add: function add(value) {
	        return define(this, value = value === 0 ? 0 : value, value);
	      }
	    });
	    if (DESCRIPTORS$4) defineProperty$3(C.prototype, 'size', {
	      get: function () {
	        return getInternalState(this).size;
	      }
	    });
	    return C;
	  },
	  setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {
	    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
	    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
	    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
	    // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods
	    // https://tc39.es/ecma262/#sec-map.prototype.entries
	    // https://tc39.es/ecma262/#sec-map.prototype.keys
	    // https://tc39.es/ecma262/#sec-map.prototype.values
	    // https://tc39.es/ecma262/#sec-map.prototype-@@iterator
	    // https://tc39.es/ecma262/#sec-set.prototype.entries
	    // https://tc39.es/ecma262/#sec-set.prototype.keys
	    // https://tc39.es/ecma262/#sec-set.prototype.values
	    // https://tc39.es/ecma262/#sec-set.prototype-@@iterator
	    defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
	      setInternalState$2(this, {
	        type: ITERATOR_NAME,
	        target: iterated,
	        state: getInternalCollectionState(iterated),
	        kind: kind,
	        last: undefined
	      });
	    }, function () {
	      var state = getInternalIteratorState(this);
	      var kind = state.kind;
	      var entry = state.last;
	      // revert to the last existing entry
	      while (entry && entry.removed) entry = entry.previous;
	      // get next entry
	      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
	        // or finish the iteration
	        state.target = undefined;
	        return { value: undefined, done: true };
	      }
	      // return step by kind
	      if (kind == 'keys') return { value: entry.key, done: false };
	      if (kind == 'values') return { value: entry.value, done: false };
	      return { value: [entry.key, entry.value], done: false };
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

	    // `{ Map, Set }.prototype[@@species]` accessors
	    // https://tc39.es/ecma262/#sec-get-map-@@species
	    // https://tc39.es/ecma262/#sec-get-set-@@species
	    setSpecies$1(CONSTRUCTOR_NAME);
	  }
	};

	var collection$1 = collection$2;
	var collectionStrong$1 = collectionStrong$2;

	// `Set` constructor
	// https://tc39.es/ecma262/#sec-set-objects
	collection$1('Set', function (init) {
	  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong$1);

	var stateMachine = {exports: {}};

	(function (module, exports) {
	  (function webpackUniversalModuleDefinition(root, factory) {
	    module.exports = factory();
	  })(commonjsGlobal, function () {
	    return (
	      /******/
	      function (modules) {
	        // webpackBootstrap

	        /******/
	        // The module cache

	        /******/
	        var installedModules = {};
	        /******/

	        /******/
	        // The require function

	        /******/

	        function __webpack_require__(moduleId) {
	          /******/

	          /******/
	          // Check if module is in cache

	          /******/
	          if (installedModules[moduleId]) {
	            /******/
	            return installedModules[moduleId].exports;
	            /******/
	          }
	          /******/
	          // Create a new module (and put it into the cache)

	          /******/


	          var module = installedModules[moduleId] = {
	            /******/
	            i: moduleId,

	            /******/
	            l: false,

	            /******/
	            exports: {}
	            /******/

	          };
	          /******/

	          /******/
	          // Execute the module function

	          /******/

	          modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	          /******/

	          /******/
	          // Flag the module as loaded

	          /******/

	          module.l = true;
	          /******/

	          /******/
	          // Return the exports of the module

	          /******/

	          return module.exports;
	          /******/
	        }
	        /******/

	        /******/

	        /******/
	        // expose the modules object (__webpack_modules__)

	        /******/


	        __webpack_require__.m = modules;
	        /******/

	        /******/
	        // expose the module cache

	        /******/

	        __webpack_require__.c = installedModules;
	        /******/

	        /******/
	        // identity function for calling harmony imports with the correct context

	        /******/

	        __webpack_require__.i = function (value) {
	          return value;
	        };
	        /******/

	        /******/
	        // define getter function for harmony exports

	        /******/


	        __webpack_require__.d = function (exports, name, getter) {
	          /******/
	          if (!__webpack_require__.o(exports, name)) {
	            /******/
	            Object.defineProperty(exports, name, {
	              /******/
	              configurable: false,

	              /******/
	              enumerable: true,

	              /******/
	              get: getter
	              /******/

	            });
	            /******/
	          }
	          /******/

	        };
	        /******/

	        /******/
	        // getDefaultExport function for compatibility with non-harmony modules

	        /******/


	        __webpack_require__.n = function (module) {
	          /******/
	          var getter = module && module.__esModule ?
	          /******/
	          function getDefault() {
	            return module['default'];
	          } :
	          /******/
	          function getModuleExports() {
	            return module;
	          };
	          /******/

	          __webpack_require__.d(getter, 'a', getter);
	          /******/


	          return getter;
	          /******/
	        };
	        /******/

	        /******/
	        // Object.prototype.hasOwnProperty.call

	        /******/


	        __webpack_require__.o = function (object, property) {
	          return Object.prototype.hasOwnProperty.call(object, property);
	        };
	        /******/

	        /******/
	        // __webpack_public_path__

	        /******/


	        __webpack_require__.p = "";
	        /******/

	        /******/
	        // Load entry module and return exports

	        /******/

	        return __webpack_require__(__webpack_require__.s = 5);
	        /******/
	      }
	      /************************************************************************/

	      /******/
	      ([
	      /* 0 */

	      /***/
	      function (module, exports, __webpack_require__) {

	        module.exports = function (target, sources) {
	          var n, source, key;

	          for (n = 1; n < arguments.length; n++) {
	            source = arguments[n];

	            for (key in source) {
	              if (source.hasOwnProperty(key)) target[key] = source[key];
	            }
	          }

	          return target;
	        };
	        /***/

	      },
	      /* 1 */

	      /***/
	      function (module, exports, __webpack_require__) {

	        var mixin = __webpack_require__(0); //-------------------------------------------------------------------------------------------------


	        module.exports = {
	          build: function build(target, config) {
	            var n,
	                max,
	                plugin,
	                plugins = config.plugins;

	            for (n = 0, max = plugins.length; n < max; n++) {
	              plugin = plugins[n];
	              if (plugin.methods) mixin(target, plugin.methods);
	              if (plugin.properties) Object.defineProperties(target, plugin.properties);
	            }
	          },
	          hook: function hook(fsm, name, additional) {
	            var n,
	                max,
	                method,
	                plugin,
	                plugins = fsm.config.plugins,
	                args = [fsm.context];
	            if (additional) args = args.concat(additional);

	            for (n = 0, max = plugins.length; n < max; n++) {
	              plugin = plugins[n];
	              method = plugins[n][name];
	              if (method) method.apply(plugin, args);
	            }
	          }
	        }; //-------------------------------------------------------------------------------------------------

	        /***/
	      },
	      /* 2 */

	      /***/
	      function (module, exports, __webpack_require__) {

	        function camelize(label) {
	          if (label.length === 0) return label;
	          var n,
	              result,
	              words = label.split(/[_-]/); // single word with first character already lowercase, return untouched

	          if (words.length === 1 && words[0][0].toLowerCase() === words[0][0]) return label;
	          result = words[0].toLowerCase();

	          for (n = 1; n < words.length; n++) {
	            result = result + words[n].charAt(0).toUpperCase() + words[n].substring(1).toLowerCase();
	          }

	          return result;
	        } //-------------------------------------------------------------------------------------------------


	        camelize.prepended = function (prepend, label) {
	          label = camelize(label);
	          return prepend + label[0].toUpperCase() + label.substring(1);
	        }; //-------------------------------------------------------------------------------------------------


	        module.exports = camelize;
	        /***/
	      },
	      /* 3 */

	      /***/
	      function (module, exports, __webpack_require__) {

	        var mixin = __webpack_require__(0),
	            camelize = __webpack_require__(2); //-------------------------------------------------------------------------------------------------


	        function Config(options, StateMachine) {
	          options = options || {};
	          this.options = options; // preserving original options can be useful (e.g visualize plugin)

	          this.defaults = StateMachine.defaults;
	          this.states = [];
	          this.transitions = [];
	          this.map = {};
	          this.lifecycle = this.configureLifecycle();
	          this.init = this.configureInitTransition(options.init);
	          this.data = this.configureData(options.data);
	          this.methods = this.configureMethods(options.methods);
	          this.map[this.defaults.wildcard] = {};
	          this.configureTransitions(options.transitions || []);
	          this.plugins = this.configurePlugins(options.plugins, StateMachine.plugin);
	        } //-------------------------------------------------------------------------------------------------


	        mixin(Config.prototype, {
	          addState: function addState(name) {
	            if (!this.map[name]) {
	              this.states.push(name);
	              this.addStateLifecycleNames(name);
	              this.map[name] = {};
	            }
	          },
	          addStateLifecycleNames: function addStateLifecycleNames(name) {
	            this.lifecycle.onEnter[name] = camelize.prepended('onEnter', name);
	            this.lifecycle.onLeave[name] = camelize.prepended('onLeave', name);
	            this.lifecycle.on[name] = camelize.prepended('on', name);
	          },
	          addTransition: function addTransition(name) {
	            if (this.transitions.indexOf(name) < 0) {
	              this.transitions.push(name);
	              this.addTransitionLifecycleNames(name);
	            }
	          },
	          addTransitionLifecycleNames: function addTransitionLifecycleNames(name) {
	            this.lifecycle.onBefore[name] = camelize.prepended('onBefore', name);
	            this.lifecycle.onAfter[name] = camelize.prepended('onAfter', name);
	            this.lifecycle.on[name] = camelize.prepended('on', name);
	          },
	          mapTransition: function mapTransition(transition) {
	            var name = transition.name,
	                from = transition.from,
	                to = transition.to;
	            this.addState(from);
	            if (typeof to !== 'function') this.addState(to);
	            this.addTransition(name);
	            this.map[from][name] = transition;
	            return transition;
	          },
	          configureLifecycle: function configureLifecycle() {
	            return {
	              onBefore: {
	                transition: 'onBeforeTransition'
	              },
	              onAfter: {
	                transition: 'onAfterTransition'
	              },
	              onEnter: {
	                state: 'onEnterState'
	              },
	              onLeave: {
	                state: 'onLeaveState'
	              },
	              on: {
	                transition: 'onTransition'
	              }
	            };
	          },
	          configureInitTransition: function configureInitTransition(init) {
	            if (typeof init === 'string') {
	              return this.mapTransition(mixin({}, this.defaults.init, {
	                to: init,
	                active: true
	              }));
	            } else if (_typeof$2(init) === 'object') {
	              return this.mapTransition(mixin({}, this.defaults.init, init, {
	                active: true
	              }));
	            } else {
	              this.addState(this.defaults.init.from);
	              return this.defaults.init;
	            }
	          },
	          configureData: function configureData(data) {
	            if (typeof data === 'function') return data;else if (_typeof$2(data) === 'object') return function () {
	              return data;
	            };else return function () {
	              return {};
	            };
	          },
	          configureMethods: function configureMethods(methods) {
	            return methods || {};
	          },
	          configurePlugins: function configurePlugins(plugins, builtin) {
	            plugins = plugins || [];
	            var n, max, plugin;

	            for (n = 0, max = plugins.length; n < max; n++) {
	              plugin = plugins[n];
	              if (typeof plugin === 'function') plugins[n] = plugin = plugin();
	              if (plugin.configure) plugin.configure(this);
	            }

	            return plugins;
	          },
	          configureTransitions: function configureTransitions(transitions) {
	            var i,
	                n,
	                transition,
	                from,
	                to,
	                wildcard = this.defaults.wildcard;

	            for (n = 0; n < transitions.length; n++) {
	              transition = transitions[n];
	              from = Array.isArray(transition.from) ? transition.from : [transition.from || wildcard];
	              to = transition.to || wildcard;

	              for (i = 0; i < from.length; i++) {
	                this.mapTransition({
	                  name: transition.name,
	                  from: from[i],
	                  to: to
	                });
	              }
	            }
	          },
	          transitionFor: function transitionFor(state, transition) {
	            var wildcard = this.defaults.wildcard;
	            return this.map[state][transition] || this.map[wildcard][transition];
	          },
	          transitionsFor: function transitionsFor(state) {
	            var wildcard = this.defaults.wildcard;
	            return Object.keys(this.map[state]).concat(Object.keys(this.map[wildcard]));
	          },
	          allStates: function allStates() {
	            return this.states;
	          },
	          allTransitions: function allTransitions() {
	            return this.transitions;
	          }
	        }); //-------------------------------------------------------------------------------------------------

	        module.exports = Config; //-------------------------------------------------------------------------------------------------

	        /***/
	      },
	      /* 4 */

	      /***/
	      function (module, exports, __webpack_require__) {
	        var mixin = __webpack_require__(0),
	            Exception = __webpack_require__(6),
	            plugin = __webpack_require__(1),
	            UNOBSERVED = [null, []]; //-------------------------------------------------------------------------------------------------


	        function JSM(context, config) {
	          this.context = context;
	          this.config = config;
	          this.state = config.init.from;
	          this.observers = [context];
	        } //-------------------------------------------------------------------------------------------------


	        mixin(JSM.prototype, {
	          init: function init(args) {
	            mixin(this.context, this.config.data.apply(this.context, args));
	            plugin.hook(this, 'init');
	            if (this.config.init.active) return this.fire(this.config.init.name, []);
	          },
	          is: function is(state) {
	            return Array.isArray(state) ? state.indexOf(this.state) >= 0 : this.state === state;
	          },
	          isPending: function isPending() {
	            return this.pending;
	          },
	          can: function can(transition) {
	            return !this.isPending() && !!this.seek(transition);
	          },
	          cannot: function cannot(transition) {
	            return !this.can(transition);
	          },
	          allStates: function allStates() {
	            return this.config.allStates();
	          },
	          allTransitions: function allTransitions() {
	            return this.config.allTransitions();
	          },
	          transitions: function transitions() {
	            return this.config.transitionsFor(this.state);
	          },
	          seek: function seek(transition, args) {
	            var wildcard = this.config.defaults.wildcard,
	                entry = this.config.transitionFor(this.state, transition),
	                to = entry && entry.to;
	            if (typeof to === 'function') return to.apply(this.context, args);else if (to === wildcard) return this.state;else return to;
	          },
	          fire: function fire(transition, args) {
	            return this.transit(transition, this.state, this.seek(transition, args), args);
	          },
	          transit: function transit(transition, from, to, args) {
	            var lifecycle = this.config.lifecycle,
	                changed = this.config.options.observeUnchangedState || from !== to;
	            if (!to) return this.context.onInvalidTransition(transition, from, to);
	            if (this.isPending()) return this.context.onPendingTransition(transition, from, to);
	            this.config.addState(to); // might need to add this state if it's unknown (e.g. conditional transition or goto)

	            this.beginTransit();
	            args.unshift({
	              // this context will be passed to each lifecycle event observer
	              transition: transition,
	              from: from,
	              to: to,
	              fsm: this.context
	            });
	            return this.observeEvents([this.observersForEvent(lifecycle.onBefore.transition), this.observersForEvent(lifecycle.onBefore[transition]), changed ? this.observersForEvent(lifecycle.onLeave.state) : UNOBSERVED, changed ? this.observersForEvent(lifecycle.onLeave[from]) : UNOBSERVED, this.observersForEvent(lifecycle.on.transition), changed ? ['doTransit', [this]] : UNOBSERVED, changed ? this.observersForEvent(lifecycle.onEnter.state) : UNOBSERVED, changed ? this.observersForEvent(lifecycle.onEnter[to]) : UNOBSERVED, changed ? this.observersForEvent(lifecycle.on[to]) : UNOBSERVED, this.observersForEvent(lifecycle.onAfter.transition), this.observersForEvent(lifecycle.onAfter[transition]), this.observersForEvent(lifecycle.on[transition])], args);
	          },
	          beginTransit: function beginTransit() {
	            this.pending = true;
	          },
	          endTransit: function endTransit(result) {
	            this.pending = false;
	            return result;
	          },
	          failTransit: function failTransit(result) {
	            this.pending = false;
	            throw result;
	          },
	          doTransit: function doTransit(lifecycle) {
	            this.state = lifecycle.to;
	          },
	          observe: function observe(args) {
	            if (args.length === 2) {
	              var observer = {};
	              observer[args[0]] = args[1];
	              this.observers.push(observer);
	            } else {
	              this.observers.push(args[0]);
	            }
	          },
	          observersForEvent: function observersForEvent(event) {
	            // TODO: this could be cached
	            var n = 0,
	                max = this.observers.length,
	                observer,
	                result = [];

	            for (; n < max; n++) {
	              observer = this.observers[n];
	              if (observer[event]) result.push(observer);
	            }

	            return [event, result, true];
	          },
	          observeEvents: function observeEvents(events, args, previousEvent, previousResult) {
	            if (events.length === 0) {
	              return this.endTransit(previousResult === undefined ? true : previousResult);
	            }

	            var event = events[0][0],
	                observers = events[0][1],
	                pluggable = events[0][2];
	            args[0].event = event;
	            if (event && pluggable && event !== previousEvent) plugin.hook(this, 'lifecycle', args);

	            if (observers.length === 0) {
	              events.shift();
	              return this.observeEvents(events, args, event, previousResult);
	            } else {
	              var observer = observers.shift(),
	                  result = observer[event].apply(observer, args);

	              if (result && typeof result.then === 'function') {
	                return result.then(this.observeEvents.bind(this, events, args, event)).catch(this.failTransit.bind(this));
	              } else if (result === false) {
	                return this.endTransit(false);
	              } else {
	                return this.observeEvents(events, args, event, result);
	              }
	            }
	          },
	          onInvalidTransition: function onInvalidTransition(transition, from, to) {
	            throw new Exception("transition is invalid in current state", transition, from, to, this.state);
	          },
	          onPendingTransition: function onPendingTransition(transition, from, to) {
	            throw new Exception("transition is invalid while previous transition is still in progress", transition, from, to, this.state);
	          }
	        }); //-------------------------------------------------------------------------------------------------

	        module.exports = JSM; //-------------------------------------------------------------------------------------------------

	        /***/
	      },
	      /* 5 */

	      /***/
	      function (module, exports, __webpack_require__) {

	        var mixin = __webpack_require__(0),
	            camelize = __webpack_require__(2),
	            plugin = __webpack_require__(1),
	            Config = __webpack_require__(3),
	            JSM = __webpack_require__(4); //-----------------------------------------------------------------------------------------------


	        var PublicMethods = {
	          is: function is(state) {
	            return this._fsm.is(state);
	          },
	          can: function can(transition) {
	            return this._fsm.can(transition);
	          },
	          cannot: function cannot(transition) {
	            return this._fsm.cannot(transition);
	          },
	          observe: function observe() {
	            return this._fsm.observe(arguments);
	          },
	          transitions: function transitions() {
	            return this._fsm.transitions();
	          },
	          allTransitions: function allTransitions() {
	            return this._fsm.allTransitions();
	          },
	          allStates: function allStates() {
	            return this._fsm.allStates();
	          },
	          onInvalidTransition: function onInvalidTransition(t, from, to) {
	            return this._fsm.onInvalidTransition(t, from, to);
	          },
	          onPendingTransition: function onPendingTransition(t, from, to) {
	            return this._fsm.onPendingTransition(t, from, to);
	          }
	        };
	        var PublicProperties = {
	          state: {
	            configurable: false,
	            enumerable: true,
	            get: function get() {
	              return this._fsm.state;
	            },
	            set: function set(state) {
	              throw Error('use transitions to change state');
	            }
	          }
	        }; //-----------------------------------------------------------------------------------------------

	        function StateMachine(options) {
	          return apply(this || {}, options);
	        }

	        function factory() {
	          var cstor, options;

	          if (typeof arguments[0] === 'function') {
	            cstor = arguments[0];
	            options = arguments[1] || {};
	          } else {
	            cstor = function cstor() {
	              this._fsm.apply(this, arguments);
	            };

	            options = arguments[0] || {};
	          }

	          var config = new Config(options, StateMachine);
	          build(cstor.prototype, config);
	          cstor.prototype._fsm.config = config; // convenience access to shared config without needing an instance

	          return cstor;
	        } //-------------------------------------------------------------------------------------------------


	        function apply(instance, options) {
	          var config = new Config(options, StateMachine);
	          build(instance, config);

	          instance._fsm();

	          return instance;
	        }

	        function build(target, config) {
	          if (_typeof$2(target) !== 'object' || Array.isArray(target)) throw Error('StateMachine can only be applied to objects');
	          plugin.build(target, config);
	          Object.defineProperties(target, PublicProperties);
	          mixin(target, PublicMethods);
	          mixin(target, config.methods);
	          config.allTransitions().forEach(function (transition) {
	            target[camelize(transition)] = function () {
	              return this._fsm.fire(transition, [].slice.call(arguments));
	            };
	          });

	          target._fsm = function () {
	            this._fsm = new JSM(this, config);

	            this._fsm.init(arguments);
	          };
	        } //-----------------------------------------------------------------------------------------------


	        StateMachine.version = '3.0.1';
	        StateMachine.factory = factory;
	        StateMachine.apply = apply;
	        StateMachine.defaults = {
	          wildcard: '*',
	          init: {
	            name: 'init',
	            from: 'none'
	          }
	        }; //===============================================================================================

	        module.exports = StateMachine;
	        /***/
	      },
	      /* 6 */

	      /***/
	      function (module, exports, __webpack_require__) {

	        module.exports = function (message, transition, from, to, current) {
	          this.message = message;
	          this.transition = transition;
	          this.from = from;
	          this.to = to;
	          this.current = current;
	        };
	        /***/

	      }
	      /******/
	      ])
	    );
	  });
	})(stateMachine);

	var rngBrowser = {exports: {}};

	// browser this is a little complicated due to unknown quality of Math.random()
	// and inconsistent support for the `crypto` API.  We do the best we can via
	// feature-detection
	// getRandomValues needs to be invoked in a context where "this" is a Crypto
	// implementation. Also, find the complete implementation of crypto on IE11.

	var getRandomValues = typeof crypto != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto);

	if (getRandomValues) {
	  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
	  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

	  rngBrowser.exports = function whatwgRNG() {
	    getRandomValues(rnds8);
	    return rnds8;
	  };
	} else {
	  // Math.random()-based (RNG)
	  //
	  // If all else fails, use Math.random().  It's fast, but is of unspecified
	  // quality.
	  var rnds = new Array(16);

	  rngBrowser.exports = function mathRNG() {
	    for (var i = 0, r; i < 16; i++) {
	      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
	      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
	    }

	    return rnds;
	  };
	}

	/**
	 * Convert array of 16 byte values to UUID string format of the form:
	 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
	 */
	var byteToHex = [];

	for (var i = 0; i < 256; ++i) {
	  byteToHex[i] = (i + 0x100).toString(16).substr(1);
	}

	function bytesToUuid$2(buf, offset) {
	  var i = offset || 0;
	  var bth = byteToHex; // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4

	  return [bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]]].join('');
	}

	var bytesToUuid_1 = bytesToUuid$2;

	var rng$1 = rngBrowser.exports;
	var bytesToUuid$1 = bytesToUuid_1; // **`v1()` - Generate time-based UUID**
	//
	// Inspired by https://github.com/LiosK/UUID.js
	// and http://docs.python.org/library/uuid.html

	var _nodeId;

	var _clockseq; // Previous uuid creation time


	var _lastMSecs = 0;
	var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

	function v1$1(options, buf, offset) {
	  var i = buf && offset || 0;
	  var b = buf || [];
	  options = options || {};
	  var node = options.node || _nodeId;
	  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
	  // specified.  We do this lazily to minimize issues related to insufficient
	  // system entropy.  See #189

	  if (node == null || clockseq == null) {
	    var seedBytes = rng$1();

	    if (node == null) {
	      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
	      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
	    }

	    if (clockseq == null) {
	      // Per 4.2.2, randomize (14 bit) clockseq
	      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
	    }
	  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
	  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
	  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
	  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


	  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime(); // Per 4.2.1.2, use count of uuid's generated during the current clock
	  // cycle to simulate higher resolution clock

	  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

	  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

	  if (dt < 0 && options.clockseq === undefined) {
	    clockseq = clockseq + 1 & 0x3fff;
	  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
	  // time interval


	  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
	    nsecs = 0;
	  } // Per 4.2.1.2 Throw error if too many uuids are requested


	  if (nsecs >= 10000) {
	    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
	  }

	  _lastMSecs = msecs;
	  _lastNSecs = nsecs;
	  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

	  msecs += 12219292800000; // `time_low`

	  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
	  b[i++] = tl >>> 24 & 0xff;
	  b[i++] = tl >>> 16 & 0xff;
	  b[i++] = tl >>> 8 & 0xff;
	  b[i++] = tl & 0xff; // `time_mid`

	  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
	  b[i++] = tmh >>> 8 & 0xff;
	  b[i++] = tmh & 0xff; // `time_high_and_version`

	  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

	  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

	  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

	  b[i++] = clockseq & 0xff; // `node`

	  for (var n = 0; n < 6; ++n) {
	    b[i + n] = node[n];
	  }

	  return buf ? buf : bytesToUuid$1(b);
	}

	var v1_1 = v1$1;

	var rng = rngBrowser.exports;
	var bytesToUuid = bytesToUuid_1;

	function v4$1(options, buf, offset) {
	  var i = buf && offset || 0;

	  if (typeof options == 'string') {
	    buf = options === 'binary' ? new Array(16) : null;
	    options = null;
	  }

	  options = options || {};
	  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

	  rnds[6] = rnds[6] & 0x0f | 0x40;
	  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

	  if (buf) {
	    for (var ii = 0; ii < 16; ++ii) {
	      buf[i + ii] = rnds[ii];
	    }
	  }

	  return buf || bytesToUuid(rnds);
	}

	var v4_1 = v4$1;

	var v1 = v1_1;
	var v4 = v4_1;
	var uuid = v4;
	uuid.v1 = v1;
	uuid.v4 = v4;
	var uuid_1 = uuid;

	// TODO: Remove from `core-js@4` since it's moved to entry points

	var redefine$1 = redefine$b.exports;
	var regexpExec$2 = regexpExec$3;
	var fails$c = fails$z;
	var wellKnownSymbol$4 = wellKnownSymbol$p;
	var createNonEnumerableProperty$3 = createNonEnumerableProperty$c;

	var SPECIES = wellKnownSymbol$4('species');
	var RegExpPrototype = RegExp.prototype;

	var fixRegexpWellKnownSymbolLogic = function (KEY, exec, FORCED, SHAM) {
	  var SYMBOL = wellKnownSymbol$4(KEY);

	  var DELEGATES_TO_SYMBOL = !fails$c(function () {
	    // String methods call symbol-named RegEp methods
	    var O = {};
	    O[SYMBOL] = function () { return 7; };
	    return ''[KEY](O) != 7;
	  });

	  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails$c(function () {
	    // Symbol-named RegExp methods call .exec
	    var execCalled = false;
	    var re = /a/;

	    if (KEY === 'split') {
	      // We can't use real regex here since it causes deoptimization
	      // and serious performance degradation in V8
	      // https://github.com/zloirock/core-js/issues/306
	      re = {};
	      // RegExp[@@split] doesn't call the regex's exec method, but first creates
	      // a new one. We need to return the patched regex when creating the new one.
	      re.constructor = {};
	      re.constructor[SPECIES] = function () { return re; };
	      re.flags = '';
	      re[SYMBOL] = /./[SYMBOL];
	    }

	    re.exec = function () { execCalled = true; return null; };

	    re[SYMBOL]('');
	    return !execCalled;
	  });

	  if (
	    !DELEGATES_TO_SYMBOL ||
	    !DELEGATES_TO_EXEC ||
	    FORCED
	  ) {
	    var nativeRegExpMethod = /./[SYMBOL];
	    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
	      var $exec = regexp.exec;
	      if ($exec === regexpExec$2 || $exec === RegExpPrototype.exec) {
	        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
	          // The native String method already delegates to @@method (this
	          // polyfilled function), leasing to infinite recursion.
	          // We avoid it by directly calling the native @@method method.
	          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
	        }
	        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
	      }
	      return { done: false };
	    });

	    redefine$1(String.prototype, KEY, methods[0]);
	    redefine$1(RegExpPrototype, SYMBOL, methods[1]);
	  }

	  if (SHAM) createNonEnumerableProperty$3(RegExpPrototype[SYMBOL], 'sham', true);
	};

	var charAt = stringMultibyte.charAt;

	// `AdvanceStringIndex` abstract operation
	// https://tc39.es/ecma262/#sec-advancestringindex
	var advanceStringIndex$3 = function (S, index, unicode) {
	  return index + (unicode ? charAt(S, index).length : 1);
	};

	var toObject$8 = toObject$g;

	var floor$3 = Math.floor;
	var replace = ''.replace;
	var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
	var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;

	// `GetSubstitution` abstract operation
	// https://tc39.es/ecma262/#sec-getsubstitution
	var getSubstitution$1 = function (matched, str, position, captures, namedCaptures, replacement) {
	  var tailPos = position + matched.length;
	  var m = captures.length;
	  var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
	  if (namedCaptures !== undefined) {
	    namedCaptures = toObject$8(namedCaptures);
	    symbols = SUBSTITUTION_SYMBOLS;
	  }
	  return replace.call(replacement, symbols, function (match, ch) {
	    var capture;
	    switch (ch.charAt(0)) {
	      case '$': return '$';
	      case '&': return matched;
	      case '`': return str.slice(0, position);
	      case "'": return str.slice(tailPos);
	      case '<':
	        capture = namedCaptures[ch.slice(1, -1)];
	        break;
	      default: // \d\d?
	        var n = +ch;
	        if (n === 0) return match;
	        if (n > m) {
	          var f = floor$3(n / 10);
	          if (f === 0) return match;
	          if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
	          return match;
	        }
	        capture = captures[n - 1];
	    }
	    return capture === undefined ? '' : capture;
	  });
	};

	var classof$3 = classofRaw$1;
	var regexpExec$1 = regexpExec$3;

	// `RegExpExec` abstract operation
	// https://tc39.es/ecma262/#sec-regexpexec
	var regexpExecAbstract = function (R, S) {
	  var exec = R.exec;
	  if (typeof exec === 'function') {
	    var result = exec.call(R, S);
	    if (typeof result !== 'object') {
	      throw TypeError('RegExp exec method returned something other than an Object or null');
	    }
	    return result;
	  }

	  if (classof$3(R) !== 'RegExp') {
	    throw TypeError('RegExp#exec called on incompatible receiver');
	  }

	  return regexpExec$1.call(R, S);
	};

	var fixRegExpWellKnownSymbolLogic$3 = fixRegexpWellKnownSymbolLogic;
	var fails$b = fails$z;
	var anObject$3 = anObject$j;
	var toInteger$5 = toInteger$9;
	var toLength$f = toLength$m;
	var toString$4 = toString$b;
	var requireObjectCoercible$3 = requireObjectCoercible$8;
	var advanceStringIndex$2 = advanceStringIndex$3;
	var getSubstitution = getSubstitution$1;
	var regExpExec$2 = regexpExecAbstract;
	var wellKnownSymbol$3 = wellKnownSymbol$p;

	var REPLACE = wellKnownSymbol$3('replace');
	var max$1 = Math.max;
	var min$4 = Math.min;

	var maybeToString = function (it) {
	  return it === undefined ? it : String(it);
	};

	// IE <= 11 replaces $0 with the whole match, as if it was $&
	// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
	var REPLACE_KEEPS_$0 = (function () {
	  // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing
	  return 'a'.replace(/./, '$0') === '$0';
	})();

	// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
	var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
	  if (/./[REPLACE]) {
	    return /./[REPLACE]('a', '$0') === '';
	  }
	  return false;
	})();

	var REPLACE_SUPPORTS_NAMED_GROUPS = !fails$b(function () {
	  var re = /./;
	  re.exec = function () {
	    var result = [];
	    result.groups = { a: '7' };
	    return result;
	  };
	  // eslint-disable-next-line regexp/no-useless-dollar-replacements -- false positive
	  return ''.replace(re, '$<a>') !== '7';
	});

	// @@replace logic
	fixRegExpWellKnownSymbolLogic$3('replace', function (_, nativeReplace, maybeCallNative) {
	  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

	  return [
	    // `String.prototype.replace` method
	    // https://tc39.es/ecma262/#sec-string.prototype.replace
	    function replace(searchValue, replaceValue) {
	      var O = requireObjectCoercible$3(this);
	      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
	      return replacer !== undefined
	        ? replacer.call(searchValue, O, replaceValue)
	        : nativeReplace.call(toString$4(O), searchValue, replaceValue);
	    },
	    // `RegExp.prototype[@@replace]` method
	    // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
	    function (string, replaceValue) {
	      var rx = anObject$3(this);
	      var S = toString$4(string);

	      if (
	        typeof replaceValue === 'string' &&
	        replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1 &&
	        replaceValue.indexOf('$<') === -1
	      ) {
	        var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
	        if (res.done) return res.value;
	      }

	      var functionalReplace = typeof replaceValue === 'function';
	      if (!functionalReplace) replaceValue = toString$4(replaceValue);

	      var global = rx.global;
	      if (global) {
	        var fullUnicode = rx.unicode;
	        rx.lastIndex = 0;
	      }
	      var results = [];
	      while (true) {
	        var result = regExpExec$2(rx, S);
	        if (result === null) break;

	        results.push(result);
	        if (!global) break;

	        var matchStr = toString$4(result[0]);
	        if (matchStr === '') rx.lastIndex = advanceStringIndex$2(S, toLength$f(rx.lastIndex), fullUnicode);
	      }

	      var accumulatedResult = '';
	      var nextSourcePosition = 0;
	      for (var i = 0; i < results.length; i++) {
	        result = results[i];

	        var matched = toString$4(result[0]);
	        var position = max$1(min$4(toInteger$5(result.index), S.length), 0);
	        var captures = [];
	        // NOTE: This is equivalent to
	        //   captures = result.slice(1).map(maybeToString)
	        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
	        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
	        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
	        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
	        var namedCaptures = result.groups;
	        if (functionalReplace) {
	          var replacerArgs = [matched].concat(captures, position, S);
	          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
	          var replacement = toString$4(replaceValue.apply(undefined, replacerArgs));
	        } else {
	          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
	        }
	        if (position >= nextSourcePosition) {
	          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
	          nextSourcePosition = position + matched.length;
	        }
	      }
	      return accumulatedResult + S.slice(nextSourcePosition);
	    }
	  ];
	}, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);

	var typedArrayConstructor = {exports: {}};

	// eslint-disable-next-line es/no-typed-arrays -- safe
	var arrayBufferNative = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined';

	var NATIVE_ARRAY_BUFFER$1 = arrayBufferNative;
	var DESCRIPTORS$3 = descriptors;
	var global$8 = global$B;
	var isObject$2 = isObject$n;
	var has$1 = has$f;
	var classof$2 = classof$8;
	var createNonEnumerableProperty$2 = createNonEnumerableProperty$c;
	var redefine = redefine$b.exports;
	var defineProperty$2 = objectDefineProperty.f;
	var getPrototypeOf$1 = objectGetPrototypeOf;
	var setPrototypeOf$2 = objectSetPrototypeOf;
	var wellKnownSymbol$2 = wellKnownSymbol$p;
	var uid = uid$5;

	var Int8Array$3 = global$8.Int8Array;
	var Int8ArrayPrototype = Int8Array$3 && Int8Array$3.prototype;
	var Uint8ClampedArray = global$8.Uint8ClampedArray;
	var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
	var TypedArray$1 = Int8Array$3 && getPrototypeOf$1(Int8Array$3);
	var TypedArrayPrototype$1 = Int8ArrayPrototype && getPrototypeOf$1(Int8ArrayPrototype);
	var ObjectPrototype$1 = Object.prototype;
	var isPrototypeOf = ObjectPrototype$1.isPrototypeOf;

	var TO_STRING_TAG = wellKnownSymbol$2('toStringTag');
	var TYPED_ARRAY_TAG$1 = uid('TYPED_ARRAY_TAG');
	var TYPED_ARRAY_CONSTRUCTOR$2 = uid('TYPED_ARRAY_CONSTRUCTOR');
	// Fixing native typed arrays in Opera Presto crashes the browser, see #595
	var NATIVE_ARRAY_BUFFER_VIEWS$2 = NATIVE_ARRAY_BUFFER$1 && !!setPrototypeOf$2 && classof$2(global$8.opera) !== 'Opera';
	var TYPED_ARRAY_TAG_REQIRED = false;
	var NAME, Constructor, Prototype;

	var TypedArrayConstructorsList = {
	  Int8Array: 1,
	  Uint8Array: 1,
	  Uint8ClampedArray: 1,
	  Int16Array: 2,
	  Uint16Array: 2,
	  Int32Array: 4,
	  Uint32Array: 4,
	  Float32Array: 4,
	  Float64Array: 8
	};

	var BigIntArrayConstructorsList = {
	  BigInt64Array: 8,
	  BigUint64Array: 8
	};

	var isView = function isView(it) {
	  if (!isObject$2(it)) return false;
	  var klass = classof$2(it);
	  return klass === 'DataView'
	    || has$1(TypedArrayConstructorsList, klass)
	    || has$1(BigIntArrayConstructorsList, klass);
	};

	var isTypedArray$1 = function (it) {
	  if (!isObject$2(it)) return false;
	  var klass = classof$2(it);
	  return has$1(TypedArrayConstructorsList, klass)
	    || has$1(BigIntArrayConstructorsList, klass);
	};

	var aTypedArray$m = function (it) {
	  if (isTypedArray$1(it)) return it;
	  throw TypeError('Target is not a typed array');
	};

	var aTypedArrayConstructor$3 = function (C) {
	  if (setPrototypeOf$2 && !isPrototypeOf.call(TypedArray$1, C)) {
	    throw TypeError('Target is not a typed array constructor');
	  } return C;
	};

	var exportTypedArrayMethod$n = function (KEY, property, forced) {
	  if (!DESCRIPTORS$3) return;
	  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
	    var TypedArrayConstructor = global$8[ARRAY];
	    if (TypedArrayConstructor && has$1(TypedArrayConstructor.prototype, KEY)) try {
	      delete TypedArrayConstructor.prototype[KEY];
	    } catch (error) { /* empty */ }
	  }
	  if (!TypedArrayPrototype$1[KEY] || forced) {
	    redefine(TypedArrayPrototype$1, KEY, forced ? property
	      : NATIVE_ARRAY_BUFFER_VIEWS$2 && Int8ArrayPrototype[KEY] || property);
	  }
	};

	var exportTypedArrayStaticMethod = function (KEY, property, forced) {
	  var ARRAY, TypedArrayConstructor;
	  if (!DESCRIPTORS$3) return;
	  if (setPrototypeOf$2) {
	    if (forced) for (ARRAY in TypedArrayConstructorsList) {
	      TypedArrayConstructor = global$8[ARRAY];
	      if (TypedArrayConstructor && has$1(TypedArrayConstructor, KEY)) try {
	        delete TypedArrayConstructor[KEY];
	      } catch (error) { /* empty */ }
	    }
	    if (!TypedArray$1[KEY] || forced) {
	      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
	      try {
	        return redefine(TypedArray$1, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS$2 && TypedArray$1[KEY] || property);
	      } catch (error) { /* empty */ }
	    } else return;
	  }
	  for (ARRAY in TypedArrayConstructorsList) {
	    TypedArrayConstructor = global$8[ARRAY];
	    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
	      redefine(TypedArrayConstructor, KEY, property);
	    }
	  }
	};

	for (NAME in TypedArrayConstructorsList) {
	  Constructor = global$8[NAME];
	  Prototype = Constructor && Constructor.prototype;
	  if (Prototype) createNonEnumerableProperty$2(Prototype, TYPED_ARRAY_CONSTRUCTOR$2, Constructor);
	  else NATIVE_ARRAY_BUFFER_VIEWS$2 = false;
	}

	for (NAME in BigIntArrayConstructorsList) {
	  Constructor = global$8[NAME];
	  Prototype = Constructor && Constructor.prototype;
	  if (Prototype) createNonEnumerableProperty$2(Prototype, TYPED_ARRAY_CONSTRUCTOR$2, Constructor);
	}

	// WebKit bug - typed arrays constructors prototype is Object.prototype
	if (!NATIVE_ARRAY_BUFFER_VIEWS$2 || typeof TypedArray$1 != 'function' || TypedArray$1 === Function.prototype) {
	  // eslint-disable-next-line no-shadow -- safe
	  TypedArray$1 = function TypedArray() {
	    throw TypeError('Incorrect invocation');
	  };
	  if (NATIVE_ARRAY_BUFFER_VIEWS$2) for (NAME in TypedArrayConstructorsList) {
	    if (global$8[NAME]) setPrototypeOf$2(global$8[NAME], TypedArray$1);
	  }
	}

	if (!NATIVE_ARRAY_BUFFER_VIEWS$2 || !TypedArrayPrototype$1 || TypedArrayPrototype$1 === ObjectPrototype$1) {
	  TypedArrayPrototype$1 = TypedArray$1.prototype;
	  if (NATIVE_ARRAY_BUFFER_VIEWS$2) for (NAME in TypedArrayConstructorsList) {
	    if (global$8[NAME]) setPrototypeOf$2(global$8[NAME].prototype, TypedArrayPrototype$1);
	  }
	}

	// WebKit bug - one more object in Uint8ClampedArray prototype chain
	if (NATIVE_ARRAY_BUFFER_VIEWS$2 && getPrototypeOf$1(Uint8ClampedArrayPrototype) !== TypedArrayPrototype$1) {
	  setPrototypeOf$2(Uint8ClampedArrayPrototype, TypedArrayPrototype$1);
	}

	if (DESCRIPTORS$3 && !has$1(TypedArrayPrototype$1, TO_STRING_TAG)) {
	  TYPED_ARRAY_TAG_REQIRED = true;
	  defineProperty$2(TypedArrayPrototype$1, TO_STRING_TAG, { get: function () {
	    return isObject$2(this) ? this[TYPED_ARRAY_TAG$1] : undefined;
	  } });
	  for (NAME in TypedArrayConstructorsList) if (global$8[NAME]) {
	    createNonEnumerableProperty$2(global$8[NAME], TYPED_ARRAY_TAG$1, NAME);
	  }
	}

	var arrayBufferViewCore = {
	  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS$2,
	  TYPED_ARRAY_CONSTRUCTOR: TYPED_ARRAY_CONSTRUCTOR$2,
	  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG$1,
	  aTypedArray: aTypedArray$m,
	  aTypedArrayConstructor: aTypedArrayConstructor$3,
	  exportTypedArrayMethod: exportTypedArrayMethod$n,
	  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
	  isView: isView,
	  isTypedArray: isTypedArray$1,
	  TypedArray: TypedArray$1,
	  TypedArrayPrototype: TypedArrayPrototype$1
	};

	/* eslint-disable no-new -- required for testing */

	var global$7 = global$B;
	var fails$a = fails$z;
	var checkCorrectnessOfIteration = checkCorrectnessOfIteration$4;
	var NATIVE_ARRAY_BUFFER_VIEWS$1 = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;

	var ArrayBuffer$2 = global$7.ArrayBuffer;
	var Int8Array$2 = global$7.Int8Array;

	var typedArrayConstructorsRequireWrappers = !NATIVE_ARRAY_BUFFER_VIEWS$1 || !fails$a(function () {
	  Int8Array$2(1);
	}) || !fails$a(function () {
	  new Int8Array$2(-1);
	}) || !checkCorrectnessOfIteration(function (iterable) {
	  new Int8Array$2();
	  new Int8Array$2(null);
	  new Int8Array$2(1.5);
	  new Int8Array$2(iterable);
	}, true) || fails$a(function () {
	  // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
	  return new Int8Array$2(new ArrayBuffer$2(2), 1, undefined).length !== 1;
	});

	var toInteger$4 = toInteger$9;
	var toLength$e = toLength$m;

	// `ToIndex` abstract operation
	// https://tc39.es/ecma262/#sec-toindex
	var toIndex$2 = function (it) {
	  if (it === undefined) return 0;
	  var number = toInteger$4(it);
	  var length = toLength$e(number);
	  if (number !== length) throw RangeError('Wrong length or index');
	  return length;
	};

	// IEEE754 conversions based on https://github.com/feross/ieee754
	var abs = Math.abs;
	var pow = Math.pow;
	var floor$2 = Math.floor;
	var log$2 = Math.log;
	var LN2 = Math.LN2;

	var pack = function (number, mantissaLength, bytes) {
	  var buffer = new Array(bytes);
	  var exponentLength = bytes * 8 - mantissaLength - 1;
	  var eMax = (1 << exponentLength) - 1;
	  var eBias = eMax >> 1;
	  var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
	  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
	  var index = 0;
	  var exponent, mantissa, c;
	  number = abs(number);
	  // eslint-disable-next-line no-self-compare -- NaN check
	  if (number != number || number === Infinity) {
	    // eslint-disable-next-line no-self-compare -- NaN check
	    mantissa = number != number ? 1 : 0;
	    exponent = eMax;
	  } else {
	    exponent = floor$2(log$2(number) / LN2);
	    if (number * (c = pow(2, -exponent)) < 1) {
	      exponent--;
	      c *= 2;
	    }
	    if (exponent + eBias >= 1) {
	      number += rt / c;
	    } else {
	      number += rt * pow(2, 1 - eBias);
	    }
	    if (number * c >= 2) {
	      exponent++;
	      c /= 2;
	    }
	    if (exponent + eBias >= eMax) {
	      mantissa = 0;
	      exponent = eMax;
	    } else if (exponent + eBias >= 1) {
	      mantissa = (number * c - 1) * pow(2, mantissaLength);
	      exponent = exponent + eBias;
	    } else {
	      mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
	      exponent = 0;
	    }
	  }
	  for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8);
	  exponent = exponent << mantissaLength | mantissa;
	  exponentLength += mantissaLength;
	  for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8);
	  buffer[--index] |= sign * 128;
	  return buffer;
	};

	var unpack = function (buffer, mantissaLength) {
	  var bytes = buffer.length;
	  var exponentLength = bytes * 8 - mantissaLength - 1;
	  var eMax = (1 << exponentLength) - 1;
	  var eBias = eMax >> 1;
	  var nBits = exponentLength - 7;
	  var index = bytes - 1;
	  var sign = buffer[index--];
	  var exponent = sign & 127;
	  var mantissa;
	  sign >>= 7;
	  for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8);
	  mantissa = exponent & (1 << -nBits) - 1;
	  exponent >>= -nBits;
	  nBits += mantissaLength;
	  for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8);
	  if (exponent === 0) {
	    exponent = 1 - eBias;
	  } else if (exponent === eMax) {
	    return mantissa ? NaN : sign ? -Infinity : Infinity;
	  } else {
	    mantissa = mantissa + pow(2, mantissaLength);
	    exponent = exponent - eBias;
	  } return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
	};

	var ieee754 = {
	  pack: pack,
	  unpack: unpack
	};

	var toObject$7 = toObject$g;
	var toAbsoluteIndex$3 = toAbsoluteIndex$6;
	var toLength$d = toLength$m;

	// `Array.prototype.fill` method implementation
	// https://tc39.es/ecma262/#sec-array.prototype.fill
	var arrayFill$1 = function fill(value /* , start = 0, end = @length */) {
	  var O = toObject$7(this);
	  var length = toLength$d(O.length);
	  var argumentsLength = arguments.length;
	  var index = toAbsoluteIndex$3(argumentsLength > 1 ? arguments[1] : undefined, length);
	  var end = argumentsLength > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : toAbsoluteIndex$3(end, length);
	  while (endPos > index) O[index++] = value;
	  return O;
	};

	var global$6 = global$B;
	var DESCRIPTORS$2 = descriptors;
	var NATIVE_ARRAY_BUFFER = arrayBufferNative;
	var createNonEnumerableProperty$1 = createNonEnumerableProperty$c;
	var redefineAll = redefineAll$3;
	var fails$9 = fails$z;
	var anInstance$1 = anInstance$5;
	var toInteger$3 = toInteger$9;
	var toLength$c = toLength$m;
	var toIndex$1 = toIndex$2;
	var IEEE754 = ieee754;
	var getPrototypeOf = objectGetPrototypeOf;
	var setPrototypeOf$1 = objectSetPrototypeOf;
	var getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
	var defineProperty$1 = objectDefineProperty.f;
	var arrayFill = arrayFill$1;
	var setToStringTag = setToStringTag$7;
	var InternalStateModule$1 = internalState;

	var getInternalState$1 = InternalStateModule$1.get;
	var setInternalState$1 = InternalStateModule$1.set;
	var ARRAY_BUFFER = 'ArrayBuffer';
	var DATA_VIEW = 'DataView';
	var PROTOTYPE = 'prototype';
	var WRONG_LENGTH$1 = 'Wrong length';
	var WRONG_INDEX = 'Wrong index';
	var NativeArrayBuffer = global$6[ARRAY_BUFFER];
	var $ArrayBuffer = NativeArrayBuffer;
	var $DataView = global$6[DATA_VIEW];
	var $DataViewPrototype = $DataView && $DataView[PROTOTYPE];
	var ObjectPrototype = Object.prototype;
	var RangeError$2 = global$6.RangeError;

	var packIEEE754 = IEEE754.pack;
	var unpackIEEE754 = IEEE754.unpack;

	var packInt8 = function (number) {
	  return [number & 0xFF];
	};

	var packInt16 = function (number) {
	  return [number & 0xFF, number >> 8 & 0xFF];
	};

	var packInt32 = function (number) {
	  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
	};

	var unpackInt32 = function (buffer) {
	  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
	};

	var packFloat32 = function (number) {
	  return packIEEE754(number, 23, 4);
	};

	var packFloat64 = function (number) {
	  return packIEEE754(number, 52, 8);
	};

	var addGetter$1 = function (Constructor, key) {
	  defineProperty$1(Constructor[PROTOTYPE], key, { get: function () { return getInternalState$1(this)[key]; } });
	};

	var get = function (view, count, index, isLittleEndian) {
	  var intIndex = toIndex$1(index);
	  var store = getInternalState$1(view);
	  if (intIndex + count > store.byteLength) throw RangeError$2(WRONG_INDEX);
	  var bytes = getInternalState$1(store.buffer).bytes;
	  var start = intIndex + store.byteOffset;
	  var pack = bytes.slice(start, start + count);
	  return isLittleEndian ? pack : pack.reverse();
	};

	var set = function (view, count, index, conversion, value, isLittleEndian) {
	  var intIndex = toIndex$1(index);
	  var store = getInternalState$1(view);
	  if (intIndex + count > store.byteLength) throw RangeError$2(WRONG_INDEX);
	  var bytes = getInternalState$1(store.buffer).bytes;
	  var start = intIndex + store.byteOffset;
	  var pack = conversion(+value);
	  for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
	};

	if (!NATIVE_ARRAY_BUFFER) {
	  $ArrayBuffer = function ArrayBuffer(length) {
	    anInstance$1(this, $ArrayBuffer, ARRAY_BUFFER);
	    var byteLength = toIndex$1(length);
	    setInternalState$1(this, {
	      bytes: arrayFill.call(new Array(byteLength), 0),
	      byteLength: byteLength
	    });
	    if (!DESCRIPTORS$2) this.byteLength = byteLength;
	  };

	  $DataView = function DataView(buffer, byteOffset, byteLength) {
	    anInstance$1(this, $DataView, DATA_VIEW);
	    anInstance$1(buffer, $ArrayBuffer, DATA_VIEW);
	    var bufferLength = getInternalState$1(buffer).byteLength;
	    var offset = toInteger$3(byteOffset);
	    if (offset < 0 || offset > bufferLength) throw RangeError$2('Wrong offset');
	    byteLength = byteLength === undefined ? bufferLength - offset : toLength$c(byteLength);
	    if (offset + byteLength > bufferLength) throw RangeError$2(WRONG_LENGTH$1);
	    setInternalState$1(this, {
	      buffer: buffer,
	      byteLength: byteLength,
	      byteOffset: offset
	    });
	    if (!DESCRIPTORS$2) {
	      this.buffer = buffer;
	      this.byteLength = byteLength;
	      this.byteOffset = offset;
	    }
	  };

	  if (DESCRIPTORS$2) {
	    addGetter$1($ArrayBuffer, 'byteLength');
	    addGetter$1($DataView, 'buffer');
	    addGetter$1($DataView, 'byteLength');
	    addGetter$1($DataView, 'byteOffset');
	  }

	  redefineAll($DataView[PROTOTYPE], {
	    getInt8: function getInt8(byteOffset) {
	      return get(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset) {
	      return get(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset /* , littleEndian */) {
	      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset /* , littleEndian */) {
	      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset /* , littleEndian */) {
	      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
	    },
	    getUint32: function getUint32(byteOffset /* , littleEndian */) {
	      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
	    },
	    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
	    },
	    setInt8: function setInt8(byteOffset, value) {
	      set(this, 1, byteOffset, packInt8, value);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      set(this, 1, byteOffset, packInt8, value);
	    },
	    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
	      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
	      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
	      set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
	    }
	  });
	} else {
	  /* eslint-disable no-new -- required for testing */
	  if (!fails$9(function () {
	    NativeArrayBuffer(1);
	  }) || !fails$9(function () {
	    new NativeArrayBuffer(-1);
	  }) || fails$9(function () {
	    new NativeArrayBuffer();
	    new NativeArrayBuffer(1.5);
	    new NativeArrayBuffer(NaN);
	    return NativeArrayBuffer.name != ARRAY_BUFFER;
	  })) {
	  /* eslint-enable no-new -- required for testing */
	    $ArrayBuffer = function ArrayBuffer(length) {
	      anInstance$1(this, $ArrayBuffer);
	      return new NativeArrayBuffer(toIndex$1(length));
	    };
	    var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE] = NativeArrayBuffer[PROTOTYPE];
	    for (var keys = getOwnPropertyNames$1(NativeArrayBuffer), j = 0, key; keys.length > j;) {
	      if (!((key = keys[j++]) in $ArrayBuffer)) {
	        createNonEnumerableProperty$1($ArrayBuffer, key, NativeArrayBuffer[key]);
	      }
	    }
	    ArrayBufferPrototype.constructor = $ArrayBuffer;
	  }

	  // WebKit bug - the same parent prototype for typed arrays and data view
	  if (setPrototypeOf$1 && getPrototypeOf($DataViewPrototype) !== ObjectPrototype) {
	    setPrototypeOf$1($DataViewPrototype, ObjectPrototype);
	  }

	  // iOS Safari 7.x bug
	  var testView = new $DataView(new $ArrayBuffer(2));
	  var $setInt8 = $DataViewPrototype.setInt8;
	  testView.setInt8(0, 2147483648);
	  testView.setInt8(1, 2147483649);
	  if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataViewPrototype, {
	    setInt8: function setInt8(byteOffset, value) {
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    }
	  }, { unsafe: true });
	}

	setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	setToStringTag($DataView, DATA_VIEW);

	var arrayBuffer = {
	  ArrayBuffer: $ArrayBuffer,
	  DataView: $DataView
	};

	var toInteger$2 = toInteger$9;

	var toPositiveInteger$1 = function (it) {
	  var result = toInteger$2(it);
	  if (result < 0) throw RangeError("The argument can't be less than 0");
	  return result;
	};

	var toPositiveInteger = toPositiveInteger$1;

	var toOffset$2 = function (it, BYTES) {
	  var offset = toPositiveInteger(it);
	  if (offset % BYTES) throw RangeError('Wrong offset');
	  return offset;
	};

	var toObject$6 = toObject$g;
	var toLength$b = toLength$m;
	var getIterator = getIterator$3;
	var getIteratorMethod = getIteratorMethod$4;
	var isArrayIteratorMethod = isArrayIteratorMethod$3;
	var bind = functionBindContext;
	var aTypedArrayConstructor$2 = arrayBufferViewCore.aTypedArrayConstructor;

	var typedArrayFrom$1 = function from(source /* , mapfn, thisArg */) {
	  var O = toObject$6(source);
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  var iteratorMethod = getIteratorMethod(O);
	  var i, length, result, step, iterator, next;
	  if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {
	    iterator = getIterator(O, iteratorMethod);
	    next = iterator.next;
	    O = [];
	    while (!(step = next.call(iterator)).done) {
	      O.push(step.value);
	    }
	  }
	  if (mapping && argumentsLength > 2) {
	    mapfn = bind(mapfn, arguments[2], 2);
	  }
	  length = toLength$b(O.length);
	  result = new (aTypedArrayConstructor$2(this))(length);
	  for (i = 0; length > i; i++) {
	    result[i] = mapping ? mapfn(O[i], i) : O[i];
	  }
	  return result;
	};

	var $$4 = _export;
	var global$5 = global$B;
	var DESCRIPTORS$1 = descriptors;
	var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = typedArrayConstructorsRequireWrappers;
	var ArrayBufferViewCore$n = arrayBufferViewCore;
	var ArrayBufferModule = arrayBuffer;
	var anInstance = anInstance$5;
	var createPropertyDescriptor = createPropertyDescriptor$6;
	var createNonEnumerableProperty = createNonEnumerableProperty$c;
	var isInteger$1 = isInteger$3;
	var toLength$a = toLength$m;
	var toIndex = toIndex$2;
	var toOffset$1 = toOffset$2;
	var toPropertyKey = toPropertyKey$5;
	var has = has$f;
	var classof$1 = classof$8;
	var isObject$1 = isObject$n;
	var isSymbol = isSymbol$6;
	var create = objectCreate;
	var setPrototypeOf = objectSetPrototypeOf;
	var getOwnPropertyNames = objectGetOwnPropertyNames.f;
	var typedArrayFrom = typedArrayFrom$1;
	var forEach = arrayIteration.forEach;
	var setSpecies = setSpecies$3;
	var definePropertyModule = objectDefineProperty;
	var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
	var InternalStateModule = internalState;
	var inheritIfRequired = inheritIfRequired$3;

	var getInternalState = InternalStateModule.get;
	var setInternalState = InternalStateModule.set;
	var nativeDefineProperty = definePropertyModule.f;
	var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
	var round = Math.round;
	var RangeError$1 = global$5.RangeError;
	var ArrayBuffer$1 = ArrayBufferModule.ArrayBuffer;
	var DataView$1 = ArrayBufferModule.DataView;
	var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore$n.NATIVE_ARRAY_BUFFER_VIEWS;
	var TYPED_ARRAY_CONSTRUCTOR$1 = ArrayBufferViewCore$n.TYPED_ARRAY_CONSTRUCTOR;
	var TYPED_ARRAY_TAG = ArrayBufferViewCore$n.TYPED_ARRAY_TAG;
	var TypedArray = ArrayBufferViewCore$n.TypedArray;
	var TypedArrayPrototype = ArrayBufferViewCore$n.TypedArrayPrototype;
	var aTypedArrayConstructor$1 = ArrayBufferViewCore$n.aTypedArrayConstructor;
	var isTypedArray = ArrayBufferViewCore$n.isTypedArray;
	var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
	var WRONG_LENGTH = 'Wrong length';

	var fromList = function (C, list) {
	  var index = 0;
	  var length = list.length;
	  var result = new (aTypedArrayConstructor$1(C))(length);
	  while (length > index) result[index] = list[index++];
	  return result;
	};

	var addGetter = function (it, key) {
	  nativeDefineProperty(it, key, { get: function () {
	    return getInternalState(this)[key];
	  } });
	};

	var isArrayBuffer = function (it) {
	  var klass;
	  return it instanceof ArrayBuffer$1 || (klass = classof$1(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
	};

	var isTypedArrayIndex = function (target, key) {
	  return isTypedArray(target)
	    && !isSymbol(key)
	    && key in target
	    && isInteger$1(+key)
	    && key >= 0;
	};

	var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
	  key = toPropertyKey(key);
	  return isTypedArrayIndex(target, key)
	    ? createPropertyDescriptor(2, target[key])
	    : nativeGetOwnPropertyDescriptor(target, key);
	};

	var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
	  key = toPropertyKey(key);
	  if (isTypedArrayIndex(target, key)
	    && isObject$1(descriptor)
	    && has(descriptor, 'value')
	    && !has(descriptor, 'get')
	    && !has(descriptor, 'set')
	    // TODO: add validation descriptor w/o calling accessors
	    && !descriptor.configurable
	    && (!has(descriptor, 'writable') || descriptor.writable)
	    && (!has(descriptor, 'enumerable') || descriptor.enumerable)
	  ) {
	    target[key] = descriptor.value;
	    return target;
	  } return nativeDefineProperty(target, key, descriptor);
	};

	if (DESCRIPTORS$1) {
	  if (!NATIVE_ARRAY_BUFFER_VIEWS) {
	    getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
	    definePropertyModule.f = wrappedDefineProperty;
	    addGetter(TypedArrayPrototype, 'buffer');
	    addGetter(TypedArrayPrototype, 'byteOffset');
	    addGetter(TypedArrayPrototype, 'byteLength');
	    addGetter(TypedArrayPrototype, 'length');
	  }

	  $$4({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
	    getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
	    defineProperty: wrappedDefineProperty
	  });

	  typedArrayConstructor.exports = function (TYPE, wrapper, CLAMPED) {
	    var BYTES = TYPE.match(/\d+$/)[0] / 8;
	    var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
	    var GETTER = 'get' + TYPE;
	    var SETTER = 'set' + TYPE;
	    var NativeTypedArrayConstructor = global$5[CONSTRUCTOR_NAME];
	    var TypedArrayConstructor = NativeTypedArrayConstructor;
	    var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
	    var exported = {};

	    var getter = function (that, index) {
	      var data = getInternalState(that);
	      return data.view[GETTER](index * BYTES + data.byteOffset, true);
	    };

	    var setter = function (that, index, value) {
	      var data = getInternalState(that);
	      if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
	      data.view[SETTER](index * BYTES + data.byteOffset, value, true);
	    };

	    var addElement = function (that, index) {
	      nativeDefineProperty(that, index, {
	        get: function () {
	          return getter(this, index);
	        },
	        set: function (value) {
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };

	    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
	      TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
	        anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
	        var index = 0;
	        var byteOffset = 0;
	        var buffer, byteLength, length;
	        if (!isObject$1(data)) {
	          length = toIndex(data);
	          byteLength = length * BYTES;
	          buffer = new ArrayBuffer$1(byteLength);
	        } else if (isArrayBuffer(data)) {
	          buffer = data;
	          byteOffset = toOffset$1(offset, BYTES);
	          var $len = data.byteLength;
	          if ($length === undefined) {
	            if ($len % BYTES) throw RangeError$1(WRONG_LENGTH);
	            byteLength = $len - byteOffset;
	            if (byteLength < 0) throw RangeError$1(WRONG_LENGTH);
	          } else {
	            byteLength = toLength$a($length) * BYTES;
	            if (byteLength + byteOffset > $len) throw RangeError$1(WRONG_LENGTH);
	          }
	          length = byteLength / BYTES;
	        } else if (isTypedArray(data)) {
	          return fromList(TypedArrayConstructor, data);
	        } else {
	          return typedArrayFrom.call(TypedArrayConstructor, data);
	        }
	        setInternalState(that, {
	          buffer: buffer,
	          byteOffset: byteOffset,
	          byteLength: byteLength,
	          length: length,
	          view: new DataView$1(buffer)
	        });
	        while (index < length) addElement(that, index++);
	      });

	      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
	      TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);
	    } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
	      TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
	        anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
	        return inheritIfRequired(function () {
	          if (!isObject$1(data)) return new NativeTypedArrayConstructor(toIndex(data));
	          if (isArrayBuffer(data)) return $length !== undefined
	            ? new NativeTypedArrayConstructor(data, toOffset$1(typedArrayOffset, BYTES), $length)
	            : typedArrayOffset !== undefined
	              ? new NativeTypedArrayConstructor(data, toOffset$1(typedArrayOffset, BYTES))
	              : new NativeTypedArrayConstructor(data);
	          if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
	          return typedArrayFrom.call(TypedArrayConstructor, data);
	        }(), dummy, TypedArrayConstructor);
	      });

	      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
	      forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
	        if (!(key in TypedArrayConstructor)) {
	          createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
	        }
	      });
	      TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
	    }

	    if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
	      createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
	    }

	    createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_CONSTRUCTOR$1, TypedArrayConstructor);

	    if (TYPED_ARRAY_TAG) {
	      createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
	    }

	    exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;

	    $$4({
	      global: true, forced: TypedArrayConstructor != NativeTypedArrayConstructor, sham: !NATIVE_ARRAY_BUFFER_VIEWS
	    }, exported);

	    if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
	      createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
	    }

	    if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
	      createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
	    }

	    setSpecies(CONSTRUCTOR_NAME);
	  };
	} else typedArrayConstructor.exports = function () { /* empty */ };

	var createTypedArrayConstructor = typedArrayConstructor.exports;

	// `Uint8Array` constructor
	// https://tc39.es/ecma262/#sec-typedarray-objects
	createTypedArrayConstructor('Uint8', function (init) {
	  return function Uint8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var toObject$5 = toObject$g;
	var toAbsoluteIndex$2 = toAbsoluteIndex$6;
	var toLength$9 = toLength$m;

	var min$3 = Math.min;

	// `Array.prototype.copyWithin` method implementation
	// https://tc39.es/ecma262/#sec-array.prototype.copywithin
	// eslint-disable-next-line es/no-array-prototype-copywithin -- safe
	var arrayCopyWithin = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
	  var O = toObject$5(this);
	  var len = toLength$9(O.length);
	  var to = toAbsoluteIndex$2(target, len);
	  var from = toAbsoluteIndex$2(start, len);
	  var end = arguments.length > 2 ? arguments[2] : undefined;
	  var count = min$3((end === undefined ? len : toAbsoluteIndex$2(end, len)) - from, len - to);
	  var inc = 1;
	  if (from < to && to < from + count) {
	    inc = -1;
	    from += count - 1;
	    to += count - 1;
	  }
	  while (count-- > 0) {
	    if (from in O) O[to] = O[from];
	    else delete O[to];
	    to += inc;
	    from += inc;
	  } return O;
	};

	var ArrayBufferViewCore$m = arrayBufferViewCore;
	var $copyWithin = arrayCopyWithin;

	var aTypedArray$l = ArrayBufferViewCore$m.aTypedArray;
	var exportTypedArrayMethod$m = ArrayBufferViewCore$m.exportTypedArrayMethod;

	// `%TypedArray%.prototype.copyWithin` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin
	exportTypedArrayMethod$m('copyWithin', function copyWithin(target, start /* , end */) {
	  return $copyWithin.call(aTypedArray$l(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	});

	var ArrayBufferViewCore$l = arrayBufferViewCore;
	var $every = arrayIteration.every;

	var aTypedArray$k = ArrayBufferViewCore$l.aTypedArray;
	var exportTypedArrayMethod$l = ArrayBufferViewCore$l.exportTypedArrayMethod;

	// `%TypedArray%.prototype.every` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.every
	exportTypedArrayMethod$l('every', function every(callbackfn /* , thisArg */) {
	  return $every(aTypedArray$k(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ArrayBufferViewCore$k = arrayBufferViewCore;
	var $fill = arrayFill$1;

	var aTypedArray$j = ArrayBufferViewCore$k.aTypedArray;
	var exportTypedArrayMethod$k = ArrayBufferViewCore$k.exportTypedArrayMethod;

	// `%TypedArray%.prototype.fill` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill
	// eslint-disable-next-line no-unused-vars -- required for `.length`
	exportTypedArrayMethod$k('fill', function fill(value /* , start, end */) {
	  return $fill.apply(aTypedArray$j(this), arguments);
	});

	var arrayFromConstructorAndList$1 = function (Constructor, list) {
	  var index = 0;
	  var length = list.length;
	  var result = new Constructor(length);
	  while (length > index) result[index] = list[index++];
	  return result;
	};

	var ArrayBufferViewCore$j = arrayBufferViewCore;
	var speciesConstructor$1 = speciesConstructor$3;

	var TYPED_ARRAY_CONSTRUCTOR = ArrayBufferViewCore$j.TYPED_ARRAY_CONSTRUCTOR;
	var aTypedArrayConstructor = ArrayBufferViewCore$j.aTypedArrayConstructor;

	// a part of `TypedArraySpeciesCreate` abstract operation
	// https://tc39.es/ecma262/#typedarray-species-create
	var typedArraySpeciesConstructor$4 = function (originalArray) {
	  return aTypedArrayConstructor(speciesConstructor$1(originalArray, originalArray[TYPED_ARRAY_CONSTRUCTOR]));
	};

	var arrayFromConstructorAndList = arrayFromConstructorAndList$1;
	var typedArraySpeciesConstructor$3 = typedArraySpeciesConstructor$4;

	var typedArrayFromSpeciesAndList = function (instance, list) {
	  return arrayFromConstructorAndList(typedArraySpeciesConstructor$3(instance), list);
	};

	var ArrayBufferViewCore$i = arrayBufferViewCore;
	var $filter = arrayIteration.filter;
	var fromSpeciesAndList = typedArrayFromSpeciesAndList;

	var aTypedArray$i = ArrayBufferViewCore$i.aTypedArray;
	var exportTypedArrayMethod$j = ArrayBufferViewCore$i.exportTypedArrayMethod;

	// `%TypedArray%.prototype.filter` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter
	exportTypedArrayMethod$j('filter', function filter(callbackfn /* , thisArg */) {
	  var list = $filter(aTypedArray$i(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  return fromSpeciesAndList(this, list);
	});

	var ArrayBufferViewCore$h = arrayBufferViewCore;
	var $find = arrayIteration.find;

	var aTypedArray$h = ArrayBufferViewCore$h.aTypedArray;
	var exportTypedArrayMethod$i = ArrayBufferViewCore$h.exportTypedArrayMethod;

	// `%TypedArray%.prototype.find` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.find
	exportTypedArrayMethod$i('find', function find(predicate /* , thisArg */) {
	  return $find(aTypedArray$h(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ArrayBufferViewCore$g = arrayBufferViewCore;
	var $findIndex = arrayIteration.findIndex;

	var aTypedArray$g = ArrayBufferViewCore$g.aTypedArray;
	var exportTypedArrayMethod$h = ArrayBufferViewCore$g.exportTypedArrayMethod;

	// `%TypedArray%.prototype.findIndex` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex
	exportTypedArrayMethod$h('findIndex', function findIndex(predicate /* , thisArg */) {
	  return $findIndex(aTypedArray$g(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ArrayBufferViewCore$f = arrayBufferViewCore;
	var $forEach = arrayIteration.forEach;

	var aTypedArray$f = ArrayBufferViewCore$f.aTypedArray;
	var exportTypedArrayMethod$g = ArrayBufferViewCore$f.exportTypedArrayMethod;

	// `%TypedArray%.prototype.forEach` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach
	exportTypedArrayMethod$g('forEach', function forEach(callbackfn /* , thisArg */) {
	  $forEach(aTypedArray$f(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ArrayBufferViewCore$e = arrayBufferViewCore;
	var $includes = arrayIncludes.includes;

	var aTypedArray$e = ArrayBufferViewCore$e.aTypedArray;
	var exportTypedArrayMethod$f = ArrayBufferViewCore$e.exportTypedArrayMethod;

	// `%TypedArray%.prototype.includes` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes
	exportTypedArrayMethod$f('includes', function includes(searchElement /* , fromIndex */) {
	  return $includes(aTypedArray$e(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ArrayBufferViewCore$d = arrayBufferViewCore;
	var $indexOf = arrayIncludes.indexOf;

	var aTypedArray$d = ArrayBufferViewCore$d.aTypedArray;
	var exportTypedArrayMethod$e = ArrayBufferViewCore$d.exportTypedArrayMethod;

	// `%TypedArray%.prototype.indexOf` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof
	exportTypedArrayMethod$e('indexOf', function indexOf(searchElement /* , fromIndex */) {
	  return $indexOf(aTypedArray$d(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	});

	var global$4 = global$B;
	var ArrayBufferViewCore$c = arrayBufferViewCore;
	var ArrayIterators = es_array_iterator;
	var wellKnownSymbol$1 = wellKnownSymbol$p;

	var ITERATOR = wellKnownSymbol$1('iterator');
	var Uint8Array$2 = global$4.Uint8Array;
	var arrayValues = ArrayIterators.values;
	var arrayKeys = ArrayIterators.keys;
	var arrayEntries = ArrayIterators.entries;
	var aTypedArray$c = ArrayBufferViewCore$c.aTypedArray;
	var exportTypedArrayMethod$d = ArrayBufferViewCore$c.exportTypedArrayMethod;
	var nativeTypedArrayIterator = Uint8Array$2 && Uint8Array$2.prototype[ITERATOR];

	var CORRECT_ITER_NAME = !!nativeTypedArrayIterator
	  && (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined);

	var typedArrayValues = function values() {
	  return arrayValues.call(aTypedArray$c(this));
	};

	// `%TypedArray%.prototype.entries` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries
	exportTypedArrayMethod$d('entries', function entries() {
	  return arrayEntries.call(aTypedArray$c(this));
	});
	// `%TypedArray%.prototype.keys` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys
	exportTypedArrayMethod$d('keys', function keys() {
	  return arrayKeys.call(aTypedArray$c(this));
	});
	// `%TypedArray%.prototype.values` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.values
	exportTypedArrayMethod$d('values', typedArrayValues, !CORRECT_ITER_NAME);
	// `%TypedArray%.prototype[@@iterator]` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator
	exportTypedArrayMethod$d(ITERATOR, typedArrayValues, !CORRECT_ITER_NAME);

	var ArrayBufferViewCore$b = arrayBufferViewCore;

	var aTypedArray$b = ArrayBufferViewCore$b.aTypedArray;
	var exportTypedArrayMethod$c = ArrayBufferViewCore$b.exportTypedArrayMethod;
	var $join = [].join;

	// `%TypedArray%.prototype.join` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.join
	// eslint-disable-next-line no-unused-vars -- required for `.length`
	exportTypedArrayMethod$c('join', function join(separator) {
	  return $join.apply(aTypedArray$b(this), arguments);
	});

	/* eslint-disable es/no-array-prototype-lastindexof -- safe */
	var toIndexedObject = toIndexedObject$c;
	var toInteger$1 = toInteger$9;
	var toLength$8 = toLength$m;
	var arrayMethodIsStrict$1 = arrayMethodIsStrict$4;

	var min$2 = Math.min;
	var $lastIndexOf$1 = [].lastIndexOf;
	var NEGATIVE_ZERO = !!$lastIndexOf$1 && 1 / [1].lastIndexOf(1, -0) < 0;
	var STRICT_METHOD$1 = arrayMethodIsStrict$1('lastIndexOf');
	var FORCED$5 = NEGATIVE_ZERO || !STRICT_METHOD$1;

	// `Array.prototype.lastIndexOf` method implementation
	// https://tc39.es/ecma262/#sec-array.prototype.lastindexof
	var arrayLastIndexOf = FORCED$5 ? function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
	  // convert -0 to +0
	  if (NEGATIVE_ZERO) return $lastIndexOf$1.apply(this, arguments) || 0;
	  var O = toIndexedObject(this);
	  var length = toLength$8(O.length);
	  var index = length - 1;
	  if (arguments.length > 1) index = min$2(index, toInteger$1(arguments[1]));
	  if (index < 0) index = length + index;
	  for (;index >= 0; index--) if (index in O && O[index] === searchElement) return index || 0;
	  return -1;
	} : $lastIndexOf$1;

	var ArrayBufferViewCore$a = arrayBufferViewCore;
	var $lastIndexOf = arrayLastIndexOf;

	var aTypedArray$a = ArrayBufferViewCore$a.aTypedArray;
	var exportTypedArrayMethod$b = ArrayBufferViewCore$a.exportTypedArrayMethod;

	// `%TypedArray%.prototype.lastIndexOf` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof
	// eslint-disable-next-line no-unused-vars -- required for `.length`
	exportTypedArrayMethod$b('lastIndexOf', function lastIndexOf(searchElement /* , fromIndex */) {
	  return $lastIndexOf.apply(aTypedArray$a(this), arguments);
	});

	var ArrayBufferViewCore$9 = arrayBufferViewCore;
	var $map = arrayIteration.map;
	var typedArraySpeciesConstructor$2 = typedArraySpeciesConstructor$4;

	var aTypedArray$9 = ArrayBufferViewCore$9.aTypedArray;
	var exportTypedArrayMethod$a = ArrayBufferViewCore$9.exportTypedArrayMethod;

	// `%TypedArray%.prototype.map` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.map
	exportTypedArrayMethod$a('map', function map(mapfn /* , thisArg */) {
	  return $map(aTypedArray$9(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function (O, length) {
	    return new (typedArraySpeciesConstructor$2(O))(length);
	  });
	});

	var aFunction$2 = aFunction$9;
	var toObject$4 = toObject$g;
	var IndexedObject$1 = indexedObject;
	var toLength$7 = toLength$m;

	// `Array.prototype.{ reduce, reduceRight }` methods implementation
	var createMethod = function (IS_RIGHT) {
	  return function (that, callbackfn, argumentsLength, memo) {
	    aFunction$2(callbackfn);
	    var O = toObject$4(that);
	    var self = IndexedObject$1(O);
	    var length = toLength$7(O.length);
	    var index = IS_RIGHT ? length - 1 : 0;
	    var i = IS_RIGHT ? -1 : 1;
	    if (argumentsLength < 2) while (true) {
	      if (index in self) {
	        memo = self[index];
	        index += i;
	        break;
	      }
	      index += i;
	      if (IS_RIGHT ? index < 0 : length <= index) {
	        throw TypeError('Reduce of empty array with no initial value');
	      }
	    }
	    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
	      memo = callbackfn(memo, self[index], index, O);
	    }
	    return memo;
	  };
	};

	var arrayReduce = {
	  // `Array.prototype.reduce` method
	  // https://tc39.es/ecma262/#sec-array.prototype.reduce
	  left: createMethod(false),
	  // `Array.prototype.reduceRight` method
	  // https://tc39.es/ecma262/#sec-array.prototype.reduceright
	  right: createMethod(true)
	};

	var ArrayBufferViewCore$8 = arrayBufferViewCore;
	var $reduce = arrayReduce.left;

	var aTypedArray$8 = ArrayBufferViewCore$8.aTypedArray;
	var exportTypedArrayMethod$9 = ArrayBufferViewCore$8.exportTypedArrayMethod;

	// `%TypedArray%.prototype.reduce` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce
	exportTypedArrayMethod$9('reduce', function reduce(callbackfn /* , initialValue */) {
	  return $reduce(aTypedArray$8(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ArrayBufferViewCore$7 = arrayBufferViewCore;
	var $reduceRight = arrayReduce.right;

	var aTypedArray$7 = ArrayBufferViewCore$7.aTypedArray;
	var exportTypedArrayMethod$8 = ArrayBufferViewCore$7.exportTypedArrayMethod;

	// `%TypedArray%.prototype.reduceRicht` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright
	exportTypedArrayMethod$8('reduceRight', function reduceRight(callbackfn /* , initialValue */) {
	  return $reduceRight(aTypedArray$7(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ArrayBufferViewCore$6 = arrayBufferViewCore;

	var aTypedArray$6 = ArrayBufferViewCore$6.aTypedArray;
	var exportTypedArrayMethod$7 = ArrayBufferViewCore$6.exportTypedArrayMethod;
	var floor$1 = Math.floor;

	// `%TypedArray%.prototype.reverse` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse
	exportTypedArrayMethod$7('reverse', function reverse() {
	  var that = this;
	  var length = aTypedArray$6(that).length;
	  var middle = floor$1(length / 2);
	  var index = 0;
	  var value;
	  while (index < middle) {
	    value = that[index];
	    that[index++] = that[--length];
	    that[length] = value;
	  } return that;
	});

	var ArrayBufferViewCore$5 = arrayBufferViewCore;
	var toLength$6 = toLength$m;
	var toOffset = toOffset$2;
	var toObject$3 = toObject$g;
	var fails$8 = fails$z;

	var aTypedArray$5 = ArrayBufferViewCore$5.aTypedArray;
	var exportTypedArrayMethod$6 = ArrayBufferViewCore$5.exportTypedArrayMethod;

	var FORCED$4 = fails$8(function () {
	  // eslint-disable-next-line es/no-typed-arrays -- required for testing
	  new Int8Array(1).set({});
	});

	// `%TypedArray%.prototype.set` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.set
	exportTypedArrayMethod$6('set', function set(arrayLike /* , offset */) {
	  aTypedArray$5(this);
	  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
	  var length = this.length;
	  var src = toObject$3(arrayLike);
	  var len = toLength$6(src.length);
	  var index = 0;
	  if (len + offset > length) throw RangeError('Wrong length');
	  while (index < len) this[offset + index] = src[index++];
	}, FORCED$4);

	var ArrayBufferViewCore$4 = arrayBufferViewCore;
	var typedArraySpeciesConstructor$1 = typedArraySpeciesConstructor$4;
	var fails$7 = fails$z;

	var aTypedArray$4 = ArrayBufferViewCore$4.aTypedArray;
	var exportTypedArrayMethod$5 = ArrayBufferViewCore$4.exportTypedArrayMethod;
	var $slice$1 = [].slice;

	var FORCED$3 = fails$7(function () {
	  // eslint-disable-next-line es/no-typed-arrays -- required for testing
	  new Int8Array(1).slice();
	});

	// `%TypedArray%.prototype.slice` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice
	exportTypedArrayMethod$5('slice', function slice(start, end) {
	  var list = $slice$1.call(aTypedArray$4(this), start, end);
	  var C = typedArraySpeciesConstructor$1(this);
	  var index = 0;
	  var length = list.length;
	  var result = new C(length);
	  while (length > index) result[index] = list[index++];
	  return result;
	}, FORCED$3);

	var ArrayBufferViewCore$3 = arrayBufferViewCore;
	var $some = arrayIteration.some;

	var aTypedArray$3 = ArrayBufferViewCore$3.aTypedArray;
	var exportTypedArrayMethod$4 = ArrayBufferViewCore$3.exportTypedArrayMethod;

	// `%TypedArray%.prototype.some` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.some
	exportTypedArrayMethod$4('some', function some(callbackfn /* , thisArg */) {
	  return $some(aTypedArray$3(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	// TODO: use something more complex like timsort?
	var floor = Math.floor;

	var mergeSort = function (array, comparefn) {
	  var length = array.length;
	  var middle = floor(length / 2);
	  return length < 8 ? insertionSort(array, comparefn) : merge(
	    mergeSort(array.slice(0, middle), comparefn),
	    mergeSort(array.slice(middle), comparefn),
	    comparefn
	  );
	};

	var insertionSort = function (array, comparefn) {
	  var length = array.length;
	  var i = 1;
	  var element, j;

	  while (i < length) {
	    j = i;
	    element = array[i];
	    while (j && comparefn(array[j - 1], element) > 0) {
	      array[j] = array[--j];
	    }
	    if (j !== i++) array[j] = element;
	  } return array;
	};

	var merge = function (left, right, comparefn) {
	  var llength = left.length;
	  var rlength = right.length;
	  var lindex = 0;
	  var rindex = 0;
	  var result = [];

	  while (lindex < llength || rindex < rlength) {
	    if (lindex < llength && rindex < rlength) {
	      result.push(comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]);
	    } else {
	      result.push(lindex < llength ? left[lindex++] : right[rindex++]);
	    }
	  } return result;
	};

	var arraySort = mergeSort;

	var userAgent$1 = engineUserAgent;

	var firefox = userAgent$1.match(/firefox\/(\d+)/i);

	var engineFfVersion = !!firefox && +firefox[1];

	var UA = engineUserAgent;

	var engineIsIeOrEdge = /MSIE|Trident/.test(UA);

	var userAgent = engineUserAgent;

	var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);

	var engineWebkitVersion = !!webkit && +webkit[1];

	var ArrayBufferViewCore$2 = arrayBufferViewCore;
	var global$3 = global$B;
	var fails$6 = fails$z;
	var aFunction$1 = aFunction$9;
	var toLength$5 = toLength$m;
	var internalSort$1 = arraySort;
	var FF$1 = engineFfVersion;
	var IE_OR_EDGE$1 = engineIsIeOrEdge;
	var V8$1 = engineV8Version;
	var WEBKIT$1 = engineWebkitVersion;

	var aTypedArray$2 = ArrayBufferViewCore$2.aTypedArray;
	var exportTypedArrayMethod$3 = ArrayBufferViewCore$2.exportTypedArrayMethod;
	var Uint16Array = global$3.Uint16Array;
	var nativeSort$1 = Uint16Array && Uint16Array.prototype.sort;

	// WebKit
	var ACCEPT_INCORRECT_ARGUMENTS = !!nativeSort$1 && !fails$6(function () {
	  var array = new Uint16Array(2);
	  array.sort(null);
	  array.sort({});
	});

	var STABLE_SORT$1 = !!nativeSort$1 && !fails$6(function () {
	  // feature detection can be too slow, so check engines versions
	  if (V8$1) return V8$1 < 74;
	  if (FF$1) return FF$1 < 67;
	  if (IE_OR_EDGE$1) return true;
	  if (WEBKIT$1) return WEBKIT$1 < 602;

	  var array = new Uint16Array(516);
	  var expected = Array(516);
	  var index, mod;

	  for (index = 0; index < 516; index++) {
	    mod = index % 4;
	    array[index] = 515 - index;
	    expected[index] = index - 2 * mod + 3;
	  }

	  array.sort(function (a, b) {
	    return (a / 4 | 0) - (b / 4 | 0);
	  });

	  for (index = 0; index < 516; index++) {
	    if (array[index] !== expected[index]) return true;
	  }
	});

	var getSortCompare$1 = function (comparefn) {
	  return function (x, y) {
	    if (comparefn !== undefined) return +comparefn(x, y) || 0;
	    // eslint-disable-next-line no-self-compare -- NaN check
	    if (y !== y) return -1;
	    // eslint-disable-next-line no-self-compare -- NaN check
	    if (x !== x) return 1;
	    if (x === 0 && y === 0) return 1 / x > 0 && 1 / y < 0 ? 1 : -1;
	    return x > y;
	  };
	};

	// `%TypedArray%.prototype.sort` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort
	exportTypedArrayMethod$3('sort', function sort(comparefn) {
	  var array = this;
	  if (comparefn !== undefined) aFunction$1(comparefn);
	  if (STABLE_SORT$1) return nativeSort$1.call(array, comparefn);

	  aTypedArray$2(array);
	  var arrayLength = toLength$5(array.length);
	  var items = Array(arrayLength);
	  var index;

	  for (index = 0; index < arrayLength; index++) {
	    items[index] = array[index];
	  }

	  items = internalSort$1(array, getSortCompare$1(comparefn));

	  for (index = 0; index < arrayLength; index++) {
	    array[index] = items[index];
	  }

	  return array;
	}, !STABLE_SORT$1 || ACCEPT_INCORRECT_ARGUMENTS);

	var ArrayBufferViewCore$1 = arrayBufferViewCore;
	var toLength$4 = toLength$m;
	var toAbsoluteIndex$1 = toAbsoluteIndex$6;
	var typedArraySpeciesConstructor = typedArraySpeciesConstructor$4;

	var aTypedArray$1 = ArrayBufferViewCore$1.aTypedArray;
	var exportTypedArrayMethod$2 = ArrayBufferViewCore$1.exportTypedArrayMethod;

	// `%TypedArray%.prototype.subarray` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray
	exportTypedArrayMethod$2('subarray', function subarray(begin, end) {
	  var O = aTypedArray$1(this);
	  var length = O.length;
	  var beginIndex = toAbsoluteIndex$1(begin, length);
	  var C = typedArraySpeciesConstructor(O);
	  return new C(
	    O.buffer,
	    O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT,
	    toLength$4((end === undefined ? length : toAbsoluteIndex$1(end, length)) - beginIndex)
	  );
	});

	var global$2 = global$B;
	var ArrayBufferViewCore = arrayBufferViewCore;
	var fails$5 = fails$z;

	var Int8Array$1 = global$2.Int8Array;
	var aTypedArray = ArrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$1 = ArrayBufferViewCore.exportTypedArrayMethod;
	var $toLocaleString = [].toLocaleString;
	var $slice = [].slice;

	// iOS Safari 6.x fails here
	var TO_LOCALE_STRING_BUG = !!Int8Array$1 && fails$5(function () {
	  $toLocaleString.call(new Int8Array$1(1));
	});

	var FORCED$2 = fails$5(function () {
	  return [1, 2].toLocaleString() != new Int8Array$1([1, 2]).toLocaleString();
	}) || !fails$5(function () {
	  Int8Array$1.prototype.toLocaleString.call([1, 2]);
	});

	// `%TypedArray%.prototype.toLocaleString` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring
	exportTypedArrayMethod$1('toLocaleString', function toLocaleString() {
	  return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice.call(aTypedArray(this)) : aTypedArray(this), arguments);
	}, FORCED$2);

	var exportTypedArrayMethod = arrayBufferViewCore.exportTypedArrayMethod;
	var fails$4 = fails$z;
	var global$1 = global$B;

	var Uint8Array$1 = global$1.Uint8Array;
	var Uint8ArrayPrototype = Uint8Array$1 && Uint8Array$1.prototype || {};
	var arrayToString = [].toString;
	var arrayJoin = [].join;

	if (fails$4(function () { arrayToString.call({}); })) {
	  arrayToString = function toString() {
	    return arrayJoin.call(this);
	  };
	}

	var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;

	// `%TypedArray%.prototype.toString` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.tostring
	exportTypedArrayMethod('toString', arrayToString, IS_NOT_ARRAY_METHOD);

	var isObject = isObject$n;
	var classof = classofRaw$1;
	var wellKnownSymbol = wellKnownSymbol$p;

	var MATCH = wellKnownSymbol('match');

	// `IsRegExp` abstract operation
	// https://tc39.es/ecma262/#sec-isregexp
	var isRegexp = function (it) {
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
	};

	var fixRegExpWellKnownSymbolLogic$2 = fixRegexpWellKnownSymbolLogic;
	var isRegExp = isRegexp;
	var anObject$2 = anObject$j;
	var requireObjectCoercible$2 = requireObjectCoercible$8;
	var speciesConstructor = speciesConstructor$3;
	var advanceStringIndex$1 = advanceStringIndex$3;
	var toLength$3 = toLength$m;
	var toString$3 = toString$b;
	var callRegExpExec = regexpExecAbstract;
	var regexpExec = regexpExec$3;
	var stickyHelpers = regexpStickyHelpers;
	var fails$3 = fails$z;

	var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
	var arrayPush = [].push;
	var min$1 = Math.min;
	var MAX_UINT32 = 0xFFFFFFFF;

	// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
	// Weex JS has frozen built-in prototypes, so use try / catch wrapper
	var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails$3(function () {
	  // eslint-disable-next-line regexp/no-empty-group -- required for testing
	  var re = /(?:)/;
	  var originalExec = re.exec;
	  re.exec = function () { return originalExec.apply(this, arguments); };
	  var result = 'ab'.split(re);
	  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
	});

	// @@split logic
	fixRegExpWellKnownSymbolLogic$2('split', function (SPLIT, nativeSplit, maybeCallNative) {
	  var internalSplit;
	  if (
	    'abbc'.split(/(b)*/)[1] == 'c' ||
	    // eslint-disable-next-line regexp/no-empty-group -- required for testing
	    'test'.split(/(?:)/, -1).length != 4 ||
	    'ab'.split(/(?:ab)*/).length != 2 ||
	    '.'.split(/(.?)(.?)/).length != 4 ||
	    // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing
	    '.'.split(/()()/).length > 1 ||
	    ''.split(/.?/).length
	  ) {
	    // based on es5-shim implementation, need to rework it
	    internalSplit = function (separator, limit) {
	      var string = toString$3(requireObjectCoercible$2(this));
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (separator === undefined) return [string];
	      // If `separator` is not a regex, use native split
	      if (!isRegExp(separator)) {
	        return nativeSplit.call(string, separator, lim);
	      }
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var match, lastIndex, lastLength;
	      while (match = regexpExec.call(separatorCopy, string)) {
	        lastIndex = separatorCopy.lastIndex;
	        if (lastIndex > lastLastIndex) {
	          output.push(string.slice(lastLastIndex, match.index));
	          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
	          lastLength = match[0].length;
	          lastLastIndex = lastIndex;
	          if (output.length >= lim) break;
	        }
	        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
	      }
	      if (lastLastIndex === string.length) {
	        if (lastLength || !separatorCopy.test('')) output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output.length > lim ? output.slice(0, lim) : output;
	    };
	  // Chakra, V8
	  } else if ('0'.split(undefined, 0).length) {
	    internalSplit = function (separator, limit) {
	      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
	    };
	  } else internalSplit = nativeSplit;

	  return [
	    // `String.prototype.split` method
	    // https://tc39.es/ecma262/#sec-string.prototype.split
	    function split(separator, limit) {
	      var O = requireObjectCoercible$2(this);
	      var splitter = separator == undefined ? undefined : separator[SPLIT];
	      return splitter !== undefined
	        ? splitter.call(separator, O, limit)
	        : internalSplit.call(toString$3(O), separator, limit);
	    },
	    // `RegExp.prototype[@@split]` method
	    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
	    //
	    // NOTE: This cannot be properly polyfilled in engines that don't support
	    // the 'y' flag.
	    function (string, limit) {
	      var rx = anObject$2(this);
	      var S = toString$3(string);
	      var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);

	      if (res.done) return res.value;

	      var C = speciesConstructor(rx, RegExp);

	      var unicodeMatching = rx.unicode;
	      var flags = (rx.ignoreCase ? 'i' : '') +
	                  (rx.multiline ? 'm' : '') +
	                  (rx.unicode ? 'u' : '') +
	                  (UNSUPPORTED_Y ? 'g' : 'y');

	      // ^(? + rx + ) is needed, in combination with some S slicing, to
	      // simulate the 'y' flag.
	      var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
	      var p = 0;
	      var q = 0;
	      var A = [];
	      while (q < S.length) {
	        splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
	        var z = callRegExpExec(splitter, UNSUPPORTED_Y ? S.slice(q) : S);
	        var e;
	        if (
	          z === null ||
	          (e = min$1(toLength$3(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p
	        ) {
	          q = advanceStringIndex$1(S, q, unicodeMatching);
	        } else {
	          A.push(S.slice(p, q));
	          if (A.length === lim) return A;
	          for (var i = 1; i <= z.length - 1; i++) {
	            A.push(z[i]);
	            if (A.length === lim) return A;
	          }
	          q = p = e;
	        }
	      }
	      A.push(S.slice(p));
	      return A;
	    }
	  ];
	}, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);

	var wrapNativeSuper = {exports: {}};

	var isNativeFunction = {exports: {}};

	(function (module) {
	  function _isNativeFunction(fn) {
	    return Function.toString.call(fn).indexOf("[native code]") !== -1;
	  }

	  module.exports = _isNativeFunction, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(isNativeFunction);

	var construct = {exports: {}};

	var isNativeReflectConstruct = {exports: {}};

	(function (module) {
	  function _isNativeReflectConstruct() {
	    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	    if (Reflect.construct.sham) return false;
	    if (typeof Proxy === "function") return true;

	    try {
	      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }

	  module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(isNativeReflectConstruct);

	(function (module) {
	  var setPrototypeOf = setPrototypeOf$4.exports;
	  var isNativeReflectConstruct$1 = isNativeReflectConstruct.exports;

	  function _construct(Parent, args, Class) {
	    if (isNativeReflectConstruct$1()) {
	      module.exports = _construct = Reflect.construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
	    } else {
	      module.exports = _construct = function _construct(Parent, args, Class) {
	        var a = [null];
	        a.push.apply(a, args);
	        var Constructor = Function.bind.apply(Parent, a);
	        var instance = new Constructor();
	        if (Class) setPrototypeOf(instance, Class.prototype);
	        return instance;
	      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
	    }

	    return _construct.apply(null, arguments);
	  }

	  module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(construct);

	(function (module) {
	  var getPrototypeOf = getPrototypeOf$2.exports;
	  var setPrototypeOf = setPrototypeOf$4.exports;
	  var isNativeFunction$1 = isNativeFunction.exports;
	  var construct$1 = construct.exports;

	  function _wrapNativeSuper(Class) {
	    var _cache = typeof Map === "function" ? new Map() : undefined;

	    module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
	      if (Class === null || !isNativeFunction$1(Class)) return Class;

	      if (typeof Class !== "function") {
	        throw new TypeError("Super expression must either be null or a function");
	      }

	      if (typeof _cache !== "undefined") {
	        if (_cache.has(Class)) return _cache.get(Class);

	        _cache.set(Class, Wrapper);
	      }

	      function Wrapper() {
	        return construct$1(Class, arguments, getPrototypeOf(this).constructor);
	      }

	      Wrapper.prototype = Object.create(Class.prototype, {
	        constructor: {
	          value: Wrapper,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      });
	      return setPrototypeOf(Wrapper, Class);
	    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
	    return _wrapNativeSuper(Class);
	  }

	  module.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(wrapNativeSuper);

	var browser$1 = {};

	Object.defineProperty(browser$1, '__esModule', {
	  value: true
	});
	var _classCallCheck$1 = classCallCheck.exports;
	var _createClass$1 = createClass.exports;
	var _assertThisInitialized$1 = assertThisInitialized.exports;
	var _inherits$1 = inherits.exports;
	var _possibleConstructorReturn$1 = possibleConstructorReturn.exports;
	var _getPrototypeOf$1 = getPrototypeOf$2.exports;
	var _defineProperty$1 = defineProperty$5.exports;

	function _interopDefaultLegacy$2(e) {
	  return e && _typeof$2(e) === 'object' && 'default' in e ? e : {
	    'default': e
	  };
	}

	var _classCallCheck__default$1 = /*#__PURE__*/_interopDefaultLegacy$2(_classCallCheck$1);

	var _createClass__default$1 = /*#__PURE__*/_interopDefaultLegacy$2(_createClass$1);

	var _assertThisInitialized__default$1 = /*#__PURE__*/_interopDefaultLegacy$2(_assertThisInitialized$1);

	var _inherits__default$1 = /*#__PURE__*/_interopDefaultLegacy$2(_inherits$1);

	var _possibleConstructorReturn__default$1 = /*#__PURE__*/_interopDefaultLegacy$2(_possibleConstructorReturn$1);

	var _getPrototypeOf__default$1 = /*#__PURE__*/_interopDefaultLegacy$2(_getPrototypeOf$1);

	var _defineProperty__default$1 = /*#__PURE__*/_interopDefaultLegacy$2(_defineProperty$1);

	var domain$1; // This constructor is used to store event handlers. Instantiating this is
	// faster than explicitly calling `Object.create(null)` to get a "clean" empty
	// object (tested with v8 v4.9).

	function EventHandlers$1() {}

	EventHandlers$1.prototype = Object.create(null);

	function EventEmitter$1() {
	  EventEmitter$1.init.call(this);
	} // nodejs oddity
	// require('events') === require('events').EventEmitter


	EventEmitter$1.EventEmitter = EventEmitter$1;
	EventEmitter$1.usingDomains = false;
	EventEmitter$1.prototype.domain = undefined;
	EventEmitter$1.prototype._events = undefined;
	EventEmitter$1.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.

	EventEmitter$1.defaultMaxListeners = 10;

	EventEmitter$1.init = function () {
	  this.domain = null;

	  if (EventEmitter$1.usingDomains) {
	    // if there is an active domain, then attach to it.
	    if (domain$1.active) ;
	  }

	  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
	    this._events = new EventHandlers$1();
	    this._eventsCount = 0;
	  }

	  this._maxListeners = this._maxListeners || undefined;
	}; // Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.


	EventEmitter$1.prototype.setMaxListeners = function setMaxListeners(n) {
	  if (typeof n !== 'number' || n < 0 || isNaN(n)) throw new TypeError('"n" argument must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	function $getMaxListeners$1(that) {
	  if (that._maxListeners === undefined) return EventEmitter$1.defaultMaxListeners;
	  return that._maxListeners;
	}

	EventEmitter$1.prototype.getMaxListeners = function getMaxListeners() {
	  return $getMaxListeners$1(this);
	}; // These standalone emit* functions are used to optimize calling of event
	// handlers for fast cases because emit() itself often has a variable number of
	// arguments and can be deoptimized because of that. These functions always have
	// the same number of arguments and thus do not get deoptimized, so the code
	// inside them can execute faster.


	function emitNone$1(handler, isFn, self) {
	  if (isFn) handler.call(self);else {
	    var len = handler.length;
	    var listeners = arrayClone$1(handler, len);

	    for (var i = 0; i < len; ++i) {
	      listeners[i].call(self);
	    }
	  }
	}

	function emitOne$1(handler, isFn, self, arg1) {
	  if (isFn) handler.call(self, arg1);else {
	    var len = handler.length;
	    var listeners = arrayClone$1(handler, len);

	    for (var i = 0; i < len; ++i) {
	      listeners[i].call(self, arg1);
	    }
	  }
	}

	function emitTwo$1(handler, isFn, self, arg1, arg2) {
	  if (isFn) handler.call(self, arg1, arg2);else {
	    var len = handler.length;
	    var listeners = arrayClone$1(handler, len);

	    for (var i = 0; i < len; ++i) {
	      listeners[i].call(self, arg1, arg2);
	    }
	  }
	}

	function emitThree$1(handler, isFn, self, arg1, arg2, arg3) {
	  if (isFn) handler.call(self, arg1, arg2, arg3);else {
	    var len = handler.length;
	    var listeners = arrayClone$1(handler, len);

	    for (var i = 0; i < len; ++i) {
	      listeners[i].call(self, arg1, arg2, arg3);
	    }
	  }
	}

	function emitMany$1(handler, isFn, self, args) {
	  if (isFn) handler.apply(self, args);else {
	    var len = handler.length;
	    var listeners = arrayClone$1(handler, len);

	    for (var i = 0; i < len; ++i) {
	      listeners[i].apply(self, args);
	    }
	  }
	}

	EventEmitter$1.prototype.emit = function emit(type) {
	  var er, handler, len, args, i, events, domain;
	  var doError = type === 'error';
	  events = this._events;
	  if (events) doError = doError && events.error == null;else if (!doError) return false;
	  domain = this.domain; // If there is no 'error' event listener then throw.

	  if (doError) {
	    er = arguments[1];

	    if (domain) {
	      if (!er) er = new Error('Uncaught, unspecified "error" event');
	      er.domainEmitter = this;
	      er.domain = domain;
	      er.domainThrown = false;
	      domain.emit('error', er);
	    } else if (er instanceof Error) {
	      throw er; // Unhandled 'error' event
	    } else {
	      // At least give some kind of context to the user
	      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	      err.context = er;
	      throw err;
	    }

	    return false;
	  }

	  handler = events[type];
	  if (!handler) return false;
	  var isFn = typeof handler === 'function';
	  len = arguments.length;

	  switch (len) {
	    // fast cases
	    case 1:
	      emitNone$1(handler, isFn, this);
	      break;

	    case 2:
	      emitOne$1(handler, isFn, this, arguments[1]);
	      break;

	    case 3:
	      emitTwo$1(handler, isFn, this, arguments[1], arguments[2]);
	      break;

	    case 4:
	      emitThree$1(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
	      break;
	    // slower

	    default:
	      args = new Array(len - 1);

	      for (i = 1; i < len; i++) {
	        args[i - 1] = arguments[i];
	      }

	      emitMany$1(handler, isFn, this, args);
	  }

	  return true;
	};

	function _addListener$1(target, type, listener, prepend) {
	  var m;
	  var events;
	  var existing;
	  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
	  events = target._events;

	  if (!events) {
	    events = target._events = new EventHandlers$1();
	    target._eventsCount = 0;
	  } else {
	    // To avoid recursion in the case that type === "newListener"! Before
	    // adding it to the listeners, first emit "newListener".
	    if (events.newListener) {
	      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
	      // this._events to be assigned to a new object

	      events = target._events;
	    }

	    existing = events[type];
	  }

	  if (!existing) {
	    // Optimize the case of one listener. Don't need the extra array object.
	    existing = events[type] = listener;
	    ++target._eventsCount;
	  } else {
	    if (typeof existing === 'function') {
	      // Adding the second element, need to change to array.
	      existing = events[type] = prepend ? [listener, existing] : [existing, listener];
	    } else {
	      // If we've already got an array, just append.
	      if (prepend) {
	        existing.unshift(listener);
	      } else {
	        existing.push(listener);
	      }
	    } // Check for listener leak


	    if (!existing.warned) {
	      m = $getMaxListeners$1(target);

	      if (m && m > 0 && existing.length > m) {
	        existing.warned = true;
	        var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + type + ' listeners added. ' + 'Use emitter.setMaxListeners() to increase limit');
	        w.name = 'MaxListenersExceededWarning';
	        w.emitter = target;
	        w.type = type;
	        w.count = existing.length;
	        emitWarning$1(w);
	      }
	    }
	  }

	  return target;
	}

	function emitWarning$1(e) {
	  typeof console.warn === 'function' ? console.warn(e) : console.log(e);
	}

	EventEmitter$1.prototype.addListener = function addListener(type, listener) {
	  return _addListener$1(this, type, listener, false);
	};

	EventEmitter$1.prototype.on = EventEmitter$1.prototype.addListener;

	EventEmitter$1.prototype.prependListener = function prependListener(type, listener) {
	  return _addListener$1(this, type, listener, true);
	};

	function _onceWrap$1(target, type, listener) {
	  var fired = false;

	  function g() {
	    target.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(target, arguments);
	    }
	  }

	  g.listener = listener;
	  return g;
	}

	EventEmitter$1.prototype.once = function once(type, listener) {
	  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
	  this.on(type, _onceWrap$1(this, type, listener));
	  return this;
	};

	EventEmitter$1.prototype.prependOnceListener = function prependOnceListener(type, listener) {
	  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
	  this.prependListener(type, _onceWrap$1(this, type, listener));
	  return this;
	}; // emits a 'removeListener' event iff the listener was removed


	EventEmitter$1.prototype.removeListener = function removeListener(type, listener) {
	  var list, events, position, i, originalListener;
	  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
	  events = this._events;
	  if (!events) return this;
	  list = events[type];
	  if (!list) return this;

	  if (list === listener || list.listener && list.listener === listener) {
	    if (--this._eventsCount === 0) this._events = new EventHandlers$1();else {
	      delete events[type];
	      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
	    }
	  } else if (typeof list !== 'function') {
	    position = -1;

	    for (i = list.length; i-- > 0;) {
	      if (list[i] === listener || list[i].listener && list[i].listener === listener) {
	        originalListener = list[i].listener;
	        position = i;
	        break;
	      }
	    }

	    if (position < 0) return this;

	    if (list.length === 1) {
	      list[0] = undefined;

	      if (--this._eventsCount === 0) {
	        this._events = new EventHandlers$1();
	        return this;
	      } else {
	        delete events[type];
	      }
	    } else {
	      spliceOne$1(list, position);
	    }

	    if (events.removeListener) this.emit('removeListener', type, originalListener || listener);
	  }

	  return this;
	}; // Alias for removeListener added in NodeJS 10.0
	// https://nodejs.org/api/events.html#events_emitter_off_eventname_listener


	EventEmitter$1.prototype.off = function (type, listener) {
	  return this.removeListener(type, listener);
	};

	EventEmitter$1.prototype.removeAllListeners = function removeAllListeners(type) {
	  var listeners, events;
	  events = this._events;
	  if (!events) return this; // not listening for removeListener, no need to emit

	  if (!events.removeListener) {
	    if (arguments.length === 0) {
	      this._events = new EventHandlers$1();
	      this._eventsCount = 0;
	    } else if (events[type]) {
	      if (--this._eventsCount === 0) this._events = new EventHandlers$1();else delete events[type];
	    }

	    return this;
	  } // emit removeListener for all listeners on all events


	  if (arguments.length === 0) {
	    var keys = Object.keys(events);

	    for (var i = 0, key; i < keys.length; ++i) {
	      key = keys[i];
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }

	    this.removeAllListeners('removeListener');
	    this._events = new EventHandlers$1();
	    this._eventsCount = 0;
	    return this;
	  }

	  listeners = events[type];

	  if (typeof listeners === 'function') {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    do {
	      this.removeListener(type, listeners[listeners.length - 1]);
	    } while (listeners[0]);
	  }

	  return this;
	};

	EventEmitter$1.prototype.listeners = function listeners(type) {
	  var evlistener;
	  var ret;
	  var events = this._events;
	  if (!events) ret = [];else {
	    evlistener = events[type];
	    if (!evlistener) ret = [];else if (typeof evlistener === 'function') ret = [evlistener.listener || evlistener];else ret = unwrapListeners$1(evlistener);
	  }
	  return ret;
	};

	EventEmitter$1.listenerCount = function (emitter, type) {
	  if (typeof emitter.listenerCount === 'function') {
	    return emitter.listenerCount(type);
	  } else {
	    return listenerCount$1.call(emitter, type);
	  }
	};

	EventEmitter$1.prototype.listenerCount = listenerCount$1;

	function listenerCount$1(type) {
	  var events = this._events;

	  if (events) {
	    var evlistener = events[type];

	    if (typeof evlistener === 'function') {
	      return 1;
	    } else if (evlistener) {
	      return evlistener.length;
	    }
	  }

	  return 0;
	}

	EventEmitter$1.prototype.eventNames = function eventNames() {
	  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
	}; // About 1.5x faster than the two-arg version of Array#splice().


	function spliceOne$1(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
	    list[i] = list[k];
	  }

	  list.pop();
	}

	function arrayClone$1(arr, i) {
	  var copy = new Array(i);

	  while (i--) {
	    copy[i] = arr[i];
	  }

	  return copy;
	}

	function unwrapListeners$1(arr) {
	  var ret = new Array(arr.length);

	  for (var i = 0; i < ret.length; ++i) {
	    ret[i] = arr[i].listener || arr[i];
	  }

	  return ret;
	}

	function _createSuper$1$1(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct$1$1();

	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf__default$1["default"](Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf__default$1["default"](this).constructor;

	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return _possibleConstructorReturn__default$1["default"](this, result);
	  };
	}

	function _isNativeReflectConstruct$1$1() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}
	/**
	 * Provides retrier service
	 */


	var Retrier = /*#__PURE__*/function (_EventEmitter) {
	  _inherits__default$1["default"](Retrier, _EventEmitter);

	  var _super = _createSuper$1$1(Retrier); // fibonacci strategy

	  /**
	   * Creates a new Retrier instance
	   */


	  function Retrier(options) {
	    var _this;

	    _classCallCheck__default$1["default"](this, Retrier);

	    _this = _super.call(this);

	    _defineProperty__default$1["default"](_assertThisInitialized__default$1["default"](_this), "timeout", null);

	    _defineProperty__default$1["default"](_assertThisInitialized__default$1["default"](_this), "startTimestamp", -1);

	    _this.minDelay = options.min;
	    _this.maxDelay = options.max;
	    _this.initialDelay = options.initial || 0;
	    _this.maxAttemptsCount = options.maxAttemptsCount || 0;
	    _this.maxAttemptsTime = options.maxAttemptsTime || 0;
	    _this.randomness = options.randomness || 0;
	    _this.inProgress = false;
	    _this.attemptNum = 0;
	    _this.prevDelay = 0;
	    _this.currDelay = 0;
	    return _this;
	  }

	  _createClass__default$1["default"](Retrier, [{
	    key: "attempt",
	    value: function attempt() {
	      if (this.timeout) {
	        clearTimeout(this.timeout);
	        this.timeout = null;
	      }

	      this.attemptNum++;
	      this.emit("attempt", this);
	    }
	  }, {
	    key: "nextDelay",
	    value: function nextDelay(delayOverride) {
	      if (typeof delayOverride === "number") {
	        this.prevDelay = 0;
	        this.currDelay = delayOverride;
	        return delayOverride;
	      }

	      if (this.attemptNum == 0) {
	        return this.initialDelay;
	      }

	      if (this.attemptNum == 1) {
	        this.currDelay = this.minDelay;
	        return this.currDelay;
	      }

	      this.prevDelay = this.currDelay;
	      var delay = this.currDelay + this.prevDelay;

	      if (this.maxDelay && delay > this.maxDelay) {
	        this.currDelay = this.maxDelay;
	        delay = this.maxDelay;
	      }

	      this.currDelay = delay;
	      return delay;
	    }
	  }, {
	    key: "randomize",
	    value: function randomize(delay) {
	      var area = delay * this.randomness;
	      var corr = Math.round(Math.random() * area * 2 - area);
	      return Math.max(0, delay + corr);
	    }
	  }, {
	    key: "scheduleAttempt",
	    value: function scheduleAttempt(delayOverride) {
	      var _this2 = this;

	      if (this.maxAttemptsCount && this.attemptNum >= this.maxAttemptsCount) {
	        this.cleanup();
	        this.emit("failed", new Error("Maximum attempt count limit reached"));
	        return;
	      }

	      var delay = this.nextDelay(delayOverride);
	      delay = this.randomize(delay);

	      if (this.maxAttemptsTime && this.startTimestamp + this.maxAttemptsTime < Date.now() + delay) {
	        this.cleanup();
	        this.emit("failed", new Error("Maximum attempt time limit reached"));
	        return;
	      }

	      this.timeout = setTimeout(function () {
	        return _this2.attempt();
	      }, delay);
	    }
	  }, {
	    key: "cleanup",
	    value: function cleanup() {
	      if (this.timeout) {
	        clearTimeout(this.timeout);
	        this.timeout = null;
	      }

	      this.inProgress = false;
	      this.attemptNum = 0;
	      this.prevDelay = 0;
	      this.currDelay = 0;
	    }
	  }, {
	    key: "start",
	    value: function start() {
	      if (this.inProgress) {
	        throw new Error("Retrier is already in progress");
	      }

	      this.inProgress = true;
	      this.startTimestamp = Date.now();
	      this.scheduleAttempt(this.initialDelay);
	    }
	  }, {
	    key: "cancel",
	    value: function cancel() {
	      if (this.timeout) {
	        clearTimeout(this.timeout);
	        this.timeout = null;
	        this.inProgress = false;
	        this.emit("cancelled");
	      }
	    } // @todo Must be a T here, so the entire Retrier must be typed on this value type.
	    // eslint-disable-next-line

	  }, {
	    key: "succeeded",
	    value: function succeeded(arg) {
	      this.emit("succeeded", arg);
	    }
	  }, {
	    key: "failed",
	    value: function failed(err, nextAttemptDelayOverride) {
	      if (this.timeout) {
	        throw new Error("Retrier attempt is already in progress");
	      }

	      this.scheduleAttempt(nextAttemptDelayOverride);
	    }
	  }]);

	  return Retrier;
	}(EventEmitter$1);
	/**
	 * Run retrier as an async function with possibility to await for it.
	 * Example:
	 * ```
	 * const result = AsyncRetrier.run(async () => somePromise);
	 * ```
	 */


	var AsyncRetrier = /*#__PURE__*/function (_EventEmitter2) {
	  _inherits__default$1["default"](AsyncRetrier, _EventEmitter2);

	  var _super2 = _createSuper$1$1(AsyncRetrier); // This any must be T typed directly on the AsyncRetrier
	  // eslint-disable-next-line


	  function AsyncRetrier(options) {
	    var _this3;

	    _classCallCheck__default$1["default"](this, AsyncRetrier);

	    _this3 = _super2.call(this);

	    _defineProperty__default$1["default"](_assertThisInitialized__default$1["default"](_this3), "resolve", function () {
	      return void 0;
	    });

	    _defineProperty__default$1["default"](_assertThisInitialized__default$1["default"](_this3), "reject", function () {
	      return void 0;
	    });

	    _this3.retrier = new Retrier(options);
	    return _this3;
	  }

	  _createClass__default$1["default"](AsyncRetrier, [{
	    key: "run",
	    value: function run(handler) {
	      var _this4 = this;

	      this.retrier.on("attempt", function () {
	        handler().then(function (v) {
	          return _this4.retrier.succeeded(v);
	        }).catch(function (e) {
	          return _this4.retrier.failed(e);
	        });
	      });
	      this.retrier.on("succeeded", function (arg) {
	        return _this4.resolve(arg);
	      });
	      this.retrier.on("cancelled", function () {
	        return _this4.reject(new Error("Cancelled"));
	      });
	      this.retrier.on("failed", function (err) {
	        return _this4.reject(err);
	      });
	      return new Promise(function (resolve, reject) {
	        _this4.resolve = resolve;
	        _this4.reject = reject;

	        _this4.retrier.start();
	      });
	    }
	  }, {
	    key: "cancel",
	    value: function cancel() {
	      this.retrier.cancel();
	    }
	  }]);

	  return AsyncRetrier;
	}(EventEmitter$1);

	function _createSuper$9(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct$a();

	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf__default$1["default"](Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf__default$1["default"](this).constructor;

	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return _possibleConstructorReturn__default$1["default"](this, result);
	  };
	}

	function _isNativeReflectConstruct$a() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function isDef(value) {
	  return value !== undefined && value !== null;
	}

	var Backoff = /*#__PURE__*/function (_EventEmitter) {
	  _inherits__default$1["default"](Backoff, _EventEmitter);

	  var _super = _createSuper$9(Backoff);

	  function Backoff(options) {
	    var _this;

	    _classCallCheck__default$1["default"](this, Backoff);

	    _this = _super.call(this);

	    _defineProperty__default$1["default"](_assertThisInitialized__default$1["default"](_this), "backoffDelay", 0);

	    _defineProperty__default$1["default"](_assertThisInitialized__default$1["default"](_this), "nextBackoffDelay", 0);

	    _defineProperty__default$1["default"](_assertThisInitialized__default$1["default"](_this), "backoffNumber", 0);

	    _defineProperty__default$1["default"](_assertThisInitialized__default$1["default"](_this), "timeoutID", null);

	    _defineProperty__default$1["default"](_assertThisInitialized__default$1["default"](_this), "maxNumberOfRetry", -1);

	    options = options || {};
	    var _options = options,
	        initialDelay = _options.initialDelay,
	        maxDelay = _options.maxDelay,
	        randomisationFactor = _options.randomisationFactor,
	        factor = _options.factor;

	    if (isDef(initialDelay) && initialDelay < 1) {
	      throw new Error("The initial timeout must be equal to or greater than 1.");
	    }

	    if (isDef(maxDelay) && maxDelay <= 1) {
	      throw new Error("The maximal timeout must be greater than 1.");
	    }

	    if (isDef(randomisationFactor) && (randomisationFactor < 0 || randomisationFactor > 1)) {
	      throw new Error("The randomisation factor must be between 0 and 1.");
	    }

	    if (isDef(factor) && factor <= 1) {
	      throw new Error("Exponential factor should be greater than 1.");
	    }

	    _this.initialDelay = initialDelay || 100;
	    _this.maxDelay = maxDelay || 10000;

	    if (_this.maxDelay <= _this.initialDelay) {
	      throw new Error("The maximal backoff delay must be greater than the initial backoff delay.");
	    }

	    _this.randomisationFactor = randomisationFactor || 0;
	    _this.factor = factor || 2;

	    _this.reset();

	    return _this;
	  }

	  _createClass__default$1["default"](Backoff, [{
	    key: "backoff",
	    value: function backoff(err) {
	      if (this.timeoutID == null) {
	        if (this.backoffNumber === this.maxNumberOfRetry) {
	          this.emit("fail", err);
	          this.reset();
	        } else {
	          this.backoffDelay = this.next();
	          this.timeoutID = setTimeout(this.onBackoff.bind(this), this.backoffDelay);
	          this.emit("backoff", this.backoffNumber, this.backoffDelay, err);
	        }
	      }
	    }
	  }, {
	    key: "reset",
	    value: function reset() {
	      this.backoffDelay = 0;
	      this.nextBackoffDelay = this.initialDelay;
	      this.backoffNumber = 0;

	      if (this.timeoutID) {
	        clearTimeout(this.timeoutID);
	      }

	      this.timeoutID = null;
	    }
	  }, {
	    key: "failAfter",
	    value: function failAfter(maxNumberOfRetry) {
	      if (maxNumberOfRetry <= 0) {
	        throw new Error("Expected a maximum number of retry greater than 0 but got ".concat(maxNumberOfRetry));
	      }

	      this.maxNumberOfRetry = maxNumberOfRetry;
	    }
	  }, {
	    key: "next",
	    value: function next() {
	      this.backoffDelay = Math.min(this.nextBackoffDelay, this.maxDelay);
	      this.nextBackoffDelay = this.backoffDelay * this.factor;
	      var randomisationMultiple = 1 + Math.random() * this.randomisationFactor;
	      return Math.min(this.maxDelay, Math.round(this.backoffDelay * randomisationMultiple));
	    }
	  }, {
	    key: "onBackoff",
	    value: function onBackoff() {
	      this.timeoutID = null;
	      this.emit("ready", this.backoffNumber, this.backoffDelay);
	      this.backoffNumber++;
	    }
	  }], [{
	    key: "exponential",
	    value: function exponential(options) {
	      return new Backoff(options);
	    }
	  }]);

	  return Backoff;
	}(EventEmitter$1);

	browser$1.AsyncRetrier = AsyncRetrier;
	var Backoff_1 = browser$1.Backoff = Backoff;
	var Retrier_1 = browser$1.Retrier = Retrier;

	var collection = collection$2;
	var collectionStrong = collectionStrong$2;

	// `Map` constructor
	// https://tc39.es/ecma262/#sec-map-objects
	collection('Map', function (init) {
	  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong);

	var platform = {exports: {}};

	(function (module, exports) {
	  (function () {
	    /** Used to determine if values are of the language type `Object`. */

	    var objectTypes = {
	      'function': true,
	      'object': true
	    };
	    /** Used as a reference to the global object. */

	    var root = objectTypes[typeof window === "undefined" ? "undefined" : _typeof$2(window)] && window || this;
	    /** Detect free variable `exports`. */

	    var freeExports = exports;
	    /** Detect free variable `module`. */

	    var freeModule = module && !module.nodeType && module;
	    /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */

	    var freeGlobal = freeExports && freeModule && _typeof$2(commonjsGlobal) == 'object' && commonjsGlobal;

	    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
	      root = freeGlobal;
	    }
	    /**
	     * Used as the maximum length of an array-like object.
	     * See the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)
	     * for more details.
	     */


	    var maxSafeInteger = Math.pow(2, 53) - 1;
	    /** Regular expression to detect Opera. */

	    var reOpera = /\bOpera/;
	    /** Used for native method references. */

	    var objectProto = Object.prototype;
	    /** Used to check for own properties of an object. */

	    var hasOwnProperty = objectProto.hasOwnProperty;
	    /** Used to resolve the internal `[[Class]]` of values. */

	    var toString = objectProto.toString;
	    /*--------------------------------------------------------------------------*/

	    /**
	     * Capitalizes a string value.
	     *
	     * @private
	     * @param {string} string The string to capitalize.
	     * @returns {string} The capitalized string.
	     */

	    function capitalize(string) {
	      string = String(string);
	      return string.charAt(0).toUpperCase() + string.slice(1);
	    }
	    /**
	     * A utility function to clean up the OS name.
	     *
	     * @private
	     * @param {string} os The OS name to clean up.
	     * @param {string} [pattern] A `RegExp` pattern matching the OS name.
	     * @param {string} [label] A label for the OS.
	     */


	    function cleanupOS(os, pattern, label) {
	      // Platform tokens are defined at:
	      // http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx
	      // http://web.archive.org/web/20081122053950/http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx
	      var data = {
	        '10.0': '10',
	        '6.4': '10 Technical Preview',
	        '6.3': '8.1',
	        '6.2': '8',
	        '6.1': 'Server 2008 R2 / 7',
	        '6.0': 'Server 2008 / Vista',
	        '5.2': 'Server 2003 / XP 64-bit',
	        '5.1': 'XP',
	        '5.01': '2000 SP1',
	        '5.0': '2000',
	        '4.0': 'NT',
	        '4.90': 'ME'
	      }; // Detect Windows version from platform tokens.

	      if (pattern && label && /^Win/i.test(os) && !/^Windows Phone /i.test(os) && (data = data[/[\d.]+$/.exec(os)])) {
	        os = 'Windows ' + data;
	      } // Correct character case and cleanup string.


	      os = String(os);

	      if (pattern && label) {
	        os = os.replace(RegExp(pattern, 'i'), label);
	      }

	      os = format(os.replace(/ ce$/i, ' CE').replace(/\bhpw/i, 'web').replace(/\bMacintosh\b/, 'Mac OS').replace(/_PowerPC\b/i, ' OS').replace(/\b(OS X) [^ \d]+/i, '$1').replace(/\bMac (OS X)\b/, '$1').replace(/\/(\d)/, ' $1').replace(/_/g, '.').replace(/(?: BePC|[ .]*fc[ \d.]+)$/i, '').replace(/\bx86\.64\b/gi, 'x86_64').replace(/\b(Windows Phone) OS\b/, '$1').replace(/\b(Chrome OS \w+) [\d.]+\b/, '$1').split(' on ')[0]);
	      return os;
	    }
	    /**
	     * An iteration utility for arrays and objects.
	     *
	     * @private
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} callback The function called per iteration.
	     */


	    function each(object, callback) {
	      var index = -1,
	          length = object ? object.length : 0;

	      if (typeof length == 'number' && length > -1 && length <= maxSafeInteger) {
	        while (++index < length) {
	          callback(object[index], index, object);
	        }
	      } else {
	        forOwn(object, callback);
	      }
	    }
	    /**
	     * Trim and conditionally capitalize string values.
	     *
	     * @private
	     * @param {string} string The string to format.
	     * @returns {string} The formatted string.
	     */


	    function format(string) {
	      string = trim(string);
	      return /^(?:webOS|i(?:OS|P))/.test(string) ? string : capitalize(string);
	    }
	    /**
	     * Iterates over an object's own properties, executing the `callback` for each.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} callback The function executed per own property.
	     */


	    function forOwn(object, callback) {
	      for (var key in object) {
	        if (hasOwnProperty.call(object, key)) {
	          callback(object[key], key, object);
	        }
	      }
	    }
	    /**
	     * Gets the internal `[[Class]]` of a value.
	     *
	     * @private
	     * @param {*} value The value.
	     * @returns {string} The `[[Class]]`.
	     */


	    function getClassOf(value) {
	      return value == null ? capitalize(value) : toString.call(value).slice(8, -1);
	    }
	    /**
	     * Host objects can return type values that are different from their actual
	     * data type. The objects we are concerned with usually return non-primitive
	     * types of "object", "function", or "unknown".
	     *
	     * @private
	     * @param {*} object The owner of the property.
	     * @param {string} property The property to check.
	     * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.
	     */


	    function isHostType(object, property) {
	      var type = object != null ? _typeof$2(object[property]) : 'number';
	      return !/^(?:boolean|number|string|undefined)$/.test(type) && (type == 'object' ? !!object[property] : true);
	    }
	    /**
	     * Prepares a string for use in a `RegExp` by making hyphens and spaces optional.
	     *
	     * @private
	     * @param {string} string The string to qualify.
	     * @returns {string} The qualified string.
	     */


	    function qualify(string) {
	      return String(string).replace(/([ -])(?!$)/g, '$1?');
	    }
	    /**
	     * A bare-bones `Array#reduce` like utility function.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} callback The function called per iteration.
	     * @returns {*} The accumulated result.
	     */


	    function reduce(array, callback) {
	      var accumulator = null;
	      each(array, function (value, index) {
	        accumulator = callback(accumulator, value, index, array);
	      });
	      return accumulator;
	    }
	    /**
	     * Removes leading and trailing whitespace from a string.
	     *
	     * @private
	     * @param {string} string The string to trim.
	     * @returns {string} The trimmed string.
	     */


	    function trim(string) {
	      return String(string).replace(/^ +| +$/g, '');
	    }
	    /*--------------------------------------------------------------------------*/

	    /**
	     * Creates a new platform object.
	     *
	     * @memberOf platform
	     * @param {Object|string} [ua=navigator.userAgent] The user agent string or
	     *  context object.
	     * @returns {Object} A platform object.
	     */


	    function parse(ua) {
	      /** The environment context object. */
	      var context = root;
	      /** Used to flag when a custom context is provided. */

	      var isCustomContext = ua && _typeof$2(ua) == 'object' && getClassOf(ua) != 'String'; // Juggle arguments.

	      if (isCustomContext) {
	        context = ua;
	        ua = null;
	      }
	      /** Browser navigator object. */


	      var nav = context.navigator || {};
	      /** Browser user agent string. */

	      var userAgent = nav.userAgent || '';
	      ua || (ua = userAgent);
	      /** Used to detect if browser is like Chrome. */

	      var likeChrome = isCustomContext ? !!nav.likeChrome : /\bChrome\b/.test(ua) && !/internal|\n/i.test(toString.toString());
	      /** Internal `[[Class]]` value shortcuts. */

	      var objectClass = 'Object',
	          airRuntimeClass = isCustomContext ? objectClass : 'ScriptBridgingProxyObject',
	          enviroClass = isCustomContext ? objectClass : 'Environment',
	          javaClass = isCustomContext && context.java ? 'JavaPackage' : getClassOf(context.java),
	          phantomClass = isCustomContext ? objectClass : 'RuntimeObject';
	      /** Detect Java environments. */

	      var java = /\bJava/.test(javaClass) && context.java;
	      /** Detect Rhino. */

	      var rhino = java && getClassOf(context.environment) == enviroClass;
	      /** A character to represent alpha. */

	      var alpha = java ? 'a' : "\u03B1";
	      /** A character to represent beta. */

	      var beta = java ? 'b' : "\u03B2";
	      /** Browser document object. */

	      var doc = context.document || {};
	      /**
	       * Detect Opera browser (Presto-based).
	       * http://www.howtocreate.co.uk/operaStuff/operaObject.html
	       * http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#operamini
	       */

	      var opera = context.operamini || context.opera;
	      /** Opera `[[Class]]`. */

	      var operaClass = reOpera.test(operaClass = isCustomContext && opera ? opera['[[Class]]'] : getClassOf(opera)) ? operaClass : opera = null;
	      /*------------------------------------------------------------------------*/

	      /** Temporary variable used over the script's lifetime. */

	      var data;
	      /** The CPU architecture. */

	      var arch = ua;
	      /** Platform description array. */

	      var description = [];
	      /** Platform alpha/beta indicator. */

	      var prerelease = null;
	      /** A flag to indicate that environment features should be used to resolve the platform. */

	      var useFeatures = ua == userAgent;
	      /** The browser/environment version. */

	      var version = useFeatures && opera && typeof opera.version == 'function' && opera.version();
	      /** A flag to indicate if the OS ends with "/ Version" */

	      var isSpecialCasedOS;
	      /* Detectable layout engines (order is important). */

	      var layout = getLayout([{
	        'label': 'EdgeHTML',
	        'pattern': 'Edge'
	      }, 'Trident', {
	        'label': 'WebKit',
	        'pattern': 'AppleWebKit'
	      }, 'iCab', 'Presto', 'NetFront', 'Tasman', 'KHTML', 'Gecko']);
	      /* Detectable browser names (order is important). */

	      var name = getName(['Adobe AIR', 'Arora', 'Avant Browser', 'Breach', 'Camino', 'Electron', 'Epiphany', 'Fennec', 'Flock', 'Galeon', 'GreenBrowser', 'iCab', 'Iceweasel', 'K-Meleon', 'Konqueror', 'Lunascape', 'Maxthon', {
	        'label': 'Microsoft Edge',
	        'pattern': '(?:Edge|Edg|EdgA|EdgiOS)'
	      }, 'Midori', 'Nook Browser', 'PaleMoon', 'PhantomJS', 'Raven', 'Rekonq', 'RockMelt', {
	        'label': 'Samsung Internet',
	        'pattern': 'SamsungBrowser'
	      }, 'SeaMonkey', {
	        'label': 'Silk',
	        'pattern': '(?:Cloud9|Silk-Accelerated)'
	      }, 'Sleipnir', 'SlimBrowser', {
	        'label': 'SRWare Iron',
	        'pattern': 'Iron'
	      }, 'Sunrise', 'Swiftfox', 'Vivaldi', 'Waterfox', 'WebPositive', {
	        'label': 'Yandex Browser',
	        'pattern': 'YaBrowser'
	      }, {
	        'label': 'UC Browser',
	        'pattern': 'UCBrowser'
	      }, 'Opera Mini', {
	        'label': 'Opera Mini',
	        'pattern': 'OPiOS'
	      }, 'Opera', {
	        'label': 'Opera',
	        'pattern': 'OPR'
	      }, 'Chromium', 'Chrome', {
	        'label': 'Chrome',
	        'pattern': '(?:HeadlessChrome)'
	      }, {
	        'label': 'Chrome Mobile',
	        'pattern': '(?:CriOS|CrMo)'
	      }, {
	        'label': 'Firefox',
	        'pattern': '(?:Firefox|Minefield)'
	      }, {
	        'label': 'Firefox for iOS',
	        'pattern': 'FxiOS'
	      }, {
	        'label': 'IE',
	        'pattern': 'IEMobile'
	      }, {
	        'label': 'IE',
	        'pattern': 'MSIE'
	      }, 'Safari']);
	      /* Detectable products (order is important). */

	      var product = getProduct([{
	        'label': 'BlackBerry',
	        'pattern': 'BB10'
	      }, 'BlackBerry', {
	        'label': 'Galaxy S',
	        'pattern': 'GT-I9000'
	      }, {
	        'label': 'Galaxy S2',
	        'pattern': 'GT-I9100'
	      }, {
	        'label': 'Galaxy S3',
	        'pattern': 'GT-I9300'
	      }, {
	        'label': 'Galaxy S4',
	        'pattern': 'GT-I9500'
	      }, {
	        'label': 'Galaxy S5',
	        'pattern': 'SM-G900'
	      }, {
	        'label': 'Galaxy S6',
	        'pattern': 'SM-G920'
	      }, {
	        'label': 'Galaxy S6 Edge',
	        'pattern': 'SM-G925'
	      }, {
	        'label': 'Galaxy S7',
	        'pattern': 'SM-G930'
	      }, {
	        'label': 'Galaxy S7 Edge',
	        'pattern': 'SM-G935'
	      }, 'Google TV', 'Lumia', 'iPad', 'iPod', 'iPhone', 'Kindle', {
	        'label': 'Kindle Fire',
	        'pattern': '(?:Cloud9|Silk-Accelerated)'
	      }, 'Nexus', 'Nook', 'PlayBook', 'PlayStation Vita', 'PlayStation', 'TouchPad', 'Transformer', {
	        'label': 'Wii U',
	        'pattern': 'WiiU'
	      }, 'Wii', 'Xbox One', {
	        'label': 'Xbox 360',
	        'pattern': 'Xbox'
	      }, 'Xoom']);
	      /* Detectable manufacturers. */

	      var manufacturer = getManufacturer({
	        'Apple': {
	          'iPad': 1,
	          'iPhone': 1,
	          'iPod': 1
	        },
	        'Alcatel': {},
	        'Archos': {},
	        'Amazon': {
	          'Kindle': 1,
	          'Kindle Fire': 1
	        },
	        'Asus': {
	          'Transformer': 1
	        },
	        'Barnes & Noble': {
	          'Nook': 1
	        },
	        'BlackBerry': {
	          'PlayBook': 1
	        },
	        'Google': {
	          'Google TV': 1,
	          'Nexus': 1
	        },
	        'HP': {
	          'TouchPad': 1
	        },
	        'HTC': {},
	        'Huawei': {},
	        'Lenovo': {},
	        'LG': {},
	        'Microsoft': {
	          'Xbox': 1,
	          'Xbox One': 1
	        },
	        'Motorola': {
	          'Xoom': 1
	        },
	        'Nintendo': {
	          'Wii U': 1,
	          'Wii': 1
	        },
	        'Nokia': {
	          'Lumia': 1
	        },
	        'Oppo': {},
	        'Samsung': {
	          'Galaxy S': 1,
	          'Galaxy S2': 1,
	          'Galaxy S3': 1,
	          'Galaxy S4': 1
	        },
	        'Sony': {
	          'PlayStation': 1,
	          'PlayStation Vita': 1
	        },
	        'Xiaomi': {
	          'Mi': 1,
	          'Redmi': 1
	        }
	      });
	      /* Detectable operating systems (order is important). */

	      var os = getOS(['Windows Phone', 'KaiOS', 'Android', 'CentOS', {
	        'label': 'Chrome OS',
	        'pattern': 'CrOS'
	      }, 'Debian', {
	        'label': 'DragonFly BSD',
	        'pattern': 'DragonFly'
	      }, 'Fedora', 'FreeBSD', 'Gentoo', 'Haiku', 'Kubuntu', 'Linux Mint', 'OpenBSD', 'Red Hat', 'SuSE', 'Ubuntu', 'Xubuntu', 'Cygwin', 'Symbian OS', 'hpwOS', 'webOS ', 'webOS', 'Tablet OS', 'Tizen', 'Linux', 'Mac OS X', 'Macintosh', 'Mac', 'Windows 98;', 'Windows ']);
	      /*------------------------------------------------------------------------*/

	      /**
	       * Picks the layout engine from an array of guesses.
	       *
	       * @private
	       * @param {Array} guesses An array of guesses.
	       * @returns {null|string} The detected layout engine.
	       */

	      function getLayout(guesses) {
	        return reduce(guesses, function (result, guess) {
	          return result || RegExp('\\b' + (guess.pattern || qualify(guess)) + '\\b', 'i').exec(ua) && (guess.label || guess);
	        });
	      }
	      /**
	       * Picks the manufacturer from an array of guesses.
	       *
	       * @private
	       * @param {Array} guesses An object of guesses.
	       * @returns {null|string} The detected manufacturer.
	       */


	      function getManufacturer(guesses) {
	        return reduce(guesses, function (result, value, key) {
	          // Lookup the manufacturer by product or scan the UA for the manufacturer.
	          return result || (value[product] || value[/^[a-z]+(?: +[a-z]+\b)*/i.exec(product)] || RegExp('\\b' + qualify(key) + '(?:\\b|\\w*\\d)', 'i').exec(ua)) && key;
	        });
	      }
	      /**
	       * Picks the browser name from an array of guesses.
	       *
	       * @private
	       * @param {Array} guesses An array of guesses.
	       * @returns {null|string} The detected browser name.
	       */


	      function getName(guesses) {
	        return reduce(guesses, function (result, guess) {
	          return result || RegExp('\\b' + (guess.pattern || qualify(guess)) + '\\b', 'i').exec(ua) && (guess.label || guess);
	        });
	      }
	      /**
	       * Picks the OS name from an array of guesses.
	       *
	       * @private
	       * @param {Array} guesses An array of guesses.
	       * @returns {null|string} The detected OS name.
	       */


	      function getOS(guesses) {
	        return reduce(guesses, function (result, guess) {
	          var pattern = guess.pattern || qualify(guess);

	          if (!result && (result = RegExp('\\b' + pattern + '(?:/[\\d.]+|[ \\w.]*)', 'i').exec(ua))) {
	            result = cleanupOS(result, pattern, guess.label || guess);
	          }

	          return result;
	        });
	      }
	      /**
	       * Picks the product name from an array of guesses.
	       *
	       * @private
	       * @param {Array} guesses An array of guesses.
	       * @returns {null|string} The detected product name.
	       */


	      function getProduct(guesses) {
	        return reduce(guesses, function (result, guess) {
	          var pattern = guess.pattern || qualify(guess);

	          if (!result && (result = RegExp('\\b' + pattern + ' *\\d+[.\\w_]*', 'i').exec(ua) || RegExp('\\b' + pattern + ' *\\w+-[\\w]*', 'i').exec(ua) || RegExp('\\b' + pattern + '(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)', 'i').exec(ua))) {
	            // Split by forward slash and append product version if needed.
	            if ((result = String(guess.label && !RegExp(pattern, 'i').test(guess.label) ? guess.label : result).split('/'))[1] && !/[\d.]+/.test(result[0])) {
	              result[0] += ' ' + result[1];
	            } // Correct character case and cleanup string.


	            guess = guess.label || guess;
	            result = format(result[0].replace(RegExp(pattern, 'i'), guess).replace(RegExp('; *(?:' + guess + '[_-])?', 'i'), ' ').replace(RegExp('(' + guess + ')[-_.]?(\\w)', 'i'), '$1 $2'));
	          }

	          return result;
	        });
	      }
	      /**
	       * Resolves the version using an array of UA patterns.
	       *
	       * @private
	       * @param {Array} patterns An array of UA patterns.
	       * @returns {null|string} The detected version.
	       */


	      function getVersion(patterns) {
	        return reduce(patterns, function (result, pattern) {
	          return result || (RegExp(pattern + '(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)', 'i').exec(ua) || 0)[1] || null;
	        });
	      }
	      /**
	       * Returns `platform.description` when the platform object is coerced to a string.
	       *
	       * @name toString
	       * @memberOf platform
	       * @returns {string} Returns `platform.description` if available, else an empty string.
	       */


	      function toStringPlatform() {
	        return this.description || '';
	      }
	      /*------------------------------------------------------------------------*/
	      // Convert layout to an array so we can add extra details.


	      layout && (layout = [layout]); // Detect Android products.
	      // Browsers on Android devices typically provide their product IDS after "Android;"
	      // up to "Build" or ") AppleWebKit".
	      // Example:
	      // "Mozilla/5.0 (Linux; Android 8.1.0; Moto G (5) Plus) AppleWebKit/537.36
	      // (KHTML, like Gecko) Chrome/70.0.3538.80 Mobile Safari/537.36"

	      if (/\bAndroid\b/.test(os) && !product && (data = /\bAndroid[^;]*;(.*?)(?:Build|\) AppleWebKit)\b/i.exec(ua))) {
	        product = trim(data[1]) // Replace any language codes (eg. "en-US").
	        .replace(/^[a-z]{2}-[a-z]{2};\s*/i, '') || null;
	      } // Detect product names that contain their manufacturer's name.


	      if (manufacturer && !product) {
	        product = getProduct([manufacturer]);
	      } else if (manufacturer && product) {
	        product = product.replace(RegExp('^(' + qualify(manufacturer) + ')[-_.\\s]', 'i'), manufacturer + ' ').replace(RegExp('^(' + qualify(manufacturer) + ')[-_.]?(\\w)', 'i'), manufacturer + ' $2');
	      } // Clean up Google TV.


	      if (data = /\bGoogle TV\b/.exec(product)) {
	        product = data[0];
	      } // Detect simulators.


	      if (/\bSimulator\b/i.test(ua)) {
	        product = (product ? product + ' ' : '') + 'Simulator';
	      } // Detect Opera Mini 8+ running in Turbo/Uncompressed mode on iOS.


	      if (name == 'Opera Mini' && /\bOPiOS\b/.test(ua)) {
	        description.push('running in Turbo/Uncompressed mode');
	      } // Detect IE Mobile 11.


	      if (name == 'IE' && /\blike iPhone OS\b/.test(ua)) {
	        data = parse(ua.replace(/like iPhone OS/, ''));
	        manufacturer = data.manufacturer;
	        product = data.product;
	      } // Detect iOS.
	      else if (/^iP/.test(product)) {
	        name || (name = 'Safari');
	        os = 'iOS' + ((data = / OS ([\d_]+)/i.exec(ua)) ? ' ' + data[1].replace(/_/g, '.') : '');
	      } // Detect Kubuntu.
	      else if (name == 'Konqueror' && /^Linux\b/i.test(os)) {
	        os = 'Kubuntu';
	      } // Detect Android browsers.
	      else if (manufacturer && manufacturer != 'Google' && (/Chrome/.test(name) && !/\bMobile Safari\b/i.test(ua) || /\bVita\b/.test(product)) || /\bAndroid\b/.test(os) && /^Chrome/.test(name) && /\bVersion\//i.test(ua)) {
	        name = 'Android Browser';
	        os = /\bAndroid\b/.test(os) ? os : 'Android';
	      } // Detect Silk desktop/accelerated modes.
	      else if (name == 'Silk') {
	        if (!/\bMobi/i.test(ua)) {
	          os = 'Android';
	          description.unshift('desktop mode');
	        }

	        if (/Accelerated *= *true/i.test(ua)) {
	          description.unshift('accelerated');
	        }
	      } // Detect UC Browser speed mode.
	      else if (name == 'UC Browser' && /\bUCWEB\b/.test(ua)) {
	        description.push('speed mode');
	      } // Detect PaleMoon identifying as Firefox.
	      else if (name == 'PaleMoon' && (data = /\bFirefox\/([\d.]+)\b/.exec(ua))) {
	        description.push('identifying as Firefox ' + data[1]);
	      } // Detect Firefox OS and products running Firefox.
	      else if (name == 'Firefox' && (data = /\b(Mobile|Tablet|TV)\b/i.exec(ua))) {
	        os || (os = 'Firefox OS');
	        product || (product = data[1]);
	      } // Detect false positives for Firefox/Safari.
	      else if (!name || (data = !/\bMinefield\b/i.test(ua) && /\b(?:Firefox|Safari)\b/.exec(name))) {
	        // Escape the `/` for Firefox 1.
	        if (name && !product && /[\/,]|^[^(]+?\)/.test(ua.slice(ua.indexOf(data + '/') + 8))) {
	          // Clear name of false positives.
	          name = null;
	        } // Reassign a generic name.


	        if ((data = product || manufacturer || os) && (product || manufacturer || /\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(os))) {
	          name = /[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(os) ? os : data) + ' Browser';
	        }
	      } // Add Chrome version to description for Electron.
	      else if (name == 'Electron' && (data = (/\bChrome\/([\d.]+)\b/.exec(ua) || 0)[1])) {
	        description.push('Chromium ' + data);
	      } // Detect non-Opera (Presto-based) versions (order is important).


	      if (!version) {
	        version = getVersion(['(?:Cloud9|CriOS|CrMo|Edge|Edg|EdgA|EdgiOS|FxiOS|HeadlessChrome|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\d.]+$)|UCBrowser|YaBrowser)', 'Version', qualify(name), '(?:Firefox|Minefield|NetFront)']);
	      } // Detect stubborn layout engines.


	      if (data = layout == 'iCab' && parseFloat(version) > 3 && 'WebKit' || /\bOpera\b/.test(name) && (/\bOPR\b/.test(ua) ? 'Blink' : 'Presto') || /\b(?:Midori|Nook|Safari)\b/i.test(ua) && !/^(?:Trident|EdgeHTML)$/.test(layout) && 'WebKit' || !layout && /\bMSIE\b/i.test(ua) && (os == 'Mac OS' ? 'Tasman' : 'Trident') || layout == 'WebKit' && /\bPlayStation\b(?! Vita\b)/i.test(name) && 'NetFront') {
	        layout = [data];
	      } // Detect Windows Phone 7 desktop mode.


	      if (name == 'IE' && (data = (/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(ua) || 0)[1])) {
	        name += ' Mobile';
	        os = 'Windows Phone ' + (/\+$/.test(data) ? data : data + '.x');
	        description.unshift('desktop mode');
	      } // Detect Windows Phone 8.x desktop mode.
	      else if (/\bWPDesktop\b/i.test(ua)) {
	        name = 'IE Mobile';
	        os = 'Windows Phone 8.x';
	        description.unshift('desktop mode');
	        version || (version = (/\brv:([\d.]+)/.exec(ua) || 0)[1]);
	      } // Detect IE 11 identifying as other browsers.
	      else if (name != 'IE' && layout == 'Trident' && (data = /\brv:([\d.]+)/.exec(ua))) {
	        if (name) {
	          description.push('identifying as ' + name + (version ? ' ' + version : ''));
	        }

	        name = 'IE';
	        version = data[1];
	      } // Leverage environment features.


	      if (useFeatures) {
	        // Detect server-side environments.
	        // Rhino has a global function while others have a global object.
	        if (isHostType(context, 'global')) {
	          if (java) {
	            data = java.lang.System;
	            arch = data.getProperty('os.arch');
	            os = os || data.getProperty('os.name') + ' ' + data.getProperty('os.version');
	          }

	          if (rhino) {
	            try {
	              version = context.require('ringo/engine').version.join('.');
	              name = 'RingoJS';
	            } catch (e) {
	              if ((data = context.system) && data.global.system == context.system) {
	                name = 'Narwhal';
	                os || (os = data[0].os || null);
	              }
	            }

	            if (!name) {
	              name = 'Rhino';
	            }
	          } else if (_typeof$2(context.process) == 'object' && !context.process.browser && (data = context.process)) {
	            if (_typeof$2(data.versions) == 'object') {
	              if (typeof data.versions.electron == 'string') {
	                description.push('Node ' + data.versions.node);
	                name = 'Electron';
	                version = data.versions.electron;
	              } else if (typeof data.versions.nw == 'string') {
	                description.push('Chromium ' + version, 'Node ' + data.versions.node);
	                name = 'NW.js';
	                version = data.versions.nw;
	              }
	            }

	            if (!name) {
	              name = 'Node.js';
	              arch = data.arch;
	              os = data.platform;
	              version = /[\d.]+/.exec(data.version);
	              version = version ? version[0] : null;
	            }
	          }
	        } // Detect Adobe AIR.
	        else if (getClassOf(data = context.runtime) == airRuntimeClass) {
	          name = 'Adobe AIR';
	          os = data.flash.system.Capabilities.os;
	        } // Detect PhantomJS.
	        else if (getClassOf(data = context.phantom) == phantomClass) {
	          name = 'PhantomJS';
	          version = (data = data.version || null) && data.major + '.' + data.minor + '.' + data.patch;
	        } // Detect IE compatibility modes.
	        else if (typeof doc.documentMode == 'number' && (data = /\bTrident\/(\d+)/i.exec(ua))) {
	          // We're in compatibility mode when the Trident version + 4 doesn't
	          // equal the document mode.
	          version = [version, doc.documentMode];

	          if ((data = +data[1] + 4) != version[1]) {
	            description.push('IE ' + version[1] + ' mode');
	            layout && (layout[1] = '');
	            version[1] = data;
	          }

	          version = name == 'IE' ? String(version[1].toFixed(1)) : version[0];
	        } // Detect IE 11 masking as other browsers.
	        else if (typeof doc.documentMode == 'number' && /^(?:Chrome|Firefox)\b/.test(name)) {
	          description.push('masking as ' + name + ' ' + version);
	          name = 'IE';
	          version = '11.0';
	          layout = ['Trident'];
	          os = 'Windows';
	        }

	        os = os && format(os);
	      } // Detect prerelease phases.


	      if (version && (data = /(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(version) || /(?:alpha|beta)(?: ?\d)?/i.exec(ua + ';' + (useFeatures && nav.appMinorVersion)) || /\bMinefield\b/i.test(ua) && 'a')) {
	        prerelease = /b/i.test(data) ? 'beta' : 'alpha';
	        version = version.replace(RegExp(data + '\\+?$'), '') + (prerelease == 'beta' ? beta : alpha) + (/\d+\+?/.exec(data) || '');
	      } // Detect Firefox Mobile.


	      if (name == 'Fennec' || name == 'Firefox' && /\b(?:Android|Firefox OS|KaiOS)\b/.test(os)) {
	        name = 'Firefox Mobile';
	      } // Obscure Maxthon's unreliable version.
	      else if (name == 'Maxthon' && version) {
	        version = version.replace(/\.[\d.]+/, '.x');
	      } // Detect Xbox 360 and Xbox One.
	      else if (/\bXbox\b/i.test(product)) {
	        if (product == 'Xbox 360') {
	          os = null;
	        }

	        if (product == 'Xbox 360' && /\bIEMobile\b/.test(ua)) {
	          description.unshift('mobile mode');
	        }
	      } // Add mobile postfix.
	      else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) && (os == 'Windows CE' || /Mobi/i.test(ua))) {
	        name += ' Mobile';
	      } // Detect IE platform preview.
	      else if (name == 'IE' && useFeatures) {
	        try {
	          if (context.external === null) {
	            description.unshift('platform preview');
	          }
	        } catch (e) {
	          description.unshift('embedded');
	        }
	      } // Detect BlackBerry OS version.
	      // http://docs.blackberry.com/en/developers/deliverables/18169/HTTP_headers_sent_by_BB_Browser_1234911_11.jsp
	      else if ((/\bBlackBerry\b/.test(product) || /\bBB10\b/.test(ua)) && (data = (RegExp(product.replace(/ +/g, ' *') + '/([.\\d]+)', 'i').exec(ua) || 0)[1] || version)) {
	        data = [data, /BB10/.test(ua)];
	        os = (data[1] ? (product = null, manufacturer = 'BlackBerry') : 'Device Software') + ' ' + data[0];
	        version = null;
	      } // Detect Opera identifying/masking itself as another browser.
	      // http://www.opera.com/support/kb/view/843/
	      else if (this != forOwn && product != 'Wii' && (useFeatures && opera || /Opera/.test(name) && /\b(?:MSIE|Firefox)\b/i.test(ua) || name == 'Firefox' && /\bOS X (?:\d+\.){2,}/.test(os) || name == 'IE' && (os && !/^Win/.test(os) && version > 5.5 || /\bWindows XP\b/.test(os) && version > 8 || version == 8 && !/\bTrident\b/.test(ua))) && !reOpera.test(data = parse.call(forOwn, ua.replace(reOpera, '') + ';')) && data.name) {
	        // When "identifying", the UA contains both Opera and the other browser's name.
	        data = 'ing as ' + data.name + ((data = data.version) ? ' ' + data : '');

	        if (reOpera.test(name)) {
	          if (/\bIE\b/.test(data) && os == 'Mac OS') {
	            os = null;
	          }

	          data = 'identify' + data;
	        } // When "masking", the UA contains only the other browser's name.
	        else {
	          data = 'mask' + data;

	          if (operaClass) {
	            name = format(operaClass.replace(/([a-z])([A-Z])/g, '$1 $2'));
	          } else {
	            name = 'Opera';
	          }

	          if (/\bIE\b/.test(data)) {
	            os = null;
	          }

	          if (!useFeatures) {
	            version = null;
	          }
	        }

	        layout = ['Presto'];
	        description.push(data);
	      } // Detect WebKit Nightly and approximate Chrome/Safari versions.


	      if (data = (/\bAppleWebKit\/([\d.]+\+?)/i.exec(ua) || 0)[1]) {
	        // Correct build number for numeric comparison.
	        // (e.g. "532.5" becomes "532.05")
	        data = [parseFloat(data.replace(/\.(\d)$/, '.0$1')), data]; // Nightly builds are postfixed with a "+".

	        if (name == 'Safari' && data[1].slice(-1) == '+') {
	          name = 'WebKit Nightly';
	          prerelease = 'alpha';
	          version = data[1].slice(0, -1);
	        } // Clear incorrect browser versions.
	        else if (version == data[1] || version == (data[2] = (/\bSafari\/([\d.]+\+?)/i.exec(ua) || 0)[1])) {
	          version = null;
	        } // Use the full Chrome version when available.


	        data[1] = (/\b(?:Headless)?Chrome\/([\d.]+)/i.exec(ua) || 0)[1]; // Detect Blink layout engine.

	        if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && layout == 'WebKit') {
	          layout = ['Blink'];
	        } // Detect JavaScriptCore.
	        // http://stackoverflow.com/questions/6768474/how-can-i-detect-which-javascript-engine-v8-or-jsc-is-used-at-runtime-in-androi


	        if (!useFeatures || !likeChrome && !data[1]) {
	          layout && (layout[1] = 'like Safari');
	          data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? '4+' : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : data < 602 ? 9 : data < 604 ? 10 : data < 606 ? 11 : data < 608 ? 12 : '12');
	        } else {
	          layout && (layout[1] = 'like Chrome');
	          data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.10 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.30 ? 11 : data < 535.01 ? 12 : data < 535.02 ? '13+' : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.10 ? 19 : data < 537.01 ? 20 : data < 537.11 ? '21+' : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != 'Blink' ? '27' : '28');
	        } // Add the postfix of ".x" or "+" for approximate versions.


	        layout && (layout[1] += ' ' + (data += typeof data == 'number' ? '.x' : /[.+]/.test(data) ? '' : '+')); // Obscure version for some Safari 1-2 releases.

	        if (name == 'Safari' && (!version || parseInt(version) > 45)) {
	          version = data;
	        } else if (name == 'Chrome' && /\bHeadlessChrome/i.test(ua)) {
	          description.unshift('headless');
	        }
	      } // Detect Opera desktop modes.


	      if (name == 'Opera' && (data = /\bzbov|zvav$/.exec(os))) {
	        name += ' ';
	        description.unshift('desktop mode');

	        if (data == 'zvav') {
	          name += 'Mini';
	          version = null;
	        } else {
	          name += 'Mobile';
	        }

	        os = os.replace(RegExp(' *' + data + '$'), '');
	      } // Detect Chrome desktop mode.
	      else if (name == 'Safari' && /\bChrome\b/.exec(layout && layout[1])) {
	        description.unshift('desktop mode');
	        name = 'Chrome Mobile';
	        version = null;

	        if (/\bOS X\b/.test(os)) {
	          manufacturer = 'Apple';
	          os = 'iOS 4.3+';
	        } else {
	          os = null;
	        }
	      } // Newer versions of SRWare Iron uses the Chrome tag to indicate its version number.
	      else if (/\bSRWare Iron\b/.test(name) && !version) {
	        version = getVersion('Chrome');
	      } // Strip incorrect OS versions.


	      if (version && version.indexOf(data = /[\d.]+$/.exec(os)) == 0 && ua.indexOf('/' + data + '-') > -1) {
	        os = trim(os.replace(data, ''));
	      } // Ensure OS does not include the browser name.


	      if (os && os.indexOf(name) != -1 && !RegExp(name + ' OS').test(os)) {
	        os = os.replace(RegExp(' *' + qualify(name) + ' *'), '');
	      } // Add layout engine.


	      if (layout && !/\b(?:Avant|Nook)\b/.test(name) && (/Browser|Lunascape|Maxthon/.test(name) || name != 'Safari' && /^iOS/.test(os) && /\bSafari\b/.test(layout[1]) || /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|SRWare Iron|Vivaldi|Web)/.test(name) && layout[1])) {
	        // Don't add layout details to description if they are falsey.
	        (data = layout[layout.length - 1]) && description.push(data);
	      } // Combine contextual information.


	      if (description.length) {
	        description = ['(' + description.join('; ') + ')'];
	      } // Append manufacturer to description.


	      if (manufacturer && product && product.indexOf(manufacturer) < 0) {
	        description.push('on ' + manufacturer);
	      } // Append product to description.


	      if (product) {
	        description.push((/^on /.test(description[description.length - 1]) ? '' : 'on ') + product);
	      } // Parse the OS into an object.


	      if (os) {
	        data = / ([\d.+]+)$/.exec(os);
	        isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == '/';
	        os = {
	          'architecture': 32,
	          'family': data && !isSpecialCasedOS ? os.replace(data[0], '') : os,
	          'version': data ? data[1] : null,
	          'toString': function toString() {
	            var version = this.version;
	            return this.family + (version && !isSpecialCasedOS ? ' ' + version : '') + (this.architecture == 64 ? ' 64-bit' : '');
	          }
	        };
	      } // Add browser/OS architecture.


	      if ((data = /\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(arch)) && !/\bi686\b/i.test(arch)) {
	        if (os) {
	          os.architecture = 64;
	          os.family = os.family.replace(RegExp(' *' + data), '');
	        }

	        if (name && (/\bWOW64\b/i.test(ua) || useFeatures && /\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\bWin64; x64\b/i.test(ua))) {
	          description.unshift('32-bit');
	        }
	      } // Chrome 39 and above on OS X is always 64-bit.
	      else if (os && /^OS X/.test(os.family) && name == 'Chrome' && parseFloat(version) >= 39) {
	        os.architecture = 64;
	      }

	      ua || (ua = null);
	      /*------------------------------------------------------------------------*/

	      /**
	       * The platform object.
	       *
	       * @name platform
	       * @type Object
	       */

	      var platform = {};
	      /**
	       * The platform description.
	       *
	       * @memberOf platform
	       * @type string|null
	       */

	      platform.description = ua;
	      /**
	       * The name of the browser's layout engine.
	       *
	       * The list of common layout engines include:
	       * "Blink", "EdgeHTML", "Gecko", "Trident" and "WebKit"
	       *
	       * @memberOf platform
	       * @type string|null
	       */

	      platform.layout = layout && layout[0];
	      /**
	       * The name of the product's manufacturer.
	       *
	       * The list of manufacturers include:
	       * "Apple", "Archos", "Amazon", "Asus", "Barnes & Noble", "BlackBerry",
	       * "Google", "HP", "HTC", "LG", "Microsoft", "Motorola", "Nintendo",
	       * "Nokia", "Samsung" and "Sony"
	       *
	       * @memberOf platform
	       * @type string|null
	       */

	      platform.manufacturer = manufacturer;
	      /**
	       * The name of the browser/environment.
	       *
	       * The list of common browser names include:
	       * "Chrome", "Electron", "Firefox", "Firefox for iOS", "IE",
	       * "Microsoft Edge", "PhantomJS", "Safari", "SeaMonkey", "Silk",
	       * "Opera Mini" and "Opera"
	       *
	       * Mobile versions of some browsers have "Mobile" appended to their name:
	       * eg. "Chrome Mobile", "Firefox Mobile", "IE Mobile" and "Opera Mobile"
	       *
	       * @memberOf platform
	       * @type string|null
	       */

	      platform.name = name;
	      /**
	       * The alpha/beta release indicator.
	       *
	       * @memberOf platform
	       * @type string|null
	       */

	      platform.prerelease = prerelease;
	      /**
	       * The name of the product hosting the browser.
	       *
	       * The list of common products include:
	       *
	       * "BlackBerry", "Galaxy S4", "Lumia", "iPad", "iPod", "iPhone", "Kindle",
	       * "Kindle Fire", "Nexus", "Nook", "PlayBook", "TouchPad" and "Transformer"
	       *
	       * @memberOf platform
	       * @type string|null
	       */

	      platform.product = product;
	      /**
	       * The browser's user agent string.
	       *
	       * @memberOf platform
	       * @type string|null
	       */

	      platform.ua = ua;
	      /**
	       * The browser/environment version.
	       *
	       * @memberOf platform
	       * @type string|null
	       */

	      platform.version = name && version;
	      /**
	       * The name of the operating system.
	       *
	       * @memberOf platform
	       * @type Object
	       */

	      platform.os = os || {
	        /**
	         * The CPU architecture the OS is built for.
	         *
	         * @memberOf platform.os
	         * @type number|null
	         */
	        'architecture': null,

	        /**
	         * The family of the OS.
	         *
	         * Common values include:
	         * "Windows", "Windows Server 2008 R2 / 7", "Windows Server 2008 / Vista",
	         * "Windows XP", "OS X", "Linux", "Ubuntu", "Debian", "Fedora", "Red Hat",
	         * "SuSE", "Android", "iOS" and "Windows Phone"
	         *
	         * @memberOf platform.os
	         * @type string|null
	         */
	        'family': null,

	        /**
	         * The version of the OS.
	         *
	         * @memberOf platform.os
	         * @type string|null
	         */
	        'version': null,

	        /**
	         * Returns the OS string.
	         *
	         * @memberOf platform.os
	         * @returns {string} The OS string.
	         */
	        'toString': function toString() {
	          return 'null';
	        }
	      };
	      platform.parse = parse;
	      platform.toString = toStringPlatform;

	      if (platform.version) {
	        description.unshift(version);
	      }

	      if (platform.name) {
	        description.unshift(name);
	      }

	      if (os && name && !(os == String(os).split(' ')[0] && (os == name.split(' ')[0] || product))) {
	        description.push(product ? '(' + os + ')' : 'on ' + os);
	      }

	      if (description.length) {
	        platform.description = description.join(' ');
	      }

	      return platform;
	    }
	    /*--------------------------------------------------------------------------*/
	    // Export platform.


	    var platform = parse(); // Some AMD build optimizers, like r.js, check for condition patterns like the following:

	    if (freeExports && freeModule) {
	      // Export for CommonJS support.
	      forOwn(platform, function (value, key) {
	        freeExports[key] = value;
	      });
	    } else {
	      // Export to the global object.
	      root.platform = platform;
	    }
	  }).call(commonjsGlobal);
	})(platform, platform.exports);

	var fixRegExpWellKnownSymbolLogic$1 = fixRegexpWellKnownSymbolLogic;
	var anObject$1 = anObject$j;
	var toLength$2 = toLength$m;
	var toString$2 = toString$b;
	var requireObjectCoercible$1 = requireObjectCoercible$8;
	var advanceStringIndex = advanceStringIndex$3;
	var regExpExec$1 = regexpExecAbstract;

	// @@match logic
	fixRegExpWellKnownSymbolLogic$1('match', function (MATCH, nativeMatch, maybeCallNative) {
	  return [
	    // `String.prototype.match` method
	    // https://tc39.es/ecma262/#sec-string.prototype.match
	    function match(regexp) {
	      var O = requireObjectCoercible$1(this);
	      var matcher = regexp == undefined ? undefined : regexp[MATCH];
	      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](toString$2(O));
	    },
	    // `RegExp.prototype[@@match]` method
	    // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
	    function (string) {
	      var rx = anObject$1(this);
	      var S = toString$2(string);
	      var res = maybeCallNative(nativeMatch, rx, S);

	      if (res.done) return res.value;

	      if (!rx.global) return regExpExec$1(rx, S);

	      var fullUnicode = rx.unicode;
	      rx.lastIndex = 0;
	      var A = [];
	      var n = 0;
	      var result;
	      while ((result = regExpExec$1(rx, S)) !== null) {
	        var matchStr = toString$2(result[0]);
	        A[n] = matchStr;
	        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength$2(rx.lastIndex), fullUnicode);
	        n++;
	      }
	      return n === 0 ? null : A;
	    }
	  ];
	});

	// `SameValue` abstract operation
	// https://tc39.es/ecma262/#sec-samevalue
	// eslint-disable-next-line es/no-object-is -- safe
	var sameValue$1 = Object.is || function is(x, y) {
	  // eslint-disable-next-line no-self-compare -- NaN check
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

	var fixRegExpWellKnownSymbolLogic = fixRegexpWellKnownSymbolLogic;
	var anObject = anObject$j;
	var requireObjectCoercible = requireObjectCoercible$8;
	var sameValue = sameValue$1;
	var toString$1 = toString$b;
	var regExpExec = regexpExecAbstract;

	// @@search logic
	fixRegExpWellKnownSymbolLogic('search', function (SEARCH, nativeSearch, maybeCallNative) {
	  return [
	    // `String.prototype.search` method
	    // https://tc39.es/ecma262/#sec-string.prototype.search
	    function search(regexp) {
	      var O = requireObjectCoercible(this);
	      var searcher = regexp == undefined ? undefined : regexp[SEARCH];
	      return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](toString$1(O));
	    },
	    // `RegExp.prototype[@@search]` method
	    // https://tc39.es/ecma262/#sec-regexp.prototype-@@search
	    function (string) {
	      var rx = anObject(this);
	      var S = toString$1(string);
	      var res = maybeCallNative(nativeSearch, rx, S);

	      if (res.done) return res.value;

	      var previousLastIndex = rx.lastIndex;
	      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
	      var result = regExpExec(rx, S);
	      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
	      return result === null ? -1 : result.index;
	    }
	  ];
	});

	var $$3 = _export;
	var toAbsoluteIndex = toAbsoluteIndex$6;
	var toInteger = toInteger$9;
	var toLength$1 = toLength$m;
	var toObject$2 = toObject$g;
	var arraySpeciesCreate = arraySpeciesCreate$3;
	var createProperty = createProperty$5;
	var arrayMethodHasSpeciesSupport = arrayMethodHasSpeciesSupport$5;

	var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');

	var max = Math.max;
	var min = Math.min;
	var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

	// `Array.prototype.splice` method
	// https://tc39.es/ecma262/#sec-array.prototype.splice
	// with adding support of @@species
	$$3({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
	  splice: function splice(start, deleteCount /* , ...items */) {
	    var O = toObject$2(this);
	    var len = toLength$1(O.length);
	    var actualStart = toAbsoluteIndex(start, len);
	    var argumentsLength = arguments.length;
	    var insertCount, actualDeleteCount, A, k, from, to;
	    if (argumentsLength === 0) {
	      insertCount = actualDeleteCount = 0;
	    } else if (argumentsLength === 1) {
	      insertCount = 0;
	      actualDeleteCount = len - actualStart;
	    } else {
	      insertCount = argumentsLength - 2;
	      actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);
	    }
	    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
	      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
	    }
	    A = arraySpeciesCreate(O, actualDeleteCount);
	    for (k = 0; k < actualDeleteCount; k++) {
	      from = actualStart + k;
	      if (from in O) createProperty(A, k, O[from]);
	    }
	    A.length = actualDeleteCount;
	    if (insertCount < actualDeleteCount) {
	      for (k = actualStart; k < len - actualDeleteCount; k++) {
	        from = k + actualDeleteCount;
	        to = k + insertCount;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
	    } else if (insertCount > actualDeleteCount) {
	      for (k = len - actualDeleteCount; k > actualStart; k--) {
	        from = k + actualDeleteCount - 1;
	        to = k + insertCount - 1;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	    }
	    for (k = 0; k < insertCount; k++) {
	      O[k + actualStart] = arguments[k + 2];
	    }
	    O.length = len - actualDeleteCount + insertCount;
	    return A;
	  }
	});

	(function (exports) {

	  var global = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
	  Object.defineProperty(exports, '__esModule', {
	    value: true
	  });
	  var _asyncToGenerator = asyncToGenerator.exports;
	  var _createClass = createClass.exports;
	  var _assertThisInitialized = assertThisInitialized.exports;
	  var _get = get$1.exports;
	  var _inherits = inherits.exports;
	  var _possibleConstructorReturn = possibleConstructorReturn.exports;
	  var _getPrototypeOf = getPrototypeOf$2.exports;
	  var _classCallCheck = classCallCheck.exports;
	  var _defineProperty = defineProperty$5.exports;
	  var _regeneratorRuntime = require$$9;
	  var _typeof = _typeof$1.exports;
	  var declarativeTypeValidator = browser$3;
	  var loglevelLog = loglevel.exports;
	  var StateMachine = stateMachine.exports;
	  var uuid = uuid_1;
	  var _wrapNativeSuper = wrapNativeSuper.exports;
	  var operationRetrier = browser$1;
	  var platform$1 = platform.exports;

	  function _interopDefaultLegacy(e) {
	    return e && _typeof$2(e) === 'object' && 'default' in e ? e : {
	      'default': e
	    };
	  }

	  function _interopNamespace(e) {
	    if (e && e.__esModule) return e;
	    var n = Object.create(null);

	    if (e) {
	      Object.keys(e).forEach(function (k) {
	        if (k !== 'default') {
	          var d = Object.getOwnPropertyDescriptor(e, k);
	          Object.defineProperty(n, k, d.get ? d : {
	            enumerable: true,
	            get: function get() {
	              return e[k];
	            }
	          });
	        }
	      });
	    }

	    n['default'] = e;
	    return Object.freeze(n);
	  }

	  var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);

	  var _createClass__default = /*#__PURE__*/_interopDefaultLegacy(_createClass);

	  var _assertThisInitialized__default = /*#__PURE__*/_interopDefaultLegacy(_assertThisInitialized);

	  var _get__default = /*#__PURE__*/_interopDefaultLegacy(_get);

	  var _inherits__default = /*#__PURE__*/_interopDefaultLegacy(_inherits);

	  var _possibleConstructorReturn__default = /*#__PURE__*/_interopDefaultLegacy(_possibleConstructorReturn);

	  var _getPrototypeOf__default = /*#__PURE__*/_interopDefaultLegacy(_getPrototypeOf);

	  var _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);

	  var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

	  var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);

	  var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);

	  var loglevelLog__namespace = /*#__PURE__*/_interopNamespace(loglevelLog);

	  var StateMachine__namespace = /*#__PURE__*/_interopNamespace(StateMachine);

	  var _wrapNativeSuper__default = /*#__PURE__*/_interopDefaultLegacy(_wrapNativeSuper);

	  var platform__namespace = /*#__PURE__*/_interopNamespace(platform$1);

	  function __decorate(decorators, target, key, desc) {
	    var c = arguments.length,
	        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
	        d;
	    if ((typeof Reflect === "undefined" ? "undefined" : _typeof__default['default'](Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
	      if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    }
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	  }

	  function __metadata(metadataKey, metadataValue) {
	    if ((typeof Reflect === "undefined" ? "undefined" : _typeof__default['default'](Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
	  }

	  var domain; // This constructor is used to store event handlers. Instantiating this is
	  // faster than explicitly calling `Object.create(null)` to get a "clean" empty
	  // object (tested with v8 v4.9).

	  function EventHandlers() {}

	  EventHandlers.prototype = Object.create(null);

	  function EventEmitter() {
	    EventEmitter.init.call(this);
	  } // nodejs oddity
	  // require('events') === require('events').EventEmitter


	  EventEmitter.EventEmitter = EventEmitter;
	  EventEmitter.usingDomains = false;
	  EventEmitter.prototype.domain = undefined;
	  EventEmitter.prototype._events = undefined;
	  EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
	  // added to it. This is a useful default which helps finding memory leaks.

	  EventEmitter.defaultMaxListeners = 10;

	  EventEmitter.init = function () {
	    this.domain = null;

	    if (EventEmitter.usingDomains) {
	      // if there is an active domain, then attach to it.
	      if (domain.active) ;
	    }

	    if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
	      this._events = new EventHandlers();
	      this._eventsCount = 0;
	    }

	    this._maxListeners = this._maxListeners || undefined;
	  }; // Obviously not all Emitters should be limited to 10. This function allows
	  // that to be increased. Set to zero for unlimited.


	  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
	    if (typeof n !== 'number' || n < 0 || isNaN(n)) throw new TypeError('"n" argument must be a positive number');
	    this._maxListeners = n;
	    return this;
	  };

	  function $getMaxListeners(that) {
	    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
	    return that._maxListeners;
	  }

	  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
	    return $getMaxListeners(this);
	  }; // These standalone emit* functions are used to optimize calling of event
	  // handlers for fast cases because emit() itself often has a variable number of
	  // arguments and can be deoptimized because of that. These functions always have
	  // the same number of arguments and thus do not get deoptimized, so the code
	  // inside them can execute faster.


	  function emitNone(handler, isFn, self) {
	    if (isFn) handler.call(self);else {
	      var len = handler.length;
	      var listeners = arrayClone(handler, len);

	      for (var i = 0; i < len; ++i) {
	        listeners[i].call(self);
	      }
	    }
	  }

	  function emitOne(handler, isFn, self, arg1) {
	    if (isFn) handler.call(self, arg1);else {
	      var len = handler.length;
	      var listeners = arrayClone(handler, len);

	      for (var i = 0; i < len; ++i) {
	        listeners[i].call(self, arg1);
	      }
	    }
	  }

	  function emitTwo(handler, isFn, self, arg1, arg2) {
	    if (isFn) handler.call(self, arg1, arg2);else {
	      var len = handler.length;
	      var listeners = arrayClone(handler, len);

	      for (var i = 0; i < len; ++i) {
	        listeners[i].call(self, arg1, arg2);
	      }
	    }
	  }

	  function emitThree(handler, isFn, self, arg1, arg2, arg3) {
	    if (isFn) handler.call(self, arg1, arg2, arg3);else {
	      var len = handler.length;
	      var listeners = arrayClone(handler, len);

	      for (var i = 0; i < len; ++i) {
	        listeners[i].call(self, arg1, arg2, arg3);
	      }
	    }
	  }

	  function emitMany(handler, isFn, self, args) {
	    if (isFn) handler.apply(self, args);else {
	      var len = handler.length;
	      var listeners = arrayClone(handler, len);

	      for (var i = 0; i < len; ++i) {
	        listeners[i].apply(self, args);
	      }
	    }
	  }

	  EventEmitter.prototype.emit = function emit(type) {
	    var er, handler, len, args, i, events, domain;
	    var doError = type === 'error';
	    events = this._events;
	    if (events) doError = doError && events.error == null;else if (!doError) return false;
	    domain = this.domain; // If there is no 'error' event listener then throw.

	    if (doError) {
	      er = arguments[1];

	      if (domain) {
	        if (!er) er = new Error('Uncaught, unspecified "error" event');
	        er.domainEmitter = this;
	        er.domain = domain;
	        er.domainThrown = false;
	        domain.emit('error', er);
	      } else if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }

	      return false;
	    }

	    handler = events[type];
	    if (!handler) return false;
	    var isFn = typeof handler === 'function';
	    len = arguments.length;

	    switch (len) {
	      // fast cases
	      case 1:
	        emitNone(handler, isFn, this);
	        break;

	      case 2:
	        emitOne(handler, isFn, this, arguments[1]);
	        break;

	      case 3:
	        emitTwo(handler, isFn, this, arguments[1], arguments[2]);
	        break;

	      case 4:
	        emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
	        break;
	      // slower

	      default:
	        args = new Array(len - 1);

	        for (i = 1; i < len; i++) {
	          args[i - 1] = arguments[i];
	        }

	        emitMany(handler, isFn, this, args);
	    }

	    return true;
	  };

	  function _addListener(target, type, listener, prepend) {
	    var m;
	    var events;
	    var existing;
	    if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
	    events = target._events;

	    if (!events) {
	      events = target._events = new EventHandlers();
	      target._eventsCount = 0;
	    } else {
	      // To avoid recursion in the case that type === "newListener"! Before
	      // adding it to the listeners, first emit "newListener".
	      if (events.newListener) {
	        target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
	        // this._events to be assigned to a new object

	        events = target._events;
	      }

	      existing = events[type];
	    }

	    if (!existing) {
	      // Optimize the case of one listener. Don't need the extra array object.
	      existing = events[type] = listener;
	      ++target._eventsCount;
	    } else {
	      if (typeof existing === 'function') {
	        // Adding the second element, need to change to array.
	        existing = events[type] = prepend ? [listener, existing] : [existing, listener];
	      } else {
	        // If we've already got an array, just append.
	        if (prepend) {
	          existing.unshift(listener);
	        } else {
	          existing.push(listener);
	        }
	      } // Check for listener leak


	      if (!existing.warned) {
	        m = $getMaxListeners(target);

	        if (m && m > 0 && existing.length > m) {
	          existing.warned = true;
	          var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + type + ' listeners added. ' + 'Use emitter.setMaxListeners() to increase limit');
	          w.name = 'MaxListenersExceededWarning';
	          w.emitter = target;
	          w.type = type;
	          w.count = existing.length;
	          emitWarning(w);
	        }
	      }
	    }

	    return target;
	  }

	  function emitWarning(e) {
	    typeof console.warn === 'function' ? console.warn(e) : console.log(e);
	  }

	  EventEmitter.prototype.addListener = function addListener(type, listener) {
	    return _addListener(this, type, listener, false);
	  };

	  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	  EventEmitter.prototype.prependListener = function prependListener(type, listener) {
	    return _addListener(this, type, listener, true);
	  };

	  function _onceWrap(target, type, listener) {
	    var fired = false;

	    function g() {
	      target.removeListener(type, g);

	      if (!fired) {
	        fired = true;
	        listener.apply(target, arguments);
	      }
	    }

	    g.listener = listener;
	    return g;
	  }

	  EventEmitter.prototype.once = function once(type, listener) {
	    if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
	    this.on(type, _onceWrap(this, type, listener));
	    return this;
	  };

	  EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
	    if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
	    this.prependListener(type, _onceWrap(this, type, listener));
	    return this;
	  }; // emits a 'removeListener' event iff the listener was removed


	  EventEmitter.prototype.removeListener = function removeListener(type, listener) {
	    var list, events, position, i, originalListener;
	    if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
	    events = this._events;
	    if (!events) return this;
	    list = events[type];
	    if (!list) return this;

	    if (list === listener || list.listener && list.listener === listener) {
	      if (--this._eventsCount === 0) this._events = new EventHandlers();else {
	        delete events[type];
	        if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
	      }
	    } else if (typeof list !== 'function') {
	      position = -1;

	      for (i = list.length; i-- > 0;) {
	        if (list[i] === listener || list[i].listener && list[i].listener === listener) {
	          originalListener = list[i].listener;
	          position = i;
	          break;
	        }
	      }

	      if (position < 0) return this;

	      if (list.length === 1) {
	        list[0] = undefined;

	        if (--this._eventsCount === 0) {
	          this._events = new EventHandlers();
	          return this;
	        } else {
	          delete events[type];
	        }
	      } else {
	        spliceOne(list, position);
	      }

	      if (events.removeListener) this.emit('removeListener', type, originalListener || listener);
	    }

	    return this;
	  }; // Alias for removeListener added in NodeJS 10.0
	  // https://nodejs.org/api/events.html#events_emitter_off_eventname_listener


	  EventEmitter.prototype.off = function (type, listener) {
	    return this.removeListener(type, listener);
	  };

	  EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
	    var listeners, events;
	    events = this._events;
	    if (!events) return this; // not listening for removeListener, no need to emit

	    if (!events.removeListener) {
	      if (arguments.length === 0) {
	        this._events = new EventHandlers();
	        this._eventsCount = 0;
	      } else if (events[type]) {
	        if (--this._eventsCount === 0) this._events = new EventHandlers();else delete events[type];
	      }

	      return this;
	    } // emit removeListener for all listeners on all events


	    if (arguments.length === 0) {
	      var keys = Object.keys(events);

	      for (var i = 0, key; i < keys.length; ++i) {
	        key = keys[i];
	        if (key === 'removeListener') continue;
	        this.removeAllListeners(key);
	      }

	      this.removeAllListeners('removeListener');
	      this._events = new EventHandlers();
	      this._eventsCount = 0;
	      return this;
	    }

	    listeners = events[type];

	    if (typeof listeners === 'function') {
	      this.removeListener(type, listeners);
	    } else if (listeners) {
	      // LIFO order
	      do {
	        this.removeListener(type, listeners[listeners.length - 1]);
	      } while (listeners[0]);
	    }

	    return this;
	  };

	  EventEmitter.prototype.listeners = function listeners(type) {
	    var evlistener;
	    var ret;
	    var events = this._events;
	    if (!events) ret = [];else {
	      evlistener = events[type];
	      if (!evlistener) ret = [];else if (typeof evlistener === 'function') ret = [evlistener.listener || evlistener];else ret = unwrapListeners(evlistener);
	    }
	    return ret;
	  };

	  EventEmitter.listenerCount = function (emitter, type) {
	    if (typeof emitter.listenerCount === 'function') {
	      return emitter.listenerCount(type);
	    } else {
	      return listenerCount.call(emitter, type);
	    }
	  };

	  EventEmitter.prototype.listenerCount = listenerCount;

	  function listenerCount(type) {
	    var events = this._events;

	    if (events) {
	      var evlistener = events[type];

	      if (typeof evlistener === 'function') {
	        return 1;
	      } else if (evlistener) {
	        return evlistener.length;
	      }
	    }

	    return 0;
	  }

	  EventEmitter.prototype.eventNames = function eventNames() {
	    return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
	  }; // About 1.5x faster than the two-arg version of Array#splice().


	  function spliceOne(list, index) {
	    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
	      list[i] = list[k];
	    }

	    list.pop();
	  }

	  function arrayClone(arr, i) {
	    var copy = new Array(i);

	    while (i--) {
	      copy[i] = arr[i];
	    }

	    return copy;
	  }

	  function unwrapListeners(arr) {
	    var ret = new Array(arr.length);

	    for (var i = 0; i < ret.length; ++i) {
	      ret[i] = arr[i].listener || arr[i];
	    }

	    return ret;
	  }

	  var log = loglevelLog__namespace.getLogger("twilsock"); // twilsock is used by Flex SDK. Please DO NOT change

	  function prepareLine(prefix, args) {
	    return ["".concat(new Date().toISOString(), " Twilsock ").concat(prefix, ":")].concat(Array.from(args));
	  }

	  var Logger = /*#__PURE__*/function () {
	    function Logger(prefix) {
	      _classCallCheck__default['default'](this, Logger);

	      _defineProperty__default['default'](this, "prefix", "");

	      this.prefix = prefix !== null && prefix !== undefined && prefix.length > 0 ? " " + prefix + ":" : "";
	    }

	    _createClass__default['default'](Logger, [{
	      key: "setLevel",
	      value: function setLevel(level) {
	        log.setLevel(level);
	      }
	    }, {
	      key: "trace",
	      value: function trace() {
	        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	          args[_key] = arguments[_key];
	        }

	        log.trace.apply(null, prepareLine("T", args));
	      }
	    }, {
	      key: "debug",
	      value: function debug() {
	        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	          args[_key2] = arguments[_key2];
	        }

	        log.debug.apply(null, prepareLine("D", args));
	      }
	    }, {
	      key: "info",
	      value: function info() {
	        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	          args[_key3] = arguments[_key3];
	        }

	        log.info.apply(null, prepareLine("I", args));
	      }
	    }, {
	      key: "warn",
	      value: function warn() {
	        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	          args[_key4] = arguments[_key4];
	        }

	        log.warn.apply(null, prepareLine("W", args));
	      }
	    }, {
	      key: "error",
	      value: function error() {
	        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	          args[_key5] = arguments[_key5];
	        }

	        log.error.apply(null, prepareLine("E", args));
	      }
	    }], [{
	      key: "setLevel",
	      value: function setLevel(level) {
	        log.setLevel(level);
	      }
	    }, {
	      key: "trace",
	      value: function trace() {
	        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	          args[_key6] = arguments[_key6];
	        }

	        log.trace.apply(null, prepareLine("T", args));
	      }
	    }, {
	      key: "debug",
	      value: function debug() {
	        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
	          args[_key7] = arguments[_key7];
	        }

	        log.debug.apply(null, prepareLine("D", args));
	      }
	    }, {
	      key: "info",
	      value: function info() {
	        for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
	          args[_key8] = arguments[_key8];
	        }

	        log.info.apply(null, prepareLine("I", args));
	      }
	    }, {
	      key: "warn",
	      value: function warn() {
	        for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
	          args[_key9] = arguments[_key9];
	        }

	        log.warn.apply(null, prepareLine("W", args));
	      }
	    }, {
	      key: "error",
	      value: function error() {
	        for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
	          args[_key10] = arguments[_key10];
	        }

	        log.error.apply(null, prepareLine("E", args));
	      }
	    }]);

	    return Logger;
	  }();

	  var logInstance = new Logger("");
	  var version = "0.12.2";
	  /**
	   * Settings container for the Twilsock client library
	   */

	  var Configuration = /*#__PURE__*/function () {
	    /**
	     * @param {String} token - authentication token
	     * @param {Object} options - options to override defaults
	     */
	    function Configuration(token, activeGrant, options) {
	      _classCallCheck__default['default'](this, Configuration);

	      _defineProperty__default['default'](this, "confirmedCapabilities", new Set());

	      this.activeGrant = activeGrant;
	      this._token = token;
	      var region = options.region || "us1";
	      var defaultTwilsockUrl = "wss://tsock.".concat(region, ".twilio.com/v3/wsconnect");
	      var twilsockOptions = options.twilsock || options.Twilsock || {};
	      this.url = twilsockOptions.uri || defaultTwilsockUrl;
	      this._continuationToken = options.continuationToken ? options.continuationToken : null;
	      this.logLevel = options.logLevel ? options.logLevel : "error";
	      this.retryPolicy = options.retryPolicy ? options.retryPolicy : {
	        min: 1 * 1000,
	        max: 2 * 60 * 1000,
	        randomness: 0.2
	      };
	      this.clientMetadata = options.clientMetadata ? options.clientMetadata : {};
	      this.clientMetadata.ver = version;
	      this.initRegistrations = options.initRegistrations ? options.initRegistrations : null;
	      this.tweaks = options.tweaks ? options.tweaks : null;
	    }

	    _createClass__default['default'](Configuration, [{
	      key: "token",
	      get: function get() {
	        return this._token;
	      }
	    }, {
	      key: "continuationToken",
	      get: function get() {
	        return this._continuationToken;
	      }
	    }, {
	      key: "updateToken",
	      value: function updateToken(token) {
	        this._token = token;
	      }
	    }, {
	      key: "updateContinuationToken",
	      value: function updateContinuationToken(continuationToken) {
	        this._continuationToken = continuationToken;
	      }
	    }]);

	    return Configuration;
	  }();

	  var AbstractMessage = function AbstractMessage(id) {
	    _classCallCheck__default['default'](this, AbstractMessage);

	    this.id = id || "TM".concat(uuid.v4());
	  };

	  function _createSuper$f(Derived) {
	    var hasNativeReflectConstruct = _isNativeReflectConstruct$f();

	    return function _createSuperInternal() {
	      var Super = _getPrototypeOf__default['default'](Derived),
	          result;

	      if (hasNativeReflectConstruct) {
	        var NewTarget = _getPrototypeOf__default['default'](this).constructor;

	        result = Reflect.construct(Super, arguments, NewTarget);
	      } else {
	        result = Super.apply(this, arguments);
	      }

	      return _possibleConstructorReturn__default['default'](this, result);
	    };
	  }

	  function _isNativeReflectConstruct$f() {
	    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	    if (Reflect.construct.sham) return false;
	    if (typeof Proxy === "function") return true;

	    try {
	      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }

	  var Init = /*#__PURE__*/function (_AbstractMessage) {
	    _inherits__default['default'](Init, _AbstractMessage);

	    var _super = _createSuper$f(Init);

	    function Init(token, continuationToken, metadata, registrations, tweaks) {
	      var _this;

	      _classCallCheck__default['default'](this, Init);

	      _this = _super.call(this);

	      _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "method", "init");

	      _this.token = token;
	      _this.continuation_token = continuationToken;
	      _this.metadata = metadata;
	      _this.registrations = registrations;
	      _this.tweaks = tweaks;
	      _this.capabilities = ["client_update", "offline_storage", "telemetry.v1"];
	      return _this;
	    }

	    return Init;
	  }(AbstractMessage);

	  function _createSuper$e(Derived) {
	    var hasNativeReflectConstruct = _isNativeReflectConstruct$e();

	    return function _createSuperInternal() {
	      var Super = _getPrototypeOf__default['default'](Derived),
	          result;

	      if (hasNativeReflectConstruct) {
	        var NewTarget = _getPrototypeOf__default['default'](this).constructor;

	        result = Reflect.construct(Super, arguments, NewTarget);
	      } else {
	        result = Super.apply(this, arguments);
	      }

	      return _possibleConstructorReturn__default['default'](this, result);
	    };
	  }

	  function _isNativeReflectConstruct$e() {
	    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	    if (Reflect.construct.sham) return false;
	    if (typeof Proxy === "function") return true;

	    try {
	      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }

	  var InitReply = /*#__PURE__*/function (_AbstractMessage) {
	    _inherits__default['default'](InitReply, _AbstractMessage);

	    var _super = _createSuper$e(InitReply);

	    function InitReply(id, continuationToken, confirmedCapabilities, continuationTokenStatus, offlineStorage, initRegistrations, debugInfo) {
	      var _this;

	      _classCallCheck__default['default'](this, InitReply);

	      _this = _super.call(this, id);
	      _this.continuationToken = continuationToken;
	      _this.continuationTokenStatus = continuationTokenStatus;
	      _this.offlineStorage = offlineStorage;
	      _this.initRegistrations = initRegistrations;
	      _this.debugInfo = debugInfo;
	      _this.confirmedCapabilities = confirmedCapabilities;
	      return _this;
	    }

	    return InitReply;
	  }(AbstractMessage);

	  function _createSuper$d(Derived) {
	    var hasNativeReflectConstruct = _isNativeReflectConstruct$d();

	    return function _createSuperInternal() {
	      var Super = _getPrototypeOf__default['default'](Derived),
	          result;

	      if (hasNativeReflectConstruct) {
	        var NewTarget = _getPrototypeOf__default['default'](this).constructor;

	        result = Reflect.construct(Super, arguments, NewTarget);
	      } else {
	        result = Super.apply(this, arguments);
	      }

	      return _possibleConstructorReturn__default['default'](this, result);
	    };
	  }

	  function _isNativeReflectConstruct$d() {
	    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	    if (Reflect.construct.sham) return false;
	    if (typeof Proxy === "function") return true;

	    try {
	      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }

	  var Update = /*#__PURE__*/function (_AbstractMessage) {
	    _inherits__default['default'](Update, _AbstractMessage);

	    var _super = _createSuper$d(Update);

	    function Update(token) {
	      var _this;

	      _classCallCheck__default['default'](this, Update);

	      _this = _super.call(this);

	      _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "method", "update");

	      _this.token = token;
	      return _this;
	    }

	    return Update;
	  }(AbstractMessage);

	  function _createSuper$c(Derived) {
	    var hasNativeReflectConstruct = _isNativeReflectConstruct$c();

	    return function _createSuperInternal() {
	      var Super = _getPrototypeOf__default['default'](Derived),
	          result;

	      if (hasNativeReflectConstruct) {
	        var NewTarget = _getPrototypeOf__default['default'](this).constructor;

	        result = Reflect.construct(Super, arguments, NewTarget);
	      } else {
	        result = Super.apply(this, arguments);
	      }

	      return _possibleConstructorReturn__default['default'](this, result);
	    };
	  }

	  function _isNativeReflectConstruct$c() {
	    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	    if (Reflect.construct.sham) return false;
	    if (typeof Proxy === "function") return true;

	    try {
	      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }

	  var Message = /*#__PURE__*/function (_AbstractMessage) {
	    _inherits__default['default'](Message, _AbstractMessage);

	    var _super = _createSuper$c(Message);

	    function Message(grant, contentType, request) {
	      var _this;

	      _classCallCheck__default['default'](this, Message);

	      _this = _super.call(this);

	      _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "method", "message");

	      _this.active_grant = grant;
	      _this.payload_type = contentType;
	      _this.http_request = request;
	      return _this;
	    }

	    return Message;
	  }(AbstractMessage);

	  function _createSuper$b(Derived) {
	    var hasNativeReflectConstruct = _isNativeReflectConstruct$b();

	    return function _createSuperInternal() {
	      var Super = _getPrototypeOf__default['default'](Derived),
	          result;

	      if (hasNativeReflectConstruct) {
	        var NewTarget = _getPrototypeOf__default['default'](this).constructor;

	        result = Reflect.construct(Super, arguments, NewTarget);
	      } else {
	        result = Super.apply(this, arguments);
	      }

	      return _possibleConstructorReturn__default['default'](this, result);
	    };
	  }

	  function _isNativeReflectConstruct$b() {
	    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	    if (Reflect.construct.sham) return false;
	    if (typeof Proxy === "function") return true;

	    try {
	      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }

	  var Reply = /*#__PURE__*/function (_AbstractMessage) {
	    _inherits__default['default'](Reply, _AbstractMessage);

	    var _super = _createSuper$b(Reply);

	    function Reply(id) {
	      var _this;

	      _classCallCheck__default['default'](this, Reply);

	      _this = _super.call(this, id);

	      _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "method", "reply");

	      _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "payload_type", "application/json");

	      _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "status", {
	        code: 200,
	        status: "OK"
	      });

	      return _this;
	    }

	    return Reply;
	  }(AbstractMessage);

	  function _createSuper$a(Derived) {
	    var hasNativeReflectConstruct = _isNativeReflectConstruct$a();

	    return function _createSuperInternal() {
	      var Super = _getPrototypeOf__default['default'](Derived),
	          result;

	      if (hasNativeReflectConstruct) {
	        var NewTarget = _getPrototypeOf__default['default'](this).constructor;

	        result = Reflect.construct(Super, arguments, NewTarget);
	      } else {
	        result = Super.apply(this, arguments);
	      }

	      return _possibleConstructorReturn__default['default'](this, result);
	    };
	  }

	  function _isNativeReflectConstruct$a() {
	    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	    if (Reflect.construct.sham) return false;
	    if (typeof Proxy === "function") return true;

	    try {
	      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }

	  var Close = /*#__PURE__*/function (_AbstractMessage) {
	    _inherits__default['default'](Close, _AbstractMessage);

	    var _super = _createSuper$a(Close);

	    function Close() {
	      var _this;

	      _classCallCheck__default['default'](this, Close);

	      _this = _super.call(this);

	      _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "method", "close");

	      return _this;
	    }

	    return Close;
	  }(AbstractMessage);

	  function _createSuper$9(Derived) {
	    var hasNativeReflectConstruct = _isNativeReflectConstruct$9();

	    return function _createSuperInternal() {
	      var Super = _getPrototypeOf__default['default'](Derived),
	          result;

	      if (hasNativeReflectConstruct) {
	        var NewTarget = _getPrototypeOf__default['default'](this).constructor;

	        result = Reflect.construct(Super, arguments, NewTarget);
	      } else {
	        result = Super.apply(this, arguments);
	      }

	      return _possibleConstructorReturn__default['default'](this, result);
	    };
	  }

	  function _isNativeReflectConstruct$9() {
	    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	    if (Reflect.construct.sham) return false;
	    if (typeof Proxy === "function") return true;

	    try {
	      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }

	  var TelemetryEvent = function TelemetryEvent(start, // relative to event send time
	  end, // relative to event send time
	  title, details, id, // optional, default will be random assigned by backend
	  type) {
	    _classCallCheck__default['default'](this, TelemetryEvent);

	    this.start = start;
	    this.end = end;
	    this.title = title;
	    this.details = details;
	    this.id = id;
	    this.type = type;
	  } // optional, default will be "SDK" assigned by backend
	  ;

	  var Telemetry = /*#__PURE__*/function (_AbstractMessage) {
	    _inherits__default['default'](Telemetry, _AbstractMessage);

	    var _super = _createSuper$9(Telemetry);

	    function Telemetry(events) {
	      var _this;

	      _classCallCheck__default['default'](this, Telemetry);

	      _this = _super.call(this);

	      _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "method", "telemetry.v1");

	      _this.events = events;
	      return _this;
	    }

	    return Telemetry;
	  }(AbstractMessage);

	  function byteLength(s) {
	    var escstr = encodeURIComponent(s);
	    var binstr = escstr.replace(/%([0-9A-F]{2})/g, function (match, p1) {
	      return String.fromCharCode(Number("0x" + p1));
	    });
	    return binstr.length;
	  }

	  function stringToUint8Array(s) {
	    var escstr = encodeURIComponent(s);
	    var binstr = escstr.replace(/%([0-9A-F]{2})/g, function (match, p1) {
	      return String.fromCharCode(Number("0x" + p1));
	    });
	    var ua = new Uint8Array(binstr.length);
	    Array.prototype.forEach.call(binstr, function (ch, i) {
	      ua[i] = ch.charCodeAt(0);
	    });
	    return ua;
	  }

	  function uint8ArrayToString(ua) {
	    var binstr = Array.prototype.map.call(ua, function (ch) {
	      return String.fromCharCode(ch);
	    }).join("");
	    var escstr = binstr.replace(/(.)/g, function (m, p) {
	      var code = p.charCodeAt(0).toString(16).toUpperCase();

	      if (code.length < 2) {
	        code = "0" + code;
	      }

	      return "%" + code;
	    });
	    return decodeURIComponent(escstr);
	  }

	  function getJsonObject(array) {
	    return JSON.parse(uint8ArrayToString(array));
	  }

	  function getMagic(buffer) {
	    var strMagic = "";
	    var idx = 0;

	    for (; idx < buffer.length; ++idx) {
	      var chr = String.fromCharCode(buffer[idx]);
	      strMagic += chr;

	      if (chr === "\r") {
	        idx += 2;
	        break;
	      }
	    }

	    var magics = strMagic.split(" ");
	    return {
	      size: idx,
	      protocol: magics[0],
	      version: magics[1],
	      headerSize: Number(magics[2])
	    };
	  }

	  var Parser = /*#__PURE__*/function () {
	    function Parser() {
	      _classCallCheck__default['default'](this, Parser);
	    }

	    _createClass__default['default'](Parser, null, [{
	      key: "parse",
	      value: function parse(message) {
	        var fieldMargin = 2;
	        var dataView = new Uint8Array(message);
	        var magic = getMagic(dataView);

	        if (magic.protocol !== "TWILSOCK" || magic.version !== "V3.0") {
	          logInstance.error("unsupported protocol: ".concat(magic.protocol, " ver ").concat(magic.version)); //throw new Error('Unsupported protocol');
	          //this.fsm.unsupportedProtocol();

	          return null;
	        }

	        var header;

	        try {
	          header = getJsonObject(dataView.subarray(magic.size, magic.size + magic.headerSize));
	        } catch (e) {
	          logInstance.error("failed to parse message header", e, message); //throw new Error('Failed to parse message');
	          //this.fsm.protocolError();

	          return null;
	        }

	        logInstance.debug("message received: ", header.method);
	        logInstance.trace("message received: ", header);
	        var payload;

	        if (header.payload_size > 0) {
	          var payloadOffset = fieldMargin + magic.size + magic.headerSize;
	          var payloadSize = header.payload_size;

	          if (!header.hasOwnProperty("payload_type") || header.payload_type.indexOf("application/json") === 0) {
	            try {
	              payload = getJsonObject(dataView.subarray(payloadOffset, payloadOffset + payloadSize));
	            } catch (e) {
	              logInstance.error("failed to parse message body", e, message); //this.fsm.protocolError();

	              return null;
	            }
	          } else if (header.payload_type.indexOf("text/plain") === 0) {
	            payload = uint8ArrayToString(dataView.subarray(payloadOffset, payloadOffset + payloadSize));
	          }
	        }

	        return {
	          method: header.method,
	          header: header,
	          payload: payload
	        };
	      }
	    }, {
	      key: "createPacket",
	      value: function createPacket(header) {
	        var payloadString = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
	        header.payload_size = byteLength(payloadString); // eslint-disable-line camelcase

	        var headerString = JSON.stringify(header);
	        var magicString = "TWILSOCK V3.0 " + byteLength(headerString);
	        logInstance.debug("send request:", magicString + headerString + payloadString);
	        var message = stringToUint8Array(magicString + "\r\n" + headerString + "\r\n" + payloadString);
	        return message.buffer;
	      }
	    }]);

	    return Parser;
	  }();

	  function _createSuper$8(Derived) {
	    var hasNativeReflectConstruct = _isNativeReflectConstruct$8();

	    return function _createSuperInternal() {
	      var Super = _getPrototypeOf__default['default'](Derived),
	          result;

	      if (hasNativeReflectConstruct) {
	        var NewTarget = _getPrototypeOf__default['default'](this).constructor;

	        result = Reflect.construct(Super, arguments, NewTarget);
	      } else {
	        result = Super.apply(this, arguments);
	      }

	      return _possibleConstructorReturn__default['default'](this, result);
	    };
	  }

	  function _isNativeReflectConstruct$8() {
	    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	    if (Reflect.construct.sham) return false;
	    if (typeof Proxy === "function") return true;

	    try {
	      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }

	  var TwilsockError = /*#__PURE__*/function (_Error) {
	    _inherits__default['default'](TwilsockError, _Error);

	    var _super = _createSuper$8(TwilsockError);

	    function TwilsockError(description) {
	      _classCallCheck__default['default'](this, TwilsockError);

	      return _super.call(this, description);
	    }

	    return TwilsockError;
	  }( /*#__PURE__*/_wrapNativeSuper__default['default'](Error));

	  function _createSuper$7(Derived) {
	    var hasNativeReflectConstruct = _isNativeReflectConstruct$7();

	    return function _createSuperInternal() {
	      var Super = _getPrototypeOf__default['default'](Derived),
	          result;

	      if (hasNativeReflectConstruct) {
	        var NewTarget = _getPrototypeOf__default['default'](this).constructor;

	        result = Reflect.construct(Super, arguments, NewTarget);
	      } else {
	        result = Super.apply(this, arguments);
	      }

	      return _possibleConstructorReturn__default['default'](this, result);
	    };
	  }

	  function _isNativeReflectConstruct$7() {
	    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	    if (Reflect.construct.sham) return false;
	    if (typeof Proxy === "function") return true;

	    try {
	      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }

	  var TwilsockReplyError = /*#__PURE__*/function (_TwilsockError) {
	    _inherits__default['default'](TwilsockReplyError, _TwilsockError);

	    var _super = _createSuper$7(TwilsockReplyError);

	    function TwilsockReplyError(description, reply) {
	      var _this;

	      _classCallCheck__default['default'](this, TwilsockReplyError);

	      _this = _super.call(this, description);
	      _this.reply = reply;
	      return _this;
	    }

	    return TwilsockReplyError;
	  }(TwilsockError);

	  function ownKeys(object, enumerableOnly) {
	    var keys = Object.keys(object);

	    if (Object.getOwnPropertySymbols) {
	      var symbols = Object.getOwnPropertySymbols(object);

	      if (enumerableOnly) {
	        symbols = symbols.filter(function (sym) {
	          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	        });
	      }

	      keys.push.apply(keys, symbols);
	    }

	    return keys;
	  }

	  function _objectSpread(target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i] != null ? arguments[i] : {};

	      if (i % 2) {
	        ownKeys(Object(source), true).forEach(function (key) {
	          _defineProperty__default['default'](target, key, source[key]);
	        });
	      } else if (Object.getOwnPropertyDescriptors) {
	        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	      } else {
	        ownKeys(Object(source)).forEach(function (key) {
	          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	        });
	      }
	    }

	    return target;
	  }

	  function _createSuper$6(Derived) {
	    var hasNativeReflectConstruct = _isNativeReflectConstruct$6();

	    return function _createSuperInternal() {
	      var Super = _getPrototypeOf__default['default'](Derived),
	          result;

	      if (hasNativeReflectConstruct) {
	        var NewTarget = _getPrototypeOf__default['default'](this).constructor;

	        result = Reflect.construct(Super, arguments, NewTarget);
	      } else {
	        result = Super.apply(this, arguments);
	      }

	      return _possibleConstructorReturn__default['default'](this, result);
	    };
	  }

	  function _isNativeReflectConstruct$6() {
	    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	    if (Reflect.construct.sham) return false;
	    if (typeof Proxy === "function") return true;

	    try {
	      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }

	  var BackoffRetrier = /*#__PURE__*/function (_EventEmitter) {
	    _inherits__default['default'](BackoffRetrier, _EventEmitter);

	    var _super = _createSuper$6(BackoffRetrier);

	    function BackoffRetrier(options) {
	      var _this;

	      _classCallCheck__default['default'](this, BackoffRetrier);

	      _this = _super.call(this);

	      _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "newBackoff", null);

	      _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "usedBackoff", null);

	      _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "retrier", null);

	      _this.options = options ? _objectSpread({}, options) : {};
	      return _this;
	    }
	    /**
	     * Should be called once per attempt series to start retrier.
	     */


	    _createClass__default['default'](BackoffRetrier, [{
	      key: "inProgress",
	      get: function get() {
	        return !!this.retrier;
	      }
	    }, {
	      key: "start",
	      value: function start() {
	        if (this.inProgress) {
	          throw new Error("Already waiting for next attempt, call finishAttempt(success : boolean) to finish it");
	        }

	        this.createRetrier();
	      }
	      /**
	       * Should be called to stop retrier entirely.
	       */

	    }, {
	      key: "stop",
	      value: function stop() {
	        this.cleanRetrier();
	        this.newBackoff = null;
	        this.usedBackoff = null;
	      }
	      /**
	       * Modifies backoff for next attempt.
	       * Expected behavior:
	       * - If there was no backoff passed previously reschedulling next attempt to given backoff
	       * - If previous backoff was longer then ignoring this one.
	       * - If previous backoff was shorter then reschedulling with this one.
	       * With or without backoff retrier will keep growing normally.
	       * @param delay delay of next attempts in ms.
	       */

	    }, {
	      key: "modifyBackoff",
	      value: function modifyBackoff(delay) {
	        this.newBackoff = delay;
	      }
	      /**
	       * Mark last emmited attempt as failed, initiating either next of fail if limits were hit.
	       */

	    }, {
	      key: "attemptFailed",
	      value: function attemptFailed() {
	        if (!this.inProgress) {
	          throw new Error("No attempt is in progress");
	        }

	        if (this.newBackoff) {
	          var shouldUseNewBackoff = !this.usedBackoff || this.usedBackoff < this.newBackoff;

	          if (shouldUseNewBackoff) {
	            this.createRetrier();
	          } else {
	            var _this$retrier;

	            (_this$retrier = this.retrier) === null || _this$retrier === void 0 ? void 0 : _this$retrier.failed(new Error());
	          }
	        } else {
	          var _this$retrier2;

	          (_this$retrier2 = this.retrier) === null || _this$retrier2 === void 0 ? void 0 : _this$retrier2.failed(new Error());
	        }
	      }
	    }, {
	      key: "cancel",
	      value: function cancel() {
	        var _this$retrier3;

	        (_this$retrier3 = this.retrier) === null || _this$retrier3 === void 0 ? void 0 : _this$retrier3.cancel();
	      }
	    }, {
	      key: "cleanRetrier",
	      value: function cleanRetrier() {
	        var _this$retrier4, _this$retrier5;

	        (_this$retrier4 = this.retrier) === null || _this$retrier4 === void 0 ? void 0 : _this$retrier4.removeAllListeners();
	        (_this$retrier5 = this.retrier) === null || _this$retrier5 === void 0 ? void 0 : _this$retrier5.cancel();
	        this.retrier = null;
	      }
	    }, {
	      key: "getRetryPolicy",
	      value: function getRetryPolicy() {
	        var clone = _objectSpread({}, this.options);

	        if (this.newBackoff) {
	          clone.min = this.newBackoff;
	          clone.max = this.options.max && this.options.max > this.newBackoff ? this.options.max : this.newBackoff;
	        } // As we're always skipping first attempt we should add one extra if limit is present


	        clone.maxAttemptsCount = this.options.maxAttemptsCount ? this.options.maxAttemptsCount + 1 : undefined;
	        return clone;
	      }
	    }, {
	      key: "createRetrier",
	      value: function createRetrier() {
	        var _this2 = this;

	        this.cleanRetrier();
	        var retryPolicy = this.getRetryPolicy();
	        this.retrier = new operationRetrier.Retrier(retryPolicy);
	        this.retrier.once("attempt", function () {
	          var _this2$retrier, _this2$retrier2;

	          (_this2$retrier = _this2.retrier) === null || _this2$retrier === void 0 ? void 0 : _this2$retrier.on("attempt", function () {
	            return _this2.emit("attempt");
	          });
	          (_this2$retrier2 = _this2.retrier) === null || _this2$retrier2 === void 0 ? void 0 : _this2$retrier2.failed(new Error("Skipping first attempt"));
	        });
	        this.retrier.on("failed", function (err) {
	          return _this2.emit("failed", err);
	        });
	        this.usedBackoff = this.newBackoff;
	        this.newBackoff = null;
	        this.retrier.start(); // .catch(err => {});
	      }
	    }]);

	    return BackoffRetrier;
	  }(EventEmitter);

	  function _createSuper$5(Derived) {
	    var hasNativeReflectConstruct = _isNativeReflectConstruct$5();

	    return function _createSuperInternal() {
	      var Super = _getPrototypeOf__default['default'](Derived),
	          result;

	      if (hasNativeReflectConstruct) {
	        var NewTarget = _getPrototypeOf__default['default'](this).constructor;

	        result = Reflect.construct(Super, arguments, NewTarget);
	      } else {
	        result = Super.apply(this, arguments);
	      }

	      return _possibleConstructorReturn__default['default'](this, result);
	    };
	  }

	  function _isNativeReflectConstruct$5() {
	    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	    if (Reflect.construct.sham) return false;
	    if (typeof Proxy === "function") return true;

	    try {
	      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }

	  var DISCONNECTING_TIMEOUT = 3000; // Wraps asynchronous rescheduling
	  // Just makes it simpler to find these hacks over the code
	  // Currently there's exactly one instance of this in closeSocket()

	  function trampoline(f) {
	    setTimeout(f, 0);
	  }
	  /**
	   * Twilsock channel level protocol implementation
	   */


	  var TwilsockChannel = /*#__PURE__*/function (_EventEmitter) {
	    _inherits__default['default'](TwilsockChannel, _EventEmitter);

	    var _super = _createSuper$5(TwilsockChannel);

	    function TwilsockChannel(websocket, transport, config) {
	      var _this;

	      _classCallCheck__default['default'](this, TwilsockChannel);

	      _this = _super.call(this);

	      _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "disconnectingTimer", null);

	      _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "disconnectedPromiseResolve", null);

	      _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "terminalStates", ["disconnected", "rejected"]);

	      _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "tokenExpiredSasCode", 20104);

	      _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "terminationReason", "Connection is not initialized");

	      _this.websocket = websocket;

	      _this.websocket.on("connected", function () {
	        return _this.fsm.socketConnected();
	      });

	      _this.websocket.on("disconnected", function () {
	        return _this.fsm.socketClosed();
	      });

	      _this.websocket.on("message", function (message) {
	        return _this.onIncomingMessage(message);
	      });

	      _this.websocket.on("socketError", function (e) {
	        return _this.emit("connectionError", {
	          terminal: false,
	          message: "Socket error: ".concat(e.message),
	          httpStatusCode: null,
	          errorCode: null
	        });
	      });

	      _this.transport = transport;
	      _this.config = config;
	      _this.retrier = new BackoffRetrier(config.retryPolicy);

	      _this.retrier.on("attempt", function () {
	        return _this.retry();
	      });

	      _this.retrier.on("failed", function (err) {
	        logInstance.warn("Retrying failed: ".concat(err.message));

	        _this.disconnect();
	      });

	      if (typeof window !== "undefined" && typeof window.addEventListener !== "undefined") {
	        window.addEventListener("online", function () {
	          logInstance.debug("Browser reported connectivity state: online");

	          _this.resetBackoff();

	          _this.fsm.systemOnline();
	        });
	        window.addEventListener("offline", function () {
	          logInstance.debug("Browser reported connectivity state: offline");

	          _this.websocket.close();

	          _this.fsm.socketClosed();
	        });
	      } // We have to use a factory function in here because using the default
	      // StateMachine constructor would cause an error for the consumers of the
	      // rollup bundles. This is a quirk unique to the javascript-state-machine
	      // library.


	      var TwilsockStateMachine = StateMachine__namespace.factory({
	        init: "disconnected",
	        transitions: [{
	          name: "userConnect",
	          from: ["disconnected", "rejected"],
	          to: "connecting"
	        }, {
	          name: "userConnect",
	          from: ["connecting", "connected"]
	        }, {
	          name: "userDisconnect",
	          from: ["connecting", "initialising", "connected", "updating", "retrying", "rejected", "waitSocketClosed", "waitOffloadSocketClosed"],
	          to: "disconnecting"
	        }, {
	          name: "userRetry",
	          from: ["retrying"],
	          to: "connecting"
	        }, {
	          name: "socketConnected",
	          from: ["connecting"],
	          to: "initialising"
	        }, {
	          name: "socketClosed",
	          from: ["connecting", "initialising", "connected", "updating", "error", "waitOffloadSocketClosed"],
	          to: "retrying"
	        }, {
	          name: "socketClosed",
	          from: ["disconnecting"],
	          to: "disconnected"
	        }, {
	          name: "socketClosed",
	          from: ["waitSocketClosed"],
	          to: "disconnected"
	        }, {
	          name: "socketClosed",
	          from: ["rejected"],
	          to: "rejected"
	        }, {
	          name: "initSuccess",
	          from: ["initialising"],
	          to: "connected"
	        }, {
	          name: "initError",
	          from: ["initialising"],
	          to: "error"
	        }, {
	          name: "tokenRejected",
	          from: ["initialising", "updating"],
	          to: "rejected"
	        }, {
	          name: "protocolError",
	          from: ["initialising", "connected", "updating"],
	          to: "error"
	        }, {
	          name: "receiveClose",
	          from: ["initialising", "connected", "updating"],
	          to: "waitSocketClosed"
	        }, {
	          name: "receiveOffload",
	          from: ["initialising", "connected", "updating"],
	          to: "waitOffloadSocketClosed"
	        }, {
	          name: "unsupportedProtocol",
	          from: ["initialising", "connected", "updating"],
	          to: "unsupported"
	        }, {
	          name: "receiveFatalClose",
	          from: ["initialising", "connected", "updating"],
	          to: "unsupported"
	        }, {
	          name: "userUpdateToken",
	          from: ["disconnected", "rejected", "connecting", "retrying"],
	          to: "connecting"
	        }, {
	          name: "userUpdateToken",
	          from: ["connected"],
	          to: "updating"
	        }, {
	          name: "updateSuccess",
	          from: ["updating"],
	          to: "connected"
	        }, {
	          name: "updateError",
	          from: ["updating"],
	          to: "error"
	        }, {
	          name: "userSend",
	          from: ["connected"],
	          to: "connected"
	        }, {
	          name: "systemOnline",
	          from: ["retrying"],
	          to: "connecting"
	        }],
	        methods: {
	          onConnecting: function onConnecting() {
	            _this.setupSocket();

	            _this.emit("connecting");
	          },
	          onEnterInitialising: function onEnterInitialising() {
	            _this.sendInit();
	          },
	          onLeaveInitialising: function onLeaveInitialising() {
	            _this.cancelInit();
	          },
	          onEnterUpdating: function onEnterUpdating() {
	            _this.sendUpdate();
	          },
	          onLeaveUpdating: function onLeaveUpdating() {
	            _this.cancelUpdate();
	          },
	          onEnterRetrying: function onEnterRetrying() {
	            _this.initRetry();

	            _this.emit("connecting");
	          },
	          onEnterConnected: function onEnterConnected() {
	            _this.resetBackoff();

	            _this.onConnected();
	          },
	          onUserUpdateToken: function onUserUpdateToken() {
	            _this.resetBackoff();
	          },
	          onTokenRejected: function onTokenRejected() {
	            _this.resetBackoff();

	            _this.closeSocket(true);

	            _this.finalizeSocket();
	          },
	          onUserDisconnect: function onUserDisconnect() {
	            _this.closeSocket(true);
	          },
	          onEnterDisconnecting: function onEnterDisconnecting() {
	            _this.startDisconnectTimer();
	          },
	          onLeaveDisconnecting: function onLeaveDisconnecting() {
	            _this.cancelDisconnectTimer();
	          },
	          onEnterWaitSocketClosed: function onEnterWaitSocketClosed() {
	            _this.startDisconnectTimer();
	          },
	          onLeaveWaitSocketClosed: function onLeaveWaitSocketClosed() {
	            _this.cancelDisconnectTimer();
	          },
	          onEnterWaitOffloadSocketClosed: function onEnterWaitOffloadSocketClosed() {
	            _this.startDisconnectTimer();
	          },
	          onLeaveWaitOffloadSocketClosed: function onLeaveWaitOffloadSocketClosed() {
	            _this.cancelDisconnectTimer();
	          },
	          onDisconnected: function onDisconnected() {
	            _this.resetBackoff();

	            _this.finalizeSocket();
	          },
	          onReceiveClose: function onReceiveClose() {
	            _this.onCloseReceived();
	          },
	          onReceiveOffload: function onReceiveOffload(event, args) {
	            logInstance.debug("onreceiveoffload: ", args);

	            _this.modifyBackoff(args.body);

	            _this.onCloseReceived();
	          },
	          onUnsupported: function onUnsupported() {
	            _this.closeSocket(true);

	            _this.finalizeSocket();
	          },
	          onError: function onError(lifecycle, graceful) {
	            _this.closeSocket(graceful);

	            _this.finalizeSocket();
	          },
	          onEnterState: function onEnterState(event) {
	            if (event.from !== "none") {
	              _this.changeState(event);
	            }
	          },
	          onInvalidTransition: function onInvalidTransition(transition, from, to) {
	            logInstance.warn("FSM: unexpected transition", from, to);
	          }
	        }
	      });
	      _this.fsm = new TwilsockStateMachine();
	      return _this;
	    }

	    _createClass__default['default'](TwilsockChannel, [{
	      key: "changeState",
	      value: function changeState(event) {
	        logInstance.debug("FSM: ".concat(event.transition, ": ").concat(event.from, " --> ").concat(event.to));

	        if (this.lastEmittedState !== this.state) {
	          this.lastEmittedState = this.state;
	          this.emit("stateChanged", this.state);
	        }
	      }
	    }, {
	      key: "resetBackoff",
	      value: function resetBackoff() {
	        logInstance.trace("resetBackoff");
	        this.retrier.stop();
	      }
	    }, {
	      key: "modifyBackoff",
	      value: function modifyBackoff(body) {
	        logInstance.trace("modifyBackoff", body);
	        var backoffPolicy = body ? body.backoff_policy : null;

	        if (backoffPolicy && typeof backoffPolicy.reconnect_min_ms === "number") {
	          this.retrier.modifyBackoff(backoffPolicy.reconnect_min_ms);
	        }
	      }
	    }, {
	      key: "startDisconnectTimer",
	      value: function startDisconnectTimer() {
	        var _this2 = this;

	        logInstance.trace("startDisconnectTimer");

	        if (this.disconnectingTimer) {
	          clearTimeout(this.disconnectingTimer);
	          this.disconnectingTimer = null;
	        }

	        this.disconnectingTimer = setTimeout(function () {
	          logInstance.debug("disconnecting is timed out");

	          _this2.closeSocket(true);
	        }, DISCONNECTING_TIMEOUT);
	      }
	    }, {
	      key: "cancelDisconnectTimer",
	      value: function cancelDisconnectTimer() {
	        logInstance.trace("cancelDisconnectTimer");

	        if (this.disconnectingTimer) {
	          clearTimeout(this.disconnectingTimer);
	          this.disconnectingTimer = null;
	        }
	      }
	    }, {
	      key: "isConnected",
	      get: function get() {
	        return this.state === "connected" && this.websocket.isConnected;
	      }
	    }, {
	      key: "state",
	      get: function get() {
	        switch (this.fsm.state) {
	          case "connecting":
	          case "initialising":
	          case "retrying":
	          case "error":
	            return "connecting";

	          case "updating":
	          case "connected":
	            return "connected";

	          case "rejected":
	            return "denied";

	          case "disconnecting":
	          case "waitSocketClosed":
	          case "waitOffloadSocketClosed":
	            return "disconnecting";

	          case "disconnected":
	          default:
	            return "disconnected";
	        }
	      }
	    }, {
	      key: "initRetry",
	      value: function initRetry() {
	        logInstance.debug("initRetry");

	        if (this.retrier.inProgress) {
	          this.retrier.attemptFailed();
	        } else {
	          this.retrier.start();
	        }
	      }
	    }, {
	      key: "retry",
	      value: function retry() {
	        if (this.fsm.state != "connecting") {
	          logInstance.trace("retry");
	          this.websocket.close();
	          this.fsm.userRetry();
	        } else {
	          logInstance.trace("can\t retry as already connecting");
	        }
	      }
	    }, {
	      key: "onConnected",
	      value: function onConnected() {
	        this.emit("connected");
	      }
	    }, {
	      key: "finalizeSocket",
	      value: function finalizeSocket() {
	        logInstance.trace("finalizeSocket");
	        this.websocket.close();
	        this.emit("disconnected");

	        if (this.disconnectedPromiseResolve) {
	          this.disconnectedPromiseResolve();
	          this.disconnectedPromiseResolve = null;
	        }
	      }
	    }, {
	      key: "setupSocket",
	      value: function setupSocket() {
	        logInstance.trace("setupSocket:", this.config.token);
	        this.emit("beforeConnect"); // This is used by client to record startup telemetry event

	        this.websocket.connect();
	      }
	    }, {
	      key: "onIncomingMessage",
	      value: function onIncomingMessage(message) {
	        var parsedMessage = Parser.parse(message);

	        if (!parsedMessage) {
	          return;
	        }

	        var method = parsedMessage.method,
	            header = parsedMessage.header,
	            payload = parsedMessage.payload;

	        if (method !== "reply") {
	          this.confirmReceiving(header);
	        }

	        if (method === "notification") {
	          this.emit("message", header.message_type, payload);
	        } else if (header.method === "reply") {
	          this.transport.processReply({
	            id: header.id,
	            status: header.status,
	            header: header,
	            body: payload
	          });
	        } else if (header.method === "client_update") {
	          if (header.client_update_type === "token_about_to_expire") {
	            this.emit("tokenAboutToExpire");
	          }
	        } else if (header.method === "close") {
	          if (header.status.code === 308) {
	            logInstance.debug("Connection has been offloaded");
	            this.fsm.receiveOffload({
	              status: header.status.status,
	              body: payload
	            });
	          } else if (header.status.code === 406) {
	            // Not acceptable message
	            var _message = "Server closed connection because can't parse protocol: ".concat(JSON.stringify(header.status));

	            this.emitReplyConnectionError(_message, header, true);
	            logInstance.error(_message);
	            this.fsm.receiveFatalClose();
	          } else if (header.status.code === 417) {
	            // Protocol error
	            logInstance.error("Server closed connection because can't parse client reply: ".concat(JSON.stringify(header.status)));
	            this.fsm.receiveFatalClose(header.status.status);
	          } else if (header.status.code === 410) {
	            // Expired token
	            logInstance.warn("Server closed connection: ".concat(JSON.stringify(header.status)));
	            this.fsm.receiveClose(header.status.status);
	            this.emit("tokenExpired");
	          } else if (header.status.code === 401) {
	            // Authentication fail
	            logInstance.error("Server closed connection: ".concat(JSON.stringify(header.status)));
	            this.fsm.receiveClose(header.status.status);
	          } else {
	            logInstance.warn("unexpected message: ", header.status); // Try to reconnect

	            this.fsm.receiveOffload({
	              status: header.status.status,
	              body: null
	            });
	          }
	        }
	      }
	    }, {
	      key: "sendInit",
	      value: function () {
	        var _sendInit = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
	          var reply, isTerminalError;
	          return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
	            while (1) {
	              switch (_context.prev = _context.next) {
	                case 0:
	                  logInstance.trace("sendInit");
	                  _context.prev = 1;
	                  this.emit("beforeSendInit"); // This is used by client to record startup telemetry event

	                  _context.next = 5;
	                  return this.transport.sendInit();

	                case 5:
	                  reply = _context.sent;
	                  this.config.updateContinuationToken(reply.continuationToken);
	                  this.config.confirmedCapabilities = reply.confirmedCapabilities;
	                  this.fsm.initSuccess(reply);
	                  this.emit("initialized", reply);
	                  this.emit("tokenUpdated");
	                  _context.next = 17;
	                  break;

	                case 13:
	                  _context.prev = 13;
	                  _context.t0 = _context["catch"](1);

	                  if (_context.t0 instanceof TwilsockReplyError) {
	                    isTerminalError = false;
	                    logInstance.warn("Init rejected by server: ".concat(JSON.stringify(_context.t0.reply.status)));
	                    this.emit("sendInitFailed"); // This is used by client to record startup telemetry event
	                    // @todo emit telemetry from inside "if" below for more granularity...

	                    if (_context.t0.reply.status.code === 401 || _context.t0.reply.status.code === 403) {
	                      isTerminalError = true;
	                      this.fsm.tokenRejected(_context.t0.reply.status);

	                      if (_context.t0.reply.status.errorCode === this.tokenExpiredSasCode) {
	                        this.emit("tokenExpired");
	                      }
	                    } else if (_context.t0.reply.status.code === 429) {
	                      this.modifyBackoff(_context.t0.reply.body);
	                      this.fsm.initError(true);
	                    } else if (_context.t0.reply.status.code === 500) {
	                      this.fsm.initError(false);
	                    } else {
	                      this.fsm.initError(true);
	                    }

	                    this.emitReplyConnectionError(_context.t0.message, _context.t0.reply, isTerminalError);
	                  } else {
	                    this.terminationReason = _context.t0.message;
	                    this.emit("connectionError", {
	                      terminal: true,
	                      message: "Unknown error during connection initialisation: ".concat(_context.t0.message, "\n").concat(JSON.stringify(_context.t0, null, 2)),
	                      httpStatusCode: null,
	                      errorCode: null
	                    });
	                    this.fsm.initError(true);
	                  }

	                  this.emit("tokenUpdated", _context.t0);

	                case 17:
	                case "end":
	                  return _context.stop();
	              }
	            }
	          }, _callee, this, [[1, 13]]);
	        }));

	        function sendInit() {
	          return _sendInit.apply(this, arguments);
	        }

	        return sendInit;
	      }()
	    }, {
	      key: "sendUpdate",
	      value: function () {
	        var _sendUpdate = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
	          var message, reply, isTerminalError;
	          return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
	            while (1) {
	              switch (_context2.prev = _context2.next) {
	                case 0:
	                  logInstance.trace("sendUpdate");
	                  message = new Update(this.config.token);
	                  _context2.prev = 2;
	                  _context2.next = 5;
	                  return this.transport.sendWithReply(message);

	                case 5:
	                  reply = _context2.sent;
	                  this.fsm.updateSuccess(reply.body);
	                  this.emit("tokenUpdated");
	                  _context2.next = 14;
	                  break;

	                case 10:
	                  _context2.prev = 10;
	                  _context2.t0 = _context2["catch"](2);

	                  if (_context2.t0 instanceof TwilsockReplyError) {
	                    isTerminalError = false;
	                    logInstance.warn("Token update rejected by server: ".concat(JSON.stringify(_context2.t0.reply.status)));

	                    if (_context2.t0.reply.status.code === 401 || _context2.t0.reply.status.code === 403) {
	                      isTerminalError = true;
	                      this.fsm.tokenRejected(_context2.t0.reply.status);

	                      if (_context2.t0.reply.status.errorCode === this.tokenExpiredSasCode) {
	                        this.emit("tokenExpired");
	                      }
	                    } else if (_context2.t0.reply.status.code === 429) {
	                      this.modifyBackoff(_context2.t0.reply.body);
	                      this.fsm.updateError(_context2.t0.reply.status);
	                    } else {
	                      this.fsm.updateError(_context2.t0.reply.status);
	                    }

	                    this.emitReplyConnectionError(_context2.t0.message, _context2.t0.reply, isTerminalError);
	                  } else {
	                    this.emit("error", false, _context2.t0.message, null, null);
	                    this.fsm.updateError(_context2.t0);
	                  }

	                  this.emit("tokenUpdated", _context2.t0);

	                case 14:
	                case "end":
	                  return _context2.stop();
	              }
	            }
	          }, _callee2, this, [[2, 10]]);
	        }));

	        function sendUpdate() {
	          return _sendUpdate.apply(this, arguments);
	        }

	        return sendUpdate;
	      }()
	    }, {
	      key: "emitReplyConnectionError",
	      value: function emitReplyConnectionError(message, header, terminal) {
	        var description = header.status && header.status.description ? header.status.description : message;
	        var httpStatusCode = header.status.code;
	        var errorCode = header.status && header.status.errorCode ? header.status.errorCode : null;

	        if (terminal) {
	          this.terminationReason = description;
	        }

	        this.emit("connectionError", {
	          terminal: terminal,
	          message: "Connection error: ".concat(description),
	          httpStatusCode: httpStatusCode,
	          errorCode: errorCode
	        });
	      }
	    }, {
	      key: "cancelInit",
	      value: function cancelInit() {
	        logInstance.trace("cancelInit"); // TODO: implement
	      }
	    }, {
	      key: "cancelUpdate",
	      value: function cancelUpdate() {
	        logInstance.trace("cancelUpdate"); // TODO: implement
	      }
	      /**
	       * Should be called for each message to confirm it received
	       */

	    }, {
	      key: "confirmReceiving",
	      value: function confirmReceiving(messageHeader) {
	        logInstance.trace("confirmReceiving");

	        try {
	          //@todo send telemetry events AnyEvents
	          this.transport.send(new Reply(messageHeader.id));
	        } catch (e) {
	          logInstance.debug("failed to confirm packet receiving", e);
	        }
	      }
	      /**
	       * Shutdown connection
	       */

	    }, {
	      key: "closeSocket",
	      value: function closeSocket(graceful) {
	        var _this3 = this;

	        logInstance.trace("closeSocket (graceful: ".concat(graceful, ")"));

	        if (graceful && this.transport.isConnected) {
	          this.transport.sendClose();
	        }

	        this.websocket.close();
	        trampoline(function () {
	          return _this3.fsm.socketClosed();
	        });
	      }
	      /**
	       * Initiate the twilsock connection
	       * If already connected, it does nothing
	       */

	    }, {
	      key: "connect",
	      value: function connect() {
	        logInstance.trace("connect");
	        this.fsm.userConnect();
	      }
	      /**
	       * Close twilsock connection
	       * If already disconnected, it does nothing
	       */

	    }, {
	      key: "disconnect",
	      value: function disconnect() {
	        var _this4 = this;

	        logInstance.trace("disconnect");

	        if (this.fsm.is("disconnected")) {
	          return Promise.resolve();
	        }

	        return new Promise(function (resolve) {
	          _this4.disconnectedPromiseResolve = resolve;

	          _this4.fsm.userDisconnect();
	        });
	      }
	      /**
	       * Update fpa token for twilsock connection
	       */

	    }, {
	      key: "updateToken",
	      value: function updateToken(token) {
	        var _this5 = this;

	        logInstance.trace("updateToken:", token);
	        return new Promise(function (resolve, reject) {
	          _this5.once("tokenUpdated", function (e) {
	            if (e) {
	              reject(e);
	            } else {
	              resolve();
	            }
	          });

	          _this5.fsm.userUpdateToken();
	        });
	      }
	    }, {
	      key: "isTerminalState",
	      get: function get() {
	        return this.terminalStates.indexOf(this.fsm.state) !== -1;
	      }
	    }, {
	      key: "getTerminationReason",
	      get: function get() {
	        return this.terminationReason;
	      }
	    }, {
	      key: "onCloseReceived",
	      value: function onCloseReceived() {
	        this.websocket.close();
	      }
	    }]);

	    return TwilsockChannel;
	  }(EventEmitter);

	  var Metadata = /*#__PURE__*/function () {
	    function Metadata() {
	      _classCallCheck__default['default'](this, Metadata);
	    }

	    _createClass__default['default'](Metadata, null, [{
	      key: "getMetadata",
	      value: function getMetadata(options) {
	        var _platform$name, _platform$version, _platform$os$family, _platform$os, _platform$os$version, _platform$os2, _platform$os$architec, _platform$os3;

	        var overrides = options && options.clientMetadata ? options.clientMetadata : {};
	        var fieldNames = ["ver", "env", "envv", "os", "osv", "osa", "type", "sdk", "sdkv", "dev", "devv", "devt", "app", "appv"];
	        var defaults = {
	          env: (_platform$name = platform__namespace.name) !== null && _platform$name !== void 0 ? _platform$name : "unknown",
	          envv: (_platform$version = platform__namespace.version) !== null && _platform$version !== void 0 ? _platform$version : "unknown",
	          os: (_platform$os$family = (_platform$os = platform__namespace.os) === null || _platform$os === void 0 ? void 0 : _platform$os.family) !== null && _platform$os$family !== void 0 ? _platform$os$family : "unknown",
	          osv: (_platform$os$version = (_platform$os2 = platform__namespace.os) === null || _platform$os2 === void 0 ? void 0 : _platform$os2.version) !== null && _platform$os$version !== void 0 ? _platform$os$version : "unknown",
	          osa: (_platform$os$architec = (_platform$os3 = platform__namespace.os) === null || _platform$os3 === void 0 ? void 0 : _platform$os3.architecture) !== null && _platform$os$architec !== void 0 ? _platform$os$architec : "unknown",
	          sdk: "js-default"
	        };
	        var finalClientMetadata = {};
	        fieldNames.filter(function (key) {
	          return key in overrides || key in defaults;
	        }).forEach(function (key) {
	          return finalClientMetadata[key] = key in overrides ? overrides[key] : defaults[key];
	        });
	        return finalClientMetadata;
	      }
	    }]);

	    return Metadata;
	  }();

	  var REQUEST_TIMEOUT$1 = 30000;

	  function isHttpSuccess$1(code) {
	    return code >= 200 && code < 300;
	  }
	  /**
	   * Makes sure that body is properly stringified
	   */


	  function preparePayload(payload) {
	    switch (_typeof__default['default'](payload)) {
	      case "undefined":
	        return "";

	      case "object":
	        return JSON.stringify(payload);

	      default:
	        return payload;
	    }
	  }

	  var PacketInterface = /*#__PURE__*/function () {
	    function PacketInterface(channel, config) {
	      var _this = this;

	      _classCallCheck__default['default'](this, PacketInterface);

	      this.config = config;
	      this.activeRequests = new Map();
	      this.channel = channel;
	      this.channel.on("reply", function (reply) {
	        return _this.processReply(reply);
	      });
	      this.channel.on("disconnected", function () {
	        _this.activeRequests.forEach(function (descriptor) {
	          clearTimeout(descriptor.timeout);
	          descriptor.reject(new TwilsockError("disconnected"));
	        });

	        _this.activeRequests.clear();
	      });
	    }

	    _createClass__default['default'](PacketInterface, [{
	      key: "isConnected",
	      get: function get() {
	        return this.channel.isConnected;
	      }
	    }, {
	      key: "processReply",
	      value: function processReply(reply) {
	        var request = this.activeRequests.get(reply.id);

	        if (request) {
	          clearTimeout(request.timeout);
	          this.activeRequests.delete(reply.id);

	          if (!isHttpSuccess$1(reply.status.code)) {
	            request.reject(new TwilsockReplyError("Transport failure: " + reply.status.status, reply));
	            logInstance.trace("message rejected");
	          } else {
	            request.resolve(reply);
	          }
	        }
	      }
	    }, {
	      key: "storeRequest",
	      value: function storeRequest(id, resolve, reject) {
	        var requestDescriptor = {
	          resolve: resolve,
	          reject: reject,
	          timeout: setTimeout(function () {
	            logInstance.trace("request", id, "is timed out");
	            reject(new TwilsockError("Twilsock: request timeout: " + id));
	          }, REQUEST_TIMEOUT$1)
	        };
	        this.activeRequests.set(id, requestDescriptor);
	      }
	    }, {
	      key: "shutdown",
	      value: function shutdown() {
	        this.activeRequests.forEach(function (descriptor) {
	          clearTimeout(descriptor.timeout);
	          descriptor.reject(new TwilsockError("Twilsock: request cancelled by user"));
	        });
	        this.activeRequests.clear();
	      }
	    }, {
	      key: "sendInit",
	      value: function () {
	        var _sendInit = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
	          var metadata, message, response;
	          return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
	            while (1) {
	              switch (_context.prev = _context.next) {
	                case 0:
	                  logInstance.trace("sendInit");
	                  metadata = Metadata.getMetadata(this.config);
	                  message = new Init(this.config.token, this.config.continuationToken, metadata, this.config.initRegistrations, this.config.tweaks);
	                  _context.next = 5;
	                  return this.sendWithReply(message);

	                case 5:
	                  response = _context.sent;
	                  return _context.abrupt("return", new InitReply(response.id, response.header.continuation_token, new Set(response.header.capabilities), response.header.continuation_token_status, response.header.offline_storage, response.header.init_registrations, response.header.debug_info));

	                case 7:
	                case "end":
	                  return _context.stop();
	              }
	            }
	          }, _callee, this);
	        }));

	        function sendInit() {
	          return _sendInit.apply(this, arguments);
	        }

	        return sendInit;
	      }()
	    }, {
	      key: "sendClose",
	      value: function sendClose() {
	        var message = new Close(); //@todo send telemetry AnyEventsIncludingUnfinished

	        this.send(message);
	      }
	    }, {
	      key: "sendWithReply",
	      value: function sendWithReply(header, payload) {
	        var _this2 = this;

	        return new Promise(function (resolve, reject) {
	          var id = _this2.send(header, payload);

	          _this2.storeRequest(id, resolve, reject);
	        });
	      }
	    }, {
	      key: "send",
	      value: function send(header, payload) {
	        header.id = header.id || "TM".concat(uuid.v4());
	        var message = Parser.createPacket(header, preparePayload(payload));

	        try {
	          this.channel.send(message);
	          return header.id;
	        } catch (e) {
	          logInstance.debug("failed to send ", header, e);
	          logInstance.trace(e.stack);
	          throw e;
	        }
	      }
	    }]);

	    return PacketInterface;
	  }();

	  function _createSuper$4(Derived) {
	    var hasNativeReflectConstruct = _isNativeReflectConstruct$4();

	    return function _createSuperInternal() {
	      var Super = _getPrototypeOf__default['default'](Derived),
	          result;

	      if (hasNativeReflectConstruct) {
	        var NewTarget = _getPrototypeOf__default['default'](this).constructor;

	        result = Reflect.construct(Super, arguments, NewTarget);
	      } else {
	        result = Super.apply(this, arguments);
	      }

	      return _possibleConstructorReturn__default['default'](this, result);
	    };
	  }

	  function _isNativeReflectConstruct$4() {
	    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	    if (Reflect.construct.sham) return false;
	    if (typeof Proxy === "function") return true;

	    try {
	      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }

	  var WebSocketChannel = /*#__PURE__*/function (_EventEmitter) {
	    _inherits__default['default'](WebSocketChannel, _EventEmitter);

	    var _super = _createSuper$4(WebSocketChannel);

	    function WebSocketChannel(url) {
	      var _this;

	      _classCallCheck__default['default'](this, WebSocketChannel);

	      _this = _super.call(this);

	      _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "socket", null);

	      _this.url = url;
	      _this.url = url;
	      _this.WebSocket = global["WebSocket"] || global["MozWebSocket"] || {};
	      return _this;
	    }

	    _createClass__default['default'](WebSocketChannel, [{
	      key: "isConnected",
	      get: function get() {
	        return !!this.socket && this.socket.readyState === 1;
	      }
	    }, {
	      key: "connect",
	      value: function connect() {
	        var _this2 = this;

	        logInstance.trace("connecting to socket");
	        var socket;

	        try {
	          socket = new this.WebSocket(this.url);
	        } catch (e) {
	          logInstance.debug("Socket error: ".concat(this.url));
	          this.emit("socketError", e);
	          return;
	        }

	        socket.binaryType = "arraybuffer";

	        socket.onopen = function () {
	          logInstance.debug("socket opened ".concat(_this2.url));

	          _this2.emit("connected");
	        };

	        socket.onclose = function (e) {
	          logInstance.debug("socket closed", e);

	          _this2.emit("disconnected", e);
	        };

	        socket.onerror = function (e) {
	          logInstance.debug("Socket error:", e);

	          _this2.emit("socketError", e);
	        };

	        socket.onmessage = function (message) {
	          _this2.emit("message", message.data);
	        };

	        this.socket = socket;
	      }
	    }, {
	      key: "send",
	      value: function send(message) {
	        return this.socket && this.socket.send(message);
	      }
	    }, {
	      key: "close",
	      value: function close() {
	        logInstance.trace("closing socket");

	        if (this.socket) {
	          this.socket.onopen = null;
	          this.socket.onclose = null;
	          this.socket.onerror = null;
	          this.socket.onmessage = null;

	          try {
	            this.socket.close();
	          } finally {}
	        }
	      }
	    }]);

	    return WebSocketChannel;
	  }(EventEmitter);

	  function _createSuper$3(Derived) {
	    var hasNativeReflectConstruct = _isNativeReflectConstruct$3();

	    return function _createSuperInternal() {
	      var Super = _getPrototypeOf__default['default'](Derived),
	          result;

	      if (hasNativeReflectConstruct) {
	        var NewTarget = _getPrototypeOf__default['default'](this).constructor;

	        result = Reflect.construct(Super, arguments, NewTarget);
	      } else {
	        result = Super.apply(this, arguments);
	      }

	      return _possibleConstructorReturn__default['default'](this, result);
	    };
	  }

	  function _isNativeReflectConstruct$3() {
	    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	    if (Reflect.construct.sham) return false;
	    if (typeof Proxy === "function") return true;

	    try {
	      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	  /**
	   * Registrations module handles all operations with registration contexts through twilsock.
	   * Main role: it automatically refreshes all registrations after reconnect.
	   */


	  var Registrations = /*#__PURE__*/function (_EventEmitter) {
	    _inherits__default['default'](Registrations, _EventEmitter);

	    var _super = _createSuper$3(Registrations);

	    function Registrations(transport) {
	      var _this;

	      _classCallCheck__default['default'](this, Registrations);

	      _this = _super.call(this);
	      _this.transport = transport;
	      _this.registrations = new Map();
	      _this.registrationsInProgress = new Map();
	      return _this;
	    }

	    _createClass__default['default'](Registrations, [{
	      key: "putNotificationContext",
	      value: function () {
	        var _putNotificationContext = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(contextId, context) {
	          var header;
	          return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
	            while (1) {
	              switch (_context.prev = _context.next) {
	                case 0:
	                  header = {
	                    method: "put_notification_ctx",
	                    notification_ctx_id: contextId
	                  };
	                  _context.next = 3;
	                  return this.transport.sendWithReply(header, context);

	                case 3:
	                case "end":
	                  return _context.stop();
	              }
	            }
	          }, _callee, this);
	        }));

	        function putNotificationContext(_x, _x2) {
	          return _putNotificationContext.apply(this, arguments);
	        }

	        return putNotificationContext;
	      }()
	    }, {
	      key: "deleteNotificationContext",
	      value: function () {
	        var _deleteNotificationContext = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(contextId) {
	          var message;
	          return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
	            while (1) {
	              switch (_context2.prev = _context2.next) {
	                case 0:
	                  message = {
	                    method: "delete_notification_ctx",
	                    notification_ctx_id: contextId
	                  };
	                  _context2.next = 3;
	                  return this.transport.sendWithReply(message);

	                case 3:
	                case "end":
	                  return _context2.stop();
	              }
	            }
	          }, _callee2, this);
	        }));

	        function deleteNotificationContext(_x3) {
	          return _deleteNotificationContext.apply(this, arguments);
	        }

	        return deleteNotificationContext;
	      }()
	    }, {
	      key: "updateRegistration",
	      value: function () {
	        var _updateRegistration = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(contextId, context) {
	          var registrationAttempts, attemptId;
	          return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
	            while (1) {
	              switch (_context3.prev = _context3.next) {
	                case 0:
	                  logInstance.debug("update registration for context", contextId);
	                  registrationAttempts = this.registrationsInProgress.get(contextId);

	                  if (!registrationAttempts) {
	                    registrationAttempts = new Set();
	                    this.registrationsInProgress.set(contextId, registrationAttempts);
	                  }

	                  attemptId = uuid.v4();
	                  registrationAttempts.add(attemptId);
	                  _context3.prev = 5;
	                  _context3.next = 8;
	                  return this.putNotificationContext(contextId, context);

	                case 8:
	                  logInstance.debug("registration attempt succeeded for context", context);
	                  registrationAttempts.delete(attemptId);

	                  if (registrationAttempts.size === 0) {
	                    this.registrationsInProgress.delete(contextId);
	                    this.emit("registered", contextId);
	                  }

	                  _context3.next = 19;
	                  break;

	                case 13:
	                  _context3.prev = 13;
	                  _context3.t0 = _context3["catch"](5);
	                  logInstance.warn("registration attempt failed for context", context);
	                  logInstance.debug(_context3.t0);
	                  registrationAttempts.delete(attemptId);

	                  if (registrationAttempts.size === 0) {
	                    this.registrationsInProgress.delete(contextId);
	                    this.emit("registrationFailed", contextId, _context3.t0);
	                  }

	                case 19:
	                case "end":
	                  return _context3.stop();
	              }
	            }
	          }, _callee3, this, [[5, 13]]);
	        }));

	        function updateRegistration(_x4, _x5) {
	          return _updateRegistration.apply(this, arguments);
	        }

	        return updateRegistration;
	      }()
	    }, {
	      key: "updateRegistrations",
	      value: function () {
	        var _updateRegistrations = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4() {
	          var _this2 = this;

	          var promises;
	          return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
	            while (1) {
	              switch (_context4.prev = _context4.next) {
	                case 0:
	                  logInstance.trace("refreshing ".concat(this.registrations.size, " registrations"));
	                  promises = [];
	                  this.registrations.forEach(function (context, id) {
	                    promises.push(_this2.updateRegistration(id, context));
	                  });
	                  _context4.next = 5;
	                  return Promise.all(promises);

	                case 5:
	                case "end":
	                  return _context4.stop();
	              }
	            }
	          }, _callee4, this);
	        }));

	        function updateRegistrations() {
	          return _updateRegistrations.apply(this, arguments);
	        }

	        return updateRegistrations;
	      }()
	    }, {
	      key: "setNotificationsContext",
	      value: function () {
	        var _setNotificationsContext = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(contextId, context) {
	          return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
	            while (1) {
	              switch (_context5.prev = _context5.next) {
	                case 0:
	                  if (!(!contextId || !context)) {
	                    _context5.next = 2;
	                    break;
	                  }

	                  throw new TwilsockError("Invalid arguments provided");

	                case 2:
	                  this.registrations.set(contextId, context);
	                  _context5.next = 5;
	                  return this.updateRegistration(contextId, context);

	                case 5:
	                  return _context5.abrupt("return", _context5.sent);

	                case 6:
	                case "end":
	                  return _context5.stop();
	              }
	            }
	          }, _callee5, this);
	        }));

	        function setNotificationsContext(_x6, _x7) {
	          return _setNotificationsContext.apply(this, arguments);
	        }

	        return setNotificationsContext;
	      }()
	    }, {
	      key: "removeNotificationsContext",
	      value: function () {
	        var _removeNotificationsContext = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(contextId) {
	          return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
	            while (1) {
	              switch (_context6.prev = _context6.next) {
	                case 0:
	                  if (this.registrations.has(contextId)) {
	                    _context6.next = 2;
	                    break;
	                  }

	                  return _context6.abrupt("return");

	                case 2:
	                  _context6.next = 4;
	                  return this.deleteNotificationContext(contextId);

	                case 4:
	                  if (this.transport.isConnected) {
	                    this.registrations.delete(contextId);
	                  }

	                case 5:
	                case "end":
	                  return _context6.stop();
	              }
	            }
	          }, _callee6, this);
	        }));

	        function removeNotificationsContext(_x8) {
	          return _removeNotificationsContext.apply(this, arguments);
	        }

	        return removeNotificationsContext;
	      }()
	    }]);

	    return Registrations;
	  }(EventEmitter);

	  function _createSuper$2(Derived) {
	    var hasNativeReflectConstruct = _isNativeReflectConstruct$2();

	    return function _createSuperInternal() {
	      var Super = _getPrototypeOf__default['default'](Derived),
	          result;

	      if (hasNativeReflectConstruct) {
	        var NewTarget = _getPrototypeOf__default['default'](this).constructor;

	        result = Reflect.construct(Super, arguments, NewTarget);
	      } else {
	        result = Super.apply(this, arguments);
	      }

	      return _possibleConstructorReturn__default['default'](this, result);
	    };
	  }

	  function _isNativeReflectConstruct$2() {
	    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	    if (Reflect.construct.sham) return false;
	    if (typeof Proxy === "function") return true;

	    try {
	      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }

	  var TwilsockUpstreamError = /*#__PURE__*/function (_TwilsockError) {
	    _inherits__default['default'](TwilsockUpstreamError, _TwilsockError);

	    var _super = _createSuper$2(TwilsockUpstreamError);

	    function TwilsockUpstreamError(status, description, body) {
	      var _this;

	      _classCallCheck__default['default'](this, TwilsockUpstreamError);

	      _this = _super.call(this, description);
	      _this.status = status;
	      _this.description = description;
	      _this.body = body;
	      return _this;
	    }

	    return TwilsockUpstreamError;
	  }(TwilsockError);

	  function _createSuper$1(Derived) {
	    var hasNativeReflectConstruct = _isNativeReflectConstruct$1();

	    return function _createSuperInternal() {
	      var Super = _getPrototypeOf__default['default'](Derived),
	          result;

	      if (hasNativeReflectConstruct) {
	        var NewTarget = _getPrototypeOf__default['default'](this).constructor;

	        result = Reflect.construct(Super, arguments, NewTarget);
	      } else {
	        result = Super.apply(this, arguments);
	      }

	      return _possibleConstructorReturn__default['default'](this, result);
	    };
	  }

	  function _isNativeReflectConstruct$1() {
	    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	    if (Reflect.construct.sham) return false;
	    if (typeof Proxy === "function") return true;

	    try {
	      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }

	  var TransportUnavailableError = /*#__PURE__*/function (_TwilsockError) {
	    _inherits__default['default'](TransportUnavailableError, _TwilsockError);

	    var _super = _createSuper$1(TransportUnavailableError);

	    function TransportUnavailableError(description) {
	      _classCallCheck__default['default'](this, TransportUnavailableError);

	      return _super.call(this, description);
	    }

	    return TransportUnavailableError;
	  }(TwilsockError);

	  var REQUEST_TIMEOUT = 20000;

	  function isHttpSuccess(code) {
	    return code >= 200 && code < 300;
	  }

	  function isHttpReply(packet) {
	    return packet && packet.header && packet.header.http_status;
	  }

	  function parseUri(uri) {
	    var match = uri.match(/^(https?\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)(\/[^?#]*)(\?[^#]*|)(#.*|)$/);

	    if (match) {
	      var uriStruct = {
	        protocol: match[1],
	        host: match[2],
	        hostname: match[3],
	        port: match[4],
	        pathname: match[5],
	        search: match[6],
	        hash: match[7],
	        params: {}
	      };

	      if (uriStruct.search.length > 0) {
	        var paramsString = uriStruct.search.substring(1);
	        uriStruct.params = paramsString.split("&").map(function (el) {
	          return el.split("=");
	        }).reduce(function (prev, curr) {
	          if (!prev.hasOwnProperty(curr[0])) {
	            prev[curr[0]] = curr[1];
	          } else if (Array.isArray(prev[curr[0]])) {
	            prev[curr[0]].push(curr[1]);
	          } else {
	            prev[curr[0]] = [prev[curr[0]], curr[1]];
	          }

	          return prev;
	        }, {});
	      }

	      return uriStruct;
	    }

	    throw new TwilsockError("Incorrect URI: " + uri);
	  }

	  function twilsockAddress(method, uri) {
	    var parsedUri = parseUri(uri);
	    var to = {
	      method: method,
	      host: parsedUri.host,
	      path: parsedUri.pathname
	    };

	    if (parsedUri.params) {
	      to.params = parsedUri.params;
	    }

	    return to;
	  }

	  function twilsockParams(method, uri, headers, body, grant) {
	    return {
	      to: twilsockAddress(method, uri),
	      headers: headers,
	      body: body,
	      grant: grant
	    };
	  }

	  var Upstream = /*#__PURE__*/function () {
	    function Upstream(transport, twilsock, config) {
	      _classCallCheck__default['default'](this, Upstream);

	      this.config = config;
	      this.transport = transport;
	      this.pendingMessages = [];
	      this.twilsock = twilsock;
	    }

	    _createClass__default['default'](Upstream, [{
	      key: "saveMessage",
	      value: function saveMessage(message) {
	        var _this = this;

	        return new Promise(function (resolve, reject) {
	          var requestDescriptor = {
	            message: message,
	            resolve: resolve,
	            reject: reject,
	            alreadyRejected: false,
	            timeout: setTimeout(function () {
	              logInstance.debug("request is timed out");
	              reject(new TwilsockError("request '".concat(message.to.method, "' to '").concat(message.to.host, "' timed out")));
	              requestDescriptor.alreadyRejected = true;
	            }, REQUEST_TIMEOUT)
	          };

	          _this.pendingMessages.push(requestDescriptor);
	        });
	      }
	    }, {
	      key: "sendPendingMessages",
	      value: function sendPendingMessages() {
	        var _this2 = this;

	        var _loop = function _loop() {
	          var request = _this2.pendingMessages[0]; // Do not send message if we've rejected its promise already

	          if (!request.alreadyRejected) {
	            try {
	              var message = request.message;

	              _this2.actualSend(message).then(function (response) {
	                return request.resolve(response);
	              }).catch(function (e) {
	                return request.reject(e);
	              });

	              clearTimeout(request.timeout);
	            } catch (e) {
	              logInstance.debug("Failed to send pending message", e);
	              return "break";
	            }
	          }

	          _this2.pendingMessages.splice(0, 1);
	        };

	        while (this.pendingMessages.length > 0) {
	          var _ret = _loop();

	          if (_ret === "break") break;
	        }
	      }
	    }, {
	      key: "rejectPendingMessages",
	      value: function rejectPendingMessages() {
	        var _this3 = this;

	        this.pendingMessages.forEach(function (message) {
	          message.reject(new TransportUnavailableError( // @todo Error Unhandled promise rejection!
	          "Unable to connect: " + _this3.twilsock.getTerminationReason));
	          message.alreadyRejected = true;
	          clearTimeout(message.timeout);
	        });
	        this.pendingMessages.splice(0, this.pendingMessages.length);
	      }
	    }, {
	      key: "actualSend",
	      value: function () {
	        var _actualSend = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(message) {
	          var _message$grant;

	          var address, headers, body, grant, httpRequest, upstreamMessage, reply;
	          return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
	            while (1) {
	              switch (_context.prev = _context.next) {
	                case 0:
	                  address = message.to;
	                  headers = message.headers;
	                  body = message.body;
	                  grant = (_message$grant = message.grant) !== null && _message$grant !== void 0 ? _message$grant : this.config.activeGrant;
	                  httpRequest = {
	                    host: address.host,
	                    path: address.path,
	                    method: address.method,
	                    params: address.params,
	                    headers: headers
	                  };
	                  upstreamMessage = new Message(grant, headers["Content-Type"] || "application/json", httpRequest);
	                  logInstance.trace("Sending upstream message", upstreamMessage);
	                  _context.next = 9;
	                  return this.transport.sendWithReply(upstreamMessage, body);

	                case 9:
	                  reply = _context.sent;
	                  logInstance.trace("Received upstream message response", reply);

	                  if (!(isHttpReply(reply) && !isHttpSuccess(reply.header.http_status.code))) {
	                    _context.next = 13;
	                    break;
	                  }

	                  throw new TwilsockUpstreamError(reply.header.http_status.code, reply.header.http_status.status, reply.body);

	                case 13:
	                  return _context.abrupt("return", {
	                    status: reply.header.http_status,
	                    headers: reply.header.http_headers,
	                    body: reply.body
	                  });

	                case 14:
	                case "end":
	                  return _context.stop();
	              }
	            }
	          }, _callee, this);
	        }));

	        function actualSend(_x) {
	          return _actualSend.apply(this, arguments);
	        }

	        return actualSend;
	      }()
	      /**
	       * Send an upstream message
	       * @param {string} method The upstream method
	       * @param {string} url URL to send the message to
	       * @param {object} [headers] The message headers
	       * @param {any} [body] The message body
	       * @param {string} [grant] The product grant
	       * @returns {Promise<Result>} Result from remote side
	       */

	    }, {
	      key: "send",
	      value: function send(method, url) {
	        var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	        var body = arguments.length > 3 ? arguments[3] : undefined;
	        var grant = arguments.length > 4 ? arguments[4] : undefined;

	        if (this.twilsock.isTerminalState) {
	          return Promise.reject(new TransportUnavailableError("Unable to connect: " + this.twilsock.getTerminationReason));
	        }

	        var twilsockMessage = twilsockParams(method, url, headers, body, grant);

	        if (!this.twilsock.isConnected) {
	          return this.saveMessage(twilsockMessage);
	        }

	        return this.actualSend(twilsockMessage);
	      }
	    }]);

	    return Upstream;
	  }();

	  var Deferred = /*#__PURE__*/function () {
	    function Deferred() {
	      var _this = this;

	      _classCallCheck__default['default'](this, Deferred);

	      this._promise = new Promise(function (resolve, reject) {
	        _this._resolve = resolve;
	        _this._reject = reject;
	      });
	    }

	    _createClass__default['default'](Deferred, [{
	      key: "promise",
	      get: function get() {
	        return this._promise;
	      }
	    }, {
	      key: "update",
	      value: function update(value) {
	        this._resolve(value);
	      }
	    }, {
	      key: "set",
	      value: function set(value) {
	        this._resolve(value);
	      }
	    }, {
	      key: "fail",
	      value: function fail(e) {
	        this._reject(e);
	      }
	    }]);

	    return Deferred;
	  }();

	  var OfflineProductStorage = /*#__PURE__*/function () {
	    function OfflineProductStorage(id) {
	      _classCallCheck__default['default'](this, OfflineProductStorage);

	      this.id = id;
	    }

	    _createClass__default['default'](OfflineProductStorage, null, [{
	      key: "create",
	      value: function create(productPayload) {
	        if (productPayload instanceof Object && "storage_id" in productPayload) {
	          return new OfflineProductStorage(productPayload.storage_id);
	        } else {
	          throw new TwilsockError('Field "storage_id" is missing');
	        }
	      }
	    }]);

	    return OfflineProductStorage;
	  }();

	  var TokenStorage = /*#__PURE__*/function () {
	    function TokenStorage() {
	      _classCallCheck__default['default'](this, TokenStorage);

	      _defineProperty__default['default'](this, "initializedFlag", "twilio_twilsock_token_storage");

	      _defineProperty__default['default'](this, "tokenStoragePrefix", "twilio_continuation_token_");

	      if (!TokenStorage._instance) {
	        this.initialize();
	        TokenStorage._instance = this;
	      }

	      return TokenStorage._instance;
	    }

	    _createClass__default['default'](TokenStorage, [{
	      key: "sessionStorage",
	      value: function sessionStorage() {
	        try {
	          return global["sessionStorage"];
	        } catch (err) {
	          return null;
	        }
	      }
	    }, {
	      key: "window",
	      value: function window() {
	        try {
	          return global["window"];
	        } catch (err) {
	          return null;
	        }
	      }
	    }, {
	      key: "storeToken",
	      value: function storeToken(continuationToken, productId) {
	        if (this.canStore()) {
	          this.sessionStorage.setItem(this.getKeyName(productId), continuationToken);
	        }
	      }
	    }, {
	      key: "getStoredToken",
	      value: function getStoredToken(productId) {
	        if (!this.canStore()) {
	          return null;
	        }

	        return this.sessionStorage.getItem(this.getKeyName(productId));
	      }
	    }, {
	      key: "initialize",
	      value: function initialize() {
	        var _this = this;

	        if (this.canStore()) {
	          var flag = this.sessionStorage.getItem(this.initializedFlag); // Duplicated tab, cleaning up all stored keys

	          if (flag) {
	            this.clear();
	          }

	          this.sessionStorage.setItem(this.initializedFlag, "true"); // When leaving page or refreshing

	          var removeStorageItem = this.sessionStorage.removeItem;
	          this.window.addEventListener("unload", function () {
	            removeStorageItem(_this.initializedFlag);
	          });
	        }
	      }
	    }, {
	      key: "clear",
	      value: function clear() {
	        if (this.canStore()) {
	          var keyToDelete = [];

	          for (var i = 0; i < this.sessionStorage.length; i++) {
	            var key = this.sessionStorage.key(i); // We manually removed startsWith here due to some problems with babel polyfill setup.
	            // Restore it when we figure out what's wrong.
	            //if (key.startsWith(TokenStorage.tokenStoragePrefix)) {

	            if (key && key.indexOf(this.tokenStoragePrefix) === 0) {
	              keyToDelete.push(key);
	            }
	          }

	          var removeStorageItem = this.sessionStorage.removeItem;
	          keyToDelete.forEach(function (key) {
	            return removeStorageItem(key);
	          });
	          removeStorageItem(this.initializedFlag);
	        }
	      }
	    }, {
	      key: "getKeyName",
	      value: function getKeyName(productId) {
	        return "".concat(this.tokenStoragePrefix).concat(productId);
	      }
	    }, {
	      key: "canStore",
	      value: function canStore() {
	        return !!(this.sessionStorage && this.sessionStorage.length && this.window);
	      }
	    }]);

	    return TokenStorage;
	  }();

	  _defineProperty__default['default'](TokenStorage, "_instance", null);

	  var TokenStorage$1 = new TokenStorage();

	  var TelemetryEventDescription = /*#__PURE__*/function () {
	    function TelemetryEventDescription(title, details, start, end, type, id) {
	      _classCallCheck__default['default'](this, TelemetryEventDescription);

	      this.title = title;
	      this.details = details;
	      this.start = start;
	      this.type = type;
	      this.id = id;
	      this.end = end;
	    } // Prepare telemetry event right before sending it.
	    // Convert times to relative.


	    _createClass__default['default'](TelemetryEventDescription, [{
	      key: "toTelemetryEvent",
	      value: function toTelemetryEvent() {
	        // Fix dates
	        var now = new Date();
	        var actualStart = this.start;
	        var actualEnd = this.end ? this.end : now;

	        if (actualEnd < actualStart) {
	          var tmp = actualEnd;
	          actualEnd = actualStart;
	          actualStart = tmp;
	        } // Converting dates to relative offset from current moment in ms


	        var startOffset = actualStart.getTime() - now.getTime();
	        var endOffset = actualEnd.getTime() - now.getTime();
	        var result = new TelemetryEvent(startOffset, endOffset, this.title, this.details, this.id, this.type);
	        return result;
	      }
	    }]);

	    return TelemetryEventDescription;
	  }();

	  exports.TelemetryPoint = void 0;

	  (function (TelemetryPoint) {
	    TelemetryPoint[TelemetryPoint["Start"] = 0] = "Start";
	    TelemetryPoint[TelemetryPoint["End"] = 1] = "End";
	  })(exports.TelemetryPoint || (exports.TelemetryPoint = {}));

	  exports.EventSendingLimitation = void 0;

	  (function (EventSendingLimitation) {
	    EventSendingLimitation[EventSendingLimitation["MinEventsPortion"] = 0] = "MinEventsPortion";
	    EventSendingLimitation[EventSendingLimitation["AnyEvents"] = 1] = "AnyEvents";
	    EventSendingLimitation[EventSendingLimitation["AnyEventsIncludingUnfinished"] = 2] = "AnyEventsIncludingUnfinished";
	  })(exports.EventSendingLimitation || (exports.EventSendingLimitation = {}));

	  var TelemetryTracker = /*#__PURE__*/function () {
	    // accumulated events count that is big enough to be sent out of schedule (not on timer but on new event registration)
	    // max events batch size to be sent in a single Telemetry message
	    // started events: have TelemetryEvent::startTime only
	    // events ready to send
	    function TelemetryTracker(config, packetInterface) {
	      _classCallCheck__default['default'](this, TelemetryTracker);

	      _defineProperty__default['default'](this, "minEventsPortionToSend", 50);

	      _defineProperty__default['default'](this, "maxEventsPortionToSend", 100);

	      _defineProperty__default['default'](this, "pendingEvents", new Map());

	      _defineProperty__default['default'](this, "readyEvents", []);

	      _defineProperty__default['default'](this, "hasInitializationFinished", false);

	      _defineProperty__default['default'](this, "_canSendTelemetry", false);

	      this.config = config;
	      this.packetInterface = packetInterface;
	    } // Keeping this private prevents the type declaration from being generated properly.
	    // Ideally, this should be private.


	    _createClass__default['default'](TelemetryTracker, [{
	      key: "isTelemetryEnabled",
	      get: function get() {
	        return this.config.confirmedCapabilities.has("telemetry.v1");
	      }
	    }, {
	      key: "canSendTelemetry",
	      get: function get() {
	        return this._canSendTelemetry && this.isTelemetryEnabled;
	      },
	      set: function set(enable) {
	        logInstance.debug("TelemetryTracker.canSendTelemetry: ".concat(enable, " TelemetryTracker.isTelemetryEnabled: ").concat(this.isTelemetryEnabled)); // We want to keep telemetry events added in advance but
	        // we need to purge events from previous connection when being disconnected

	        if (this._canSendTelemetry && !enable) {
	          this.pendingEvents.clear();
	          this.readyEvents = [];
	        }

	        this._canSendTelemetry = enable;

	        if (enable) {
	          this.sendTelemetry(exports.EventSendingLimitation.AnyEvents);
	        }

	        if (enable && !this.hasInitializationFinished) {
	          this.hasInitializationFinished = true;
	        }
	      } // Add complete event

	    }, {
	      key: "addTelemetryEvent",
	      value: function addTelemetryEvent(event) {
	        // Allow adding events before initialization.
	        if (!this.canSendTelemetry && this.hasInitializationFinished) {
	          return;
	        }

	        this.readyEvents.push(event);
	      } // Add incomplete event (with either starting or ending time point)

	    }, {
	      key: "addPartialEvent",
	      value: function addPartialEvent(incompleteEvent, eventKey, point) {
	        logInstance.debug("Adding ".concat(point === exports.TelemetryPoint.Start ? "starting" : "ending", " timepoint for '").concat(eventKey, "' event"));
	        var exists = this.pendingEvents.has(eventKey);

	        if (point === exports.TelemetryPoint.Start) {
	          if (exists) {
	            logInstance.debug("Overwriting starting point for '".concat(eventKey, "' event"));
	          }

	          this.pendingEvents.set(eventKey, incompleteEvent);
	        } else {
	          if (!exists) {
	            logInstance.info("Could not find started event for '".concat(eventKey, "' event"));
	            return;
	          }

	          this.addTelemetryEvent(this.merge(this.pendingEvents.get(eventKey), incompleteEvent));
	          this.pendingEvents.delete(eventKey);
	        }
	      }
	    }, {
	      key: "getTelemetryToSend",
	      value: function getTelemetryToSend(sendingLimit) {
	        if (!this.canSendTelemetry || this.readyEvents.length == 0) {
	          return []; // Events are collected but not sent until telemetry is enabled
	        }

	        if (sendingLimit == exports.EventSendingLimitation.MinEventsPortion && this.readyEvents.length < this.minEventsPortionToSend) {
	          return [];
	        }

	        return this.getTelemetryPortion(sendingLimit == exports.EventSendingLimitation.AnyEventsIncludingUnfinished);
	      }
	    }, {
	      key: "getTelemetryPortion",
	      value: function getTelemetryPortion(includeUnfinished) {
	        var _this = this;

	        var eventsPortionToSend = Math.min(this.readyEvents.length, this.maxEventsPortionToSend);
	        var res = this.readyEvents.splice(0, eventsPortionToSend);

	        if (includeUnfinished && res.length < this.maxEventsPortionToSend) {
	          this.pendingEvents.forEach(function (value, key) {
	            if (res.length >= _this.maxEventsPortionToSend) {
	              return; // @fixme does not end the loop early
	            }

	            var event = _this.pendingEvents.get(key);

	            _this.pendingEvents.delete(key);

	            res.push(new TelemetryEventDescription("[UNFINISHED] ".concat(event.title), // add prefix title to mark unfinished events for CleanSock
	            event.details, event.start, null, // Not ended, on sending will be replaced with now
	            event.type, event.id));
	          });
	        }

	        return res;
	      } // Merging 2 partial events:
	      //   use start.startTime & end.endTime.
	      // For other fields,
	      //   if there are values in end, use them,
	      //   else use values from start.

	    }, {
	      key: "merge",
	      value: function merge(start, end) {
	        return new TelemetryEventDescription(end.title ? end.title : start.title, end.details ? end.details : start.details, start.start, end.end, end.type ? end.type : start.type, end.id ? end.id : start.id);
	      }
	    }, {
	      key: "sendTelemetryIfMinimalPortionCollected",
	      value: function sendTelemetryIfMinimalPortionCollected() {
	        this.sendTelemetry(exports.EventSendingLimitation.MinEventsPortion);
	      } // NB: getTelemetryToSend will return non-empty array only if we have already received initReply
	      // and telemetry.v1 capability is enabled there.

	    }, {
	      key: "sendTelemetry",
	      value: function sendTelemetry(limit) {
	        var events = this.getTelemetryToSend(limit);

	        if (events.length === 0) {
	          return; // not enough telemetry data collected
	        }

	        try {
	          this.packetInterface.send(new Telemetry(events.map(function (e) {
	            return e.toTelemetryEvent();
	          })));
	        } catch (err) {
	          logInstance.debug("Error while sending ".concat(events.length, " telemetry events due to ").concat(err, "; they will be resubmitted"));
	          this.readyEvents = this.readyEvents.concat(events);
	        }
	      }
	    }]);

	    return TelemetryTracker;
	  }();

	  function _createSuper(Derived) {
	    var hasNativeReflectConstruct = _isNativeReflectConstruct();

	    return function _createSuperInternal() {
	      var Super = _getPrototypeOf__default['default'](Derived),
	          result;

	      if (hasNativeReflectConstruct) {
	        var NewTarget = _getPrototypeOf__default['default'](this).constructor;

	        result = Reflect.construct(Super, arguments, NewTarget);
	      } else {
	        result = Super.apply(this, arguments);
	      }

	      return _possibleConstructorReturn__default['default'](this, result);
	    };
	  }

	  function _isNativeReflectConstruct() {
	    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	    if (Reflect.construct.sham) return false;
	    if (typeof Proxy === "function") return true;

	    try {
	      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }

	  var TelemetryEvents = function TelemetryEvents() {
	    _classCallCheck__default['default'](this, TelemetryEvents);
	  };
	  /**
	   * @alias Twilsock
	   * @classdesc Client library for the Twilsock service
	   * It allows to recevie service-generated updates as well as bi-directional transport
	   * @fires Twilsock#message
	   * @fires Twilsock#connected
	   * @fires Twilsock#disconnected
	   * @fires Twilsock#tokenAboutToExpire
	   * @fires Twilsock#tokenExpired
	   * @fires Twilsock#stateChanged
	   * @fires Twilsock#connectionError
	   */


	  _defineProperty__default['default'](TelemetryEvents, "TWILSOCK_CONNECT", "twilsock.sdk.connect");

	  _defineProperty__default['default'](TelemetryEvents, "TWILSOCK_INIT", "twilsock.sdk.init");

	  exports.TwilsockClient = /*#__PURE__*/function (_EventEmitter) {
	    _inherits__default['default'](TwilsockClient, _EventEmitter);

	    var _super = _createSuper(TwilsockClient);
	    /**
	     * @param {string} token Twilio access token
	     * @param {string} productId Product identifier. Should be the same as a grant name in token
	     * @param {object} options Twilsock configuration options
	     */


	    function TwilsockClient(token, productId, options) {
	      var _this;

	      _classCallCheck__default['default'](this, TwilsockClient);

	      _this = _super.call(this);

	      _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "version", version);

	      _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "offlineStorageDeferred", new Deferred());

	      options.continuationToken = options.continuationToken ? options.continuationToken : TokenStorage$1.getStoredToken(productId);
	      var config = _this.config = new Configuration(token, productId, options);
	      logInstance.setLevel(config.logLevel);
	      var websocket = new WebSocketChannel(config.url);
	      var transport = new PacketInterface(websocket, config);
	      _this.channel = new TwilsockChannel(websocket, transport, config);
	      _this.registrations = new Registrations(transport);
	      _this.upstream = new Upstream(transport, _this.channel, config); // Send telemetry only when connected and initialised

	      _this.telemetryTracker = new TelemetryTracker(config, transport);

	      _this.channel.on("initialized", function () {
	        return _this.telemetryTracker.canSendTelemetry = true;
	      });

	      websocket.on("disconnected", function () {
	        return _this.telemetryTracker.canSendTelemetry = false;
	      });

	      _this.registrations.on("registered", function (id) {
	        return _this.emit("registered", id);
	      });

	      _this.channel.on("message", function (type, message) {
	        return setTimeout(function () {
	          return _this.emit("message", type, message);
	        }, 0);
	      });

	      _this.channel.on("stateChanged", function (state) {
	        return setTimeout(function () {
	          return _this.emit("stateChanged", state);
	        }, 0);
	      });

	      _this.channel.on("connectionError", function (connectionError) {
	        return setTimeout(function () {
	          return _this.emit("connectionError", connectionError);
	        }, 0);
	      });

	      _this.channel.on("tokenAboutToExpire", function () {
	        return setTimeout(function () {
	          return _this.emit("tokenAboutToExpire");
	        }, 0);
	      });

	      _this.channel.on("tokenExpired", function () {
	        return setTimeout(function () {
	          return _this.emit("tokenExpired");
	        }, 0);
	      });

	      _this.channel.on("connected", function () {
	        return _this.registrations.updateRegistrations();
	      });

	      _this.channel.on("connected", function () {
	        return _this.upstream.sendPendingMessages();
	      });

	      _this.channel.on("connected", function () {
	        return setTimeout(function () {
	          return _this.emit("connected");
	        }, 0);
	      }); // Twilsock telemetry events


	      _this.channel.on("beforeConnect", function () {
	        return _this.telemetryTracker.addPartialEvent(new TelemetryEventDescription("Establish WebSocket connection", "", new Date()), TelemetryEvents.TWILSOCK_CONNECT, exports.TelemetryPoint.Start);
	      });

	      _this.channel.on("connected", function () {
	        return _this.telemetryTracker.addPartialEvent(new TelemetryEventDescription("Establish WebSocket connection", "", new Date(), new Date()), TelemetryEvents.TWILSOCK_CONNECT, exports.TelemetryPoint.End);
	      });

	      _this.channel.on("beforeSendInit", function () {
	        return _this.telemetryTracker.addPartialEvent(new TelemetryEventDescription("Send Twilsock init", "", new Date()), TelemetryEvents.TWILSOCK_INIT, exports.TelemetryPoint.Start);
	      });

	      _this.channel.on("initialized", function () {
	        return _this.telemetryTracker.addPartialEvent(new TelemetryEventDescription("Send Twilsock init", "Succeeded", new Date(), new Date()), TelemetryEvents.TWILSOCK_INIT, exports.TelemetryPoint.End);
	      });

	      _this.channel.on("sendInitFailed", function () {
	        return _this.telemetryTracker.addPartialEvent(new TelemetryEventDescription("Send Twilsock init", "Failed", new Date(), new Date()), TelemetryEvents.TWILSOCK_INIT, exports.TelemetryPoint.End);
	      });

	      _this.channel.on("initialized", function (initReply) {
	        _this.handleStorageId(productId, initReply);

	        TokenStorage$1.storeToken(initReply.continuationToken, productId);
	        setTimeout(function () {
	          return _this.emit("initialized", initReply);
	        }, 0);
	      });

	      _this.channel.on("disconnected", function () {
	        return setTimeout(function () {
	          return _this.emit("disconnected");
	        }, 0);
	      });

	      _this.channel.on("disconnected", function () {
	        return _this.upstream.rejectPendingMessages();
	      });

	      _this.channel.on("disconnected", function () {
	        return _this.offlineStorageDeferred.fail(new TwilsockError("Client disconnected"));
	      });

	      _this.offlineStorageDeferred.promise.catch(function () {
	        return void 0;
	      });

	      return _this;
	    }

	    _createClass__default['default'](TwilsockClient, [{
	      key: "emit",
	      value: function emit(event) {
	        var _get2;

	        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	          args[_key - 1] = arguments[_key];
	        }

	        logInstance.debug("Emitting ".concat(event.toString(), "(").concat(args.map(function (a) {
	          return JSON.stringify(a);
	        }).join(", "), ")"));
	        return (_get2 = _get__default['default'](_getPrototypeOf__default['default'](TwilsockClient.prototype), "emit", this)).call.apply(_get2, [this, event].concat(args));
	      }
	    }, {
	      key: "handleStorageId",
	      value: function handleStorageId(productId, initReply) {
	        if (!initReply.offlineStorage) {
	          this.offlineStorageDeferred.fail(new TwilsockError("No offline storage id"));
	        } else if (initReply.offlineStorage.hasOwnProperty(productId)) {
	          try {
	            this.offlineStorageDeferred.set(OfflineProductStorage.create(initReply.offlineStorage[productId]));
	            logInstance.debug("Offline storage for '".concat(productId, "' product: ").concat(JSON.stringify(initReply.offlineStorage[productId]), "."));
	          } catch (e) {
	            this.offlineStorageDeferred.fail(new TwilsockError("Failed to parse offline storage for ".concat(productId, " ").concat(JSON.stringify(initReply.offlineStorage[productId]), ". ").concat(e, ".")));
	          }
	        } else {
	          this.offlineStorageDeferred.fail(new TwilsockError("No offline storage id for '".concat(productId, "' product: ").concat(JSON.stringify(initReply.offlineStorage))));
	        }
	      }
	      /**
	       * Get offline storage ID
	       * @returns {Promise}
	       */

	    }, {
	      key: "storageId",
	      value: function storageId() {
	        return this.offlineStorageDeferred.promise;
	      }
	      /**
	       * Indicates if twilsock is connected now
	       * @returns {Boolean}
	       */

	    }, {
	      key: "isConnected",
	      get: function get() {
	        return this.channel.isConnected;
	      }
	      /**
	       * Current state
	       * @returns {ConnectionState}
	       */

	    }, {
	      key: "state",
	      get: function get() {
	        return this.channel.state;
	      }
	      /**
	       * Update token
	       * @param {String} token
	       * @returns {Promise}
	       */

	    }, {
	      key: "updateToken",
	      value: function () {
	        var _updateToken = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(token) {
	          return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
	            while (1) {
	              switch (_context.prev = _context.next) {
	                case 0:
	                  logInstance.trace("updating token '".concat(token, "'"));

	                  if (!(this.config.token === token)) {
	                    _context.next = 3;
	                    break;
	                  }

	                  return _context.abrupt("return");

	                case 3:
	                  this.config.updateToken(token);
	                  _context.next = 6;
	                  return this.channel.updateToken(token);

	                case 6:
	                  return _context.abrupt("return", _context.sent);

	                case 7:
	                case "end":
	                  return _context.stop();
	              }
	            }
	          }, _callee, this);
	        }));

	        function updateToken(_x) {
	          return _updateToken.apply(this, arguments);
	        }

	        return updateToken;
	      }()
	      /**
	       * Updates notification context.
	       * This method shouldn't be used anyone except twilio notifications library
	       * @param contextId id of notification context
	       * @param context value of notification context
	       * @private
	       */

	    }, {
	      key: "setNotificationsContext",
	      value: function () {
	        var _setNotificationsContext = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(contextId, context) {
	          return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
	            while (1) {
	              switch (_context2.prev = _context2.next) {
	                case 0:
	                  _context2.next = 2;
	                  return this.registrations.setNotificationsContext(contextId, context);

	                case 2:
	                case "end":
	                  return _context2.stop();
	              }
	            }
	          }, _callee2, this);
	        }));

	        function setNotificationsContext(_x2, _x3) {
	          return _setNotificationsContext.apply(this, arguments);
	        }

	        return setNotificationsContext;
	      }()
	      /**
	       * Remove notification context.
	       * This method shouldn't be used anyone except twilio notifications library
	       * @param contextId id of notification context
	       * @private
	       */

	    }, {
	      key: "removeNotificationsContext",
	      value: function () {
	        var _removeNotificationsContext = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(contextId) {
	          return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
	            while (1) {
	              switch (_context3.prev = _context3.next) {
	                case 0:
	                  _context3.next = 2;
	                  return this.registrations.removeNotificationsContext(contextId);

	                case 2:
	                case "end":
	                  return _context3.stop();
	              }
	            }
	          }, _callee3, this);
	        }));

	        function removeNotificationsContext(_x4) {
	          return _removeNotificationsContext.apply(this, arguments);
	        }

	        return removeNotificationsContext;
	      }()
	      /**
	       * Connect to the server
	       * @fires Twilsock#connected
	       * @public
	       * @returns {void}
	       */

	    }, {
	      key: "connect",
	      value: function connect() {
	        return this.channel.connect();
	      }
	      /**
	       * Disconnect from the server
	       * @fires Twilsock#disconnected
	       * @public
	       * @returns {Promise}
	       */

	    }, {
	      key: "disconnect",
	      value: function () {
	        var _disconnect = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4() {
	          return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
	            while (1) {
	              switch (_context4.prev = _context4.next) {
	                case 0:
	                  this.telemetryTracker.sendTelemetry(exports.EventSendingLimitation.AnyEventsIncludingUnfinished);
	                  _context4.next = 3;
	                  return this.channel.disconnect();

	                case 3:
	                  return _context4.abrupt("return", _context4.sent);

	                case 4:
	                case "end":
	                  return _context4.stop();
	              }
	            }
	          }, _callee4, this);
	        }));

	        function disconnect() {
	          return _disconnect.apply(this, arguments);
	        }

	        return disconnect;
	      }()
	      /**
	       * Get HTTP request to upstream service
	       * @param {string} url Upstream service url
	       * @param {headers} headers Set of custom headers
	       * @param {string} [grant] The product grant
	       * @returns {Promise}
	       */

	    }, {
	      key: "get",
	      value: function () {
	        var _get3 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(url, headers, grant) {
	          return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
	            while (1) {
	              switch (_context5.prev = _context5.next) {
	                case 0:
	                  this.telemetryTracker.sendTelemetry(exports.EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment

	                  _context5.next = 3;
	                  return this.upstream.send("GET", url, headers, undefined, grant);

	                case 3:
	                  return _context5.abrupt("return", _context5.sent);

	                case 4:
	                case "end":
	                  return _context5.stop();
	              }
	            }
	          }, _callee5, this);
	        }));

	        function get(_x5, _x6, _x7) {
	          return _get3.apply(this, arguments);
	        }

	        return get;
	      }()
	      /**
	       * Post HTTP request to upstream service
	       * @param {string} url Upstream service url
	       * @param {headers} headers Set of custom headers
	       * @param {body} body Body to send
	       * @param {string} [grant] The product grant
	       * @returns {Promise}
	       */

	    }, {
	      key: "post",
	      value: function () {
	        var _post = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(url, headers, body, grant) {
	          return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
	            while (1) {
	              switch (_context6.prev = _context6.next) {
	                case 0:
	                  this.telemetryTracker.sendTelemetry(exports.EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment

	                  _context6.next = 3;
	                  return this.upstream.send("POST", url, headers, body, grant);

	                case 3:
	                  return _context6.abrupt("return", _context6.sent);

	                case 4:
	                case "end":
	                  return _context6.stop();
	              }
	            }
	          }, _callee6, this);
	        }));

	        function post(_x8, _x9, _x10, _x11) {
	          return _post.apply(this, arguments);
	        }

	        return post;
	      }()
	      /**
	       * Put HTTP request to upstream service
	       * @param {string} url Upstream service url
	       * @param {headers} headers Set of custom headers
	       * @param {body} body Body to send
	       * @param {string} [grant] The product grant
	       * @returns {Promise}
	       */

	    }, {
	      key: "put",
	      value: function () {
	        var _put = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7(url, headers, body, grant) {
	          return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {
	            while (1) {
	              switch (_context7.prev = _context7.next) {
	                case 0:
	                  this.telemetryTracker.sendTelemetry(exports.EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment

	                  _context7.next = 3;
	                  return this.upstream.send("PUT", url, headers, body, grant);

	                case 3:
	                  return _context7.abrupt("return", _context7.sent);

	                case 4:
	                case "end":
	                  return _context7.stop();
	              }
	            }
	          }, _callee7, this);
	        }));

	        function put(_x12, _x13, _x14, _x15) {
	          return _put.apply(this, arguments);
	        }

	        return put;
	      }()
	      /**
	       * Delete HTTP request to upstream service
	       * @param {string} url Upstream service url
	       * @param {headers} headers Set of custom headers
	       * @param {body} body Body to send
	       * @param {string} [grant] The product grant
	       * @returns {Promise}
	       */

	    }, {
	      key: "delete",
	      value: function () {
	        var _delete2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee8(url, headers, body, grant) {
	          return _regeneratorRuntime__default['default'].wrap(function _callee8$(_context8) {
	            while (1) {
	              switch (_context8.prev = _context8.next) {
	                case 0:
	                  this.telemetryTracker.sendTelemetry(exports.EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment

	                  _context8.next = 3;
	                  return this.upstream.send("DELETE", url, headers, body, grant);

	                case 3:
	                  return _context8.abrupt("return", _context8.sent);

	                case 4:
	                case "end":
	                  return _context8.stop();
	              }
	            }
	          }, _callee8, this);
	        }));

	        function _delete(_x16, _x17, _x18, _x19) {
	          return _delete2.apply(this, arguments);
	        }

	        return _delete;
	      }()
	      /**
	       * Submits internal telemetry event. Not to be used for any customer and/or sensitive data.
	       * @param {TelemetryEventDescription} event Event details.
	       * @returns {void}
	       */

	    }, {
	      key: "addTelemetryEvent",
	      value: function addTelemetryEvent(event) {
	        this.telemetryTracker.addTelemetryEvent(event);
	        this.telemetryTracker.sendTelemetryIfMinimalPortionCollected(); // send telemetry if need
	      }
	      /**
	       * Submits internal telemetry event. Not to be used for any customer and/or sensitive data.
	       * @param {TelemetryEventDescription} event Event details.
	       * @param {string} eventKey Unique event key.
	       * @param {TelemetryPoint} point Is this partial event for start or end of measurement.
	       * @returns {void}
	       */

	    }, {
	      key: "addPartialTelemetryEvent",
	      value: function addPartialTelemetryEvent(event, eventKey, point) {
	        this.telemetryTracker.addPartialEvent(event, eventKey, point);

	        if (point === exports.TelemetryPoint.End) {
	          // this telemetry event is complete, so minimal portion could become ready to send
	          this.telemetryTracker.sendTelemetryIfMinimalPortionCollected(); // send telemetry if need
	        }
	      }
	    }]);

	    return TwilsockClient;
	  }(EventEmitter);

	  exports.TwilsockClient = __decorate([declarativeTypeValidator.validateConstructorTypes(declarativeTypeValidator.nonEmptyString, declarativeTypeValidator.nonEmptyString, [declarativeTypeValidator.pureObject, "undefined", declarativeTypeValidator.literal(null)]), __metadata("design:paramtypes", [String, String, Object])], exports.TwilsockClient);
	  /**
	   * Twilsock destination address descriptor
	   * @typedef {Object} Twilsock#Address
	   * @property {String} method - HTTP method. (POST, PUT, etc)
	   * @property {String} host - host name without path. (e.g. my.company.com)
	   * @property {String} path - path on the host (e.g. /my/app/to/call.php)
	   */

	  /**
	   * Twilsock upstream message
	   * @typedef {Object} Twilsock#Message
	   * @property {Twilsock#Address} to - destination address
	   * @property {Object} headers - HTTP headers
	   * @property {Object} body - Body
	   */

	  /**
	   * Fired when new message received
	   * @param {Twilsock#Message} message
	   * @event Twilsock#message
	   */

	  /**
	   * Fired when socket connected
	   * @param {String} URI of endpoint
	   * @event Twilsock#connected
	   */

	  /**
	   * Fired when socket disconnected
	   * @event Twilsock#disconnected
	   */

	  /**
	   * Fired when token is about to expire and should be updated
	   * @event Twilsock#tokenAboutToExpire
	   */

	  /**
	   * Fired when token has expired and connection is aborted
	   * @event Twilsock#tokenExpired
	   */

	  /**
	   * Fired when socket connected
	   * @param ConnectionState state - general twilsock state
	   * @event Twilsock#stateChanged
	   */

	  /**
	   * Fired when connection is interrupted by unexpected reason
	   * @type {Object}
	   * @property {Boolean} terminal - twilsock will stop connection attempts
	   * @property {String} message - root cause
	   * @property {Number} [httpStatusCode] - http status code if available
	   * @property {Number} [errorCode] - Twilio public error code if available
	   * @event Twilsock#connectionError
	   */

	  var InitRegistration = /*#__PURE__*/function () {
	    // It's a Set<string> but TS cannot serialize Sets properly.
	    function InitRegistration(product) {
	      _classCallCheck__default['default'](this, InitRegistration);

	      this.product = product;
	      this.type = "ers";
	      this.notification_protocol_version = 0;
	      this.message_types = [];
	    }
	    /*
	     * @internal
	     *
	     * Populate init registrations section in the Twilsock configuration generically with
	     * passed-in list of types to register.
	     *
	     * Used only by the SDK, ignore.
	     *
	     * @param {string[]} types List of types to add to init registrations in options.
	     * @param {object} options Twilsock options object to update. Omit to create a new one.
	     */


	    _createClass__default['default'](InitRegistration, [{
	      key: "populateInitRegistrations",
	      value: function populateInitRegistrations(types) {
	        var s = new Set(this.message_types); // Update options reference in place

	        for (var idx in types) {
	          s.add(types[idx]);
	        }

	        this.message_types = Array.from(s);
	      }
	    }]);

	    return InitRegistration;
	  }();

	  exports.InitRegistration = InitRegistration;
	  exports.TelemetryEventDescription = TelemetryEventDescription;
	  exports.TelemetryTracker = TelemetryTracker;
	  exports.TransportUnavailableError = TransportUnavailableError;
	  exports.Twilsock = exports.TwilsockClient;
	  exports.TwilsockError = TwilsockError;
	})(browser$2);

	/**
	 * Construct URI with query parameters
	 */
	var UriBuilder = /*#__PURE__*/function () {
	  function UriBuilder(base) {
	    _classCallCheck$3(this, UriBuilder);

	    this.base = base;
	    this.args = new Array();
	    this.paths = new Array();
	  }

	  _createClass$3(UriBuilder, [{
	    key: "pathSegment",
	    value: function pathSegment(name) {
	      this.paths.push(encodeURIComponent(name));
	      return this;
	    }
	  }, {
	    key: "queryParam",
	    value: function queryParam(name, value) {
	      if (typeof value !== 'undefined') {
	        this.args.push(encodeURIComponent(name) + '=' + encodeURIComponent(value));
	      }

	      return this;
	    }
	  }, {
	    key: "build",
	    value: function build() {
	      var result = this.base;

	      if (this.paths.length) {
	        result += '/' + this.paths.join('/');
	      }

	      if (this.args.length) {
	        result += '?' + this.args.join('&');
	      }

	      return result;
	    }
	  }]);

	  return UriBuilder;
	}();

	function _isNativeFunction(fn) {
	  return Function.toString.call(fn).indexOf("[native code]") !== -1;
	}

	function _isNativeReflectConstruct$9() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _construct(Parent, args, Class) {
	  if (_isNativeReflectConstruct$9()) {
	    _construct = Reflect.construct;
	  } else {
	    _construct = function _construct(Parent, args, Class) {
	      var a = [null];
	      a.push.apply(a, args);
	      var Constructor = Function.bind.apply(Parent, a);
	      var instance = new Constructor();
	      if (Class) _setPrototypeOf(instance, Class.prototype);
	      return instance;
	    };
	  }

	  return _construct.apply(null, arguments);
	}

	function _wrapNativeSuper(Class) {
	  var _cache = typeof Map === "function" ? new Map() : undefined;

	  _wrapNativeSuper = function _wrapNativeSuper(Class) {
	    if (Class === null || !_isNativeFunction(Class)) return Class;

	    if (typeof Class !== "function") {
	      throw new TypeError("Super expression must either be null or a function");
	    }

	    if (typeof _cache !== "undefined") {
	      if (_cache.has(Class)) return _cache.get(Class);

	      _cache.set(Class, Wrapper);
	    }

	    function Wrapper() {
	      return _construct(Class, arguments, _getPrototypeOf$3(this).constructor);
	    }

	    Wrapper.prototype = Object.create(Class.prototype, {
	      constructor: {
	        value: Wrapper,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    return _setPrototypeOf(Wrapper, Class);
	  };

	  return _wrapNativeSuper(Class);
	}

	function _createSuper$8(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$8(); return function _createSuperInternal() { var Super = _getPrototypeOf$3(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$3(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$3(this, result); }; }

	function _isNativeReflectConstruct$8() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

	/**
	 * Generic SyncLibrary error class
	 */
	var SyncError = /*#__PURE__*/function (_Error) {
	  _inherits$3(SyncError, _Error);

	  var _super = _createSuper$8(SyncError);

	  function SyncError(message) {
	    var _this;

	    var status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	    var code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	    _classCallCheck$3(this, SyncError);

	    _this = _super.call(this);
	    _this.name = _this.constructor.name;
	    _this.message = "".concat(message, " (status: ").concat(status, ", code: ").concat(code, ")");
	    _this.status = status;
	    _this.code = code;
	    return _this;
	  }

	  return _createClass$3(SyncError);
	}( /*#__PURE__*/_wrapNativeSuper(Error));

	var SyncNetworkError = /*#__PURE__*/function (_SyncError) {
	  _inherits$3(SyncNetworkError, _SyncError);

	  var _super2 = _createSuper$8(SyncNetworkError);

	  function SyncNetworkError(message) {
	    var _this2;

	    var status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	    var code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
	    var body = arguments.length > 3 ? arguments[3] : undefined;

	    _classCallCheck$3(this, SyncNetworkError);

	    _this2 = _super2.call(this, message, status, code);
	    _this2.body = body;
	    return _this2;
	  }

	  return _createClass$3(SyncNetworkError);
	}(SyncError);

	var $$2 = _export;
	var getBuiltIn = getBuiltIn$9;
	var fails$2 = fails$z;

	var $stringify = getBuiltIn('JSON', 'stringify');
	var re = /[\uD800-\uDFFF]/g;
	var low = /^[\uD800-\uDBFF]$/;
	var hi = /^[\uDC00-\uDFFF]$/;

	var fix = function (match, offset, string) {
	  var prev = string.charAt(offset - 1);
	  var next = string.charAt(offset + 1);
	  if ((low.test(match) && !hi.test(next)) || (hi.test(match) && !low.test(prev))) {
	    return '\\u' + match.charCodeAt(0).toString(16);
	  } return match;
	};

	var FORCED$1 = fails$2(function () {
	  return $stringify('\uDF06\uD834') !== '"\\udf06\\ud834"'
	    || $stringify('\uDEAD') !== '"\\udead"';
	});

	if ($stringify) {
	  // `JSON.stringify` method
	  // https://tc39.es/ecma262/#sec-json.stringify
	  // https://github.com/tc39/proposal-well-formed-stringify
	  $$2({ target: 'JSON', stat: true, forced: FORCED$1 }, {
	    // eslint-disable-next-line no-unused-vars -- required for `.length`
	    stringify: function stringify(it, replacer, space) {
	      var result = $stringify.apply(null, arguments);
	      return typeof result == 'string' ? result.replace(re, fix) : result;
	    }
	  });
	}

	/**
	 * Deep-clone an object. Note that this does not work on object containing
	 * functions.
	 * @param {object} obj - the object to deep-clone
	 * @return {object}
	 */

	function deepClone(obj) {
	  return JSON.parse(JSON.stringify(obj));
	}

	function validatePageSize(pageSize) {
	  var validPageSize = pageSize === undefined || isPositiveInteger(pageSize);

	  if (!validPageSize) {
	    throw new SyncError("Invalid pageSize parameter. Expected a positive integer, was '".concat(pageSize, "'."), 400, 20007);
	  }
	}

	function isInteger(number) {
	  return !isNaN(parseInt(number)) && isFinite(number);
	}

	function isPositiveInteger(number) {
	  return isInteger(number) && number > 0;
	}

	var log = loglevel.exports.getLogger('twilio-sync'); // twilio-sync is used by Flex SDK. Please DO NOT change

	function prepareLine(prefix, args) {
	  return ["".concat(new Date().toISOString(), " Sync ").concat(prefix, ":")].concat(Array.from(args));
	}

	var log$1 = {
	  setLevel: function setLevel(level) {
	    log.setLevel(level);
	  },
	  trace: function trace() {
	    if (log.getLevel() == log.levels.TRACE) {
	      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      log.debug.apply(null, prepareLine('T', args));
	    }
	  },
	  debug: function debug() {
	    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    log.debug.apply(null, prepareLine('D', args));
	  },
	  info: function info() {
	    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	      args[_key3] = arguments[_key3];
	    }

	    log.info.apply(null, prepareLine('I', args));
	  },
	  warn: function warn() {
	    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	      args[_key4] = arguments[_key4];
	    }

	    log.warn.apply(null, prepareLine('W', args));
	  },
	  error: function error() {
	    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	      args[_key5] = arguments[_key5];
	    }

	    log.error.apply(null, prepareLine('E', args));
	  }
	};

	var SUBSCRIPTIONS_PATH = '/v4/Subscriptions';
	var MAPS_PATH = '/v3/Maps';
	var LISTS_PATH = '/v3/Lists';
	var DOCUMENTS_PATH = '/v3/Documents';
	var STREAMS_PATH = '/v3/Streams';
	var INSIGHTS_PATH = '/v3/Insights';

	function getWithDefault(container, key, defaultValue) {
	  if (container && typeof container[key] !== 'undefined') {
	    return container[key];
	  }

	  return defaultValue;
	}
	/**
	 * Settings container for Sync library
	 */


	var Configuration = /*#__PURE__*/function () {
	  /**
	   * @param {Object} options
	   */
	  function Configuration() {
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    _classCallCheck$3(this, Configuration);

	    var region = options.region || 'us1';
	    var defaultCdsUrl = "https://cds.".concat(region, ".twilio.com");
	    var baseUri = options.cdsUri || defaultCdsUrl;
	    this.settings = {
	      subscriptionsUri: baseUri + SUBSCRIPTIONS_PATH,
	      documentsUri: baseUri + DOCUMENTS_PATH,
	      listsUri: baseUri + LISTS_PATH,
	      mapsUri: baseUri + MAPS_PATH,
	      streamsUri: baseUri + STREAMS_PATH,
	      insightsUri: baseUri + INSIGHTS_PATH,
	      sessionStorageEnabled: getWithDefault(options.Sync, 'enableSessionStorage', true),
	      productId: options.productId
	    };
	  }

	  _createClass$3(Configuration, [{
	    key: "subscriptionsUri",
	    get: function get() {
	      return this.settings.subscriptionsUri;
	    }
	  }, {
	    key: "documentsUri",
	    get: function get() {
	      return this.settings.documentsUri;
	    }
	  }, {
	    key: "listsUri",
	    get: function get() {
	      return this.settings.listsUri;
	    }
	  }, {
	    key: "mapsUri",
	    get: function get() {
	      return this.settings.mapsUri;
	    }
	  }, {
	    key: "streamsUri",
	    get: function get() {
	      return this.settings.streamsUri;
	    }
	  }, {
	    key: "insightsUri",
	    get: function get() {
	      return this.settings.insightsUri;
	    }
	  }, {
	    key: "backoffConfig",
	    get: function get() {
	      return this.settings.backoffConfig || {};
	    }
	  }, {
	    key: "sessionStorageEnabled",
	    get: function get() {
	      return this.settings.sessionStorageEnabled;
	    }
	  }, {
	    key: "productId",
	    get: function get() {
	      return this.settings.productId;
	    }
	  }]);

	  return Configuration;
	}();

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArrayLimit(arr, i) {
	  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

	  if (_i == null) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;

	  var _s, _e;

	  try {
	    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _arrayLikeToArray$6(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	function _unsupportedIterableToArray$6(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray$6(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$6(o, minLen);
	}

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _slicedToArray(arr, i) {
	  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$6(arr, i) || _nonIterableRest();
	}

	var DESCRIPTORS = descriptors;
	var fails$1 = fails$z;
	var objectKeys = objectKeys$4;
	var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;
	var propertyIsEnumerableModule = objectPropertyIsEnumerable;
	var toObject$1 = toObject$g;
	var IndexedObject = indexedObject;

	// eslint-disable-next-line es/no-object-assign -- safe
	var $assign = Object.assign;
	// eslint-disable-next-line es/no-object-defineproperty -- required for testing
	var defineProperty = Object.defineProperty;

	// `Object.assign` method
	// https://tc39.es/ecma262/#sec-object.assign
	var objectAssign = !$assign || fails$1(function () {
	  // should have correct order of operations (Edge bug)
	  if (DESCRIPTORS && $assign({ b: 1 }, $assign(defineProperty({}, 'a', {
	    enumerable: true,
	    get: function () {
	      defineProperty(this, 'b', {
	        value: 3,
	        enumerable: false
	      });
	    }
	  }), { b: 2 })).b !== 1) return true;
	  // should work with symbols and should have deterministic property order (V8 bug)
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line es/no-symbol -- safe
	  var symbol = Symbol();
	  var alphabet = 'abcdefghijklmnopqrst';
	  A[symbol] = 7;
	  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
	  return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`
	  var T = toObject$1(target);
	  var argumentsLength = arguments.length;
	  var index = 1;
	  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
	  var propertyIsEnumerable = propertyIsEnumerableModule.f;
	  while (argumentsLength > index) {
	    var S = IndexedObject(arguments[index++]);
	    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];
	    }
	  } return T;
	} : $assign;

	var $$1 = _export;
	var assign = objectAssign;

	// `Object.assign` method
	// https://tc39.es/ecma262/#sec-object.assign
	// eslint-disable-next-line es/no-object-assign -- required for testing
	$$1({ target: 'Object', stat: true, forced: Object.assign !== assign }, {
	  assign: assign
	});

	function _createForOfIteratorHelper$5(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$5(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

	function _unsupportedIterableToArray$5(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$5(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$5(o, minLen); }

	function _arrayLikeToArray$5(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
	/**
	 * A data container used by the Subscriptions class to track subscribed entities' local
	 * representations and their state.
	 */

	var SubscribedEntity = /*#__PURE__*/function () {
	  function SubscribedEntity(entity) {
	    _classCallCheck$3(this, SubscribedEntity);

	    this.localObject = entity;
	    this.pendingCorrelationId = null;
	    this.pendingAction = null;
	    this.established = false;
	    this.retryCount = 0;
	  }

	  _createClass$3(SubscribedEntity, [{
	    key: "sid",
	    get: function get() {
	      return this.localObject.sid;
	    }
	  }, {
	    key: "type",
	    get: function get() {
	      return this.localObject.type;
	    }
	  }, {
	    key: "lastEventId",
	    get: function get() {
	      return this.localObject.lastEventId;
	    } // below properties are specific to Insights only

	  }, {
	    key: "indexName",
	    get: function get() {
	      return this.localObject.indexName;
	    }
	  }, {
	    key: "queryString",
	    get: function get() {
	      return this.localObject.queryString;
	    }
	  }, {
	    key: "isEstablished",
	    get: function get() {
	      return this.established;
	    }
	  }, {
	    key: "update",
	    value: function update(event, isStrictlyOrdered) {
	      this.localObject._update(event, isStrictlyOrdered);
	    }
	  }, {
	    key: "updatePending",
	    value: function updatePending(action, correlationId) {
	      this.pendingAction = action;
	      this.pendingCorrelationId = correlationId;
	    }
	  }, {
	    key: "reset",
	    value: function reset() {
	      this.updatePending(null, null);
	      this.retryCount = 0;
	      this.established = false;
	      this.setSubscriptionState('none');
	    }
	  }, {
	    key: "markAsFailed",
	    value: function markAsFailed(message) {
	      this.rejectedWithError = message.error;
	      this.updatePending(null, null);
	      this.localObject.reportFailure(new SyncError("Failed to subscribe on service events: ".concat(message.error.message), message.error.status, message.error.code));
	    }
	  }, {
	    key: "complete",
	    value: function complete(eventId) {
	      this.updatePending(null, null);
	      this.established = true;

	      this.localObject._advanceLastEventId(eventId);
	    }
	  }, {
	    key: "setSubscriptionState",
	    value: function setSubscriptionState(newState) {
	      this.localObject._setSubscriptionState(newState);
	    }
	  }]);

	  return SubscribedEntity;
	}();
	/**
	 * @class Subscriptions
	 * @classdesc A manager which, in batches of varying size, continuously persists the
	 *      subscription intent of the caller to the Sync backend until it achieves a
	 *      converged state.
	 */


	var Subscriptions = /*#__PURE__*/function () {
	  // This is always the full set of subscribables (SubscribedEntity instances) intended by
	  // the client. At any point, whatever the state of these subscriptions on the server, this
	  // is the intent of the user to which the SDK must converge.
	  // This includes the set of subscribables (SubscribedEntity instances) for whom a request
	  // has been dispatched (whether or not this particular request ultimately succeeds) to
	  // establish a live subscription. Entities are removed when the corresponding "cancel"
	  // request is dispatched.
	  // If the server includes a `ttl_in_s` attribute in the poke response, subscriptionTtlTimer is started for that duration
	  // such that when it fires, it repokes the entire sync set (i.e., emulates a reconnect). Every reconnect resets the timer.
	  // After the timer has fired, the first poke request includes a `reason: ttl` attribute in the body.

	  /**
	   * @constructor
	   * Prepares a new Subscriptions manager object with zero subscribed or persisted subscriptions.
	   *
	   * @param {object} config may include a key 'backoffConfig', wherein any of the parameters
	   *      of Backoff.exponential (from npm 'backoff') are valid and will override the defaults.
	   *
	   * @param {Network} must be a viable running Sync Network object, useful for routing requests.
	   */
	  function Subscriptions(services) {
	    var _this = this;

	    _classCallCheck$3(this, Subscriptions);

	    _defineProperty$2(this, "isConnected", false);

	    _defineProperty$2(this, "maxBatchSize", 100);

	    _defineProperty$2(this, "subscriptionTtlTimer", null);

	    _defineProperty$2(this, "pendingPokeReason", null);

	    this.services = services;
	    this.subscriptions = new Map();
	    this.persisted = new Map();
	    this.latestPokeResponseArrivalTimestampByCorrelationId = new Map();
	    var defaultBackoffConfig = {
	      randomisationFactor: 0.2,
	      initialDelay: 100,
	      maxDelay: 2 * 60 * 1000
	    };
	    this.backoff = Backoff_1.exponential(Object.assign(defaultBackoffConfig, this.services.config.backoffConfig)); // This block is triggered by #_persist. Every request is executed in a series of (ideally 1)
	    // backoff 'ready' event, at which point a new subscription set is calculated.

	    this.backoff.on('ready', function () {
	      var _this$getSubscription = _this.getSubscriptionUpdateBatch(),
	          action = _this$getSubscription.action,
	          subscriptionRequests = _this$getSubscription.subscriptions;

	      if (action) {
	        _this.applyNewSubscriptionUpdateBatch(action, subscriptionRequests);
	      } else {
	        _this.backoff.reset();

	        log$1.debug('All subscriptions resolved.');
	      }
	    });
	  }

	  _createClass$3(Subscriptions, [{
	    key: "getSubscriptionUpdateBatch",
	    value: function getSubscriptionUpdateBatch() {
	      function subtract(these, those, action, limit) {
	        var result = [];

	        var _iterator = _createForOfIteratorHelper$5(these),
	            _step;

	        try {
	          for (_iterator.s(); !(_step = _iterator.n()).done;) {
	            var _step$value = _slicedToArray(_step.value, 2),
	                thisKey = _step$value[0],
	                thisValue = _step$value[1];

	            var otherValue = those.get(thisKey);

	            if (!otherValue && action !== thisValue.pendingAction && !thisValue.rejectedWithError) {
	              result.push(thisValue);

	              if (limit && result.length >= limit) {
	                break;
	              }
	            }
	          }
	        } catch (err) {
	          _iterator.e(err);
	        } finally {
	          _iterator.f();
	        }

	        return result;
	      }

	      var listToAdd = subtract(this.subscriptions, this.persisted, 'establish', this.maxBatchSize);

	      if (listToAdd.length > 0) {
	        return {
	          action: 'establish',
	          subscriptions: listToAdd
	        };
	      }

	      var listToRemove = subtract(this.persisted, this.subscriptions, 'cancel', this.maxBatchSize);

	      if (listToRemove.length > 0) {
	        return {
	          action: 'cancel',
	          subscriptions: listToRemove
	        };
	      }

	      return {
	        action: null,
	        subscriptions: null
	      };
	    }
	  }, {
	    key: "persist",
	    value: function persist() {
	      this.backoff.backoff();
	    }
	  }, {
	    key: "applyNewSubscriptionUpdateBatch",
	    value: function () {
	      var _applyNewSubscriptionUpdateBatch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(action, requests) {
	        var _this2 = this;

	        var correlationId, _iterator2, _step2, subscribed, reason, response, newMaxBatchSize, subscriptionTtlInS, isNumeric, isValidTtl, estimatedDeliveryInMs, _isNumeric, isValidTimeout, _iterator3, _step3, attemptedSubscription;

	        return _regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (this.isConnected) {
	                  _context.next = 4;
	                  break;
	                }

	                log$1.debug("Twilsock connection (required for subscription) not ready; waiting\u2026");
	                this.backoff.reset();
	                return _context.abrupt("return");

	              case 4:
	                // Keeping in mind that events may begin flowing _before_ we receive the response
	                requests = this.processLocalActions(action, requests);
	                correlationId = new Date().getTime();
	                _iterator2 = _createForOfIteratorHelper$5(requests);

	                try {
	                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	                    subscribed = _step2.value;
	                    this.recordActionAttemptOn(subscribed, action, correlationId);
	                  }
	                } catch (err) {
	                  _iterator2.e(err);
	                } finally {
	                  _iterator2.f();
	                }

	                reason = this.pendingPokeReason;
	                this.pendingPokeReason = null; // Send this batch to the service

	                _context.prev = 10;
	                _context.next = 13;
	                return this.request(action, correlationId, reason, requests);

	              case 13:
	                response = _context.sent;
	                newMaxBatchSize = response.body.max_batch_size;

	                if (!isNaN(parseInt(newMaxBatchSize)) && isFinite(newMaxBatchSize) && newMaxBatchSize > 0) {
	                  this.maxBatchSize = newMaxBatchSize;
	                }

	                if (!this.subscriptionTtlTimer) {
	                  subscriptionTtlInS = response.body.ttl_in_s;
	                  isNumeric = !isNaN(parseFloat(subscriptionTtlInS)) && isFinite(subscriptionTtlInS);
	                  isValidTtl = isNumeric && subscriptionTtlInS > 0;

	                  if (isValidTtl) {
	                    this.subscriptionTtlTimer = setTimeout(function () {
	                      return _this2.onSubscriptionTtlElapsed();
	                    }, subscriptionTtlInS * 1000);
	                  }
	                }

	                if (action === 'establish') {
	                  estimatedDeliveryInMs = response.body.estimated_delivery_in_ms;
	                  _isNumeric = !isNaN(parseFloat(estimatedDeliveryInMs)) && isFinite(estimatedDeliveryInMs);
	                  isValidTimeout = _isNumeric && estimatedDeliveryInMs > 0;

	                  if (isValidTimeout) {
	                    setTimeout(function () {
	                      return _this2.verifyPokeDelivery(correlationId, estimatedDeliveryInMs, requests);
	                    }, estimatedDeliveryInMs);
	                  } else {
	                    log$1.error("Invalid timeout: ".concat(estimatedDeliveryInMs));
	                  }

	                  requests.filter(function (r) {
	                    return r.pendingCorrelationId === correlationId;
	                  }).forEach(function (r) {
	                    return r.setSubscriptionState('response_in_flight');
	                  });
	                }

	                this.backoff.reset();
	                _context.next = 26;
	                break;

	              case 21:
	                _context.prev = 21;
	                _context.t0 = _context["catch"](10);
	                _iterator3 = _createForOfIteratorHelper$5(requests);

	                try {
	                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	                    attemptedSubscription = _step3.value;
	                    this.recordActionFailureOn(attemptedSubscription, action);
	                  }
	                } catch (err) {
	                  _iterator3.e(err);
	                } finally {
	                  _iterator3.f();
	                }

	                if (_context.t0 instanceof browser$2.TransportUnavailableError) {
	                  log$1.debug("Twilsock connection (required for subscription) not ready (c:".concat(correlationId, "); waiting\u2026"));
	                  this.backoff.reset();
	                } else {
	                  log$1.debug("Failed an attempt to ".concat(action, " subscriptions (c:").concat(correlationId, "); retrying"), _context.t0);
	                  this.persist();
	                }

	              case 26:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this, [[10, 21]]);
	      }));

	      function applyNewSubscriptionUpdateBatch(_x, _x2) {
	        return _applyNewSubscriptionUpdateBatch.apply(this, arguments);
	      }

	      return applyNewSubscriptionUpdateBatch;
	    }()
	  }, {
	    key: "verifyPokeDelivery",
	    value: function verifyPokeDelivery(correlationId, estimatedDeliveryInMs, requests) {
	      var _this3 = this;

	      var lastReceived = this.latestPokeResponseArrivalTimestampByCorrelationId.get(correlationId);
	      var silencePeriod = lastReceived ? new Date().getTime() - lastReceived : estimatedDeliveryInMs;

	      if (silencePeriod >= estimatedDeliveryInMs) {
	        // If we haven't received _any_ responses from that poke request for the duration of estimated_delivery_in_ms, poke again
	        requests.filter(function (r) {
	          return r.pendingCorrelationId === correlationId;
	        }).forEach(function (r) {
	          r.updatePending(null, null);
	          r.retryCount++;

	          _this3.persisted.delete(r.sid);
	        });
	        this.persist();
	        this.latestPokeResponseArrivalTimestampByCorrelationId.delete(correlationId);
	      } else {
	        // Otherwise, the poke responses are probably in transit and we should wait for them
	        var timeoutExtension = estimatedDeliveryInMs - silencePeriod;
	        setTimeout(function () {
	          return _this3.verifyPokeDelivery(correlationId, estimatedDeliveryInMs, requests);
	        }, timeoutExtension);
	      }
	    }
	  }, {
	    key: "processLocalActions",
	    value: function processLocalActions(action, requests) {
	      if (action === 'cancel') {
	        return requests.filter(function (request) {
	          return !request.rejectedWithError;
	        });
	      }

	      return requests;
	    }
	  }, {
	    key: "recordActionAttemptOn",
	    value: function recordActionAttemptOn(attemptedSubscription, action, correlationId) {
	      attemptedSubscription.setSubscriptionState('request_in_flight');

	      if (action === 'establish') {
	        this.persisted.set(attemptedSubscription.sid, attemptedSubscription);
	        attemptedSubscription.updatePending(action, correlationId);
	      } else {
	        // cancel
	        var persistedSubscription = this.persisted.get(attemptedSubscription.sid);

	        if (persistedSubscription) {
	          persistedSubscription.updatePending(action, correlationId);
	        }
	      }
	    }
	  }, {
	    key: "recordActionFailureOn",
	    value: function recordActionFailureOn(attemptedSubscription, action) {
	      attemptedSubscription.setSubscriptionState('none');
	      attemptedSubscription.updatePending(null, null);

	      if (action === 'establish') {
	        this.persisted.delete(attemptedSubscription.sid);
	      }
	    }
	  }, {
	    key: "request",
	    value: function request(action, correlationId, reason, objects) {
	      var requests = objects.map(function (object) {
	        return {
	          object_sid: object.sid,
	          object_type: object.type,
	          last_event_id: action === 'establish' ? object.lastEventId : undefined,
	          index_name: action === 'establish' ? object.indexName : undefined,
	          query_string: action === 'establish' ? object.queryString : undefined
	        };
	      });
	      var retriedRequests = objects.filter(function (a) {
	        return a.retryCount > 0;
	      }).length;
	      log$1.debug("Attempting '".concat(action, "' request (c:").concat(correlationId, "):"), requests);
	      var requestBody = {
	        event_protocol_version: 4,
	        action: action,
	        correlation_id: correlationId,
	        retried_requests: retriedRequests,
	        ttl_in_s: -1,
	        requests: requests
	      };

	      if (reason === 'ttl') {
	        requestBody.reason = reason;
	      }

	      return this.services.network.post(this.services.config.subscriptionsUri, requestBody);
	    }
	    /**
	     * Establishes intent to be subscribed to this entity. That subscription will be effected
	     * asynchronously.
	     * If subscription to the given sid already exists, it will be overwritten.
	     *
	     * @param {String} sid should be a well-formed SID, uniquely identifying a single instance of a Sync entity.
	     * @param {Object} entity should represent the (singular) local representation of this entity.
	     *      Incoming events and modifications to the entity will be directed at the _update() function
	     *      of this provided reference.
	     *
	     * @return undefined
	     */

	  }, {
	    key: "add",
	    value: function add(sid, entity) {
	      log$1.debug("Establishing intent to subscribe to ".concat(sid));
	      var existingSubscription = this.subscriptions.get(sid);

	      if (existingSubscription && entity && existingSubscription.lastEventId === entity.lastEventId) {
	        // If last event id is the same as before - we're fine
	        return;
	      }

	      this.persisted.delete(sid);
	      this.subscriptions.set(sid, new SubscribedEntity(entity));
	      this.persist();
	    }
	    /**
	     * Establishes the caller's intent to no longer be subscribed to this entity. Following this
	     * call, no further events shall be routed to the local representation of the entity, even
	     * though a server-side subscription may take more time to actually terminate.
	     *
	     * @param {string} sid should be any well-formed SID, uniquely identifying a Sync entity.
	     *      This call only has meaningful effect if that entity is subscribed at the
	     *      time of call. Otherwise does nothing.
	     *
	     * @return undefined
	     */

	  }, {
	    key: "remove",
	    value: function remove(sid) {
	      log$1.debug("Establishing intent to unsubscribe from ".concat(sid));
	      var removed = this.subscriptions.delete(sid);

	      if (removed) {
	        this.persist();
	      }
	    }
	    /**
	     * The point of ingestion for remote incoming messages (e.g. new data was written to a map
	     * to which we are subscribed).
	     *
	     * @param {object} message is the full, unaltered body of the incoming notification.
	     *
	     * @return undefined
	     */

	  }, {
	    key: "acceptMessage",
	    value: function acceptMessage(message, isStrictlyOrdered) {
	      log$1.trace('Subscriptions received', message);
	      var eventType = message.event_type;
	      var events = typeof message.events !== 'undefined' ? message.events : [message.event];
	      var correlationId = message.correlation_id;

	      if (correlationId) {
	        this.latestPokeResponseArrivalTimestampByCorrelationId.set(correlationId, new Date().getTime());
	      }

	      var _iterator4 = _createForOfIteratorHelper$5(events),
	          _step4;

	      try {
	        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
	          var event = _step4.value;
	          var matchedEventType = void 0;

	          switch (message.event_type) {
	            case 'subscription_established':
	              this.applySubscriptionEstablishedMessage(event, correlationId);
	              break;

	            case 'subscription_canceled':
	              this.applySubscriptionCancelledMessage(event, correlationId);
	              break;

	            case 'subscription_failed':
	              this.applySubscriptionFailedMessage(event, correlationId);
	              break;

	            case (matchedEventType = eventType.match(/^(?:map|list|document|stream|live_query)_/) || {}).input:
	              {
	                var typedSid = void 0;

	                switch (matchedEventType[0]) {
	                  case 'map_':
	                    typedSid = event.map_sid;
	                    break;

	                  case 'list_':
	                    typedSid = event.list_sid;
	                    break;

	                  case 'document_':
	                    typedSid = event.document_sid;
	                    break;

	                  case 'stream_':
	                    typedSid = event.stream_sid;
	                    break;

	                  case 'live_query_':
	                    typedSid = event.query_id; // hack to mark replay events for LiveQuery as strictly ordered, due to lack of special type of notification for them
	                    // (normally only replay events would have `twilio.sync.event` type, but LiveQuery non-replay events were also assigned
	                    // to this type in legacy clients, which we have to support now; hence a hack)

	                    isStrictlyOrdered = false; // explicitly override it due to code in router.ts does not know about LiveQueries

	                    if (message.strictly_ordered === true) {
	                      isStrictlyOrdered = true;
	                    }

	                    break;

	                  default:
	                    typedSid = undefined;
	                }

	                this.applyEventToSubscribedEntity(typedSid, event, eventType, isStrictlyOrdered);
	                break;
	              }

	            default:
	              log$1.debug("Dropping unknown message type ".concat(eventType));
	              break;
	          }
	        }
	      } catch (err) {
	        _iterator4.e(err);
	      } finally {
	        _iterator4.f();
	      }
	    }
	  }, {
	    key: "applySubscriptionEstablishedMessage",
	    value: function applySubscriptionEstablishedMessage(message, correlationId) {
	      var sid = message.object_sid;
	      var subscriptionIntent = this.persisted.get(message.object_sid);

	      if (subscriptionIntent && subscriptionIntent.pendingCorrelationId === correlationId) {
	        if (message.replay_status === 'interrupted') {
	          log$1.debug("Event Replay for subscription to ".concat(sid, " (c:").concat(correlationId, ") interrupted; continuing eagerly."));
	          subscriptionIntent.updatePending(null, null);
	          this.persisted.delete(subscriptionIntent.sid);
	          this.backoff.reset();
	        } else if (message.replay_status === 'completed') {
	          log$1.debug("Event Replay for subscription to ".concat(sid, " (c:").concat(correlationId, ") completed. Subscription is ready."));
	          subscriptionIntent.complete(message.last_event_id);
	          this.persisted.set(message.object_sid, subscriptionIntent);
	          subscriptionIntent.setSubscriptionState('established');
	          this.backoff.reset();
	        }
	      } else {
	        log$1.debug("Late message for ".concat(message.object_sid, " (c:").concat(correlationId, ") dropped."));
	      }

	      this.persist();
	    }
	  }, {
	    key: "applySubscriptionCancelledMessage",
	    value: function applySubscriptionCancelledMessage(message, correlationId) {
	      var persistedSubscription = this.persisted.get(message.object_sid);

	      if (persistedSubscription && persistedSubscription.pendingCorrelationId === correlationId) {
	        persistedSubscription.updatePending(null, null);
	        persistedSubscription.setSubscriptionState('none');
	        this.persisted.delete(message.object_sid);
	      } else {
	        log$1.debug("Late message for ".concat(message.object_sid, " (c:").concat(correlationId, ") dropped."));
	      }

	      this.persist();
	    }
	  }, {
	    key: "applySubscriptionFailedMessage",
	    value: function applySubscriptionFailedMessage(message, correlationId) {
	      var sid = message.object_sid;
	      var subscriptionIntent = this.subscriptions.get(sid);
	      var subscription = this.persisted.get(sid);

	      if (subscriptionIntent && subscription) {
	        if (subscription.pendingCorrelationId === correlationId) {
	          log$1.error("Failed to subscribe on ".concat(subscription.sid), message.error);
	          subscription.markAsFailed(message);
	          subscription.setSubscriptionState('none');
	        }
	      } else if (!subscriptionIntent && subscription) {
	        this.persisted.delete(sid);
	        subscription.setSubscriptionState('none');
	      }

	      this.persist();
	    }
	  }, {
	    key: "applyEventToSubscribedEntity",
	    value: function applyEventToSubscribedEntity(sid, event, eventType, isStrictlyOrdered) {
	      var _this4 = this;

	      if (!sid) {
	        return;
	      } // Looking for subscription descriptor to check if poke has been completed


	      isStrictlyOrdered = isStrictlyOrdered || function () {
	        var subscription = _this4.persisted.get(sid);

	        return subscription && subscription.isEstablished;
	      }(); // Still searching for subscriptionIntents. User could remove subscription already


	      var subscriptionIntent = this.subscriptions.get(sid);

	      if (subscriptionIntent) {
	        event.type = eventType;
	        subscriptionIntent.update(event, isStrictlyOrdered);
	      } else {
	        log$1.debug("Message dropped for SID '".concat(sid, "', for which there is no subscription."));
	      }
	    }
	  }, {
	    key: "onConnectionStateChanged",
	    value: function onConnectionStateChanged(isConnected) {
	      this.isConnected = isConnected;

	      if (isConnected) {
	        this.poke('reconnect');
	      }
	    }
	  }, {
	    key: "onSubscriptionTtlElapsed",
	    value: function onSubscriptionTtlElapsed() {
	      if (this.isConnected) {
	        this.poke('ttl');
	      }
	    }
	    /**
	     * Prompts a playback of any missed changes made to any subscribed object. This method
	     * should be invoked whenever the connectivity layer has experienced cross-cutting
	     * delivery failures that would affect the entire local sync set. Any tangible result
	     * of this operation will result in calls to the _update() function of subscribed
	     * Sync entities.
	     */

	  }, {
	    key: "poke",
	    value: function poke(reason) {
	      log$1.debug("Triggering event replay for all subscriptions, reason=".concat(reason));
	      this.pendingPokeReason = reason;

	      if (this.subscriptionTtlTimer) {
	        clearTimeout(this.subscriptionTtlTimer);
	        this.subscriptionTtlTimer = null;
	      }

	      var failedSubscriptions = [];

	      var _iterator5 = _createForOfIteratorHelper$5(this.persisted.values()),
	          _step5;

	      try {
	        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
	          var _it = _step5.value;

	          _it.reset();

	          if (_it.rejectedWithError) {
	            failedSubscriptions.push(_it);
	          }
	        }
	      } catch (err) {
	        _iterator5.e(err);
	      } finally {
	        _iterator5.f();
	      }

	      this.persisted.clear();

	      for (var _i = 0, _failedSubscriptions = failedSubscriptions; _i < _failedSubscriptions.length; _i++) {
	        var it = _failedSubscriptions[_i];
	        this.persisted.set(it.sid, it);
	      }

	      this.persist();
	    }
	    /**
	     * Stops all communication, clears any subscription intent, and returns.
	     */

	  }, {
	    key: "shutdown",
	    value: function shutdown() {
	      this.backoff.reset();
	      this.subscriptions.clear();
	    }
	  }]);

	  return Subscriptions;
	}();

	var MINIMUM_RETRY_DELAY = 4000;
	var MAXIMUM_RETRY_DELAY = 60000;
	var MAXIMUM_ATTEMPTS_TIME = 90000;
	var RETRY_DELAY_RANDOMNESS = 0.2;

	function messageFromErrorBody(transportError) {
	  if (transportError.body) {
	    if (transportError.body.message) {
	      return transportError.body.message;
	    }
	  }

	  switch (transportError.status) {
	    case 429:
	      return 'Throttled by server';

	    case 404:
	      return 'Not found from server';

	    default:
	      return 'Error from server';
	  }
	}

	function codeFromErrorBody(trasportError) {
	  if (trasportError.body) {
	    return trasportError.body.code;
	  }

	  return 0;
	}

	function mapTransportError(transportError) {
	  if (transportError.status === 409) {
	    return new SyncNetworkError(messageFromErrorBody(transportError), transportError.status, codeFromErrorBody(transportError), transportError.body);
	  } else if (transportError.status) {
	    return new SyncError(messageFromErrorBody(transportError), transportError.status, codeFromErrorBody(transportError));
	  } else if (transportError instanceof browser$2.TransportUnavailableError) {
	    return transportError;
	  } else {
	    return new SyncError(transportError.message, 0, 0);
	  }
	}
	/**
	 * @classdesc Incapsulates network operations to make it possible to add some optimization/caching strategies
	 */


	var NetworkService = /*#__PURE__*/function () {
	  function NetworkService(clientInfo, config, transport) {
	    _classCallCheck$3(this, NetworkService);

	    this.clientInfo = clientInfo;
	    this.config = config;
	    this.transport = transport;
	  }

	  _createClass$3(NetworkService, [{
	    key: "createHeaders",
	    value: function createHeaders() {
	      return {
	        'Content-Type': 'application/json',
	        'Twilio-Sync-Client-Info': JSON.stringify(this.clientInfo),
	        'Twilio-Request-Id': 'RQ' + uuid_1.v4().replace(/-/g, '')
	      };
	    }
	  }, {
	    key: "backoffConfig",
	    value: function backoffConfig() {
	      return Object.assign({
	        min: MINIMUM_RETRY_DELAY,
	        max: MAXIMUM_RETRY_DELAY,
	        maxAttemptsTime: MAXIMUM_ATTEMPTS_TIME,
	        randomness: RETRY_DELAY_RANDOMNESS
	      }, this.config.backoffConfig);
	    }
	  }, {
	    key: "executeWithRetry",
	    value: function executeWithRetry(request) {
	      var _this = this;

	      var retryWhenThrottled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	      return new Promise(function (resolve, reject) {
	        var codesToRetryOn = [502, 503, 504];

	        if (retryWhenThrottled) {
	          codesToRetryOn.push(429);
	        }

	        var retrier = new Retrier_1(_this.backoffConfig());
	        retrier.on('attempt', function () {
	          request().then(function (result) {
	            return retrier.succeeded(result);
	          }).catch(function (err) {
	            if (codesToRetryOn.includes(err.status)) {
	              var delayOverride = parseInt(err.headers ? err.headers['Retry-After'] : null);
	              retrier.failed(mapTransportError(err), isNaN(delayOverride) ? null : delayOverride * 1000);
	            } else if (err.message === 'Twilsock disconnected') {
	              // Ugly hack. We must make a proper exceptions for twilsock
	              retrier.failed(mapTransportError(err));
	            } else {
	              // Fatal error
	              retrier.removeAllListeners();
	              retrier.cancel();
	              reject(mapTransportError(err));
	            }
	          });
	        });
	        retrier.on('succeeded', function (result) {
	          resolve(result);
	        });
	        retrier.on('cancelled', function (err) {
	          return reject(mapTransportError(err));
	        });
	        retrier.on('failed', function (err) {
	          return reject(mapTransportError(err));
	        });
	        retrier.start();
	      });
	    }
	    /**
	     * Make a GET request by given URI
	     * @Returns Promise<Response> Result of successful get request
	     */

	  }, {
	    key: "get",
	    value: function get(uri) {
	      var _this2 = this;

	      var headers = this.createHeaders();
	      log$1.debug('GET', uri, 'ID:', headers['Twilio-Request-Id']);
	      return this.executeWithRetry(function () {
	        return _this2.transport.get(uri, headers, _this2.config.productId);
	      }, true);
	    }
	  }, {
	    key: "post",
	    value: function post(uri, body, revision) {
	      var _this3 = this;

	      var retryWhenThrottled = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	      var headers = this.createHeaders();

	      if (typeof revision !== 'undefined' && revision !== null) {
	        headers['If-Match'] = revision;
	      }

	      log$1.debug('POST', uri, 'ID:', headers['Twilio-Request-Id']);
	      return this.executeWithRetry(function () {
	        return _this3.transport.post(uri, headers, body, _this3.config.productId);
	      }, retryWhenThrottled);
	    }
	  }, {
	    key: "put",
	    value: function put(uri, body, revision) {
	      var _this4 = this;

	      var headers = this.createHeaders();

	      if (typeof revision !== 'undefined' && revision !== null) {
	        headers['If-Match'] = revision;
	      }

	      log$1.debug('PUT', uri, 'ID:', headers['Twilio-Request-Id']);
	      return this.executeWithRetry(function () {
	        return _this4.transport.put(uri, headers, body, _this4.config.productId);
	      }, false);
	    }
	  }, {
	    key: "delete",
	    value: function _delete(uri) {
	      var _this5 = this;

	      var headers = this.createHeaders();
	      log$1.debug('DELETE', uri, 'ID:', headers['Twilio-Request-Id']);
	      return this.executeWithRetry(function () {
	        return _this5.transport.delete(uri, headers, _this5.config.productId);
	      }, false);
	    }
	  }]);

	  return NetworkService;
	}();

	var SessionStorage = /*#__PURE__*/function () {
	  function SessionStorage(config, storage) {
	    _classCallCheck$3(this, SessionStorage);

	    this.config = config;
	    this.storageId = null;

	    try {
	      this.storage = storage || sessionStorage;
	    } catch (e) {}
	  }

	  _createClass$3(SessionStorage, [{
	    key: "storageKey",
	    value: function storageKey(type, key) {
	      return "".concat(this.storageId, "::").concat(type, "::").concat(key);
	    }
	  }, {
	    key: "isReady",
	    get: function get() {
	      return this.config.sessionStorageEnabled && !!this.storageId;
	    }
	  }, {
	    key: "updateStorageId",
	    value: function updateStorageId(storageId) {
	      this.storageId = storageId;
	    }
	  }, {
	    key: "store",
	    value: function store(type, id, value) {
	      if (!this.isReady) {
	        return null;
	      }

	      return this._store(this.storageKey(type, id), value);
	    }
	  }, {
	    key: "read",
	    value: function read(type, id) {
	      if (!this.isReady) {
	        return null;
	      }

	      return this._read(this.storageKey(type, id));
	    }
	  }, {
	    key: "remove",
	    value: function remove(type, sid, uniqueName) {
	      if (!this.isReady) {
	        return null;
	      }

	      try {
	        this.storage.removeItem(this.storageKey(type, sid));

	        if (uniqueName) {
	          this.storage.removeItem(this.storageKey(type, uniqueName));
	        }
	      } catch (e) {}
	    }
	  }, {
	    key: "update",
	    value: function update(type, sid, uniqueName, patch) {
	      if (!this.isReady) {
	        return null;
	      } // Currently cache may have root stored twice - by sid and by uniqueName
	      // Maybe need to create some index if needed


	      this._apply(this.storageKey(type, sid), patch);

	      if (uniqueName) {
	        this._apply(this.storageKey(type, uniqueName), patch);
	      }
	    }
	  }, {
	    key: "_store",
	    value: function _store(key, value) {
	      try {
	        this.storage.setItem(key, JSON.stringify(value));
	      } catch (e) {}
	    }
	  }, {
	    key: "_read",
	    value: function _read(key) {
	      try {
	        var storedData = this.storage.getItem(key);

	        if (storedData) {
	          return JSON.parse(storedData);
	        }
	      } catch (e) {}

	      return null;
	    }
	  }, {
	    key: "_apply",
	    value: function _apply(key, patch) {
	      var value = this._read(key);

	      if (!value) {
	        return false;
	      }

	      this._store(key, Object.assign(value, patch));
	    }
	  }]);

	  return SessionStorage;
	}();

	function _superPropBase(object, property) {
	  while (!Object.prototype.hasOwnProperty.call(object, property)) {
	    object = _getPrototypeOf$3(object);
	    if (object === null) break;
	  }

	  return object;
	}

	function _get$1() {
	  if (typeof Reflect !== "undefined" && Reflect.get) {
	    _get$1 = Reflect.get;
	  } else {
	    _get$1 = function _get(target, property, receiver) {
	      var base = _superPropBase(target, property);
	      if (!base) return;
	      var desc = Object.getOwnPropertyDescriptor(base, property);

	      if (desc.get) {
	        return desc.get.call(arguments.length < 3 ? target : receiver);
	      }

	      return desc.value;
	    };
	  }

	  return _get$1.apply(this, arguments);
	}

	function _createForOfIteratorHelper$4(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

	function _unsupportedIterableToArray$4(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$4(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen); }

	function _arrayLikeToArray$4(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

	var SyncEntity = /*#__PURE__*/function () {
	  function SyncEntity(services, removalHandler) {
	    _classCallCheck$3(this, SyncEntity);

	    this.services = services;
	    this.removalHandler = removalHandler;
	    this.subscriptionState = 'none';
	    this._attachedListeners = new Map();
	  }

	  _createClass$3(SyncEntity, [{
	    key: "_advanceLastEventId",
	    value: function _advanceLastEventId(eventId, revision) {}
	  }, {
	    key: "reportFailure",
	    value: function reportFailure(err) {
	      if (err.status === 404) {
	        // assume that 404 means that entity has been removed while we were away
	        this.onRemoved(false);
	      } else {
	        this.broadcastEventToListeners('failure', err);
	      }
	    }
	    /**
	     * Subscribe to changes of data entity
	     * @private
	     */

	  }, {
	    key: "_subscribe",
	    value: function _subscribe() {
	      this.services.router._subscribe(this.sid, this);
	    }
	    /**
	     * Unsubscribe from changes of current data entity
	     * @private
	     */

	  }, {
	    key: "_unsubscribe",
	    value: function _unsubscribe() {
	      this.services.router._unsubscribe(this.sid);
	    }
	  }, {
	    key: "_setSubscriptionState",
	    value: function _setSubscriptionState(newState) {
	      this.subscriptionState = newState;
	      this.broadcastEventToListeners('_subscriptionStateChanged', newState);
	    }
	    /**
	     * @public
	     */

	  }, {
	    key: "close",
	    value: function close() {
	      this._unsubscribe();

	      if (this.removalHandler != null) {
	        this.removalHandler(this.type, this.sid, this.uniqueName);
	      }
	    }
	  }, {
	    key: "attach",
	    value: function attach(closeable) {
	      var uuid = closeable.listenerUuid;

	      var existingRecord = this._attachedListeners.get(uuid);

	      if (existingRecord) {
	        return;
	      }

	      if (!this._attachedListeners.size) {
	        // the first one to arrive
	        this._subscribe();
	      }

	      this._attachedListeners.set(uuid, closeable);
	    }
	  }, {
	    key: "detach",
	    value: function detach(listenerUuid) {
	      this._attachedListeners.delete(listenerUuid);

	      if (!this._attachedListeners.size) {
	        // last one out, turn off lights, shut the door
	        this.close(); // invokes unsubscribe and removal handler
	      }
	    }
	  }, {
	    key: "broadcastEventToListeners",
	    value: function broadcastEventToListeners(eventName) {
	      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var _iterator = _createForOfIteratorHelper$4(this._attachedListeners.values()),
	          _step;

	      try {
	        for (_iterator.s(); !(_step = _iterator.n()).done;) {
	          var listener = _step.value;
	          listener.emit.apply(listener, [eventName].concat(args));
	        }
	      } catch (err) {
	        _iterator.e(err);
	      } finally {
	        _iterator.f();
	      }
	    }
	  }]);

	  return SyncEntity;
	}();

	var MergingQueue = /*#__PURE__*/function () {
	  function MergingQueue(inputMergingFunction) {
	    _classCallCheck$3(this, MergingQueue);

	    _defineProperty$2(this, "queuedRequests", []);

	    _defineProperty$2(this, "isRequestInFlight", false);

	    this.inputMergingFunction = inputMergingFunction;
	  }

	  _createClass$3(MergingQueue, [{
	    key: "add",
	    value: function add(input, requestFunction) {
	      var _this = this;

	      var promise = new Promise(function (resolve, reject) {
	        return _this.queuedRequests.push({
	          input: input,
	          requestFunction: requestFunction,
	          resolve: resolve,
	          reject: reject
	        });
	      });
	      this.wakeupQueue();
	      return promise;
	    }
	  }, {
	    key: "squashAndAdd",
	    value: function squashAndAdd(input, requestFunction) {
	      var queueToSquash = this.queuedRequests;
	      this.queuedRequests = [];
	      var reducedInput;

	      if (queueToSquash.length > 0) {
	        reducedInput = queueToSquash.map(function (r) {
	          return r.input;
	        }).reduce(this.inputMergingFunction);
	        reducedInput = this.inputMergingFunction(reducedInput, input);
	      } else {
	        reducedInput = input;
	      }

	      var promise = this.add(reducedInput, requestFunction);
	      queueToSquash.forEach(function (request) {
	        return promise.then(request.resolve, request.reject);
	      });
	      return promise;
	    }
	  }, {
	    key: "isEmpty",
	    value: function isEmpty() {
	      return this.queuedRequests.length === 0 && !this.isRequestInFlight;
	    }
	  }, {
	    key: "wakeupQueue",
	    value: function wakeupQueue() {
	      var _this2 = this;

	      if (this.queuedRequests.length === 0 || this.isRequestInFlight) {
	        return;
	      } else {
	        var requestToExecute = this.queuedRequests.shift();
	        this.isRequestInFlight = true;
	        requestToExecute.requestFunction(requestToExecute.input).then(requestToExecute.resolve, requestToExecute.reject).then(function (__) {
	          _this2.isRequestInFlight = false;

	          _this2.wakeupQueue();
	        });
	      }
	    }
	  }]);

	  return MergingQueue;
	}();
	var NamespacedMergingQueue = /*#__PURE__*/function () {
	  function NamespacedMergingQueue(inputReducer) {
	    _classCallCheck$3(this, NamespacedMergingQueue);

	    _defineProperty$2(this, "queueByNamespaceKey", new Map());

	    this.inputReducer = inputReducer;
	  }

	  _createClass$3(NamespacedMergingQueue, [{
	    key: "add",
	    value: function () {
	      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(namespaceKey, input, requestFunction) {
	        return _regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                return _context.abrupt("return", this.invokeQueueMethod(namespaceKey, function (queue) {
	                  return queue.add(input, requestFunction);
	                }));

	              case 1:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function add(_x, _x2, _x3) {
	        return _add.apply(this, arguments);
	      }

	      return add;
	    }()
	  }, {
	    key: "squashAndAdd",
	    value: function () {
	      var _squashAndAdd = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(namespaceKey, input, requestFunction) {
	        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                return _context2.abrupt("return", this.invokeQueueMethod(namespaceKey, function (queue) {
	                  return queue.squashAndAdd(input, requestFunction);
	                }));

	              case 1:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function squashAndAdd(_x4, _x5, _x6) {
	        return _squashAndAdd.apply(this, arguments);
	      }

	      return squashAndAdd;
	    }()
	  }, {
	    key: "invokeQueueMethod",
	    value: function () {
	      var _invokeQueueMethod = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(namespaceKey, queueMethodInvoker) {
	        var queue, result;
	        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                if (!this.queueByNamespaceKey.has(namespaceKey)) {
	                  this.queueByNamespaceKey.set(namespaceKey, new MergingQueue(this.inputReducer));
	                }

	                queue = this.queueByNamespaceKey.get(namespaceKey);
	                result = queueMethodInvoker(queue);

	                if (this.queueByNamespaceKey.get(namespaceKey).isEmpty()) {
	                  this.queueByNamespaceKey.delete(namespaceKey);
	                }

	                return _context3.abrupt("return", result);

	              case 5:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function invokeQueueMethod(_x7, _x8) {
	        return _invokeQueueMethod.apply(this, arguments);
	      }

	      return invokeQueueMethod;
	    }()
	  }]);

	  return NamespacedMergingQueue;
	}();

	var browser = {};

	Object.defineProperty(browser, '__esModule', {
	  value: true
	});
	var _toConsumableArray$1 = toConsumableArray.exports;
	var _classCallCheck = classCallCheck.exports;
	var _createClass = createClass.exports;
	var _assertThisInitialized = assertThisInitialized.exports;
	var _get = get$1.exports;
	var _inherits = inherits.exports;
	var _possibleConstructorReturn = possibleConstructorReturn.exports;
	var _getPrototypeOf = getPrototypeOf$2.exports;
	var _defineProperty = defineProperty$5.exports;

	function _interopDefaultLegacy$1(e) {
	  return e && _typeof$2(e) === 'object' && 'default' in e ? e : {
	    'default': e
	  };
	}

	var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy$1(_toConsumableArray$1);

	var _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy$1(_classCallCheck);

	var _createClass__default = /*#__PURE__*/_interopDefaultLegacy$1(_createClass);

	var _assertThisInitialized__default = /*#__PURE__*/_interopDefaultLegacy$1(_assertThisInitialized);

	var _get__default = /*#__PURE__*/_interopDefaultLegacy$1(_get);

	var _inherits__default = /*#__PURE__*/_interopDefaultLegacy$1(_inherits);

	var _possibleConstructorReturn__default = /*#__PURE__*/_interopDefaultLegacy$1(_possibleConstructorReturn);

	var _getPrototypeOf__default = /*#__PURE__*/_interopDefaultLegacy$1(_getPrototypeOf);

	var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy$1(_defineProperty);

	var domain; // This constructor is used to store event handlers. Instantiating this is
	// faster than explicitly calling `Object.create(null)` to get a "clean" empty
	// object (tested with v8 v4.9).

	function EventHandlers() {}

	EventHandlers.prototype = Object.create(null);

	function EventEmitter() {
	  EventEmitter.init.call(this);
	} // nodejs oddity
	// require('events') === require('events').EventEmitter


	EventEmitter.EventEmitter = EventEmitter;
	EventEmitter.usingDomains = false;
	EventEmitter.prototype.domain = undefined;
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.

	EventEmitter.defaultMaxListeners = 10;

	EventEmitter.init = function () {
	  this.domain = null;

	  if (EventEmitter.usingDomains) {
	    // if there is an active domain, then attach to it.
	    if (domain.active) ;
	  }

	  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
	    this._events = new EventHandlers();
	    this._eventsCount = 0;
	  }

	  this._maxListeners = this._maxListeners || undefined;
	}; // Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.


	EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
	  if (typeof n !== 'number' || n < 0 || isNaN(n)) throw new TypeError('"n" argument must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	function $getMaxListeners(that) {
	  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
	  return that._maxListeners;
	}

	EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
	  return $getMaxListeners(this);
	}; // These standalone emit* functions are used to optimize calling of event
	// handlers for fast cases because emit() itself often has a variable number of
	// arguments and can be deoptimized because of that. These functions always have
	// the same number of arguments and thus do not get deoptimized, so the code
	// inside them can execute faster.


	function emitNone(handler, isFn, self) {
	  if (isFn) handler.call(self);else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);

	    for (var i = 0; i < len; ++i) {
	      listeners[i].call(self);
	    }
	  }
	}

	function emitOne(handler, isFn, self, arg1) {
	  if (isFn) handler.call(self, arg1);else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);

	    for (var i = 0; i < len; ++i) {
	      listeners[i].call(self, arg1);
	    }
	  }
	}

	function emitTwo(handler, isFn, self, arg1, arg2) {
	  if (isFn) handler.call(self, arg1, arg2);else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);

	    for (var i = 0; i < len; ++i) {
	      listeners[i].call(self, arg1, arg2);
	    }
	  }
	}

	function emitThree(handler, isFn, self, arg1, arg2, arg3) {
	  if (isFn) handler.call(self, arg1, arg2, arg3);else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);

	    for (var i = 0; i < len; ++i) {
	      listeners[i].call(self, arg1, arg2, arg3);
	    }
	  }
	}

	function emitMany(handler, isFn, self, args) {
	  if (isFn) handler.apply(self, args);else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);

	    for (var i = 0; i < len; ++i) {
	      listeners[i].apply(self, args);
	    }
	  }
	}

	EventEmitter.prototype.emit = function emit(type) {
	  var er, handler, len, args, i, events, domain;
	  var doError = type === 'error';
	  events = this._events;
	  if (events) doError = doError && events.error == null;else if (!doError) return false;
	  domain = this.domain; // If there is no 'error' event listener then throw.

	  if (doError) {
	    er = arguments[1];

	    if (domain) {
	      if (!er) er = new Error('Uncaught, unspecified "error" event');
	      er.domainEmitter = this;
	      er.domain = domain;
	      er.domainThrown = false;
	      domain.emit('error', er);
	    } else if (er instanceof Error) {
	      throw er; // Unhandled 'error' event
	    } else {
	      // At least give some kind of context to the user
	      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	      err.context = er;
	      throw err;
	    }

	    return false;
	  }

	  handler = events[type];
	  if (!handler) return false;
	  var isFn = typeof handler === 'function';
	  len = arguments.length;

	  switch (len) {
	    // fast cases
	    case 1:
	      emitNone(handler, isFn, this);
	      break;

	    case 2:
	      emitOne(handler, isFn, this, arguments[1]);
	      break;

	    case 3:
	      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
	      break;

	    case 4:
	      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
	      break;
	    // slower

	    default:
	      args = new Array(len - 1);

	      for (i = 1; i < len; i++) {
	        args[i - 1] = arguments[i];
	      }

	      emitMany(handler, isFn, this, args);
	  }

	  return true;
	};

	function _addListener(target, type, listener, prepend) {
	  var m;
	  var events;
	  var existing;
	  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
	  events = target._events;

	  if (!events) {
	    events = target._events = new EventHandlers();
	    target._eventsCount = 0;
	  } else {
	    // To avoid recursion in the case that type === "newListener"! Before
	    // adding it to the listeners, first emit "newListener".
	    if (events.newListener) {
	      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
	      // this._events to be assigned to a new object

	      events = target._events;
	    }

	    existing = events[type];
	  }

	  if (!existing) {
	    // Optimize the case of one listener. Don't need the extra array object.
	    existing = events[type] = listener;
	    ++target._eventsCount;
	  } else {
	    if (typeof existing === 'function') {
	      // Adding the second element, need to change to array.
	      existing = events[type] = prepend ? [listener, existing] : [existing, listener];
	    } else {
	      // If we've already got an array, just append.
	      if (prepend) {
	        existing.unshift(listener);
	      } else {
	        existing.push(listener);
	      }
	    } // Check for listener leak


	    if (!existing.warned) {
	      m = $getMaxListeners(target);

	      if (m && m > 0 && existing.length > m) {
	        existing.warned = true;
	        var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + type + ' listeners added. ' + 'Use emitter.setMaxListeners() to increase limit');
	        w.name = 'MaxListenersExceededWarning';
	        w.emitter = target;
	        w.type = type;
	        w.count = existing.length;
	        emitWarning(w);
	      }
	    }
	  }

	  return target;
	}

	function emitWarning(e) {
	  typeof console.warn === 'function' ? console.warn(e) : console.log(e);
	}

	EventEmitter.prototype.addListener = function addListener(type, listener) {
	  return _addListener(this, type, listener, false);
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.prependListener = function prependListener(type, listener) {
	  return _addListener(this, type, listener, true);
	};

	function _onceWrap(target, type, listener) {
	  var fired = false;

	  function g() {
	    target.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(target, arguments);
	    }
	  }

	  g.listener = listener;
	  return g;
	}

	EventEmitter.prototype.once = function once(type, listener) {
	  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
	  this.on(type, _onceWrap(this, type, listener));
	  return this;
	};

	EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
	  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
	  this.prependListener(type, _onceWrap(this, type, listener));
	  return this;
	}; // emits a 'removeListener' event iff the listener was removed


	EventEmitter.prototype.removeListener = function removeListener(type, listener) {
	  var list, events, position, i, originalListener;
	  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
	  events = this._events;
	  if (!events) return this;
	  list = events[type];
	  if (!list) return this;

	  if (list === listener || list.listener && list.listener === listener) {
	    if (--this._eventsCount === 0) this._events = new EventHandlers();else {
	      delete events[type];
	      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
	    }
	  } else if (typeof list !== 'function') {
	    position = -1;

	    for (i = list.length; i-- > 0;) {
	      if (list[i] === listener || list[i].listener && list[i].listener === listener) {
	        originalListener = list[i].listener;
	        position = i;
	        break;
	      }
	    }

	    if (position < 0) return this;

	    if (list.length === 1) {
	      list[0] = undefined;

	      if (--this._eventsCount === 0) {
	        this._events = new EventHandlers();
	        return this;
	      } else {
	        delete events[type];
	      }
	    } else {
	      spliceOne(list, position);
	    }

	    if (events.removeListener) this.emit('removeListener', type, originalListener || listener);
	  }

	  return this;
	}; // Alias for removeListener added in NodeJS 10.0
	// https://nodejs.org/api/events.html#events_emitter_off_eventname_listener


	EventEmitter.prototype.off = function (type, listener) {
	  return this.removeListener(type, listener);
	};

	EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
	  var listeners, events;
	  events = this._events;
	  if (!events) return this; // not listening for removeListener, no need to emit

	  if (!events.removeListener) {
	    if (arguments.length === 0) {
	      this._events = new EventHandlers();
	      this._eventsCount = 0;
	    } else if (events[type]) {
	      if (--this._eventsCount === 0) this._events = new EventHandlers();else delete events[type];
	    }

	    return this;
	  } // emit removeListener for all listeners on all events


	  if (arguments.length === 0) {
	    var keys = Object.keys(events);

	    for (var i = 0, key; i < keys.length; ++i) {
	      key = keys[i];
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }

	    this.removeAllListeners('removeListener');
	    this._events = new EventHandlers();
	    this._eventsCount = 0;
	    return this;
	  }

	  listeners = events[type];

	  if (typeof listeners === 'function') {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    do {
	      this.removeListener(type, listeners[listeners.length - 1]);
	    } while (listeners[0]);
	  }

	  return this;
	};

	EventEmitter.prototype.listeners = function listeners(type) {
	  var evlistener;
	  var ret;
	  var events = this._events;
	  if (!events) ret = [];else {
	    evlistener = events[type];
	    if (!evlistener) ret = [];else if (typeof evlistener === 'function') ret = [evlistener.listener || evlistener];else ret = unwrapListeners(evlistener);
	  }
	  return ret;
	};

	EventEmitter.listenerCount = function (emitter, type) {
	  if (typeof emitter.listenerCount === 'function') {
	    return emitter.listenerCount(type);
	  } else {
	    return listenerCount.call(emitter, type);
	  }
	};

	EventEmitter.prototype.listenerCount = listenerCount;

	function listenerCount(type) {
	  var events = this._events;

	  if (events) {
	    var evlistener = events[type];

	    if (typeof evlistener === 'function') {
	      return 1;
	    } else if (evlistener) {
	      return evlistener.length;
	    }
	  }

	  return 0;
	}

	EventEmitter.prototype.eventNames = function eventNames() {
	  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
	}; // About 1.5x faster than the two-arg version of Array#splice().


	function spliceOne(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
	    list[i] = list[k];
	  }

	  list.pop();
	}

	function arrayClone(arr, i) {
	  var copy = new Array(i);

	  while (i--) {
	    copy[i] = arr[i];
	  }

	  return copy;
	}

	function unwrapListeners(arr) {
	  var ret = new Array(arr.length);

	  for (var i = 0; i < ret.length; ++i) {
	    ret[i] = arr[i].listener || arr[i];
	  }

	  return ret;
	}

	function _createSuper$7(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct$7();

	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf__default["default"](Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf__default["default"](this).constructor;

	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return _possibleConstructorReturn__default["default"](this, result);
	  };
	}

	function _isNativeReflectConstruct$7() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	var ReplayEventEmitter = /*#__PURE__*/function (_EventEmitter) {
	  _inherits__default["default"](ReplayEventEmitter, _EventEmitter);

	  var _super = _createSuper$7(ReplayEventEmitter);

	  function ReplayEventEmitter() {
	    var _this;

	    _classCallCheck__default["default"](this, ReplayEventEmitter);

	    _this = _super.call(this);

	    _defineProperty__default["default"](_assertThisInitialized__default["default"](_this), "eventHistory", new Map());

	    return _this;
	  }

	  _createClass__default["default"](ReplayEventEmitter, [{
	    key: "on",
	    value: function on(event, listener) {
	      return _get__default["default"](_getPrototypeOf__default["default"](ReplayEventEmitter.prototype), "on", this).call(this, event, listener);
	    }
	  }, {
	    key: "once",
	    value: function once(event, listener) {
	      return _get__default["default"](_getPrototypeOf__default["default"](ReplayEventEmitter.prototype), "once", this).call(this, event, listener);
	    }
	  }, {
	    key: "off",
	    value: function off(event, listener) {
	      return _get__default["default"](_getPrototypeOf__default["default"](ReplayEventEmitter.prototype), "off", this).call(this, event, listener);
	    }
	  }, {
	    key: "emit",
	    value: function emit(event) {
	      var _get2;

	      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      this.eventHistory.set(event, args);
	      return (_get2 = _get__default["default"](_getPrototypeOf__default["default"](ReplayEventEmitter.prototype), "emit", this)).call.apply(_get2, [this, event].concat(args));
	    }
	  }, {
	    key: "addListener",
	    value: function addListener(event, listener) {
	      return _get__default["default"](_getPrototypeOf__default["default"](ReplayEventEmitter.prototype), "addListener", this).call(this, event, listener);
	    }
	  }, {
	    key: "removeListener",
	    value: function removeListener(event, listener) {
	      return _get__default["default"](_getPrototypeOf__default["default"](ReplayEventEmitter.prototype), "removeListener", this).call(this, event, listener);
	    }
	  }, {
	    key: "addListenerWithReplay",
	    value: function addListenerWithReplay(event, listener) {
	      var historyEntry = this.eventHistory.get(event);

	      if (historyEntry !== undefined) {
	        listener.apply(void 0, _toConsumableArray__default["default"](historyEntry));
	      }

	      return this.addListener(event, listener);
	    }
	  }, {
	    key: "onWithReplay",
	    value: function onWithReplay(event, listener) {
	      return this.addListenerWithReplay(event, listener);
	    }
	  }, {
	    key: "onceWithReplay",
	    value: function onceWithReplay(event, listener) {
	      var historyEntry = this.eventHistory.get(event);

	      if (historyEntry !== undefined) {
	        listener.apply(void 0, _toConsumableArray__default["default"](historyEntry));
	        return this;
	      }

	      return _get__default["default"](_getPrototypeOf__default["default"](ReplayEventEmitter.prototype), "once", this).call(this, event, listener);
	    }
	  }]);

	  return ReplayEventEmitter;
	}(EventEmitter);

	var ReplayEventEmitter_1 = browser.ReplayEventEmitter = ReplayEventEmitter;

	function _createSuper$6(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$6(); return function _createSuperInternal() { var Super = _getPrototypeOf$3(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$3(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$3(this, result); }; }

	function _isNativeReflectConstruct$6() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

	var Closeable = /*#__PURE__*/function (_ReplayEventEmitter) {
	  _inherits$3(Closeable, _ReplayEventEmitter);

	  var _super = _createSuper$6(Closeable);

	  function Closeable() {
	    var _this;

	    _classCallCheck$3(this, Closeable);

	    _this = _super.call(this);
	    _this.closed = false;
	    _this.uuid = uuid_1.v4();
	    return _this;
	  }

	  _createClass$3(Closeable, [{
	    key: "listenerUuid",
	    get: function get() {
	      return this.uuid;
	    }
	  }, {
	    key: "close",
	    value: function close() {
	      this.removeAllListeners();
	      this.closed = true;
	    }
	  }, {
	    key: "ensureNotClosed",
	    value: function ensureNotClosed() {
	      if (this.closed) {
	        throw new Error('Invalid operation on closed object');
	      }
	    }
	  }]);

	  return Closeable;
	}(ReplayEventEmitter_1);

	function _createSuper$5(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$5(); return function _createSuperInternal() { var Super = _getPrototypeOf$3(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$3(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$3(this, result); }; }

	function _isNativeReflectConstruct$5() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

	var SyncDocumentImpl = /*#__PURE__*/function (_SyncEntity) {
	  _inherits$3(SyncDocumentImpl, _SyncEntity);

	  var _super = _createSuper$5(SyncDocumentImpl);

	  /**
	   * @internal
	   */
	  function SyncDocumentImpl(services, descriptor, removalHandler) {
	    var _this;

	    _classCallCheck$3(this, SyncDocumentImpl);

	    _this = _super.call(this, services, removalHandler);

	    _defineProperty$2(_assertThisInitialized$2(_this), "isDeleted", false);

	    var updateRequestReducer = function updateRequestReducer(acc, input) {
	      return typeof input.ttl === 'number' ? {
	        ttl: input.ttl
	      } : acc;
	    };

	    _this.updateMergingQueue = new MergingQueue(updateRequestReducer);
	    _this.descriptor = descriptor;
	    _this.descriptor.data = _this.descriptor.data || {};
	    _this.descriptor.date_updated = new Date(_this.descriptor.date_updated);
	    return _this;
	  } // private props


	  _createClass$3(SyncDocumentImpl, [{
	    key: "uri",
	    get: function get() {
	      return this.descriptor.url;
	    }
	  }, {
	    key: "revision",
	    get: function get() {
	      return this.descriptor.revision;
	    }
	  }, {
	    key: "lastEventId",
	    get: function get() {
	      return this.descriptor.last_event_id;
	    }
	  }, {
	    key: "dateExpires",
	    get: function get() {
	      return this.descriptor.date_expires;
	    }
	  }, {
	    key: "type",
	    get: function get() {
	      return 'document';
	    } // below properties are specific to Insights only

	  }, {
	    key: "indexName",
	    get: function get() {
	      return undefined;
	    }
	  }, {
	    key: "queryString",
	    get: function get() {
	      return undefined;
	    } // public props, documented along with class description

	  }, {
	    key: "sid",
	    get: function get() {
	      return this.descriptor.sid;
	    }
	  }, {
	    key: "data",
	    get: function get() {
	      return this.descriptor.data;
	    }
	  }, {
	    key: "dateUpdated",
	    get: function get() {
	      return this.descriptor.date_updated;
	    }
	  }, {
	    key: "uniqueName",
	    get: function get() {
	      return this.descriptor.unique_name || null;
	    }
	    /**
	     * Update data entity with new data
	     * @private
	     */

	  }, {
	    key: "_update",
	    value: function _update(update) {
	      update.date_created = new Date(update.date_created);

	      switch (update.type) {
	        case 'document_updated':
	          if (update.id <= this.lastEventId) {
	            log$1.trace('Document update skipped, current:', this.lastEventId, ', remote:', update.id);
	            break;
	          }

	          var previousData = this.descriptor.data !== undefined ? deepClone(this.descriptor.data) : null;
	          this.descriptor.last_event_id = update.id;
	          this.descriptor.revision = update.document_revision;
	          this.descriptor.date_updated = update.date_created;
	          this.descriptor.data = update.document_data;
	          this.broadcastEventToListeners('updated', {
	            data: update.document_data,
	            isLocal: false,
	            previousData: previousData
	          });
	          this.services.storage.update(this.type, this.sid, this.uniqueName, {
	            last_event_id: update.id,
	            revision: update.document_revision,
	            date_updated: update.date_created,
	            data: update.document_data
	          });
	          break;

	        case 'document_removed':
	          this.onRemoved(false);
	          break;
	      }
	    }
	  }, {
	    key: "set",
	    value: function () {
	      var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value, metadataUpdates) {
	        var _this2 = this;

	        var input;
	        return _regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                input = metadataUpdates || {};
	                return _context.abrupt("return", this.updateMergingQueue.squashAndAdd(input, function (input) {
	                  return _this2._setUnconditionally(value, input.ttl);
	                }));

	              case 2:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function set(_x, _x2) {
	        return _set.apply(this, arguments);
	      }

	      return set;
	    }()
	  }, {
	    key: "mutate",
	    value: function () {
	      var _mutate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(mutator, metadataUpdates) {
	        var _this3 = this;

	        var input;
	        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                input = metadataUpdates || {};
	                return _context2.abrupt("return", this.updateMergingQueue.add(input, function (input) {
	                  return _this3._setWithIfMatch(mutator, input.ttl);
	                }));

	              case 2:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function mutate(_x3, _x4) {
	        return _mutate.apply(this, arguments);
	      }

	      return mutate;
	    }()
	  }, {
	    key: "update",
	    value: function () {
	      var _update2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(obj, metadataUpdates) {
	        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                return _context3.abrupt("return", this.mutate(function (remote) {
	                  return Object.assign(remote, obj);
	                }, metadataUpdates));

	              case 1:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function update(_x5, _x6) {
	        return _update2.apply(this, arguments);
	      }

	      return update;
	    }()
	  }, {
	    key: "setTtl",
	    value: function () {
	      var _setTtl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ttl) {
	        var response;
	        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                _context4.next = 2;
	                return this._postUpdateToServer({
	                  ttl: ttl
	                });

	              case 2:
	                response = _context4.sent;
	                this.descriptor.date_expires = response.date_expires;

	              case 4:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this);
	      }));

	      function setTtl(_x7) {
	        return _setTtl.apply(this, arguments);
	      }

	      return setTtl;
	    }()
	    /**
	     * @private
	     */

	  }, {
	    key: "_setUnconditionally",
	    value: function () {
	      var _setUnconditionally2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(value, ttl) {
	        var result;
	        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                _context5.next = 2;
	                return this._postUpdateToServer({
	                  data: value,
	                  revision: undefined,
	                  ttl: ttl
	                });

	              case 2:
	                result = _context5.sent;

	                this._handleSuccessfulUpdateResult(result);

	                return _context5.abrupt("return", this.descriptor.data);

	              case 5:
	              case "end":
	                return _context5.stop();
	            }
	          }
	        }, _callee5, this);
	      }));

	      function _setUnconditionally(_x8, _x9) {
	        return _setUnconditionally2.apply(this, arguments);
	      }

	      return _setUnconditionally;
	    }()
	    /**
	     * @private
	     */

	  }, {
	    key: "_setWithIfMatch",
	    value: function () {
	      var _setWithIfMatch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(mutatorFunction, ttl) {
	        var data, revision, result;
	        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
	          while (1) {
	            switch (_context6.prev = _context6.next) {
	              case 0:
	                data = mutatorFunction(deepClone(this.descriptor.data));

	                if (!data) {
	                  _context6.next = 22;
	                  break;
	                }

	                revision = this.revision;
	                _context6.prev = 3;
	                _context6.next = 6;
	                return this._postUpdateToServer({
	                  data: data,
	                  revision: revision,
	                  ttl: ttl
	                });

	              case 6:
	                result = _context6.sent;

	                this._handleSuccessfulUpdateResult(result);

	                return _context6.abrupt("return", this.descriptor.data);

	              case 11:
	                _context6.prev = 11;
	                _context6.t0 = _context6["catch"](3);

	                if (!(_context6.t0.status === 412)) {
	                  _context6.next = 19;
	                  break;
	                }

	                _context6.next = 16;
	                return this._softSync();

	              case 16:
	                return _context6.abrupt("return", this._setWithIfMatch(mutatorFunction));

	              case 19:
	                throw _context6.t0;

	              case 20:
	                _context6.next = 23;
	                break;

	              case 22:
	                return _context6.abrupt("return", this.descriptor.data);

	              case 23:
	              case "end":
	                return _context6.stop();
	            }
	          }
	        }, _callee6, this, [[3, 11]]);
	      }));

	      function _setWithIfMatch(_x10, _x11) {
	        return _setWithIfMatch2.apply(this, arguments);
	      }

	      return _setWithIfMatch;
	    }()
	    /**
	     * @private
	     */

	  }, {
	    key: "_handleSuccessfulUpdateResult",
	    value: function _handleSuccessfulUpdateResult(result) {
	      // Ignore returned value if we already got a newer one
	      if (result.last_event_id <= this.descriptor.last_event_id) {
	        return;
	      }

	      var previousData = this.descriptor.data !== undefined ? deepClone(this.descriptor.data) : null;
	      this.descriptor.revision = result.revision;
	      this.descriptor.data = result.data;
	      this.descriptor.last_event_id = result.last_event_id;
	      this.descriptor.date_expires = result.date_expires;
	      this.descriptor.date_updated = new Date(result.date_updated);
	      this.services.storage.update(this.type, this.sid, this.uniqueName, {
	        last_event_id: result.last_event_id,
	        revision: result.revision,
	        date_updated: result.date_updated,
	        data: result.data
	      });
	      this.broadcastEventToListeners('updated', {
	        data: this.descriptor.data,
	        isLocal: true,
	        previousData: previousData
	      });
	    }
	    /**
	     * @private
	     */

	  }, {
	    key: "_postUpdateToServer",
	    value: function () {
	      var _postUpdateToServer2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(request) {
	        var requestBody, ifMatch, response;
	        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
	          while (1) {
	            switch (_context7.prev = _context7.next) {
	              case 0:
	                if (this.isDeleted) {
	                  _context7.next = 17;
	                  break;
	                }

	                requestBody = {
	                  data: request.data
	                };

	                if (request.ttl !== undefined) {
	                  requestBody.ttl = request.ttl;
	                }

	                ifMatch = request.revision;
	                _context7.prev = 4;
	                _context7.next = 7;
	                return this.services.network.post(this.uri, requestBody, ifMatch);

	              case 7:
	                response = _context7.sent;
	                return _context7.abrupt("return", {
	                  revision: response.body.revision,
	                  data: request.data,
	                  last_event_id: response.body.last_event_id,
	                  date_updated: response.body.date_updated,
	                  date_expires: response.body.date_expires
	                });

	              case 11:
	                _context7.prev = 11;
	                _context7.t0 = _context7["catch"](4);

	                if (_context7.t0.status === 404) {
	                  this.onRemoved(false);
	                }

	                throw _context7.t0;

	              case 15:
	                _context7.next = 18;
	                break;

	              case 17:
	                return _context7.abrupt("return", Promise.reject(new SyncError('The Document has been removed', 404, 54100)));

	              case 18:
	              case "end":
	                return _context7.stop();
	            }
	          }
	        }, _callee7, this, [[4, 11]]);
	      }));

	      function _postUpdateToServer(_x12) {
	        return _postUpdateToServer2.apply(this, arguments);
	      }

	      return _postUpdateToServer;
	    }()
	    /**
	     * Get new data from server
	     * @private
	     */

	  }, {
	    key: "_softSync",
	    value: function () {
	      var _softSync2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
	        var _this4 = this;

	        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
	          while (1) {
	            switch (_context8.prev = _context8.next) {
	              case 0:
	                return _context8.abrupt("return", this.services.network.get(this.uri).then(function (response) {
	                  var event = {
	                    type: 'document_updated',
	                    id: response.body.last_event_id,
	                    document_revision: response.body.revision,
	                    document_data: response.body.data,
	                    date_created: response.body.date_updated
	                  };

	                  _this4._update(event);

	                  return _this4;
	                }).catch(function (err) {
	                  if (err.status === 404) {
	                    _this4.onRemoved(false);
	                  } else {
	                    log$1.error("Can't get updates for ".concat(_this4.sid, ":"), err);
	                  }
	                }));

	              case 1:
	              case "end":
	                return _context8.stop();
	            }
	          }
	        }, _callee8, this);
	      }));

	      function _softSync() {
	        return _softSync2.apply(this, arguments);
	      }

	      return _softSync;
	    }()
	  }, {
	    key: "onRemoved",
	    value: function onRemoved(locally) {
	      if (this.isDeleted) {
	        return;
	      }

	      var previousData = this.descriptor.data !== undefined ? deepClone(this.descriptor.data) : null;
	      this.isDeleted = true;

	      this._unsubscribe();

	      this.removalHandler(this.type, this.sid, this.uniqueName);
	      this.broadcastEventToListeners('removed', {
	        isLocal: locally,
	        previousData: previousData
	      });
	    }
	  }, {
	    key: "removeDocument",
	    value: function () {
	      var _removeDocument = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
	        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
	          while (1) {
	            switch (_context9.prev = _context9.next) {
	              case 0:
	                if (this.isDeleted) {
	                  _context9.next = 6;
	                  break;
	                }

	                _context9.next = 3;
	                return this.services.network.delete(this.uri);

	              case 3:
	                this.onRemoved(true);
	                _context9.next = 7;
	                break;

	              case 6:
	                return _context9.abrupt("return", Promise.reject(new SyncError('The Document has been removed', 404, 54100)));

	              case 7:
	              case "end":
	                return _context9.stop();
	            }
	          }
	        }, _callee9, this);
	      }));

	      function removeDocument() {
	        return _removeDocument.apply(this, arguments);
	      }

	      return removeDocument;
	    }()
	  }], [{
	    key: "type",
	    get: function get() {
	      return 'document';
	    }
	  }]);

	  return SyncDocumentImpl;
	}(SyncEntity);
	/**
	 * Represents a Sync document, the contents of which is a single JSON object.
	 * Use the {@link SyncClient.document} method to obtain a reference to a Sync document.
	 * Information about rate limits can be found [here](https://www.twilio.com/docs/sync/limits).
	 */


	var SyncDocument = /*#__PURE__*/function (_Closeable) {
	  _inherits$3(SyncDocument, _Closeable);

	  var _super2 = _createSuper$5(SyncDocument);

	  /**
	   * @internal
	   */
	  function SyncDocument(syncDocumentImpl) {
	    var _this5;

	    _classCallCheck$3(this, SyncDocument);

	    _this5 = _super2.call(this);
	    _this5.syncDocumentImpl = syncDocumentImpl;

	    _this5.syncDocumentImpl.attach(_assertThisInitialized$2(_this5));

	    return _this5;
	  }
	  /**
	   * Fired when the document is removed, regardless of whether the remover was local or remote.
	   *
	   * Parameters:
	   * 1. object `args` - info object provided with the event. It has following properties:
	   *     * boolean `isLocal` - is true if document was removed by a local actor, false otherwise
	   *     * object `previousData` - contains a snapshot of the document data before removal
	   * @example
	   * ```typescript
	   * document.on('removed', (args) => {
	   *   console.log(`Document ${document.sid} was removed`);
	   *   console.log('args.isLocal:', args.isLocal);
	   *   console.log('args.previousData:', args.previousData);
	   * });
	   * ```
	   * @event
	   */

	  /**
	   * Fired when the document's contents have changed, regardless of whether the updater was local or remote.
	   *
	   * Parameters:
	   * 1. object `args` - info object provided with the event. It has the following properties:
	   *     * boolean `isLocal` - is true if document was updated by a local actor, false otherwise
	   *     * object `data` - a snapshot of the document's new contents
	   *     * object `previousData` - contains a snapshot of the document data before the update
	   * @example
	   * ```typescript
	   * document.on('updated', (args) => {
	   *   console.log(`Document ${document.sid} was updated`);
	   *   console.log('args.data:', args.data);
	   *   console.log('args.isLocal:', args.isLocal);
	   *   console.log('args.previousData:', args.previousData);
	   * });
	   * ```
	   * @event
	   */


	  _createClass$3(SyncDocument, [{
	    key: "uri",
	    get: // private props
	    function get() {
	      return this.syncDocumentImpl.uri;
	    }
	  }, {
	    key: "revision",
	    get: function get() {
	      return this.syncDocumentImpl.revision;
	    }
	  }, {
	    key: "lastEventId",
	    get: function get() {
	      return this.syncDocumentImpl.lastEventId;
	    }
	  }, {
	    key: "dateExpires",
	    get: function get() {
	      return this.syncDocumentImpl.dateExpires;
	    }
	  }, {
	    key: "type",
	    get: function get() {
	      return SyncDocumentImpl.type;
	    }
	    /**
	     * The immutable identifier of this document, assigned by the system.
	     */

	  }, {
	    key: "sid",
	    get: function get() {
	      return this.syncDocumentImpl.sid;
	    }
	    /**
	     * The contents of this document.
	     */

	  }, {
	    key: "data",
	    get: function get() {
	      return this.syncDocumentImpl.data;
	    }
	    /**
	     * Date when the document was last updated.
	     */

	  }, {
	    key: "dateUpdated",
	    get: function get() {
	      return this.syncDocumentImpl.dateUpdated;
	    }
	    /**
	     * An optional immutable identifier that may be assigned by the programmer
	     * to this document during creation. Globally unique among other documents.
	     */

	  }, {
	    key: "uniqueName",
	    get: function get() {
	      return this.syncDocumentImpl.uniqueName;
	    }
	  }, {
	    key: "set",
	    value:
	    /**
	     * Assign new contents to this document. The current data will be overwritten.
	     * @param data The new contents to assign.
	     * @param metadataUpdates New document metadata.
	     * @return A promise resolving to the new data of the document.
	     * @example
	     * ```typescript
	     * // Say, the Document data is `{ name: 'John Smith', age: 34 }`
	     * document.set({ name: 'Barbara Oaks' }, { ttl: 86400 })
	     *   .then((newValue) => {
	     *     // Now the Document data is `{ name: 'Barbara Oaks' }`
	     *     console.log('Document set() successful, new data:', newValue);
	     *   })
	     *   .catch((error) => {
	     *     console.error('Document set() failed', error);
	     *   });
	     * ```
	     */
	    function () {
	      var _set2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(data, metadataUpdates) {
	        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
	          while (1) {
	            switch (_context10.prev = _context10.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context10.abrupt("return", this.syncDocumentImpl.set(data, metadataUpdates));

	              case 2:
	              case "end":
	                return _context10.stop();
	            }
	          }
	        }, _callee10, this);
	      }));

	      function set(_x13, _x14) {
	        return _set2.apply(this, arguments);
	      }

	      return set;
	    }()
	    /**
	     * Schedules a modification to this document that will apply a mutation function.
	     * @param mutator A function that outputs new data based on the existing data.
	     * May be called multiple times, particularly if this document is modified concurrently by remote code.
	     * If the mutation ultimately succeeds, the document will have made the particular transition described
	     * by this function.
	     * @param metadataUpdates New document metadata.
	     * @return Resolves with the most recent Document state, whether the output of a
	     * successful mutation or a state that prompted graceful cancellation (mutator returned `null`).
	     * @example
	     * ```typescript
	     * const mutatorFunction = (currentValue) => {
	     *     currentValue.viewCount = (currentValue.viewCount ?? 0) + 1;
	     *     return currentValue;
	     * };
	     * document.mutate(mutatorFunction, { ttl: 86400 }))
	     *   .then((newValue) => {
	     *     console.log('Document mutate() successful, new data:', newValue);
	     *   })
	     *   .catch((error) => {
	     *     console.error('Document mutate() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "mutate",
	    value: function () {
	      var _mutate2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(mutator, metadataUpdates) {
	        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
	          while (1) {
	            switch (_context11.prev = _context11.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context11.abrupt("return", this.syncDocumentImpl.mutate(mutator, metadataUpdates));

	              case 2:
	              case "end":
	                return _context11.stop();
	            }
	          }
	        }, _callee11, this);
	      }));

	      function mutate(_x15, _x16) {
	        return _mutate2.apply(this, arguments);
	      }

	      return mutate;
	    }()
	    /**
	     * Modify a document by appending new fields (or by overwriting existing ones) with the values from the provided Object.
	     * This is equivalent to:
	     * ```typescript
	     * document.mutate((currentValue) => Object.assign(currentValue, obj));
	     * ```
	     * @param obj Specifies the particular (top-level) attributes that will receive new values.
	     * @param metadataUpdates New document metadata.
	     * @return A promise resolving to the new data of the document.
	     * @example
	     * ```typescript
	     * // Say, the Document data is `{ name: 'John Smith' }`
	     * document.update({ age: 34 }, { ttl: 86400 })
	     *   .then((newValue) => {
	     *     // Now the Document data is `{ name: 'John Smith', age: 34 }`
	     *     console.log('Document update() successful, new data:', newValue);
	     *   })
	     *   .catch((error) => {
	     *     console.error('Document update() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "update",
	    value: function () {
	      var _update3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(obj, metadataUpdates) {
	        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
	          while (1) {
	            switch (_context12.prev = _context12.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context12.abrupt("return", this.syncDocumentImpl.update(obj, metadataUpdates));

	              case 2:
	              case "end":
	                return _context12.stop();
	            }
	          }
	        }, _callee12, this);
	      }));

	      function update(_x17, _x18) {
	        return _update3.apply(this, arguments);
	      }

	      return update;
	    }()
	    /**
	     * Update the time-to-live of the document.
	     * @param ttl Specifies the time-to-live in seconds after which the document is subject to automatic deletion. The value 0 means infinity.
	     * @return A promise that resolves after the TTL update was successful.
	     * @example
	     * ```typescript
	     * document.setTtl(3600)
	     *   .then(() => {
	     *     console.log('Document setTtl() successful');
	     *   })
	     *   .catch((error) => {
	     *     console.error('Document setTtl() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "setTtl",
	    value: function () {
	      var _setTtl2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(ttl) {
	        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
	          while (1) {
	            switch (_context13.prev = _context13.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context13.abrupt("return", this.syncDocumentImpl.setTtl(ttl));

	              case 2:
	              case "end":
	                return _context13.stop();
	            }
	          }
	        }, _callee13, this);
	      }));

	      function setTtl(_x19) {
	        return _setTtl2.apply(this, arguments);
	      }

	      return setTtl;
	    }()
	    /**
	     * Delete a document.
	     * @return A promise which resolves if (and only if) the document is ultimately deleted.
	     * @example
	     * ```typescript
	     * document.removeDocument()
	     *   .then(() => {
	     *     console.log('Document removeDocument() successful');
	     *   })
	     *   .catch((error) => {
	     *     console.error('Document removeDocument() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "removeDocument",
	    value: function () {
	      var _removeDocument2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {
	        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
	          while (1) {
	            switch (_context14.prev = _context14.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context14.abrupt("return", this.syncDocumentImpl.removeDocument());

	              case 2:
	              case "end":
	                return _context14.stop();
	            }
	          }
	        }, _callee14, this);
	      }));

	      function removeDocument() {
	        return _removeDocument2.apply(this, arguments);
	      }

	      return removeDocument;
	    }()
	    /**
	     * Conclude work with the document instance and remove all event listeners attached to it.
	     * Any subsequent operation on this object will be rejected with error.
	     * Other local copies of this document will continue operating and receiving events normally.
	     * @example
	     * ```typescript
	     * document.close();
	     * ```
	     */

	  }, {
	    key: "close",
	    value: function close() {
	      _get$1(_getPrototypeOf$3(SyncDocument.prototype), "close", this).call(this);

	      this.syncDocumentImpl.detach(this.listenerUuid);
	    }
	  }], [{
	    key: "type",
	    get: function get() {
	      return SyncDocumentImpl.type;
	    }
	  }]);

	  return SyncDocument;
	}(Closeable);

	_defineProperty$2(SyncDocument, "removed", 'removed');

	_defineProperty$2(SyncDocument, "updated", 'updated');

	__decorate([validateTypesAsync_1(pureObject_1, ['undefined', objectSchema_1('document metadata', {
	  ttl: [nonNegativeInteger_1, 'undefined']
	})]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object]), __metadata("design:returntype", Promise)], SyncDocument.prototype, "set", null);

	__decorate([validateTypesAsync_1('function', ['undefined', objectSchema_1('document metadata', {
	  ttl: [nonNegativeInteger_1, 'undefined']
	})]), __metadata("design:type", Function), __metadata("design:paramtypes", [Function, Object]), __metadata("design:returntype", Promise)], SyncDocument.prototype, "mutate", null);

	__decorate([validateTypesAsync_1(pureObject_1, ['undefined', objectSchema_1('document metadata', {
	  ttl: [nonNegativeInteger_1, 'undefined']
	})]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object]), __metadata("design:returntype", Promise)], SyncDocument.prototype, "update", null);

	__decorate([validateTypesAsync_1(nonNegativeInteger_1), __metadata("design:type", Function), __metadata("design:paramtypes", [Number]), __metadata("design:returntype", Promise)], SyncDocument.prototype, "setTtl", null);

	/**
	 * Represents an individual element in a Sync list.
	 */
	var SyncListItem = /*#__PURE__*/function () {
	  /**
	   * @param descriptor Item descriptor
	   * @internal
	   */
	  function SyncListItem(descriptor) {
	    _classCallCheck$3(this, SyncListItem);

	    this.descriptor = descriptor;
	  }

	  _createClass$3(SyncListItem, [{
	    key: "url",
	    get: function get() {
	      return this.descriptor.url;
	    }
	  }, {
	    key: "revision",
	    get: function get() {
	      return this.descriptor.revision;
	    }
	  }, {
	    key: "lastEventId",
	    get: function get() {
	      return this.descriptor.lastEventId;
	    }
	    /**
	     * Date when the list item was last updated.
	     */

	  }, {
	    key: "dateUpdated",
	    get: function get() {
	      return this.descriptor.dateUpdated;
	    }
	  }, {
	    key: "dateExpires",
	    get: function get() {
	      return this.descriptor.dateExpires;
	    }
	    /**
	     * The index, within the containing list, of this item. This index is stable;
	     * even if lower-indexed items are removed, this index will remain as is.
	     */

	  }, {
	    key: "index",
	    get: function get() {
	      return this.descriptor.index;
	    }
	    /**
	     * The contents of the item.
	     */

	  }, {
	    key: "data",
	    get: function get() {
	      return this.descriptor.data;
	    }
	    /**
	     * CachedValue interface.
	     */

	  }, {
	    key: "cacheKey",
	    get: function get() {
	      return this.index;
	    }
	    /**
	     * @internal
	     */

	  }, {
	    key: "update",
	    value: function update(eventId, revision, data, dateUpdated) {
	      this.descriptor.lastEventId = eventId;
	      this.descriptor.revision = revision;
	      this.descriptor.data = data;
	      this.descriptor.dateUpdated = dateUpdated;
	      return this;
	    }
	    /**
	     * @internal
	     */

	  }, {
	    key: "updateDateExpires",
	    value: function updateDateExpires(dateExpires) {
	      this.descriptor.dateExpires = dateExpires;
	    }
	  }]);

	  return SyncListItem;
	}();

	/**
	 * Pagination helper class.
	 */
	var Paginator = /*#__PURE__*/function () {
	  /**
	   * Array of elements on current page.
	   */

	  /**
	   * @internal
	   */
	  function Paginator(items, source) {
	    var prevItemId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	    var nextItemId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

	    _classCallCheck$3(this, Paginator);

	    this.items = items;
	    this.source = source;
	    this.prevPageItemId = prevItemId;
	    this.nextPageItemId = nextItemId;
	  }
	  /**
	   * Request next page.
	   * Does not modify existing object.
	   */


	  _createClass$3(Paginator, [{
	    key: "nextPage",
	    value: function () {
	      var _nextPage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
	        return _regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (this.hasNextPage) {
	                  _context.next = 2;
	                  break;
	                }

	                throw new Error('No next page');

	              case 2:
	                return _context.abrupt("return", this.source({
	                  nextPageItemId: this.nextPageItemId
	                }));

	              case 3:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function nextPage() {
	        return _nextPage.apply(this, arguments);
	      }

	      return nextPage;
	    }()
	    /**
	     * Request previous page.
	     * Does not modify existing object.
	     */

	  }, {
	    key: "prevPage",
	    value: function () {
	      var _prevPage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
	        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                if (this.hasPrevPage) {
	                  _context2.next = 2;
	                  break;
	                }

	                throw new Error('No previous page');

	              case 2:
	                return _context2.abrupt("return", this.source({
	                  prevPageItemId: this.prevPageItemId
	                }));

	              case 3:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function prevPage() {
	        return _prevPage.apply(this, arguments);
	      }

	      return prevPage;
	    }()
	    /**
	     * Indicates the existence of the next page.
	     */

	  }, {
	    key: "hasNextPage",
	    get: function get() {
	      return this.nextPageItemId !== null;
	    }
	    /**
	     * Indicates the existence of the previous page.
	     */

	  }, {
	    key: "hasPrevPage",
	    get: function get() {
	      return this.prevPageItemId !== null;
	    }
	  }]);

	  return Paginator;
	}();

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) return _arrayLikeToArray$6(arr);
	}

	function _iterableToArray(iter) {
	  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
	}

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _toConsumableArray(arr) {
	  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$6(arr) || _nonIterableSpread();
	}

	var $ = _export;
	var aFunction = aFunction$9;
	var toObject = toObject$g;
	var toLength = toLength$m;
	var toString = toString$b;
	var fails = fails$z;
	var internalSort = arraySort;
	var arrayMethodIsStrict = arrayMethodIsStrict$4;
	var FF = engineFfVersion;
	var IE_OR_EDGE = engineIsIeOrEdge;
	var V8 = engineV8Version;
	var WEBKIT = engineWebkitVersion;

	var test = [];
	var nativeSort = test.sort;

	// IE8-
	var FAILS_ON_UNDEFINED = fails(function () {
	  test.sort(undefined);
	});
	// V8 bug
	var FAILS_ON_NULL = fails(function () {
	  test.sort(null);
	});
	// Old WebKit
	var STRICT_METHOD = arrayMethodIsStrict('sort');

	var STABLE_SORT = !fails(function () {
	  // feature detection can be too slow, so check engines versions
	  if (V8) return V8 < 70;
	  if (FF && FF > 3) return;
	  if (IE_OR_EDGE) return true;
	  if (WEBKIT) return WEBKIT < 603;

	  var result = '';
	  var code, chr, value, index;

	  // generate an array with more 512 elements (Chakra and old V8 fails only in this case)
	  for (code = 65; code < 76; code++) {
	    chr = String.fromCharCode(code);

	    switch (code) {
	      case 66: case 69: case 70: case 72: value = 3; break;
	      case 68: case 71: value = 4; break;
	      default: value = 2;
	    }

	    for (index = 0; index < 47; index++) {
	      test.push({ k: chr + index, v: value });
	    }
	  }

	  test.sort(function (a, b) { return b.v - a.v; });

	  for (index = 0; index < test.length; index++) {
	    chr = test[index].k.charAt(0);
	    if (result.charAt(result.length - 1) !== chr) result += chr;
	  }

	  return result !== 'DGBEFHACIJK';
	});

	var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;

	var getSortCompare = function (comparefn) {
	  return function (x, y) {
	    if (y === undefined) return -1;
	    if (x === undefined) return 1;
	    if (comparefn !== undefined) return +comparefn(x, y) || 0;
	    return toString(x) > toString(y) ? 1 : -1;
	  };
	};

	// `Array.prototype.sort` method
	// https://tc39.es/ecma262/#sec-array.prototype.sort
	$({ target: 'Array', proto: true, forced: FORCED }, {
	  sort: function sort(comparefn) {
	    if (comparefn !== undefined) aFunction(comparefn);

	    var array = toObject(this);

	    if (STABLE_SORT) return comparefn === undefined ? nativeSort.call(array) : nativeSort.call(array, comparefn);

	    var items = [];
	    var arrayLength = toLength(array.length);
	    var itemsLength, index;

	    for (index = 0; index < arrayLength; index++) {
	      if (index in array) items.push(array[index]);
	    }

	    items = internalSort(items, getSortCompare(comparefn));
	    itemsLength = items.length;
	    index = 0;

	    while (index < itemsLength) array[index] = items[index++];
	    while (index < arrayLength) delete array[index++];

	    return array;
	  }
	});

	function _createForOfIteratorHelper$3(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

	function _unsupportedIterableToArray$3(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$3(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen); }

	function _arrayLikeToArray$3(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

	var Node = /*#__PURE__*/function () {
	  function Node(key, value) {
	    _classCallCheck$3(this, Node);

	    this.balanceFactor = 0;
	    this.key = key;
	    this.value = value;
	    this.parent = null;
	    this.left = null;
	    this.right = null;
	  }

	  _createClass$3(Node, [{
	    key: "isRoot",
	    get: function get() {
	      return this.parent === null;
	    }
	  }, {
	    key: "isLeaf",
	    get: function get() {
	      return this.left === null && this.right === null;
	    }
	  }, {
	    key: "isLeftChild",
	    get: function get() {
	      return this.parent.left === this;
	    }
	  }, {
	    key: "update",
	    value: function update(value) {
	      this.value = value;
	    }
	  }, {
	    key: "replace",
	    value: function replace(target, replacement) {
	      if (!target) {
	        return;
	      }

	      if (this.left === replacement) {
	        this.left = replacement;
	      } else if (this.right === replacement) {
	        this.right = replacement;
	      }
	    }
	  }]);

	  return Node;
	}();
	/**
	 * @property length
	 */


	var TreeMap = /*#__PURE__*/function (_Symbol$iterator) {
	  function TreeMap(less, equal) {
	    _classCallCheck$3(this, TreeMap);

	    this.isLessThan = less || function (x, y) {
	      return x < y;
	    };

	    this.isEqual = equal || function (x, y) {
	      return x === y;
	    };

	    this.root = null;
	    this.count = null;
	  }

	  _createClass$3(TreeMap, [{
	    key: "size",
	    get: function get() {
	      return this.count;
	    }
	  }, {
	    key: "clear",
	    value: function clear() {
	      this.root = null;
	      this.count = 0;
	    }
	  }, {
	    key: "set",
	    value: function set(key, value) {
	      var node = this.getNode(key);

	      if (node) {
	        node.update(value);
	      } else {
	        this.insert(key, value);
	      } // return node;

	    }
	  }, {
	    key: "insert",
	    value: function insert(key, value) {
	      var node = new Node(key, value);
	      this.count++;

	      if (!this.root) {
	        this.root = node; // return node;

	        return;
	      }

	      var currNode = this.root;

	      for (;;) {
	        if (this.isLessThan(key, currNode.key)) {
	          if (currNode.left) {
	            currNode = currNode.left;
	          } else {
	            currNode.left = node;
	            break;
	          }
	        } else {
	          if (currNode.right) {
	            // eslint-disable-line no-lonely-if
	            currNode = currNode.right;
	          } else {
	            currNode.right = node;
	            break;
	          }
	        }
	      }

	      node.parent = currNode;
	      currNode = node;

	      while (currNode.parent) {
	        var parent = currNode.parent;
	        var prevBalanceFactor = parent.balanceFactor;

	        if (currNode.isLeftChild) {
	          parent.balanceFactor++;
	        } else {
	          parent.balanceFactor--;
	        }

	        if (Math.abs(parent.balanceFactor) < Math.abs(prevBalanceFactor)) {
	          break;
	        }

	        if (parent.balanceFactor < -1 || parent.balanceFactor > 1) {
	          this.rebalance(parent);
	          break;
	        }

	        currNode = parent;
	      } // return node;

	    }
	  }, {
	    key: "get",
	    value: function get(key) {
	      var currentNode = this.root;

	      while (currentNode) {
	        if (this.isEqual(key, currentNode.key)) {
	          return currentNode.value;
	        }

	        if (this.isLessThan(key, currentNode.key)) {
	          currentNode = currentNode.left;
	        } else {
	          currentNode = currentNode.right;
	        }
	      }

	      return null;
	    }
	  }, {
	    key: "delete",
	    value: function _delete(key) {
	      // update this algorithm and remove any
	      var node = this.getNode(key);

	      if (!node || node.key !== key) {
	        return null;
	      }

	      var parent = node.parent;
	      var left = node.left;
	      var right = node.right;

	      if (!!left !== !!right) {
	        // one child
	        var child = left || right;

	        if (!parent && !child) {
	          this.root = null;
	        } else if (parent && !child) {
	          this.root = child;
	        } else {
	          parent.replace(node, null);
	          this.rebalance(parent);
	        }
	      } else {
	        // two children
	        var maxLeft = node.left;

	        while (maxLeft.right) {
	          maxLeft = maxLeft.right;
	        }

	        if (node.left === maxLeft) {
	          if (node.isRoot) {
	            this.root = maxLeft;
	            maxLeft.parent = null;
	          } else {
	            if (node.isLeftChild) {
	              node.parent.left = maxLeft;
	            } else {
	              node.parent.right = maxLeft;
	            }

	            maxLeft.parent = node.parent;
	          }

	          maxLeft.right = node.right;
	          maxLeft.right.parent = maxLeft;
	          maxLeft.balanceFactor = node.balanceFactor;
	          node = {
	            parent: maxLeft,
	            isLeftChild: true
	          };
	        } else {
	          var mlParent = maxLeft.parent;
	          var mlLeft = maxLeft.left;
	          mlParent.right = mlLeft;

	          if (mlLeft) {
	            mlLeft.parent = mlParent;
	          }

	          if (node.isRoot) {
	            this.root = maxLeft;
	            maxLeft.parent = null;
	          } else {
	            if (node.isLeftChild) {
	              node.parent.left = maxLeft;
	            } else {
	              node.parent.right = maxLeft;
	            }

	            maxLeft.parent = node.parent;
	          }

	          maxLeft.right = node.right;
	          maxLeft.right.parent = maxLeft;
	          maxLeft.left = node.left;
	          maxLeft.left.parent = maxLeft;
	          maxLeft.balanceFactor = node.balanceFactor;
	          node = {
	            parent: mlParent,
	            isLeftChild: false
	          };
	        }
	      }

	      this.count--;

	      while (node.parent) {
	        var _parent = node.parent;
	        var prevBalanceFactor = _parent.balanceFactor;

	        if (node.isLeftChild) {
	          _parent.balanceFactor -= 1;
	        } else {
	          _parent.balanceFactor += 1;
	        }

	        if (Math.abs(_parent.balanceFactor) > Math.abs(prevBalanceFactor)) {
	          if (_parent.balanceFactor < -1 || _parent.balanceFactor > 1) {
	            this.rebalance(_parent);

	            if (_parent.parent.balanceFactor === 0) {
	              node = _parent.parent;
	            } else {
	              break;
	            }
	          } else {
	            break;
	          }
	        } else {
	          node = _parent;
	        }
	      }

	      return null;
	    }
	  }, {
	    key: "getNode",
	    value: function getNode(key) {
	      var currentNode = this.root;

	      while (currentNode) {
	        if (this.isEqual(key, currentNode.key)) {
	          return currentNode;
	        }

	        if (this.isLessThan(key, currentNode.key)) {
	          currentNode = currentNode.left;
	        } else {
	          currentNode = currentNode.right;
	        }
	      }

	      return null;
	    }
	  }, {
	    key: "rebalance",
	    value: function rebalance(node) {
	      if (node.balanceFactor < 0) {
	        if (node.right.balanceFactor > 0) {
	          this.rotateRight(node.right);
	          this.rotateLeft(node);
	        } else {
	          this.rotateLeft(node);
	        }
	      } else if (node.balanceFactor > 0) {
	        if (node.left.balanceFactor < 0) {
	          this.rotateLeft(node.left);
	          this.rotateRight(node);
	        } else {
	          this.rotateRight(node);
	        }
	      }
	    }
	  }, {
	    key: "rotateLeft",
	    value: function rotateLeft(pivot) {
	      var root = pivot.right;
	      pivot.right = root.left;

	      if (root.left !== null) {
	        root.left.parent = pivot;
	      }

	      root.parent = pivot.parent;

	      if (root.parent === null) {
	        this.root = root;
	      } else if (pivot.isLeftChild) {
	        root.parent.left = root;
	      } else {
	        root.parent.right = root;
	      }

	      root.left = pivot;
	      pivot.parent = root;
	      pivot.balanceFactor = pivot.balanceFactor + 1 - Math.min(root.balanceFactor, 0);
	      root.balanceFactor = root.balanceFactor + 1 - Math.max(pivot.balanceFactor, 0);
	    }
	  }, {
	    key: "rotateRight",
	    value: function rotateRight(pivot) {
	      var root = pivot.left;
	      pivot.left = root.right;

	      if (root.right !== null) {
	        root.right.parent = pivot;
	      }

	      root.parent = pivot.parent;

	      if (root.parent === null) {
	        this.root = root;
	      } else if (pivot.isLeftChild) {
	        root.parent.left = root;
	      } else {
	        root.parent.right = root;
	      }

	      root.right = pivot;
	      pivot.parent = root;
	      pivot.balanceFactor = pivot.balanceFactor - 1 - Math.min(root.balanceFactor, 0);
	      root.balanceFactor = root.balanceFactor - 1 - Math.max(pivot.balanceFactor, 0);
	    }
	  }, {
	    key: _Symbol$iterator,
	    value: /*#__PURE__*/_regeneratorRuntime.mark(function value() {
	      var _iterator, _step, iter;

	      return _regeneratorRuntime.wrap(function value$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _iterator = _createForOfIteratorHelper$3(this.getIterator());
	              _context.prev = 1;

	              _iterator.s();

	            case 3:
	              if ((_step = _iterator.n()).done) {
	                _context.next = 9;
	                break;
	              }

	              iter = _step.value;
	              _context.next = 7;
	              return iter;

	            case 7:
	              _context.next = 3;
	              break;

	            case 9:
	              _context.next = 14;
	              break;

	            case 11:
	              _context.prev = 11;
	              _context.t0 = _context["catch"](1);

	              _iterator.e(_context.t0);

	            case 14:
	              _context.prev = 14;

	              _iterator.f();

	              return _context.finish(14);

	            case 17:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, value, this, [[1, 11, 14, 17]]);
	    })
	  }, {
	    key: "getIterator",
	    value: /*#__PURE__*/_regeneratorRuntime.mark(function getIterator() {
	      var key,
	          currentNode,
	          fromleft,
	          _args2 = arguments;
	      return _regeneratorRuntime.wrap(function getIterator$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              key = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : null;
	              currentNode = this.root;

	            case 2:
	              if (!currentNode) {
	                _context2.next = 8;
	                break;
	              }

	              if (!(this.isEqual(key, currentNode.key) || key === null && !currentNode.left)) {
	                _context2.next = 5;
	                break;
	              }

	              return _context2.abrupt("break", 8);

	            case 5:
	              if (this.isLessThan(key, currentNode.key) || key === null) {
	                currentNode = currentNode.left;
	              } else {
	                currentNode = currentNode.right;
	              }

	              _context2.next = 2;
	              break;

	            case 8:
	              if (currentNode) {
	                _context2.next = 10;
	                break;
	              }

	              return _context2.abrupt("return", null);

	            case 10:
	              fromleft = true;

	            case 11:
	              if (!fromleft) {
	                _context2.next = 29;
	                break;
	              }

	              _context2.next = 14;
	              return [currentNode.key, currentNode.value];

	            case 14:
	              fromleft = false;

	              if (!currentNode.right) {
	                _context2.next = 21;
	                break;
	              }

	              currentNode = currentNode.right;

	              while (currentNode.left) {
	                currentNode = currentNode.left;
	              }

	              fromleft = true;
	              _context2.next = 27;
	              break;

	            case 21:
	              if (!currentNode.parent) {
	                _context2.next = 26;
	                break;
	              }

	              fromleft = currentNode.parent.left === currentNode;
	              currentNode = currentNode.parent;
	              _context2.next = 27;
	              break;

	            case 26:
	              return _context2.abrupt("break", 37);

	            case 27:
	              _context2.next = 35;
	              break;

	            case 29:
	              if (!currentNode.parent) {
	                _context2.next = 34;
	                break;
	              }

	              fromleft = currentNode.parent.left === currentNode;
	              currentNode = currentNode.parent;
	              _context2.next = 35;
	              break;

	            case 34:
	              return _context2.abrupt("break", 37);

	            case 35:
	              _context2.next = 11;
	              break;

	            case 37:
	              return _context2.abrupt("return", null);

	            case 38:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, getIterator, this);
	    })
	  }, {
	    key: "getReverseIterator",
	    value: /*#__PURE__*/_regeneratorRuntime.mark(function getReverseIterator() {
	      var key,
	          currentNode,
	          fromright,
	          _args3 = arguments;
	      return _regeneratorRuntime.wrap(function getReverseIterator$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              key = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : null;
	              currentNode = this.root;

	            case 2:
	              if (!currentNode) {
	                _context3.next = 8;
	                break;
	              }

	              if (!(this.isEqual(key, currentNode.key) || key === null && !currentNode.right)) {
	                _context3.next = 5;
	                break;
	              }

	              return _context3.abrupt("break", 8);

	            case 5:
	              if (!this.isLessThan(key, currentNode.key) || key === null) {
	                currentNode = currentNode.right;
	              } else {
	                currentNode = currentNode.left;
	              }

	              _context3.next = 2;
	              break;

	            case 8:
	              if (currentNode) {
	                _context3.next = 10;
	                break;
	              }

	              return _context3.abrupt("return", null);

	            case 10:
	              fromright = true;

	            case 11:
	              if (!fromright) {
	                _context3.next = 29;
	                break;
	              }

	              _context3.next = 14;
	              return [currentNode.key, currentNode.value];

	            case 14:
	              fromright = false;

	              if (!currentNode.left) {
	                _context3.next = 21;
	                break;
	              }

	              currentNode = currentNode.left;

	              while (currentNode.right) {
	                currentNode = currentNode.right;
	              }

	              fromright = true;
	              _context3.next = 27;
	              break;

	            case 21:
	              if (!currentNode.parent) {
	                _context3.next = 26;
	                break;
	              }

	              fromright = currentNode.parent.right === currentNode;
	              currentNode = currentNode.parent;
	              _context3.next = 27;
	              break;

	            case 26:
	              return _context3.abrupt("break", 37);

	            case 27:
	              _context3.next = 35;
	              break;

	            case 29:
	              if (!currentNode.parent) {
	                _context3.next = 34;
	                break;
	              }

	              fromright = currentNode.parent.right === currentNode;
	              currentNode = currentNode.parent;
	              _context3.next = 35;
	              break;

	            case 34:
	              return _context3.abrupt("break", 37);

	            case 35:
	              _context3.next = 11;
	              break;

	            case 37:
	              return _context3.abrupt("return", null);

	            case 38:
	            case "end":
	              return _context3.stop();
	          }
	        }
	      }, getReverseIterator, this);
	    })
	  }]);

	  return TreeMap;
	}(Symbol.iterator);

	function _createForOfIteratorHelper$2(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

	function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

	function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

	var Entry = /*#__PURE__*/function () {
	  function Entry(value, lastEventId) {
	    var isLeft = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	    var isRight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

	    _classCallCheck$3(this, Entry);

	    this._data = value;
	    this.lastEventId = lastEventId || 0;
	    this.isLeftBound = isLeft;
	    this.isRightBound = isRight;
	  }

	  _createClass$3(Entry, [{
	    key: "isValid",
	    get: function get() {
	      return true;
	    }
	  }, {
	    key: "value",
	    get: function get() {
	      return this._data;
	    }
	  }]);

	  return Entry;
	}();

	var Tombstone = /*#__PURE__*/function () {
	  function Tombstone(lastEventId) {
	    _classCallCheck$3(this, Tombstone);

	    this.lastEventId = lastEventId;
	    this.isLeftBound = false;
	    this.isRightBound = false;
	  }

	  _createClass$3(Tombstone, [{
	    key: "isValid",
	    get: function get() {
	      return false;
	    }
	  }, {
	    key: "value",
	    get: function get() {
	      return null;
	    }
	  }]);

	  return Tombstone;
	}(); /// A cache for ranges of items in a collection.
	/// Keeps track of the left and right bounds of the entire collection.
	/// Keeps track of the left and right bounds of the pages of items.


	var ItemsCache = /*#__PURE__*/function () {
	  function ItemsCache() {
	    _classCallCheck$3(this, ItemsCache);

	    _defineProperty$2(this, "items", new TreeMap());

	    _defineProperty$2(this, "beginKey", null);

	    _defineProperty$2(this, "endKey", null);

	    this.items.clear(); // Set count to 0 instead of null.
	  }
	  /*
	   * Used in tests.
	   * @internal
	   */


	  _createClass$3(ItemsCache, [{
	    key: "size",
	    get: function get() {
	      return this.items.size;
	    }
	  }, {
	    key: "collectionBegin",
	    get: function get() {
	      return this.beginKey;
	    }
	  }, {
	    key: "collectionEnd",
	    get: function get() {
	      return this.endKey;
	    }
	  }, {
	    key: "has",
	    value: function has(key) {
	      var _cacheEntry$isValid;

	      var cacheEntry = this.items.get(key);
	      return (_cacheEntry$isValid = cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.isValid) !== null && _cacheEntry$isValid !== void 0 ? _cacheEntry$isValid : false;
	    } // Whether an entry exists in the cache either as a value or a tombstone.

	  }, {
	    key: "exists",
	    value: function exists(key) {
	      var cacheEntry = this.items.get(key);
	      return !!cacheEntry;
	    } // Return only cached value or null if it is missing or marked with a tombstone.

	  }, {
	    key: "getValue",
	    value: function getValue(key) {
	      var _cacheEntry$value;

	      var cacheEntry = this.items.get(key);
	      return (_cacheEntry$value = cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.value) !== null && _cacheEntry$value !== void 0 ? _cacheEntry$value : null;
	    } // Return a cache entry, can either be missing (null), valid or a tombstone.

	  }, {
	    key: "get",
	    value: function get(key) {
	      return this.items.get(key);
	    } // Get an item next to the given key in specified search order.

	  }, {
	    key: "getNextItem",
	    value: function getNextItem(key, order, inclusive) {
	      if (key === null) {
	        return this.getFirstItem(order);
	      }

	      if (inclusive) {
	        return this.getValue(key);
	      }

	      return this.getAdjacentItem(key, order);
	    } // Find the first item in the cache based on query order.
	    // @internal

	  }, {
	    key: "getFirstItem",
	    value: function getFirstItem(order) {
	      var key = order === 'asc' ? this.beginKey : this.endKey;

	      if (this.exists(key)) {
	        var entry = this.items.get(key);

	        if (entry.isValid) {
	          return entry.value;
	        }

	        return this.getAdjacentItem(key, order);
	      }

	      return null;
	    } // Find the first valid item next to the given one.
	    // @internal

	  }, {
	    key: "getAdjacentItem",
	    value: function getAdjacentItem(key, order) {
	      var iterator = order === 'asc' ? this.items.getIterator(key) : this.items.getReverseIterator(key);

	      var _iterator = _createForOfIteratorHelper$2(iterator),
	          _step;

	      try {
	        for (_iterator.s(); !(_step = _iterator.n()).done;) {
	          var _step$value = _slicedToArray(_step.value, 2),
	              k = _step$value[0],
	              v = _step$value[1];

	          if (order === 'asc' ? v.isRightBound : v.isLeftBound) {
	            break;
	          }

	          if (v.isValid) {
	            return v.value;
	          }
	        }
	      } catch (err) {
	        _iterator.e(err);
	      } finally {
	        _iterator.f();
	      }

	      return null;
	    }
	  }, {
	    key: "store",
	    value: function store(key, data, lastEventId) {
	      var isLeft = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
	      var isRight = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
	      var cacheEntry = this.items.get(key);

	      if (cacheEntry && cacheEntry.lastEventId > lastEventId) {
	        return cacheEntry.value;
	      }

	      this.items.set(key, new Entry(data, lastEventId, cacheEntry ? cacheEntry.isLeftBound && isLeft : isLeft, cacheEntry ? cacheEntry.isRightBound && isRight : isRight)); // Update the `begin` and `end` markers. - FIXME can't do it here, because we don't know the pagination limits

	      if (this.beginKey && key < this.beginKey) {
	        // this.items[begin].isLeftBound = False // FIXME continuity?
	        this.beginKey = key;
	      }

	      if (this.endKey && this.endKey < key) {
	        // cache.items[end].isRightBound = False
	        this.endKey = key;
	      }

	      return data;
	    } // Populate a contiguous range of items from a paginator page.

	  }, {
	    key: "populate",
	    value: function populate(entries, isBegin, isEnd) {
	      var _this = this;

	      if (!entries.length) {
	        return;
	      }

	      var newEntries = _toConsumableArray(entries); // Backend-compatible lexicographical key sort


	      newEntries.sort(function (x1, x2) {
	        if (x1.cacheKey === x2.cacheKey) {
	          return 0;
	        }

	        if (x1.cacheKey > x2.cacheKey) {
	          return 1;
	        }

	        return -1;
	      });
	      newEntries.forEach(function (item, index) {
	        _this.store(item.cacheKey, item, item.lastEventId, index === 0, index === newEntries.length - 1);
	      });

	      if (isBegin) {
	        var firstKey = newEntries[0].cacheKey;

	        if (!this.beginKey || firstKey < this.beginKey) {
	          this.beginKey = firstKey;
	        }
	      }

	      if (isEnd) {
	        var lastKey = newEntries[newEntries.length - 1].cacheKey;

	        if (!this.endKey || this.endKey < lastKey) {
	          this.endKey = lastKey;
	        }
	      }
	    }
	  }, {
	    key: "delete",
	    value: function _delete(key, lastEventId) {
	      var cacheEntry = this.items.get(key);
	      /* Force delete when revision is unknown */

	      if (cacheEntry === null || lastEventId === null || cacheEntry.lastEventId < lastEventId) {
	        this.items.set(key, new Tombstone(lastEventId));
	      }
	    } // Shall we ignore the item with this key in an update?

	  }, {
	    key: "isKnown",
	    value: function isKnown(key, lastEventId) {
	      var cacheEntry = this.items.get(key);
	      return cacheEntry && cacheEntry.lastEventId >= lastEventId;
	    }
	  }, {
	    key: "getIterator",
	    value: /*#__PURE__*/_regeneratorRuntime.mark(function getIterator(key) {
	      var _iterator2, _step2, _step2$value, v;

	      return _regeneratorRuntime.wrap(function getIterator$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              if (key === null && this.beginKey !== null) {
	                key = this.beginKey;
	              }

	              if (!(key === null)) {
	                _context.next = 3;
	                break;
	              }

	              return _context.abrupt("return");

	            case 3:
	              _iterator2 = _createForOfIteratorHelper$2(this.items.getIterator(key));
	              _context.prev = 4;

	              _iterator2.s();

	            case 6:
	              if ((_step2 = _iterator2.n()).done) {
	                _context.next = 16;
	                break;
	              }

	              _step2$value = _slicedToArray(_step2.value, 2), v = _step2$value[1];

	              if (v.isValid) {
	                _context.next = 10;
	                break;
	              }

	              return _context.abrupt("continue", 14);

	            case 10:
	              _context.next = 12;
	              return v;

	            case 12:
	              if (!v.isRightBound) {
	                _context.next = 14;
	                break;
	              }

	              return _context.abrupt("break", 16);

	            case 14:
	              _context.next = 6;
	              break;

	            case 16:
	              _context.next = 21;
	              break;

	            case 18:
	              _context.prev = 18;
	              _context.t0 = _context["catch"](4);

	              _iterator2.e(_context.t0);

	            case 21:
	              _context.prev = 21;

	              _iterator2.f();

	              return _context.finish(21);

	            case 24:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, getIterator, this, [[4, 18, 21, 24]]);
	    })
	  }, {
	    key: "getReverseIterator",
	    value: /*#__PURE__*/_regeneratorRuntime.mark(function getReverseIterator(key) {
	      var _iterator3, _step3, _step3$value, v;

	      return _regeneratorRuntime.wrap(function getReverseIterator$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              if (key === null && this.endKey !== null) {
	                key = this.endKey;
	              }

	              if (!(key === null)) {
	                _context2.next = 3;
	                break;
	              }

	              return _context2.abrupt("return");

	            case 3:
	              _iterator3 = _createForOfIteratorHelper$2(this.items.getReverseIterator(key));
	              _context2.prev = 4;

	              _iterator3.s();

	            case 6:
	              if ((_step3 = _iterator3.n()).done) {
	                _context2.next = 16;
	                break;
	              }

	              _step3$value = _slicedToArray(_step3.value, 2), v = _step3$value[1];

	              if (v.isValid) {
	                _context2.next = 10;
	                break;
	              }

	              return _context2.abrupt("continue", 14);

	            case 10:
	              _context2.next = 12;
	              return v;

	            case 12:
	              if (!v.isLeftBound) {
	                _context2.next = 14;
	                break;
	              }

	              return _context2.abrupt("break", 16);

	            case 14:
	              _context2.next = 6;
	              break;

	            case 16:
	              _context2.next = 21;
	              break;

	            case 18:
	              _context2.prev = 18;
	              _context2.t0 = _context2["catch"](4);

	              _iterator3.e(_context2.t0);

	            case 21:
	              _context2.prev = 21;

	              _iterator3.f();

	              return _context2.finish(21);

	            case 24:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, getReverseIterator, this, [[4, 18, 21, 24]]);
	    })
	  }, {
	    key: "forEach",
	    value: function forEach(callbackfn) {
	      if (this.items) {
	        var _iterator4 = _createForOfIteratorHelper$2(this.items),
	            _step4;

	        try {
	          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
	            var _step4$value = _slicedToArray(_step4.value, 2),
	                key = _step4$value[0],
	                entry = _step4$value[1];

	            if (entry.isValid) {
	              callbackfn(key, entry.value);
	            }
	          }
	        } catch (err) {
	          _iterator4.e(err);
	        } finally {
	          _iterator4.f();
	        }
	      }
	    }
	  }]);

	  return ItemsCache;
	}();

	var lodash = {exports: {}};

	(function(module,exports){(function(){/** Used as a safe reference for `undefined` in pre-ES5 environments. */var undefined$1;/** Used as the semantic version number. */var VERSION='4.17.21';/** Used as the size to enable large array optimizations. */var LARGE_ARRAY_SIZE=200;/** Error message constants. */var CORE_ERROR_TEXT='Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',FUNC_ERROR_TEXT='Expected a function',INVALID_TEMPL_VAR_ERROR_TEXT='Invalid `variable` option passed into `_.template`';/** Used to stand-in for `undefined` hash values. */var HASH_UNDEFINED='__lodash_hash_undefined__';/** Used as the maximum memoize cache size. */var MAX_MEMOIZE_SIZE=500;/** Used as the internal argument placeholder. */var PLACEHOLDER='__lodash_placeholder__';/** Used to compose bitmasks for cloning. */var CLONE_DEEP_FLAG=1,CLONE_FLAT_FLAG=2,CLONE_SYMBOLS_FLAG=4;/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;/** Used to compose bitmasks for function metadata. */var WRAP_BIND_FLAG=1,WRAP_BIND_KEY_FLAG=2,WRAP_CURRY_BOUND_FLAG=4,WRAP_CURRY_FLAG=8,WRAP_CURRY_RIGHT_FLAG=16,WRAP_PARTIAL_FLAG=32,WRAP_PARTIAL_RIGHT_FLAG=64,WRAP_ARY_FLAG=128,WRAP_REARG_FLAG=256,WRAP_FLIP_FLAG=512;/** Used as default options for `_.truncate`. */var DEFAULT_TRUNC_LENGTH=30,DEFAULT_TRUNC_OMISSION='...';/** Used to detect hot functions by number of calls within a span of milliseconds. */var HOT_COUNT=800,HOT_SPAN=16;/** Used to indicate the type of lazy iteratees. */var LAZY_FILTER_FLAG=1,LAZY_MAP_FLAG=2,LAZY_WHILE_FLAG=3;/** Used as references for various `Number` constants. */var INFINITY=1/0,MAX_SAFE_INTEGER=9007199254740991,MAX_INTEGER=1.7976931348623157e+308,NAN=0/0;/** Used as references for the maximum length and index of an array. */var MAX_ARRAY_LENGTH=4294967295,MAX_ARRAY_INDEX=MAX_ARRAY_LENGTH-1,HALF_MAX_ARRAY_LENGTH=MAX_ARRAY_LENGTH>>>1;/** Used to associate wrap methods with their bit flags. */var wrapFlags=[['ary',WRAP_ARY_FLAG],['bind',WRAP_BIND_FLAG],['bindKey',WRAP_BIND_KEY_FLAG],['curry',WRAP_CURRY_FLAG],['curryRight',WRAP_CURRY_RIGHT_FLAG],['flip',WRAP_FLIP_FLAG],['partial',WRAP_PARTIAL_FLAG],['partialRight',WRAP_PARTIAL_RIGHT_FLAG],['rearg',WRAP_REARG_FLAG]];/** `Object#toString` result references. */var argsTag='[object Arguments]',arrayTag='[object Array]',asyncTag='[object AsyncFunction]',boolTag='[object Boolean]',dateTag='[object Date]',domExcTag='[object DOMException]',errorTag='[object Error]',funcTag='[object Function]',genTag='[object GeneratorFunction]',mapTag='[object Map]',numberTag='[object Number]',nullTag='[object Null]',objectTag='[object Object]',promiseTag='[object Promise]',proxyTag='[object Proxy]',regexpTag='[object RegExp]',setTag='[object Set]',stringTag='[object String]',symbolTag='[object Symbol]',undefinedTag='[object Undefined]',weakMapTag='[object WeakMap]',weakSetTag='[object WeakSet]';var arrayBufferTag='[object ArrayBuffer]',dataViewTag='[object DataView]',float32Tag='[object Float32Array]',float64Tag='[object Float64Array]',int8Tag='[object Int8Array]',int16Tag='[object Int16Array]',int32Tag='[object Int32Array]',uint8Tag='[object Uint8Array]',uint8ClampedTag='[object Uint8ClampedArray]',uint16Tag='[object Uint16Array]',uint32Tag='[object Uint32Array]';/** Used to match empty string literals in compiled template source. */var reEmptyStringLeading=/\b__p \+= '';/g,reEmptyStringMiddle=/\b(__p \+=) '' \+/g,reEmptyStringTrailing=/(__e\(.*?\)|\b__t\)) \+\n'';/g;/** Used to match HTML entities and HTML characters. */var reEscapedHtml=/&(?:amp|lt|gt|quot|#39);/g,reUnescapedHtml=/[&<>"']/g,reHasEscapedHtml=RegExp(reEscapedHtml.source),reHasUnescapedHtml=RegExp(reUnescapedHtml.source);/** Used to match template delimiters. */var reEscape=/<%-([\s\S]+?)%>/g,reEvaluate=/<%([\s\S]+?)%>/g,reInterpolate=/<%=([\s\S]+?)%>/g;/** Used to match property names within property paths. */var reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/,rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;/**
	   * Used to match `RegExp`
	   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	   */var reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reHasRegExpChar=RegExp(reRegExpChar.source);/** Used to match leading whitespace. */var reTrimStart=/^\s+/;/** Used to match a single whitespace character. */var reWhitespace=/\s/;/** Used to match wrap detail comments. */var reWrapComment=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,reWrapDetails=/\{\n\/\* \[wrapped with (.+)\] \*/,reSplitDetails=/,? & /;/** Used to match words composed of alphanumeric characters. */var reAsciiWord=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;/**
	   * Used to validate the `validate` option in `_.template` variable.
	   *
	   * Forbids characters which could potentially change the meaning of the function argument definition:
	   * - "()," (modification of function parameters)
	   * - "=" (default value)
	   * - "[]{}" (destructuring of function parameters)
	   * - "/" (beginning of a comment)
	   * - whitespace
	   */var reForbiddenIdentifierChars=/[()=,{}\[\]\/\s]/;/** Used to match backslashes in property paths. */var reEscapeChar=/\\(\\)?/g;/**
	   * Used to match
	   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
	   */var reEsTemplate=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;/** Used to match `RegExp` flags from their coerced string values. */var reFlags=/\w*$/;/** Used to detect bad signed hexadecimal string values. */var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;/** Used to detect binary string values. */var reIsBinary=/^0b[01]+$/i;/** Used to detect host constructors (Safari). */var reIsHostCtor=/^\[object .+?Constructor\]$/;/** Used to detect octal string values. */var reIsOctal=/^0o[0-7]+$/i;/** Used to detect unsigned integer values. */var reIsUint=/^(?:0|[1-9]\d*)$/;/** Used to match Latin Unicode letters (excluding mathematical operators). */var reLatin=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;/** Used to ensure capturing order of template delimiters. */var reNoMatch=/($^)/;/** Used to match unescaped characters in compiled string literals. */var reUnescapedString=/['\n\r\u2028\u2029\\]/g;/** Used to compose unicode character classes. */var rsAstralRange="\\ud800-\\udfff",rsComboMarksRange="\\u0300-\\u036f",reComboHalfMarksRange="\\ufe20-\\ufe2f",rsComboSymbolsRange="\\u20d0-\\u20ff",rsComboRange=rsComboMarksRange+reComboHalfMarksRange+rsComboSymbolsRange,rsDingbatRange="\\u2700-\\u27bf",rsLowerRange='a-z\\xdf-\\xf6\\xf8-\\xff',rsMathOpRange='\\xac\\xb1\\xd7\\xf7',rsNonCharRange='\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',rsPunctuationRange="\\u2000-\\u206f",rsSpaceRange=" \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",rsUpperRange='A-Z\\xc0-\\xd6\\xd8-\\xde',rsVarRange="\\ufe0e\\ufe0f",rsBreakRange=rsMathOpRange+rsNonCharRange+rsPunctuationRange+rsSpaceRange;/** Used to compose unicode capture groups. */var rsApos="['\u2019]",rsAstral='['+rsAstralRange+']',rsBreak='['+rsBreakRange+']',rsCombo='['+rsComboRange+']',rsDigits='\\d+',rsDingbat='['+rsDingbatRange+']',rsLower='['+rsLowerRange+']',rsMisc='[^'+rsAstralRange+rsBreakRange+rsDigits+rsDingbatRange+rsLowerRange+rsUpperRange+']',rsFitz="\\ud83c[\\udffb-\\udfff]",rsModifier='(?:'+rsCombo+'|'+rsFitz+')',rsNonAstral='[^'+rsAstralRange+']',rsRegional="(?:\\ud83c[\\udde6-\\uddff]){2}",rsSurrPair="[\\ud800-\\udbff][\\udc00-\\udfff]",rsUpper='['+rsUpperRange+']',rsZWJ="\\u200d";/** Used to compose unicode regexes. */var rsMiscLower='(?:'+rsLower+'|'+rsMisc+')',rsMiscUpper='(?:'+rsUpper+'|'+rsMisc+')',rsOptContrLower='(?:'+rsApos+'(?:d|ll|m|re|s|t|ve))?',rsOptContrUpper='(?:'+rsApos+'(?:D|LL|M|RE|S|T|VE))?',reOptMod=rsModifier+'?',rsOptVar='['+rsVarRange+']?',rsOptJoin='(?:'+rsZWJ+'(?:'+[rsNonAstral,rsRegional,rsSurrPair].join('|')+')'+rsOptVar+reOptMod+')*',rsOrdLower='\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',rsOrdUpper='\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',rsSeq=rsOptVar+reOptMod+rsOptJoin,rsEmoji='(?:'+[rsDingbat,rsRegional,rsSurrPair].join('|')+')'+rsSeq,rsSymbol='(?:'+[rsNonAstral+rsCombo+'?',rsCombo,rsRegional,rsSurrPair,rsAstral].join('|')+')';/** Used to match apostrophes. */var reApos=RegExp(rsApos,'g');/**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */var reComboMark=RegExp(rsCombo,'g');/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */var reUnicode=RegExp(rsFitz+'(?='+rsFitz+')|'+rsSymbol+rsSeq,'g');/** Used to match complex or compound words. */var reUnicodeWord=RegExp([rsUpper+'?'+rsLower+'+'+rsOptContrLower+'(?='+[rsBreak,rsUpper,'$'].join('|')+')',rsMiscUpper+'+'+rsOptContrUpper+'(?='+[rsBreak,rsUpper+rsMiscLower,'$'].join('|')+')',rsUpper+'?'+rsMiscLower+'+'+rsOptContrLower,rsUpper+'+'+rsOptContrUpper,rsOrdUpper,rsOrdLower,rsDigits,rsEmoji].join('|'),'g');/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */var reHasUnicode=RegExp('['+rsZWJ+rsAstralRange+rsComboRange+rsVarRange+']');/** Used to detect strings that need a more robust regexp to match words. */var reHasUnicodeWord=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;/** Used to assign default `context` object properties. */var contextProps=['Array','Buffer','DataView','Date','Error','Float32Array','Float64Array','Function','Int8Array','Int16Array','Int32Array','Map','Math','Object','Promise','RegExp','Set','String','Symbol','TypeError','Uint8Array','Uint8ClampedArray','Uint16Array','Uint32Array','WeakMap','_','clearTimeout','isFinite','parseInt','setTimeout'];/** Used to make template sourceURLs easier to identify. */var templateCounter=-1;/** Used to identify `toStringTag` values of typed arrays. */var typedArrayTags={};typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=true;typedArrayTags[argsTag]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=false;/** Used to identify `toStringTag` values supported by `_.clone`. */var cloneableTags={};cloneableTags[argsTag]=cloneableTags[arrayTag]=cloneableTags[arrayBufferTag]=cloneableTags[dataViewTag]=cloneableTags[boolTag]=cloneableTags[dateTag]=cloneableTags[float32Tag]=cloneableTags[float64Tag]=cloneableTags[int8Tag]=cloneableTags[int16Tag]=cloneableTags[int32Tag]=cloneableTags[mapTag]=cloneableTags[numberTag]=cloneableTags[objectTag]=cloneableTags[regexpTag]=cloneableTags[setTag]=cloneableTags[stringTag]=cloneableTags[symbolTag]=cloneableTags[uint8Tag]=cloneableTags[uint8ClampedTag]=cloneableTags[uint16Tag]=cloneableTags[uint32Tag]=true;cloneableTags[errorTag]=cloneableTags[funcTag]=cloneableTags[weakMapTag]=false;/** Used to map Latin Unicode letters to basic Latin letters. */var deburredLetters={// Latin-1 Supplement block.
	'\xc0':'A','\xc1':'A','\xc2':'A','\xc3':'A','\xc4':'A','\xc5':'A','\xe0':'a','\xe1':'a','\xe2':'a','\xe3':'a','\xe4':'a','\xe5':'a','\xc7':'C','\xe7':'c','\xd0':'D','\xf0':'d','\xc8':'E','\xc9':'E','\xca':'E','\xcb':'E','\xe8':'e','\xe9':'e','\xea':'e','\xeb':'e','\xcc':'I','\xcd':'I','\xce':'I','\xcf':'I','\xec':'i','\xed':'i','\xee':'i','\xef':'i','\xd1':'N','\xf1':'n','\xd2':'O','\xd3':'O','\xd4':'O','\xd5':'O','\xd6':'O','\xd8':'O','\xf2':'o','\xf3':'o','\xf4':'o','\xf5':'o','\xf6':'o','\xf8':'o','\xd9':'U','\xda':'U','\xdb':'U','\xdc':'U','\xf9':'u','\xfa':'u','\xfb':'u','\xfc':'u','\xdd':'Y','\xfd':'y','\xff':'y','\xc6':'Ae','\xe6':'ae','\xde':'Th','\xfe':'th','\xdf':'ss',// Latin Extended-A block.
	"\u0100":'A',"\u0102":'A',"\u0104":'A',"\u0101":'a',"\u0103":'a',"\u0105":'a',"\u0106":'C',"\u0108":'C',"\u010A":'C',"\u010C":'C',"\u0107":'c',"\u0109":'c',"\u010B":'c',"\u010D":'c',"\u010E":'D',"\u0110":'D',"\u010F":'d',"\u0111":'d',"\u0112":'E',"\u0114":'E',"\u0116":'E',"\u0118":'E',"\u011A":'E',"\u0113":'e',"\u0115":'e',"\u0117":'e',"\u0119":'e',"\u011B":'e',"\u011C":'G',"\u011E":'G',"\u0120":'G',"\u0122":'G',"\u011D":'g',"\u011F":'g',"\u0121":'g',"\u0123":'g',"\u0124":'H',"\u0126":'H',"\u0125":'h',"\u0127":'h',"\u0128":'I',"\u012A":'I',"\u012C":'I',"\u012E":'I',"\u0130":'I',"\u0129":'i',"\u012B":'i',"\u012D":'i',"\u012F":'i',"\u0131":'i',"\u0134":'J',"\u0135":'j',"\u0136":'K',"\u0137":'k',"\u0138":'k',"\u0139":'L',"\u013B":'L',"\u013D":'L',"\u013F":'L',"\u0141":'L',"\u013A":'l',"\u013C":'l',"\u013E":'l',"\u0140":'l',"\u0142":'l',"\u0143":'N',"\u0145":'N',"\u0147":'N',"\u014A":'N',"\u0144":'n',"\u0146":'n',"\u0148":'n',"\u014B":'n',"\u014C":'O',"\u014E":'O',"\u0150":'O',"\u014D":'o',"\u014F":'o',"\u0151":'o',"\u0154":'R',"\u0156":'R',"\u0158":'R',"\u0155":'r',"\u0157":'r',"\u0159":'r',"\u015A":'S',"\u015C":'S',"\u015E":'S',"\u0160":'S',"\u015B":'s',"\u015D":'s',"\u015F":'s',"\u0161":'s',"\u0162":'T',"\u0164":'T',"\u0166":'T',"\u0163":'t',"\u0165":'t',"\u0167":'t',"\u0168":'U',"\u016A":'U',"\u016C":'U',"\u016E":'U',"\u0170":'U',"\u0172":'U',"\u0169":'u',"\u016B":'u',"\u016D":'u',"\u016F":'u',"\u0171":'u',"\u0173":'u',"\u0174":'W',"\u0175":'w',"\u0176":'Y',"\u0177":'y',"\u0178":'Y',"\u0179":'Z',"\u017B":'Z',"\u017D":'Z',"\u017A":'z',"\u017C":'z',"\u017E":'z',"\u0132":'IJ',"\u0133":'ij',"\u0152":'Oe',"\u0153":'oe',"\u0149":"'n","\u017F":'s'};/** Used to map characters to HTML entities. */var htmlEscapes={'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'};/** Used to map HTML entities to characters. */var htmlUnescapes={'&amp;':'&','&lt;':'<','&gt;':'>','&quot;':'"','&#39;':"'"};/** Used to escape characters for inclusion in compiled string literals. */var stringEscapes={'\\':'\\',"'":"'",'\n':'n','\r':'r',"\u2028":'u2028',"\u2029":'u2029'};/** Built-in method references without a dependency on `root`. */var freeParseFloat=parseFloat,freeParseInt=parseInt;/** Detect free variable `global` from Node.js. */var freeGlobal=_typeof$2(commonjsGlobal)=='object'&&commonjsGlobal&&commonjsGlobal.Object===Object&&commonjsGlobal;/** Detect free variable `self`. */var freeSelf=(typeof self==="undefined"?"undefined":_typeof$2(self))=='object'&&self&&self.Object===Object&&self;/** Used as a reference to the global object. */var root=freeGlobal||freeSelf||Function('return this')();/** Detect free variable `exports`. */var freeExports=exports&&!exports.nodeType&&exports;/** Detect free variable `module`. */var freeModule=freeExports&&'object'=='object'&&module&&!module.nodeType&&module;/** Detect the popular CommonJS extension `module.exports`. */var moduleExports=freeModule&&freeModule.exports===freeExports;/** Detect free variable `process` from Node.js. */var freeProcess=moduleExports&&freeGlobal.process;/** Used to access faster Node.js helpers. */var nodeUtil=function(){try{// Use `util.types` for Node.js 10+.
	var types=freeModule&&freeModule.require&&freeModule.require('util').types;if(types){return types;}// Legacy `process.binding('util')` for Node.js < 10.
	return freeProcess&&freeProcess.binding&&freeProcess.binding('util');}catch(e){}}();/* Node.js helper references. */var nodeIsArrayBuffer=nodeUtil&&nodeUtil.isArrayBuffer,nodeIsDate=nodeUtil&&nodeUtil.isDate,nodeIsMap=nodeUtil&&nodeUtil.isMap,nodeIsRegExp=nodeUtil&&nodeUtil.isRegExp,nodeIsSet=nodeUtil&&nodeUtil.isSet,nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray;/*--------------------------------------------------------------------------*/ /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */function apply(func,thisArg,args){switch(args.length){case 0:return func.call(thisArg);case 1:return func.call(thisArg,args[0]);case 2:return func.call(thisArg,args[0],args[1]);case 3:return func.call(thisArg,args[0],args[1],args[2]);}return func.apply(thisArg,args);}/**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */function arrayAggregator(array,setter,iteratee,accumulator){var index=-1,length=array==null?0:array.length;while(++index<length){var value=array[index];setter(accumulator,value,iteratee(value),array);}return accumulator;}/**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */function arrayEach(array,iteratee){var index=-1,length=array==null?0:array.length;while(++index<length){if(iteratee(array[index],index,array)===false){break;}}return array;}/**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */function arrayEachRight(array,iteratee){var length=array==null?0:array.length;while(length--){if(iteratee(array[length],length,array)===false){break;}}return array;}/**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */function arrayEvery(array,predicate){var index=-1,length=array==null?0:array.length;while(++index<length){if(!predicate(array[index],index,array)){return false;}}return true;}/**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */function arrayFilter(array,predicate){var index=-1,length=array==null?0:array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(predicate(value,index,array)){result[resIndex++]=value;}}return result;}/**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */function arrayIncludes(array,value){var length=array==null?0:array.length;return !!length&&baseIndexOf(array,value,0)>-1;}/**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */function arrayIncludesWith(array,value,comparator){var index=-1,length=array==null?0:array.length;while(++index<length){if(comparator(value,array[index])){return true;}}return false;}/**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */function arrayMap(array,iteratee){var index=-1,length=array==null?0:array.length,result=Array(length);while(++index<length){result[index]=iteratee(array[index],index,array);}return result;}/**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */function arrayPush(array,values){var index=-1,length=values.length,offset=array.length;while(++index<length){array[offset+index]=values[index];}return array;}/**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */function arrayReduce(array,iteratee,accumulator,initAccum){var index=-1,length=array==null?0:array.length;if(initAccum&&length){accumulator=array[++index];}while(++index<length){accumulator=iteratee(accumulator,array[index],index,array);}return accumulator;}/**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */function arrayReduceRight(array,iteratee,accumulator,initAccum){var length=array==null?0:array.length;if(initAccum&&length){accumulator=array[--length];}while(length--){accumulator=iteratee(accumulator,array[length],length,array);}return accumulator;}/**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */function arraySome(array,predicate){var index=-1,length=array==null?0:array.length;while(++index<length){if(predicate(array[index],index,array)){return true;}}return false;}/**
	   * Gets the size of an ASCII `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */var asciiSize=baseProperty('length');/**
	   * Converts an ASCII `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */function asciiToArray(string){return string.split('');}/**
	   * Splits an ASCII `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */function asciiWords(string){return string.match(reAsciiWord)||[];}/**
	   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
	   * without support for iteratee shorthands, which iterates over `collection`
	   * using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */function baseFindKey(collection,predicate,eachFunc){var result;eachFunc(collection,function(value,key,collection){if(predicate(value,key,collection)){result=key;return false;}});return result;}/**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */function baseFindIndex(array,predicate,fromIndex,fromRight){var length=array.length,index=fromIndex+(fromRight?1:-1);while(fromRight?index--:++index<length){if(predicate(array[index],index,array)){return index;}}return -1;}/**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */function baseIndexOf(array,value,fromIndex){return value===value?strictIndexOf(array,value,fromIndex):baseFindIndex(array,baseIsNaN,fromIndex);}/**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */function baseIndexOfWith(array,value,fromIndex,comparator){var index=fromIndex-1,length=array.length;while(++index<length){if(comparator(array[index],value)){return index;}}return -1;}/**
	   * The base implementation of `_.isNaN` without support for number objects.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	   */function baseIsNaN(value){return value!==value;}/**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */function baseMean(array,iteratee){var length=array==null?0:array.length;return length?baseSum(array,iteratee)/length:NAN;}/**
	   * The base implementation of `_.property` without support for deep paths.
	   *
	   * @private
	   * @param {string} key The key of the property to get.
	   * @returns {Function} Returns the new accessor function.
	   */function baseProperty(key){return function(object){return object==null?undefined$1:object[key];};}/**
	   * The base implementation of `_.propertyOf` without support for deep paths.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {Function} Returns the new accessor function.
	   */function basePropertyOf(object){return function(key){return object==null?undefined$1:object[key];};}/**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */function baseReduce(collection,iteratee,accumulator,initAccum,eachFunc){eachFunc(collection,function(value,index,collection){accumulator=initAccum?(initAccum=false,value):iteratee(accumulator,value,index,collection);});return accumulator;}/**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */function baseSortBy(array,comparer){var length=array.length;array.sort(comparer);while(length--){array[length]=array[length].value;}return array;}/**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */function baseSum(array,iteratee){var result,index=-1,length=array.length;while(++index<length){var current=iteratee(array[index]);if(current!==undefined$1){result=result===undefined$1?current:result+current;}}return result;}/**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */function baseTimes(n,iteratee){var index=-1,result=Array(n);while(++index<n){result[index]=iteratee(index);}return result;}/**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the key-value pairs.
	   */function baseToPairs(object,props){return arrayMap(props,function(key){return [key,object[key]];});}/**
	   * The base implementation of `_.trim`.
	   *
	   * @private
	   * @param {string} string The string to trim.
	   * @returns {string} Returns the trimmed string.
	   */function baseTrim(string){return string?string.slice(0,trimmedEndIndex(string)+1).replace(reTrimStart,''):string;}/**
	   * The base implementation of `_.unary` without support for storing metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new capped function.
	   */function baseUnary(func){return function(value){return func(value);};}/**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */function baseValues(object,props){return arrayMap(props,function(key){return object[key];});}/**
	   * Checks if a `cache` value for `key` exists.
	   *
	   * @private
	   * @param {Object} cache The cache to query.
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */function cacheHas(cache,key){return cache.has(key);}/**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */function charsStartIndex(strSymbols,chrSymbols){var index=-1,length=strSymbols.length;while(++index<length&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1){}return index;}/**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */function charsEndIndex(strSymbols,chrSymbols){var index=strSymbols.length;while(index--&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1){}return index;}/**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */function countHolders(array,placeholder){var length=array.length,result=0;while(length--){if(array[length]===placeholder){++result;}}return result;}/**
	   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	   * letters to basic Latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */var deburrLetter=basePropertyOf(deburredLetters);/**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */var escapeHtmlChar=basePropertyOf(htmlEscapes);/**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */function escapeStringChar(chr){return '\\'+stringEscapes[chr];}/**
	   * Gets the value at `key` of `object`.
	   *
	   * @private
	   * @param {Object} [object] The object to query.
	   * @param {string} key The key of the property to get.
	   * @returns {*} Returns the property value.
	   */function getValue(object,key){return object==null?undefined$1:object[key];}/**
	   * Checks if `string` contains Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	   */function hasUnicode(string){return reHasUnicode.test(string);}/**
	   * Checks if `string` contains a word composed of Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a word is found, else `false`.
	   */function hasUnicodeWord(string){return reHasUnicodeWord.test(string);}/**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */function iteratorToArray(iterator){var data,result=[];while(!(data=iterator.next()).done){result.push(data.value);}return result;}/**
	   * Converts `map` to its key-value pairs.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the key-value pairs.
	   */function mapToArray(map){var index=-1,result=Array(map.size);map.forEach(function(value,key){result[++index]=[key,value];});return result;}/**
	   * Creates a unary function that invokes `func` with its argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */function overArg(func,transform){return function(arg){return func(transform(arg));};}/**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */function replaceHolders(array,placeholder){var index=-1,length=array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(value===placeholder||value===PLACEHOLDER){array[index]=PLACEHOLDER;result[resIndex++]=index;}}return result;}/**
	   * Converts `set` to an array of its values.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the values.
	   */function setToArray(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=value;});return result;}/**
	   * Converts `set` to its value-value pairs.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the value-value pairs.
	   */function setToPairs(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=[value,value];});return result;}/**
	   * A specialized version of `_.indexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */function strictIndexOf(array,value,fromIndex){var index=fromIndex-1,length=array.length;while(++index<length){if(array[index]===value){return index;}}return -1;}/**
	   * A specialized version of `_.lastIndexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */function strictLastIndexOf(array,value,fromIndex){var index=fromIndex+1;while(index--){if(array[index]===value){return index;}}return index;}/**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */function stringSize(string){return hasUnicode(string)?unicodeSize(string):asciiSize(string);}/**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */function stringToArray(string){return hasUnicode(string)?unicodeToArray(string):asciiToArray(string);}/**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */function trimmedEndIndex(string){var index=string.length;while(index--&&reWhitespace.test(string.charAt(index))){}return index;}/**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */var unescapeHtmlChar=basePropertyOf(htmlUnescapes);/**
	   * Gets the size of a Unicode `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */function unicodeSize(string){var result=reUnicode.lastIndex=0;while(reUnicode.test(string)){++result;}return result;}/**
	   * Converts a Unicode `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */function unicodeToArray(string){return string.match(reUnicode)||[];}/**
	   * Splits a Unicode `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */function unicodeWords(string){return string.match(reUnicodeWord)||[];}/*--------------------------------------------------------------------------*/ /**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */var runInContext=function runInContext(context){context=context==null?root:_.defaults(root.Object(),context,_.pick(root,contextProps));/** Built-in constructor references. */var Array=context.Array,Date=context.Date,Error=context.Error,Function=context.Function,Math=context.Math,Object=context.Object,RegExp=context.RegExp,String=context.String,TypeError=context.TypeError;/** Used for built-in method references. */var arrayProto=Array.prototype,funcProto=Function.prototype,objectProto=Object.prototype;/** Used to detect overreaching core-js shims. */var coreJsData=context['__core-js_shared__'];/** Used to resolve the decompiled source of functions. */var funcToString=funcProto.toString;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/** Used to generate unique IDs. */var idCounter=0;/** Used to detect methods masquerading as native. */var maskSrcKey=function(){var uid=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||'');return uid?'Symbol(src)_1.'+uid:'';}();/**
	     * Used to resolve the
	     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	     * of values.
	     */var nativeObjectToString=objectProto.toString;/** Used to infer the `Object` constructor. */var objectCtorString=funcToString.call(Object);/** Used to restore the original `_` reference in `_.noConflict`. */var oldDash=root._;/** Used to detect if a method is native. */var reIsNative=RegExp('^'+funcToString.call(hasOwnProperty).replace(reRegExpChar,'\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,'$1.*?')+'$');/** Built-in value references. */var Buffer=moduleExports?context.Buffer:undefined$1,_Symbol=context.Symbol,Uint8Array=context.Uint8Array,allocUnsafe=Buffer?Buffer.allocUnsafe:undefined$1,getPrototype=overArg(Object.getPrototypeOf,Object),objectCreate=Object.create,propertyIsEnumerable=objectProto.propertyIsEnumerable,splice=arrayProto.splice,spreadableSymbol=_Symbol?_Symbol.isConcatSpreadable:undefined$1,symIterator=_Symbol?_Symbol.iterator:undefined$1,symToStringTag=_Symbol?_Symbol.toStringTag:undefined$1;var defineProperty=function(){try{var func=getNative(Object,'defineProperty');func({},'',{});return func;}catch(e){}}();/** Mocked built-ins. */var ctxClearTimeout=context.clearTimeout!==root.clearTimeout&&context.clearTimeout,ctxNow=Date&&Date.now!==root.Date.now&&Date.now,ctxSetTimeout=context.setTimeout!==root.setTimeout&&context.setTimeout;/* Built-in method references for those with the same name as other `lodash` methods. */var nativeCeil=Math.ceil,nativeFloor=Math.floor,nativeGetSymbols=Object.getOwnPropertySymbols,nativeIsBuffer=Buffer?Buffer.isBuffer:undefined$1,nativeIsFinite=context.isFinite,nativeJoin=arrayProto.join,nativeKeys=overArg(Object.keys,Object),nativeMax=Math.max,nativeMin=Math.min,nativeNow=Date.now,nativeParseInt=context.parseInt,nativeRandom=Math.random,nativeReverse=arrayProto.reverse;/* Built-in method references that are verified to be native. */var DataView=getNative(context,'DataView'),Map=getNative(context,'Map'),Promise=getNative(context,'Promise'),Set=getNative(context,'Set'),WeakMap=getNative(context,'WeakMap'),nativeCreate=getNative(Object,'create');/** Used to store function metadata. */var metaMap=WeakMap&&new WeakMap();/** Used to lookup unminified function names. */var realNames={};/** Used to detect maps, sets, and weakmaps. */var dataViewCtorString=toSource(DataView),mapCtorString=toSource(Map),promiseCtorString=toSource(Promise),setCtorString=toSource(Set),weakMapCtorString=toSource(WeakMap);/** Used to convert symbols to primitives and strings. */var symbolProto=_Symbol?_Symbol.prototype:undefined$1,symbolValueOf=symbolProto?symbolProto.valueOf:undefined$1,symbolToString=symbolProto?symbolProto.toString:undefined$1;/*------------------------------------------------------------------------*/ /**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array and iteratees accept only
	     * one argument. The heuristic for whether a section qualifies for shortcut
	     * fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	     * `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */function lodash(value){if(isObjectLike(value)&&!isArray(value)&&!(value instanceof LazyWrapper)){if(value instanceof LodashWrapper){return value;}if(hasOwnProperty.call(value,'__wrapped__')){return wrapperClone(value);}}return new LodashWrapper(value);}/**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} proto The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */var baseCreate=function(){function object(){}return function(proto){if(!isObject(proto)){return {};}if(objectCreate){return objectCreate(proto);}object.prototype=proto;var result=new object();object.prototype=undefined$1;return result;};}();/**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */function baseLodash(){// No operation performed.
	}/**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */function LodashWrapper(value,chainAll){this.__wrapped__=value;this.__actions__=[];this.__chain__=!!chainAll;this.__index__=0;this.__values__=undefined$1;}/**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
	     * following template settings to use alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */lodash.templateSettings={/**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */'escape':reEscape,/**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */'evaluate':reEvaluate,/**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */'interpolate':reInterpolate,/**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */'variable':'',/**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */'imports':{/**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */'_':lodash}};// Ensure wrappers are instances of `baseLodash`.
	lodash.prototype=baseLodash.prototype;lodash.prototype.constructor=lodash;LodashWrapper.prototype=baseCreate(baseLodash.prototype);LodashWrapper.prototype.constructor=LodashWrapper;/*------------------------------------------------------------------------*/ /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */function LazyWrapper(value){this.__wrapped__=value;this.__actions__=[];this.__dir__=1;this.__filtered__=false;this.__iteratees__=[];this.__takeCount__=MAX_ARRAY_LENGTH;this.__views__=[];}/**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */function lazyClone(){var result=new LazyWrapper(this.__wrapped__);result.__actions__=copyArray(this.__actions__);result.__dir__=this.__dir__;result.__filtered__=this.__filtered__;result.__iteratees__=copyArray(this.__iteratees__);result.__takeCount__=this.__takeCount__;result.__views__=copyArray(this.__views__);return result;}/**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */function lazyReverse(){if(this.__filtered__){var result=new LazyWrapper(this);result.__dir__=-1;result.__filtered__=true;}else {result=this.clone();result.__dir__*=-1;}return result;}/**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */function lazyValue(){var array=this.__wrapped__.value(),dir=this.__dir__,isArr=isArray(array),isRight=dir<0,arrLength=isArr?array.length:0,view=getView(0,arrLength,this.__views__),start=view.start,end=view.end,length=end-start,index=isRight?end:start-1,iteratees=this.__iteratees__,iterLength=iteratees.length,resIndex=0,takeCount=nativeMin(length,this.__takeCount__);if(!isArr||!isRight&&arrLength==length&&takeCount==length){return baseWrapperValue(array,this.__actions__);}var result=[];outer:while(length--&&resIndex<takeCount){index+=dir;var iterIndex=-1,value=array[index];while(++iterIndex<iterLength){var data=iteratees[iterIndex],iteratee=data.iteratee,type=data.type,computed=iteratee(value);if(type==LAZY_MAP_FLAG){value=computed;}else if(!computed){if(type==LAZY_FILTER_FLAG){continue outer;}else {break outer;}}}result[resIndex++]=value;}return result;}// Ensure `LazyWrapper` is an instance of `baseLodash`.
	LazyWrapper.prototype=baseCreate(baseLodash.prototype);LazyWrapper.prototype.constructor=LazyWrapper;/*------------------------------------------------------------------------*/ /**
	     * Creates a hash object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */function Hash(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
	     * Removes all key-value entries from the hash.
	     *
	     * @private
	     * @name clear
	     * @memberOf Hash
	     */function hashClear(){this.__data__=nativeCreate?nativeCreate(null):{};this.size=0;}/**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @name delete
	     * @memberOf Hash
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */function hashDelete(key){var result=this.has(key)&&delete this.__data__[key];this.size-=result?1:0;return result;}/**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Hash
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */function hashGet(key){var data=this.__data__;if(nativeCreate){var result=data[key];return result===HASH_UNDEFINED?undefined$1:result;}return hasOwnProperty.call(data,key)?data[key]:undefined$1;}/**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Hash
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */function hashHas(key){var data=this.__data__;return nativeCreate?data[key]!==undefined$1:hasOwnProperty.call(data,key);}/**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Hash
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the hash instance.
	     */function hashSet(key,value){var data=this.__data__;this.size+=this.has(key)?0:1;data[key]=nativeCreate&&value===undefined$1?HASH_UNDEFINED:value;return this;}// Add methods to `Hash`.
	Hash.prototype.clear=hashClear;Hash.prototype['delete']=hashDelete;Hash.prototype.get=hashGet;Hash.prototype.has=hashHas;Hash.prototype.set=hashSet;/*------------------------------------------------------------------------*/ /**
	     * Creates an list cache object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */function ListCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
	     * Removes all key-value entries from the list cache.
	     *
	     * @private
	     * @name clear
	     * @memberOf ListCache
	     */function listCacheClear(){this.__data__=[];this.size=0;}/**
	     * Removes `key` and its value from the list cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf ListCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */function listCacheDelete(key){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){return false;}var lastIndex=data.length-1;if(index==lastIndex){data.pop();}else {splice.call(data,index,1);}--this.size;return true;}/**
	     * Gets the list cache value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf ListCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */function listCacheGet(key){var data=this.__data__,index=assocIndexOf(data,key);return index<0?undefined$1:data[index][1];}/**
	     * Checks if a list cache value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf ListCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */function listCacheHas(key){return assocIndexOf(this.__data__,key)>-1;}/**
	     * Sets the list cache `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf ListCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the list cache instance.
	     */function listCacheSet(key,value){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){++this.size;data.push([key,value]);}else {data[index][1]=value;}return this;}// Add methods to `ListCache`.
	ListCache.prototype.clear=listCacheClear;ListCache.prototype['delete']=listCacheDelete;ListCache.prototype.get=listCacheGet;ListCache.prototype.has=listCacheHas;ListCache.prototype.set=listCacheSet;/*------------------------------------------------------------------------*/ /**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */function MapCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */function mapCacheClear(){this.size=0;this.__data__={'hash':new Hash(),'map':new(Map||ListCache)(),'string':new Hash()};}/**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */function mapCacheDelete(key){var result=getMapData(this,key)['delete'](key);this.size-=result?1:0;return result;}/**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */function mapCacheGet(key){return getMapData(this,key).get(key);}/**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */function mapCacheHas(key){return getMapData(this,key).has(key);}/**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */function mapCacheSet(key,value){var data=getMapData(this,key),size=data.size;data.set(key,value);this.size+=data.size==size?0:1;return this;}// Add methods to `MapCache`.
	MapCache.prototype.clear=mapCacheClear;MapCache.prototype['delete']=mapCacheDelete;MapCache.prototype.get=mapCacheGet;MapCache.prototype.has=mapCacheHas;MapCache.prototype.set=mapCacheSet;/*------------------------------------------------------------------------*/ /**
	     *
	     * Creates an array cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */function SetCache(values){var index=-1,length=values==null?0:values.length;this.__data__=new MapCache();while(++index<length){this.add(values[index]);}}/**
	     * Adds `value` to the array cache.
	     *
	     * @private
	     * @name add
	     * @memberOf SetCache
	     * @alias push
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache instance.
	     */function setCacheAdd(value){this.__data__.set(value,HASH_UNDEFINED);return this;}/**
	     * Checks if `value` is in the array cache.
	     *
	     * @private
	     * @name has
	     * @memberOf SetCache
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */function setCacheHas(value){return this.__data__.has(value);}// Add methods to `SetCache`.
	SetCache.prototype.add=SetCache.prototype.push=setCacheAdd;SetCache.prototype.has=setCacheHas;/*------------------------------------------------------------------------*/ /**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */function Stack(entries){var data=this.__data__=new ListCache(entries);this.size=data.size;}/**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */function stackClear(){this.__data__=new ListCache();this.size=0;}/**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */function stackDelete(key){var data=this.__data__,result=data['delete'](key);this.size=data.size;return result;}/**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */function stackGet(key){return this.__data__.get(key);}/**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */function stackHas(key){return this.__data__.has(key);}/**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */function stackSet(key,value){var data=this.__data__;if(data instanceof ListCache){var pairs=data.__data__;if(!Map||pairs.length<LARGE_ARRAY_SIZE-1){pairs.push([key,value]);this.size=++data.size;return this;}data=this.__data__=new MapCache(pairs);}data.set(key,value);this.size=data.size;return this;}// Add methods to `Stack`.
	Stack.prototype.clear=stackClear;Stack.prototype['delete']=stackDelete;Stack.prototype.get=stackGet;Stack.prototype.has=stackHas;Stack.prototype.set=stackSet;/*------------------------------------------------------------------------*/ /**
	     * Creates an array of the enumerable property names of the array-like `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @param {boolean} inherited Specify returning inherited property names.
	     * @returns {Array} Returns the array of property names.
	     */function arrayLikeKeys(value,inherited){var isArr=isArray(value),isArg=!isArr&&isArguments(value),isBuff=!isArr&&!isArg&&isBuffer(value),isType=!isArr&&!isArg&&!isBuff&&isTypedArray(value),skipIndexes=isArr||isArg||isBuff||isType,result=skipIndexes?baseTimes(value.length,String):[],length=result.length;for(var key in value){if((inherited||hasOwnProperty.call(value,key))&&!(skipIndexes&&(// Safari 9 has enumerable `arguments.length` in strict mode.
	key=='length'||// Node.js 0.10 has enumerable non-index properties on buffers.
	isBuff&&(key=='offset'||key=='parent')||// PhantomJS 2 has enumerable non-index properties on typed arrays.
	isType&&(key=='buffer'||key=='byteLength'||key=='byteOffset')||// Skip index properties.
	isIndex(key,length)))){result.push(key);}}return result;}/**
	     * A specialized version of `_.sample` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @returns {*} Returns the random element.
	     */function arraySample(array){var length=array.length;return length?array[baseRandom(0,length-1)]:undefined$1;}/**
	     * A specialized version of `_.sampleSize` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */function arraySampleSize(array,n){return shuffleSelf(copyArray(array),baseClamp(n,0,array.length));}/**
	     * A specialized version of `_.shuffle` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */function arrayShuffle(array){return shuffleSelf(copyArray(array));}/**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */function assignMergeValue(object,key,value){if(value!==undefined$1&&!eq(object[key],value)||value===undefined$1&&!(key in object)){baseAssignValue(object,key,value);}}/**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */function assignValue(object,key,value){var objValue=object[key];if(!(hasOwnProperty.call(object,key)&&eq(objValue,value))||value===undefined$1&&!(key in object)){baseAssignValue(object,key,value);}}/**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */function assocIndexOf(array,key){var length=array.length;while(length--){if(eq(array[length][0],key)){return length;}}return -1;}/**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */function baseAggregator(collection,setter,iteratee,accumulator){baseEach(collection,function(value,key,collection){setter(accumulator,value,iteratee(value),collection);});return accumulator;}/**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */function baseAssign(object,source){return object&&copyObject(source,keys(source),object);}/**
	     * The base implementation of `_.assignIn` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */function baseAssignIn(object,source){return object&&copyObject(source,keysIn(source),object);}/**
	     * The base implementation of `assignValue` and `assignMergeValue` without
	     * value checks.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */function baseAssignValue(object,key,value){if(key=='__proto__'&&defineProperty){defineProperty(object,key,{'configurable':true,'enumerable':true,'value':value,'writable':true});}else {object[key]=value;}}/**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Array} Returns the picked elements.
	     */function baseAt(object,paths){var index=-1,length=paths.length,result=Array(length),skip=object==null;while(++index<length){result[index]=skip?undefined$1:get(object,paths[index]);}return result;}/**
	     * The base implementation of `_.clamp` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */function baseClamp(number,lower,upper){if(number===number){if(upper!==undefined$1){number=number<=upper?number:upper;}if(lower!==undefined$1){number=number>=lower?number:lower;}}return number;}/**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Deep clone
	     *  2 - Flatten inherited properties
	     *  4 - Clone symbols
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */function baseClone(value,bitmask,customizer,key,object,stack){var result,isDeep=bitmask&CLONE_DEEP_FLAG,isFlat=bitmask&CLONE_FLAT_FLAG,isFull=bitmask&CLONE_SYMBOLS_FLAG;if(customizer){result=object?customizer(value,key,object,stack):customizer(value);}if(result!==undefined$1){return result;}if(!isObject(value)){return value;}var isArr=isArray(value);if(isArr){result=initCloneArray(value);if(!isDeep){return copyArray(value,result);}}else {var tag=getTag(value),isFunc=tag==funcTag||tag==genTag;if(isBuffer(value)){return cloneBuffer(value,isDeep);}if(tag==objectTag||tag==argsTag||isFunc&&!object){result=isFlat||isFunc?{}:initCloneObject(value);if(!isDeep){return isFlat?copySymbolsIn(value,baseAssignIn(result,value)):copySymbols(value,baseAssign(result,value));}}else {if(!cloneableTags[tag]){return object?value:{};}result=initCloneByTag(value,tag,isDeep);}}// Check for circular references and return its corresponding clone.
	stack||(stack=new Stack());var stacked=stack.get(value);if(stacked){return stacked;}stack.set(value,result);if(isSet(value)){value.forEach(function(subValue){result.add(baseClone(subValue,bitmask,customizer,subValue,value,stack));});}else if(isMap(value)){value.forEach(function(subValue,key){result.set(key,baseClone(subValue,bitmask,customizer,key,value,stack));});}var keysFunc=isFull?isFlat?getAllKeysIn:getAllKeys:isFlat?keysIn:keys;var props=isArr?undefined$1:keysFunc(value);arrayEach(props||value,function(subValue,key){if(props){key=subValue;subValue=value[key];}// Recursively populate clone (susceptible to call stack limits).
	assignValue(result,key,baseClone(subValue,bitmask,customizer,key,value,stack));});return result;}/**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     */function baseConforms(source){var props=keys(source);return function(object){return baseConformsTo(object,source,props);};}/**
	     * The base implementation of `_.conformsTo` which accepts `props` to check.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     */function baseConformsTo(object,source,props){var length=props.length;if(object==null){return !length;}object=Object(object);while(length--){var key=props[length],predicate=source[key],value=object[key];if(value===undefined$1&&!(key in object)||!predicate(value)){return false;}}return true;}/**
	     * The base implementation of `_.delay` and `_.defer` which accepts `args`
	     * to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Array} args The arguments to provide to `func`.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */function baseDelay(func,wait,args){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return setTimeout(function(){func.apply(undefined$1,args);},wait);}/**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */function baseDifference(array,values,iteratee,comparator){var index=-1,includes=arrayIncludes,isCommon=true,length=array.length,result=[],valuesLength=values.length;if(!length){return result;}if(iteratee){values=arrayMap(values,baseUnary(iteratee));}if(comparator){includes=arrayIncludesWith;isCommon=false;}else if(values.length>=LARGE_ARRAY_SIZE){includes=cacheHas;isCommon=false;values=new SetCache(values);}outer:while(++index<length){var value=array[index],computed=iteratee==null?value:iteratee(value);value=comparator||value!==0?value:0;if(isCommon&&computed===computed){var valuesIndex=valuesLength;while(valuesIndex--){if(values[valuesIndex]===computed){continue outer;}}result.push(value);}else if(!includes(values,computed,comparator)){result.push(value);}}return result;}/**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */var baseEach=createBaseEach(baseForOwn);/**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */var baseEachRight=createBaseEach(baseForOwnRight,true);/**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */function baseEvery(collection,predicate){var result=true;baseEach(collection,function(value,index,collection){result=!!predicate(value,index,collection);return result;});return result;}/**
	     * The base implementation of methods like `_.max` and `_.min` which accepts a
	     * `comparator` to determine the extremum value.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The iteratee invoked per iteration.
	     * @param {Function} comparator The comparator used to compare values.
	     * @returns {*} Returns the extremum value.
	     */function baseExtremum(array,iteratee,comparator){var index=-1,length=array.length;while(++index<length){var value=array[index],current=iteratee(value);if(current!=null&&(computed===undefined$1?current===current&&!isSymbol(current):comparator(current,computed))){var computed=current,result=value;}}return result;}/**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */function baseFill(array,value,start,end){var length=array.length;start=toInteger(start);if(start<0){start=-start>length?0:length+start;}end=end===undefined$1||end>length?length:toInteger(end);if(end<0){end+=length;}end=start>end?0:toLength(end);while(start<end){array[start++]=value;}return array;}/**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */function baseFilter(collection,predicate){var result=[];baseEach(collection,function(value,index,collection){if(predicate(value,index,collection)){result.push(value);}});return result;}/**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */function baseFlatten(array,depth,predicate,isStrict,result){var index=-1,length=array.length;predicate||(predicate=isFlattenable);result||(result=[]);while(++index<length){var value=array[index];if(depth>0&&predicate(value)){if(depth>1){// Recursively flatten arrays (susceptible to call stack limits).
	baseFlatten(value,depth-1,predicate,isStrict,result);}else {arrayPush(result,value);}}else if(!isStrict){result[result.length]=value;}}return result;}/**
	     * The base implementation of `baseForOwn` which iterates over `object`
	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */var baseFor=createBaseFor();/**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */var baseForRight=createBaseFor(true);/**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */function baseForOwn(object,iteratee){return object&&baseFor(object,iteratee,keys);}/**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */function baseForOwnRight(object,iteratee){return object&&baseForRight(object,iteratee,keys);}/**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the function names.
	     */function baseFunctions(object,props){return arrayFilter(props,function(key){return isFunction(object[key]);});}/**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */function baseGet(object,path){path=castPath(path,object);var index=0,length=path.length;while(object!=null&&index<length){object=object[toKey(path[index++])];}return index&&index==length?object:undefined$1;}/**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */function baseGetAllKeys(object,keysFunc,symbolsFunc){var result=keysFunc(object);return isArray(object)?result:arrayPush(result,symbolsFunc(object));}/**
	     * The base implementation of `getTag` without fallbacks for buggy environments.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */function baseGetTag(value){if(value==null){return value===undefined$1?undefinedTag:nullTag;}return symToStringTag&&symToStringTag in Object(value)?getRawTag(value):objectToString(value);}/**
	     * The base implementation of `_.gt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     */function baseGt(value,other){return value>other;}/**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */function baseHas(object,key){return object!=null&&hasOwnProperty.call(object,key);}/**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */function baseHasIn(object,key){return object!=null&&key in Object(object);}/**
	     * The base implementation of `_.inRange` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */function baseInRange(number,start,end){return number>=nativeMin(start,end)&&number<nativeMax(start,end);}/**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */function baseIntersection(arrays,iteratee,comparator){var includes=comparator?arrayIncludesWith:arrayIncludes,length=arrays[0].length,othLength=arrays.length,othIndex=othLength,caches=Array(othLength),maxLength=Infinity,result=[];while(othIndex--){var array=arrays[othIndex];if(othIndex&&iteratee){array=arrayMap(array,baseUnary(iteratee));}maxLength=nativeMin(array.length,maxLength);caches[othIndex]=!comparator&&(iteratee||length>=120&&array.length>=120)?new SetCache(othIndex&&array):undefined$1;}array=arrays[0];var index=-1,seen=caches[0];outer:while(++index<length&&result.length<maxLength){var value=array[index],computed=iteratee?iteratee(value):value;value=comparator||value!==0?value:0;if(!(seen?cacheHas(seen,computed):includes(result,computed,comparator))){othIndex=othLength;while(--othIndex){var cache=caches[othIndex];if(!(cache?cacheHas(cache,computed):includes(arrays[othIndex],computed,comparator))){continue outer;}}if(seen){seen.push(computed);}result.push(value);}}return result;}/**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */function baseInverter(object,setter,iteratee,accumulator){baseForOwn(object,function(value,key,object){setter(accumulator,iteratee(value),key,object);});return accumulator;}/**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */function baseInvoke(object,path,args){path=castPath(path,object);object=parent(object,path);var func=object==null?object:object[toKey(last(path))];return func==null?undefined$1:apply(func,object,args);}/**
	     * The base implementation of `_.isArguments`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     */function baseIsArguments(value){return isObjectLike(value)&&baseGetTag(value)==argsTag;}/**
	     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     */function baseIsArrayBuffer(value){return isObjectLike(value)&&baseGetTag(value)==arrayBufferTag;}/**
	     * The base implementation of `_.isDate` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     */function baseIsDate(value){return isObjectLike(value)&&baseGetTag(value)==dateTag;}/**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Unordered comparison
	     *  2 - Partial comparison
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */function baseIsEqual(value,other,bitmask,customizer,stack){if(value===other){return true;}if(value==null||other==null||!isObjectLike(value)&&!isObjectLike(other)){return value!==value&&other!==other;}return baseIsEqualDeep(value,other,bitmask,customizer,baseIsEqual,stack);}/**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */function baseIsEqualDeep(object,other,bitmask,customizer,equalFunc,stack){var objIsArr=isArray(object),othIsArr=isArray(other),objTag=objIsArr?arrayTag:getTag(object),othTag=othIsArr?arrayTag:getTag(other);objTag=objTag==argsTag?objectTag:objTag;othTag=othTag==argsTag?objectTag:othTag;var objIsObj=objTag==objectTag,othIsObj=othTag==objectTag,isSameTag=objTag==othTag;if(isSameTag&&isBuffer(object)){if(!isBuffer(other)){return false;}objIsArr=true;objIsObj=false;}if(isSameTag&&!objIsObj){stack||(stack=new Stack());return objIsArr||isTypedArray(object)?equalArrays(object,other,bitmask,customizer,equalFunc,stack):equalByTag(object,other,objTag,bitmask,customizer,equalFunc,stack);}if(!(bitmask&COMPARE_PARTIAL_FLAG)){var objIsWrapped=objIsObj&&hasOwnProperty.call(object,'__wrapped__'),othIsWrapped=othIsObj&&hasOwnProperty.call(other,'__wrapped__');if(objIsWrapped||othIsWrapped){var objUnwrapped=objIsWrapped?object.value():object,othUnwrapped=othIsWrapped?other.value():other;stack||(stack=new Stack());return equalFunc(objUnwrapped,othUnwrapped,bitmask,customizer,stack);}}if(!isSameTag){return false;}stack||(stack=new Stack());return equalObjects(object,other,bitmask,customizer,equalFunc,stack);}/**
	     * The base implementation of `_.isMap` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     */function baseIsMap(value){return isObjectLike(value)&&getTag(value)==mapTag;}/**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */function baseIsMatch(object,source,matchData,customizer){var index=matchData.length,length=index,noCustomizer=!customizer;if(object==null){return !length;}object=Object(object);while(index--){var data=matchData[index];if(noCustomizer&&data[2]?data[1]!==object[data[0]]:!(data[0]in object)){return false;}}while(++index<length){data=matchData[index];var key=data[0],objValue=object[key],srcValue=data[1];if(noCustomizer&&data[2]){if(objValue===undefined$1&&!(key in object)){return false;}}else {var stack=new Stack();if(customizer){var result=customizer(objValue,srcValue,key,object,source,stack);}if(!(result===undefined$1?baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG,customizer,stack):result)){return false;}}}return true;}/**
	     * The base implementation of `_.isNative` without bad shim checks.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     */function baseIsNative(value){if(!isObject(value)||isMasked(value)){return false;}var pattern=isFunction(value)?reIsNative:reIsHostCtor;return pattern.test(toSource(value));}/**
	     * The base implementation of `_.isRegExp` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     */function baseIsRegExp(value){return isObjectLike(value)&&baseGetTag(value)==regexpTag;}/**
	     * The base implementation of `_.isSet` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     */function baseIsSet(value){return isObjectLike(value)&&getTag(value)==setTag;}/**
	     * The base implementation of `_.isTypedArray` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     */function baseIsTypedArray(value){return isObjectLike(value)&&isLength(value.length)&&!!typedArrayTags[baseGetTag(value)];}/**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */function baseIteratee(value){// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	// See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	if(typeof value=='function'){return value;}if(value==null){return identity;}if(_typeof$2(value)=='object'){return isArray(value)?baseMatchesProperty(value[0],value[1]):baseMatches(value);}return property(value);}/**
	     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */function baseKeys(object){if(!isPrototype(object)){return nativeKeys(object);}var result=[];for(var key in Object(object)){if(hasOwnProperty.call(object,key)&&key!='constructor'){result.push(key);}}return result;}/**
	     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */function baseKeysIn(object){if(!isObject(object)){return nativeKeysIn(object);}var isProto=isPrototype(object),result=[];for(var key in object){if(!(key=='constructor'&&(isProto||!hasOwnProperty.call(object,key)))){result.push(key);}}return result;}/**
	     * The base implementation of `_.lt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     */function baseLt(value,other){return value<other;}/**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */function baseMap(collection,iteratee){var index=-1,result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value,key,collection){result[++index]=iteratee(value,key,collection);});return result;}/**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     */function baseMatches(source){var matchData=getMatchData(source);if(matchData.length==1&&matchData[0][2]){return matchesStrictComparable(matchData[0][0],matchData[0][1]);}return function(object){return object===source||baseIsMatch(object,source,matchData);};}/**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */function baseMatchesProperty(path,srcValue){if(isKey(path)&&isStrictComparable(srcValue)){return matchesStrictComparable(toKey(path),srcValue);}return function(object){var objValue=get(object,path);return objValue===undefined$1&&objValue===srcValue?hasIn(object,path):baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG);};}/**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */function baseMerge(object,source,srcIndex,customizer,stack){if(object===source){return;}baseFor(source,function(srcValue,key){stack||(stack=new Stack());if(isObject(srcValue)){baseMergeDeep(object,source,key,srcIndex,baseMerge,customizer,stack);}else {var newValue=customizer?customizer(safeGet(object,key),srcValue,key+'',object,source,stack):undefined$1;if(newValue===undefined$1){newValue=srcValue;}assignMergeValue(object,key,newValue);}},keysIn);}/**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */function baseMergeDeep(object,source,key,srcIndex,mergeFunc,customizer,stack){var objValue=safeGet(object,key),srcValue=safeGet(source,key),stacked=stack.get(srcValue);if(stacked){assignMergeValue(object,key,stacked);return;}var newValue=customizer?customizer(objValue,srcValue,key+'',object,source,stack):undefined$1;var isCommon=newValue===undefined$1;if(isCommon){var isArr=isArray(srcValue),isBuff=!isArr&&isBuffer(srcValue),isTyped=!isArr&&!isBuff&&isTypedArray(srcValue);newValue=srcValue;if(isArr||isBuff||isTyped){if(isArray(objValue)){newValue=objValue;}else if(isArrayLikeObject(objValue)){newValue=copyArray(objValue);}else if(isBuff){isCommon=false;newValue=cloneBuffer(srcValue,true);}else if(isTyped){isCommon=false;newValue=cloneTypedArray(srcValue,true);}else {newValue=[];}}else if(isPlainObject(srcValue)||isArguments(srcValue)){newValue=objValue;if(isArguments(objValue)){newValue=toPlainObject(objValue);}else if(!isObject(objValue)||isFunction(objValue)){newValue=initCloneObject(srcValue);}}else {isCommon=false;}}if(isCommon){// Recursively merge objects and arrays (susceptible to call stack limits).
	stack.set(srcValue,newValue);mergeFunc(newValue,srcValue,srcIndex,customizer,stack);stack['delete'](srcValue);}assignMergeValue(object,key,newValue);}/**
	     * The base implementation of `_.nth` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {number} n The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     */function baseNth(array,n){var length=array.length;if(!length){return;}n+=n<0?length:0;return isIndex(n,length)?array[n]:undefined$1;}/**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */function baseOrderBy(collection,iteratees,orders){if(iteratees.length){iteratees=arrayMap(iteratees,function(iteratee){if(isArray(iteratee)){return function(value){return baseGet(value,iteratee.length===1?iteratee[0]:iteratee);};}return iteratee;});}else {iteratees=[identity];}var index=-1;iteratees=arrayMap(iteratees,baseUnary(getIteratee()));var result=baseMap(collection,function(value,key,collection){var criteria=arrayMap(iteratees,function(iteratee){return iteratee(value);});return {'criteria':criteria,'index':++index,'value':value};});return baseSortBy(result,function(object,other){return compareMultiple(object,other,orders);});}/**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Object} Returns the new object.
	     */function basePick(object,paths){return basePickBy(object,paths,function(value,path){return hasIn(object,path);});}/**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */function basePickBy(object,paths,predicate){var index=-1,length=paths.length,result={};while(++index<length){var path=paths[index],value=baseGet(object,path);if(predicate(value,path)){baseSet(result,castPath(path,object),value);}}return result;}/**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     */function basePropertyDeep(path){return function(object){return baseGet(object,path);};}/**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */function basePullAll(array,values,iteratee,comparator){var indexOf=comparator?baseIndexOfWith:baseIndexOf,index=-1,length=values.length,seen=array;if(array===values){values=copyArray(values);}if(iteratee){seen=arrayMap(array,baseUnary(iteratee));}while(++index<length){var fromIndex=0,value=values[index],computed=iteratee?iteratee(value):value;while((fromIndex=indexOf(seen,computed,fromIndex,comparator))>-1){if(seen!==array){splice.call(seen,fromIndex,1);}splice.call(array,fromIndex,1);}}return array;}/**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */function basePullAt(array,indexes){var length=array?indexes.length:0,lastIndex=length-1;while(length--){var index=indexes[length];if(length==lastIndex||index!==previous){var previous=index;if(isIndex(index)){splice.call(array,index,1);}else {baseUnset(array,index);}}}return array;}/**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */function baseRandom(lower,upper){return lower+nativeFloor(nativeRandom()*(upper-lower+1));}/**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the range of numbers.
	     */function baseRange(start,end,step,fromRight){var index=-1,length=nativeMax(nativeCeil((end-start)/(step||1)),0),result=Array(length);while(length--){result[fromRight?length:++index]=start;start+=step;}return result;}/**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */function baseRepeat(string,n){var result='';if(!string||n<1||n>MAX_SAFE_INTEGER){return result;}// Leverage the exponentiation by squaring algorithm for a faster repeat.
	// See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	do{if(n%2){result+=string;}n=nativeFloor(n/2);if(n){string+=string;}}while(n);return result;}/**
	     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     */function baseRest(func,start){return setToString(overRest(func,start,identity),func+'');}/**
	     * The base implementation of `_.sample`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     */function baseSample(collection){return arraySample(values(collection));}/**
	     * The base implementation of `_.sampleSize` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */function baseSampleSize(collection,n){var array=values(collection);return shuffleSelf(array,baseClamp(n,0,array.length));}/**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */function baseSet(object,path,value,customizer){if(!isObject(object)){return object;}path=castPath(path,object);var index=-1,length=path.length,lastIndex=length-1,nested=object;while(nested!=null&&++index<length){var key=toKey(path[index]),newValue=value;if(key==='__proto__'||key==='constructor'||key==='prototype'){return object;}if(index!=lastIndex){var objValue=nested[key];newValue=customizer?customizer(objValue,key,nested):undefined$1;if(newValue===undefined$1){newValue=isObject(objValue)?objValue:isIndex(path[index+1])?[]:{};}}assignValue(nested,key,newValue);nested=nested[key];}return object;}/**
	     * The base implementation of `setData` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */var baseSetData=!metaMap?identity:function(func,data){metaMap.set(func,data);return func;};/**
	     * The base implementation of `setToString` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */var baseSetToString=!defineProperty?identity:function(func,string){return defineProperty(func,'toString',{'configurable':true,'enumerable':false,'value':constant(string),'writable':true});};/**
	     * The base implementation of `_.shuffle`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */function baseShuffle(collection){return shuffleSelf(values(collection));}/**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */function baseSlice(array,start,end){var index=-1,length=array.length;if(start<0){start=-start>length?0:length+start;}end=end>length?length:end;if(end<0){end+=length;}length=start>end?0:end-start>>>0;start>>>=0;var result=Array(length);while(++index<length){result[index]=array[index+start];}return result;}/**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */function baseSome(collection,predicate){var result;baseEach(collection,function(value,index,collection){result=predicate(value,index,collection);return !result;});return !!result;}/**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */function baseSortedIndex(array,value,retHighest){var low=0,high=array==null?low:array.length;if(typeof value=='number'&&value===value&&high<=HALF_MAX_ARRAY_LENGTH){while(low<high){var mid=low+high>>>1,computed=array[mid];if(computed!==null&&!isSymbol(computed)&&(retHighest?computed<=value:computed<value)){low=mid+1;}else {high=mid;}}return high;}return baseSortedIndexBy(array,value,identity,retHighest);}/**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */function baseSortedIndexBy(array,value,iteratee,retHighest){var low=0,high=array==null?0:array.length;if(high===0){return 0;}value=iteratee(value);var valIsNaN=value!==value,valIsNull=value===null,valIsSymbol=isSymbol(value),valIsUndefined=value===undefined$1;while(low<high){var mid=nativeFloor((low+high)/2),computed=iteratee(array[mid]),othIsDefined=computed!==undefined$1,othIsNull=computed===null,othIsReflexive=computed===computed,othIsSymbol=isSymbol(computed);if(valIsNaN){var setLow=retHighest||othIsReflexive;}else if(valIsUndefined){setLow=othIsReflexive&&(retHighest||othIsDefined);}else if(valIsNull){setLow=othIsReflexive&&othIsDefined&&(retHighest||!othIsNull);}else if(valIsSymbol){setLow=othIsReflexive&&othIsDefined&&!othIsNull&&(retHighest||!othIsSymbol);}else if(othIsNull||othIsSymbol){setLow=false;}else {setLow=retHighest?computed<=value:computed<value;}if(setLow){low=mid+1;}else {high=mid;}}return nativeMin(high,MAX_ARRAY_INDEX);}/**
	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
	     * support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */function baseSortedUniq(array,iteratee){var index=-1,length=array.length,resIndex=0,result=[];while(++index<length){var value=array[index],computed=iteratee?iteratee(value):value;if(!index||!eq(computed,seen)){var seen=computed;result[resIndex++]=value===0?0:value;}}return result;}/**
	     * The base implementation of `_.toNumber` which doesn't ensure correct
	     * conversions of binary, hexadecimal, or octal string values.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     */function baseToNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}return +value;}/**
	     * The base implementation of `_.toString` which doesn't convert nullish
	     * values to empty strings.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     */function baseToString(value){// Exit early for strings to avoid a performance hit in some environments.
	if(typeof value=='string'){return value;}if(isArray(value)){// Recursively convert values (susceptible to call stack limits).
	return arrayMap(value,baseToString)+'';}if(isSymbol(value)){return symbolToString?symbolToString.call(value):'';}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}/**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */function baseUniq(array,iteratee,comparator){var index=-1,includes=arrayIncludes,length=array.length,isCommon=true,result=[],seen=result;if(comparator){isCommon=false;includes=arrayIncludesWith;}else if(length>=LARGE_ARRAY_SIZE){var set=iteratee?null:createSet(array);if(set){return setToArray(set);}isCommon=false;includes=cacheHas;seen=new SetCache();}else {seen=iteratee?[]:result;}outer:while(++index<length){var value=array[index],computed=iteratee?iteratee(value):value;value=comparator||value!==0?value:0;if(isCommon&&computed===computed){var seenIndex=seen.length;while(seenIndex--){if(seen[seenIndex]===computed){continue outer;}}if(iteratee){seen.push(computed);}result.push(value);}else if(!includes(seen,computed,comparator)){if(seen!==result){seen.push(computed);}result.push(value);}}return result;}/**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The property path to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */function baseUnset(object,path){path=castPath(path,object);object=parent(object,path);return object==null||delete object[toKey(last(path))];}/**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */function baseUpdate(object,path,updater,customizer){return baseSet(object,path,updater(baseGet(object,path)),customizer);}/**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */function baseWhile(array,predicate,isDrop,fromRight){var length=array.length,index=fromRight?length:-1;while((fromRight?index--:++index<length)&&predicate(array[index],index,array)){}return isDrop?baseSlice(array,fromRight?0:index,fromRight?index+1:length):baseSlice(array,fromRight?index+1:0,fromRight?length:index);}/**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */function baseWrapperValue(value,actions){var result=value;if(result instanceof LazyWrapper){result=result.value();}return arrayReduce(actions,function(result,action){return action.func.apply(action.thisArg,arrayPush([result],action.args));},result);}/**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */function baseXor(arrays,iteratee,comparator){var length=arrays.length;if(length<2){return length?baseUniq(arrays[0]):[];}var index=-1,result=Array(length);while(++index<length){var array=arrays[index],othIndex=-1;while(++othIndex<length){if(othIndex!=index){result[index]=baseDifference(result[index]||array,arrays[othIndex],iteratee,comparator);}}}return baseUniq(baseFlatten(result,1),iteratee,comparator);}/**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */function baseZipObject(props,values,assignFunc){var index=-1,length=props.length,valsLength=values.length,result={};while(++index<length){var value=index<valsLength?values[index]:undefined$1;assignFunc(result,props[index],value);}return result;}/**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */function castArrayLikeObject(value){return isArrayLikeObject(value)?value:[];}/**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */function castFunction(value){return typeof value=='function'?value:identity;}/**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {Array} Returns the cast property path array.
	     */function castPath(value,object){if(isArray(value)){return value;}return isKey(value,object)?[value]:stringToPath(toString(value));}/**
	     * A `baseRest` alias which can be replaced with `identity` by module
	     * replacement plugins.
	     *
	     * @private
	     * @type {Function}
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */var castRest=baseRest;/**
	     * Casts `array` to a slice if it's needed.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {number} start The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the cast slice.
	     */function castSlice(array,start,end){var length=array.length;end=end===undefined$1?length:end;return !start&&end>=length?array:baseSlice(array,start,end);}/**
	     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
	     *
	     * @private
	     * @param {number|Object} id The timer id or timeout object of the timer to clear.
	     */var clearTimeout=ctxClearTimeout||function(id){return root.clearTimeout(id);};/**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */function cloneBuffer(buffer,isDeep){if(isDeep){return buffer.slice();}var length=buffer.length,result=allocUnsafe?allocUnsafe(length):new buffer.constructor(length);buffer.copy(result);return result;}/**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */function cloneArrayBuffer(arrayBuffer){var result=new arrayBuffer.constructor(arrayBuffer.byteLength);new Uint8Array(result).set(new Uint8Array(arrayBuffer));return result;}/**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */function cloneDataView(dataView,isDeep){var buffer=isDeep?cloneArrayBuffer(dataView.buffer):dataView.buffer;return new dataView.constructor(buffer,dataView.byteOffset,dataView.byteLength);}/**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */function cloneRegExp(regexp){var result=new regexp.constructor(regexp.source,reFlags.exec(regexp));result.lastIndex=regexp.lastIndex;return result;}/**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */function cloneSymbol(symbol){return symbolValueOf?Object(symbolValueOf.call(symbol)):{};}/**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */function cloneTypedArray(typedArray,isDeep){var buffer=isDeep?cloneArrayBuffer(typedArray.buffer):typedArray.buffer;return new typedArray.constructor(buffer,typedArray.byteOffset,typedArray.length);}/**
	     * Compares values to sort them in ascending order.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {number} Returns the sort order indicator for `value`.
	     */function compareAscending(value,other){if(value!==other){var valIsDefined=value!==undefined$1,valIsNull=value===null,valIsReflexive=value===value,valIsSymbol=isSymbol(value);var othIsDefined=other!==undefined$1,othIsNull=other===null,othIsReflexive=other===other,othIsSymbol=isSymbol(other);if(!othIsNull&&!othIsSymbol&&!valIsSymbol&&value>other||valIsSymbol&&othIsDefined&&othIsReflexive&&!othIsNull&&!othIsSymbol||valIsNull&&othIsDefined&&othIsReflexive||!valIsDefined&&othIsReflexive||!valIsReflexive){return 1;}if(!valIsNull&&!valIsSymbol&&!othIsSymbol&&value<other||othIsSymbol&&valIsDefined&&valIsReflexive&&!valIsNull&&!valIsSymbol||othIsNull&&valIsDefined&&valIsReflexive||!othIsDefined&&valIsReflexive||!othIsReflexive){return -1;}}return 0;}/**
	     * Used by `_.orderBy` to compare multiple properties of a value to another
	     * and stable sort them.
	     *
	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	     * specify an order of "desc" for descending or "asc" for ascending sort order
	     * of corresponding values.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {boolean[]|string[]} orders The order to sort by for each property.
	     * @returns {number} Returns the sort order indicator for `object`.
	     */function compareMultiple(object,other,orders){var index=-1,objCriteria=object.criteria,othCriteria=other.criteria,length=objCriteria.length,ordersLength=orders.length;while(++index<length){var result=compareAscending(objCriteria[index],othCriteria[index]);if(result){if(index>=ordersLength){return result;}var order=orders[index];return result*(order=='desc'?-1:1);}}// Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	// that causes it, under certain circumstances, to provide the same value for
	// `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	// for more details.
	//
	// This also ensures a stable sort in V8 and other engines.
	// See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	return object.index-other.index;}/**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */function composeArgs(args,partials,holders,isCurried){var argsIndex=-1,argsLength=args.length,holdersLength=holders.length,leftIndex=-1,leftLength=partials.length,rangeLength=nativeMax(argsLength-holdersLength,0),result=Array(leftLength+rangeLength),isUncurried=!isCurried;while(++leftIndex<leftLength){result[leftIndex]=partials[leftIndex];}while(++argsIndex<holdersLength){if(isUncurried||argsIndex<argsLength){result[holders[argsIndex]]=args[argsIndex];}}while(rangeLength--){result[leftIndex++]=args[argsIndex++];}return result;}/**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */function composeArgsRight(args,partials,holders,isCurried){var argsIndex=-1,argsLength=args.length,holdersIndex=-1,holdersLength=holders.length,rightIndex=-1,rightLength=partials.length,rangeLength=nativeMax(argsLength-holdersLength,0),result=Array(rangeLength+rightLength),isUncurried=!isCurried;while(++argsIndex<rangeLength){result[argsIndex]=args[argsIndex];}var offset=argsIndex;while(++rightIndex<rightLength){result[offset+rightIndex]=partials[rightIndex];}while(++holdersIndex<holdersLength){if(isUncurried||argsIndex<argsLength){result[offset+holders[holdersIndex]]=args[argsIndex++];}}return result;}/**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */function copyArray(source,array){var index=-1,length=source.length;array||(array=Array(length));while(++index<length){array[index]=source[index];}return array;}/**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */function copyObject(source,props,object,customizer){var isNew=!object;object||(object={});var index=-1,length=props.length;while(++index<length){var key=props[index];var newValue=customizer?customizer(object[key],source[key],key,object,source):undefined$1;if(newValue===undefined$1){newValue=source[key];}if(isNew){baseAssignValue(object,key,newValue);}else {assignValue(object,key,newValue);}}return object;}/**
	     * Copies own symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */function copySymbols(source,object){return copyObject(source,getSymbols(source),object);}/**
	     * Copies own and inherited symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */function copySymbolsIn(source,object){return copyObject(source,getSymbolsIn(source),object);}/**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */function createAggregator(setter,initializer){return function(collection,iteratee){var func=isArray(collection)?arrayAggregator:baseAggregator,accumulator=initializer?initializer():{};return func(collection,setter,getIteratee(iteratee,2),accumulator);};}/**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */function createAssigner(assigner){return baseRest(function(object,sources){var index=-1,length=sources.length,customizer=length>1?sources[length-1]:undefined$1,guard=length>2?sources[2]:undefined$1;customizer=assigner.length>3&&typeof customizer=='function'?(length--,customizer):undefined$1;if(guard&&isIterateeCall(sources[0],sources[1],guard)){customizer=length<3?undefined$1:customizer;length=1;}object=Object(object);while(++index<length){var source=sources[index];if(source){assigner(object,source,index,customizer);}}return object;});}/**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */function createBaseEach(eachFunc,fromRight){return function(collection,iteratee){if(collection==null){return collection;}if(!isArrayLike(collection)){return eachFunc(collection,iteratee);}var length=collection.length,index=fromRight?length:-1,iterable=Object(collection);while(fromRight?index--:++index<length){if(iteratee(iterable[index],index,iterable)===false){break;}}return collection;};}/**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */function createBaseFor(fromRight){return function(object,iteratee,keysFunc){var index=-1,iterable=Object(object),props=keysFunc(object),length=props.length;while(length--){var key=props[fromRight?length:++index];if(iteratee(iterable[key],key,iterable)===false){break;}}return object;};}/**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */function createBind(func,bitmask,thisArg){var isBind=bitmask&WRAP_BIND_FLAG,Ctor=createCtor(func);function wrapper(){var fn=this&&this!==root&&this instanceof wrapper?Ctor:func;return fn.apply(isBind?thisArg:this,arguments);}return wrapper;}/**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new case function.
	     */function createCaseFirst(methodName){return function(string){string=toString(string);var strSymbols=hasUnicode(string)?stringToArray(string):undefined$1;var chr=strSymbols?strSymbols[0]:string.charAt(0);var trailing=strSymbols?castSlice(strSymbols,1).join(''):string.slice(1);return chr[methodName]()+trailing;};}/**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */function createCompounder(callback){return function(string){return arrayReduce(words(deburr(string).replace(reApos,'')),callback,'');};}/**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */function createCtor(Ctor){return function(){// Use a `switch` statement to work with class constructors. See
	// http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	// for more details.
	var args=arguments;switch(args.length){case 0:return new Ctor();case 1:return new Ctor(args[0]);case 2:return new Ctor(args[0],args[1]);case 3:return new Ctor(args[0],args[1],args[2]);case 4:return new Ctor(args[0],args[1],args[2],args[3]);case 5:return new Ctor(args[0],args[1],args[2],args[3],args[4]);case 6:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5]);case 7:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);}var thisBinding=baseCreate(Ctor.prototype),result=Ctor.apply(thisBinding,args);// Mimic the constructor's `return` behavior.
	// See https://es5.github.io/#x13.2.2 for more details.
	return isObject(result)?result:thisBinding;};}/**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */function createCurry(func,bitmask,arity){var Ctor=createCtor(func);function wrapper(){var length=arguments.length,args=Array(length),index=length,placeholder=getHolder(wrapper);while(index--){args[index]=arguments[index];}var holders=length<3&&args[0]!==placeholder&&args[length-1]!==placeholder?[]:replaceHolders(args,placeholder);length-=holders.length;if(length<arity){return createRecurry(func,bitmask,createHybrid,wrapper.placeholder,undefined$1,args,holders,undefined$1,undefined$1,arity-length);}var fn=this&&this!==root&&this instanceof wrapper?Ctor:func;return apply(fn,this,args);}return wrapper;}/**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} findIndexFunc The function to find the collection index.
	     * @returns {Function} Returns the new find function.
	     */function createFind(findIndexFunc){return function(collection,predicate,fromIndex){var iterable=Object(collection);if(!isArrayLike(collection)){var iteratee=getIteratee(predicate,3);collection=keys(collection);predicate=function predicate(key){return iteratee(iterable[key],key,iterable);};}var index=findIndexFunc(collection,predicate,fromIndex);return index>-1?iterable[iteratee?collection[index]:index]:undefined$1;};}/**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */function createFlow(fromRight){return flatRest(function(funcs){var length=funcs.length,index=length,prereq=LodashWrapper.prototype.thru;if(fromRight){funcs.reverse();}while(index--){var func=funcs[index];if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(prereq&&!wrapper&&getFuncName(func)=='wrapper'){var wrapper=new LodashWrapper([],true);}}index=wrapper?index:length;while(++index<length){func=funcs[index];var funcName=getFuncName(func),data=funcName=='wrapper'?getData(func):undefined$1;if(data&&isLaziable(data[0])&&data[1]==(WRAP_ARY_FLAG|WRAP_CURRY_FLAG|WRAP_PARTIAL_FLAG|WRAP_REARG_FLAG)&&!data[4].length&&data[9]==1){wrapper=wrapper[getFuncName(data[0])].apply(wrapper,data[3]);}else {wrapper=func.length==1&&isLaziable(func)?wrapper[funcName]():wrapper.thru(func);}}return function(){var args=arguments,value=args[0];if(wrapper&&args.length==1&&isArray(value)){return wrapper.plant(value).value();}var index=0,result=length?funcs[index].apply(this,args):value;while(++index<length){result=funcs[index].call(this,result);}return result;};});}/**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */function createHybrid(func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity){var isAry=bitmask&WRAP_ARY_FLAG,isBind=bitmask&WRAP_BIND_FLAG,isBindKey=bitmask&WRAP_BIND_KEY_FLAG,isCurried=bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG),isFlip=bitmask&WRAP_FLIP_FLAG,Ctor=isBindKey?undefined$1:createCtor(func);function wrapper(){var length=arguments.length,args=Array(length),index=length;while(index--){args[index]=arguments[index];}if(isCurried){var placeholder=getHolder(wrapper),holdersCount=countHolders(args,placeholder);}if(partials){args=composeArgs(args,partials,holders,isCurried);}if(partialsRight){args=composeArgsRight(args,partialsRight,holdersRight,isCurried);}length-=holdersCount;if(isCurried&&length<arity){var newHolders=replaceHolders(args,placeholder);return createRecurry(func,bitmask,createHybrid,wrapper.placeholder,thisArg,args,newHolders,argPos,ary,arity-length);}var thisBinding=isBind?thisArg:this,fn=isBindKey?thisBinding[func]:func;length=args.length;if(argPos){args=reorder(args,argPos);}else if(isFlip&&length>1){args.reverse();}if(isAry&&ary<length){args.length=ary;}if(this&&this!==root&&this instanceof wrapper){fn=Ctor||createCtor(fn);}return fn.apply(thisBinding,args);}return wrapper;}/**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */function createInverter(setter,toIteratee){return function(object,iteratee){return baseInverter(object,setter,toIteratee(iteratee),{});};}/**
	     * Creates a function that performs a mathematical operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @param {number} [defaultValue] The value used for `undefined` arguments.
	     * @returns {Function} Returns the new mathematical operation function.
	     */function createMathOperation(operator,defaultValue){return function(value,other){var result;if(value===undefined$1&&other===undefined$1){return defaultValue;}if(value!==undefined$1){result=value;}if(other!==undefined$1){if(result===undefined$1){return other;}if(typeof value=='string'||typeof other=='string'){value=baseToString(value);other=baseToString(other);}else {value=baseToNumber(value);other=baseToNumber(other);}result=operator(value,other);}return result;};}/**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new over function.
	     */function createOver(arrayFunc){return flatRest(function(iteratees){iteratees=arrayMap(iteratees,baseUnary(getIteratee()));return baseRest(function(args){var thisArg=this;return arrayFunc(iteratees,function(iteratee){return apply(iteratee,thisArg,args);});});});}/**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */function createPadding(length,chars){chars=chars===undefined$1?' ':baseToString(chars);var charsLength=chars.length;if(charsLength<2){return charsLength?baseRepeat(chars,length):chars;}var result=baseRepeat(chars,nativeCeil(length/stringSize(chars)));return hasUnicode(chars)?castSlice(stringToArray(result),0,length).join(''):result.slice(0,length);}/**
	     * Creates a function that wraps `func` to invoke it with the `this` binding
	     * of `thisArg` and `partials` prepended to the arguments it receives.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */function createPartial(func,bitmask,thisArg,partials){var isBind=bitmask&WRAP_BIND_FLAG,Ctor=createCtor(func);function wrapper(){var argsIndex=-1,argsLength=arguments.length,leftIndex=-1,leftLength=partials.length,args=Array(leftLength+argsLength),fn=this&&this!==root&&this instanceof wrapper?Ctor:func;while(++leftIndex<leftLength){args[leftIndex]=partials[leftIndex];}while(argsLength--){args[leftIndex++]=arguments[++argsIndex];}return apply(fn,isBind?thisArg:this,args);}return wrapper;}/**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */function createRange(fromRight){return function(start,end,step){if(step&&typeof step!='number'&&isIterateeCall(start,end,step)){end=step=undefined$1;}// Ensure the sign of `-0` is preserved.
	start=toFinite(start);if(end===undefined$1){end=start;start=0;}else {end=toFinite(end);}step=step===undefined$1?start<end?1:-1:toFinite(step);return baseRange(start,end,step,fromRight);};}/**
	     * Creates a function that performs a relational operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @returns {Function} Returns the new relational operation function.
	     */function createRelationalOperation(operator){return function(value,other){if(!(typeof value=='string'&&typeof other=='string')){value=toNumber(value);other=toNumber(other);}return operator(value,other);};}/**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */function createRecurry(func,bitmask,wrapFunc,placeholder,thisArg,partials,holders,argPos,ary,arity){var isCurry=bitmask&WRAP_CURRY_FLAG,newHolders=isCurry?holders:undefined$1,newHoldersRight=isCurry?undefined$1:holders,newPartials=isCurry?partials:undefined$1,newPartialsRight=isCurry?undefined$1:partials;bitmask|=isCurry?WRAP_PARTIAL_FLAG:WRAP_PARTIAL_RIGHT_FLAG;bitmask&=~(isCurry?WRAP_PARTIAL_RIGHT_FLAG:WRAP_PARTIAL_FLAG);if(!(bitmask&WRAP_CURRY_BOUND_FLAG)){bitmask&=~(WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG);}var newData=[func,bitmask,thisArg,newPartials,newHolders,newPartialsRight,newHoldersRight,argPos,ary,arity];var result=wrapFunc.apply(undefined$1,newData);if(isLaziable(func)){setData(result,newData);}result.placeholder=placeholder;return setWrapToString(result,func,bitmask);}/**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */function createRound(methodName){var func=Math[methodName];return function(number,precision){number=toNumber(number);precision=precision==null?0:nativeMin(toInteger(precision),292);if(precision&&nativeIsFinite(number)){// Shift with exponential notation to avoid floating-point issues.
	// See [MDN](https://mdn.io/round#Examples) for more details.
	var pair=(toString(number)+'e').split('e'),value=func(pair[0]+'e'+(+pair[1]+precision));pair=(toString(value)+'e').split('e');return +(pair[0]+'e'+(+pair[1]-precision));}return func(number);};}/**
	     * Creates a set object of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */var createSet=!(Set&&1/setToArray(new Set([,-0]))[1]==INFINITY)?noop:function(values){return new Set(values);};/**
	     * Creates a `_.toPairs` or `_.toPairsIn` function.
	     *
	     * @private
	     * @param {Function} keysFunc The function to get the keys of a given object.
	     * @returns {Function} Returns the new pairs function.
	     */function createToPairs(keysFunc){return function(object){var tag=getTag(object);if(tag==mapTag){return mapToArray(object);}if(tag==setTag){return setToPairs(object);}return baseToPairs(object,keysFunc(object));};}/**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags.
	     *    1 - `_.bind`
	     *    2 - `_.bindKey`
	     *    4 - `_.curry` or `_.curryRight` of a bound function
	     *    8 - `_.curry`
	     *   16 - `_.curryRight`
	     *   32 - `_.partial`
	     *   64 - `_.partialRight`
	     *  128 - `_.rearg`
	     *  256 - `_.ary`
	     *  512 - `_.flip`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */function createWrap(func,bitmask,thisArg,partials,holders,argPos,ary,arity){var isBindKey=bitmask&WRAP_BIND_KEY_FLAG;if(!isBindKey&&typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}var length=partials?partials.length:0;if(!length){bitmask&=~(WRAP_PARTIAL_FLAG|WRAP_PARTIAL_RIGHT_FLAG);partials=holders=undefined$1;}ary=ary===undefined$1?ary:nativeMax(toInteger(ary),0);arity=arity===undefined$1?arity:toInteger(arity);length-=holders?holders.length:0;if(bitmask&WRAP_PARTIAL_RIGHT_FLAG){var partialsRight=partials,holdersRight=holders;partials=holders=undefined$1;}var data=isBindKey?undefined$1:getData(func);var newData=[func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity];if(data){mergeData(newData,data);}func=newData[0];bitmask=newData[1];thisArg=newData[2];partials=newData[3];holders=newData[4];arity=newData[9]=newData[9]===undefined$1?isBindKey?0:func.length:nativeMax(newData[9]-length,0);if(!arity&&bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG)){bitmask&=~(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG);}if(!bitmask||bitmask==WRAP_BIND_FLAG){var result=createBind(func,bitmask,thisArg);}else if(bitmask==WRAP_CURRY_FLAG||bitmask==WRAP_CURRY_RIGHT_FLAG){result=createCurry(func,bitmask,arity);}else if((bitmask==WRAP_PARTIAL_FLAG||bitmask==(WRAP_BIND_FLAG|WRAP_PARTIAL_FLAG))&&!holders.length){result=createPartial(func,bitmask,thisArg,partials);}else {result=createHybrid.apply(undefined$1,newData);}var setter=data?baseSetData:setData;return setWrapToString(setter(result,newData),func,bitmask);}/**
	     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
	     * of source objects to the destination object for all destination properties
	     * that resolve to `undefined`.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */function customDefaultsAssignIn(objValue,srcValue,key,object){if(objValue===undefined$1||eq(objValue,objectProto[key])&&!hasOwnProperty.call(object,key)){return srcValue;}return objValue;}/**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
	     * objects into destination objects that are passed thru.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */function customDefaultsMerge(objValue,srcValue,key,object,source,stack){if(isObject(objValue)&&isObject(srcValue)){// Recursively merge objects and arrays (susceptible to call stack limits).
	stack.set(srcValue,objValue);baseMerge(objValue,srcValue,undefined$1,customDefaultsMerge,stack);stack['delete'](srcValue);}return objValue;}/**
	     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
	     * objects.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {string} key The key of the property to inspect.
	     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
	     */function customOmitClone(value){return isPlainObject(value)?undefined$1:value;}/**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */function equalArrays(array,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,arrLength=array.length,othLength=other.length;if(arrLength!=othLength&&!(isPartial&&othLength>arrLength)){return false;}// Check that cyclic values are equal.
	var arrStacked=stack.get(array);var othStacked=stack.get(other);if(arrStacked&&othStacked){return arrStacked==other&&othStacked==array;}var index=-1,result=true,seen=bitmask&COMPARE_UNORDERED_FLAG?new SetCache():undefined$1;stack.set(array,other);stack.set(other,array);// Ignore non-index properties.
	while(++index<arrLength){var arrValue=array[index],othValue=other[index];if(customizer){var compared=isPartial?customizer(othValue,arrValue,index,other,array,stack):customizer(arrValue,othValue,index,array,other,stack);}if(compared!==undefined$1){if(compared){continue;}result=false;break;}// Recursively compare arrays (susceptible to call stack limits).
	if(seen){if(!arraySome(other,function(othValue,othIndex){if(!cacheHas(seen,othIndex)&&(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){return seen.push(othIndex);}})){result=false;break;}}else if(!(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){result=false;break;}}stack['delete'](array);stack['delete'](other);return result;}/**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */function equalByTag(object,other,tag,bitmask,customizer,equalFunc,stack){switch(tag){case dataViewTag:if(object.byteLength!=other.byteLength||object.byteOffset!=other.byteOffset){return false;}object=object.buffer;other=other.buffer;case arrayBufferTag:if(object.byteLength!=other.byteLength||!equalFunc(new Uint8Array(object),new Uint8Array(other))){return false;}return true;case boolTag:case dateTag:case numberTag:// Coerce booleans to `1` or `0` and dates to milliseconds.
	// Invalid dates are coerced to `NaN`.
	return eq(+object,+other);case errorTag:return object.name==other.name&&object.message==other.message;case regexpTag:case stringTag:// Coerce regexes to strings and treat strings, primitives and objects,
	// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	// for more details.
	return object==other+'';case mapTag:var convert=mapToArray;case setTag:var isPartial=bitmask&COMPARE_PARTIAL_FLAG;convert||(convert=setToArray);if(object.size!=other.size&&!isPartial){return false;}// Assume cyclic values are equal.
	var stacked=stack.get(object);if(stacked){return stacked==other;}bitmask|=COMPARE_UNORDERED_FLAG;// Recursively compare objects (susceptible to call stack limits).
	stack.set(object,other);var result=equalArrays(convert(object),convert(other),bitmask,customizer,equalFunc,stack);stack['delete'](object);return result;case symbolTag:if(symbolValueOf){return symbolValueOf.call(object)==symbolValueOf.call(other);}}return false;}/**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */function equalObjects(object,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,objProps=getAllKeys(object),objLength=objProps.length,othProps=getAllKeys(other),othLength=othProps.length;if(objLength!=othLength&&!isPartial){return false;}var index=objLength;while(index--){var key=objProps[index];if(!(isPartial?key in other:hasOwnProperty.call(other,key))){return false;}}// Check that cyclic values are equal.
	var objStacked=stack.get(object);var othStacked=stack.get(other);if(objStacked&&othStacked){return objStacked==other&&othStacked==object;}var result=true;stack.set(object,other);stack.set(other,object);var skipCtor=isPartial;while(++index<objLength){key=objProps[index];var objValue=object[key],othValue=other[key];if(customizer){var compared=isPartial?customizer(othValue,objValue,key,other,object,stack):customizer(objValue,othValue,key,object,other,stack);}// Recursively compare objects (susceptible to call stack limits).
	if(!(compared===undefined$1?objValue===othValue||equalFunc(objValue,othValue,bitmask,customizer,stack):compared)){result=false;break;}skipCtor||(skipCtor=key=='constructor');}if(result&&!skipCtor){var objCtor=object.constructor,othCtor=other.constructor;// Non `Object` object instances with different constructors are not equal.
	if(objCtor!=othCtor&&'constructor'in object&&'constructor'in other&&!(typeof objCtor=='function'&&objCtor instanceof objCtor&&typeof othCtor=='function'&&othCtor instanceof othCtor)){result=false;}}stack['delete'](object);stack['delete'](other);return result;}/**
	     * A specialized version of `baseRest` which flattens the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */function flatRest(func){return setToString(overRest(func,undefined$1,flatten),func+'');}/**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */function getAllKeys(object){return baseGetAllKeys(object,keys,getSymbols);}/**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */function getAllKeysIn(object){return baseGetAllKeys(object,keysIn,getSymbolsIn);}/**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */var getData=!metaMap?noop:function(func){return metaMap.get(func);};/**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */function getFuncName(func){var result=func.name+'',array=realNames[result],length=hasOwnProperty.call(realNames,result)?array.length:0;while(length--){var data=array[length],otherFunc=data.func;if(otherFunc==null||otherFunc==func){return data.name;}}return result;}/**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */function getHolder(func){var object=hasOwnProperty.call(lodash,'placeholder')?lodash:func;return object.placeholder;}/**
	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
	     * this function returns the custom method, otherwise it returns `baseIteratee`.
	     * If arguments are provided, the chosen function is invoked with them and
	     * its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */function getIteratee(){var result=lodash.iteratee||iteratee;result=result===iteratee?baseIteratee:result;return arguments.length?result(arguments[0],arguments[1]):result;}/**
	     * Gets the data for `map`.
	     *
	     * @private
	     * @param {Object} map The map to query.
	     * @param {string} key The reference key.
	     * @returns {*} Returns the map data.
	     */function getMapData(map,key){var data=map.__data__;return isKeyable(key)?data[typeof key=='string'?'string':'hash']:data.map;}/**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */function getMatchData(object){var result=keys(object),length=result.length;while(length--){var key=result[length],value=object[key];result[length]=[key,value,isStrictComparable(value)];}return result;}/**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */function getNative(object,key){var value=getValue(object,key);return baseIsNative(value)?value:undefined$1;}/**
	     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the raw `toStringTag`.
	     */function getRawTag(value){var isOwn=hasOwnProperty.call(value,symToStringTag),tag=value[symToStringTag];try{value[symToStringTag]=undefined$1;var unmasked=true;}catch(e){}var result=nativeObjectToString.call(value);if(unmasked){if(isOwn){value[symToStringTag]=tag;}else {delete value[symToStringTag];}}return result;}/**
	     * Creates an array of the own enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */var getSymbols=!nativeGetSymbols?stubArray:function(object){if(object==null){return [];}object=Object(object);return arrayFilter(nativeGetSymbols(object),function(symbol){return propertyIsEnumerable.call(object,symbol);});};/**
	     * Creates an array of the own and inherited enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */var getSymbolsIn=!nativeGetSymbols?stubArray:function(object){var result=[];while(object){arrayPush(result,getSymbols(object));object=getPrototype(object);}return result;};/**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */var getTag=baseGetTag;// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	if(DataView&&getTag(new DataView(new ArrayBuffer(1)))!=dataViewTag||Map&&getTag(new Map())!=mapTag||Promise&&getTag(Promise.resolve())!=promiseTag||Set&&getTag(new Set())!=setTag||WeakMap&&getTag(new WeakMap())!=weakMapTag){getTag=function getTag(value){var result=baseGetTag(value),Ctor=result==objectTag?value.constructor:undefined$1,ctorString=Ctor?toSource(Ctor):'';if(ctorString){switch(ctorString){case dataViewCtorString:return dataViewTag;case mapCtorString:return mapTag;case promiseCtorString:return promiseTag;case setCtorString:return setTag;case weakMapCtorString:return weakMapTag;}}return result;};}/**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */function getView(start,end,transforms){var index=-1,length=transforms.length;while(++index<length){var data=transforms[index],size=data.size;switch(data.type){case'drop':start+=size;break;case'dropRight':end-=size;break;case'take':end=nativeMin(end,start+size);break;case'takeRight':start=nativeMax(start,end-size);break;}}return {'start':start,'end':end};}/**
	     * Extracts wrapper details from the `source` body comment.
	     *
	     * @private
	     * @param {string} source The source to inspect.
	     * @returns {Array} Returns the wrapper details.
	     */function getWrapDetails(source){var match=source.match(reWrapDetails);return match?match[1].split(reSplitDetails):[];}/**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */function hasPath(object,path,hasFunc){path=castPath(path,object);var index=-1,length=path.length,result=false;while(++index<length){var key=toKey(path[index]);if(!(result=object!=null&&hasFunc(object,key))){break;}object=object[key];}if(result||++index!=length){return result;}length=object==null?0:object.length;return !!length&&isLength(length)&&isIndex(key,length)&&(isArray(object)||isArguments(object));}/**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */function initCloneArray(array){var length=array.length,result=new array.constructor(length);// Add properties assigned by `RegExp#exec`.
	if(length&&typeof array[0]=='string'&&hasOwnProperty.call(array,'index')){result.index=array.index;result.input=array.input;}return result;}/**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */function initCloneObject(object){return typeof object.constructor=='function'&&!isPrototype(object)?baseCreate(getPrototype(object)):{};}/**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */function initCloneByTag(object,tag,isDeep){var Ctor=object.constructor;switch(tag){case arrayBufferTag:return cloneArrayBuffer(object);case boolTag:case dateTag:return new Ctor(+object);case dataViewTag:return cloneDataView(object,isDeep);case float32Tag:case float64Tag:case int8Tag:case int16Tag:case int32Tag:case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:return cloneTypedArray(object,isDeep);case mapTag:return new Ctor();case numberTag:case stringTag:return new Ctor(object);case regexpTag:return cloneRegExp(object);case setTag:return new Ctor();case symbolTag:return cloneSymbol(object);}}/**
	     * Inserts wrapper `details` in a comment at the top of the `source` body.
	     *
	     * @private
	     * @param {string} source The source to modify.
	     * @returns {Array} details The details to insert.
	     * @returns {string} Returns the modified source.
	     */function insertWrapDetails(source,details){var length=details.length;if(!length){return source;}var lastIndex=length-1;details[lastIndex]=(length>1?'& ':'')+details[lastIndex];details=details.join(length>2?', ':' ');return source.replace(reWrapComment,'{\n/* [wrapped with '+details+'] */\n');}/**
	     * Checks if `value` is a flattenable `arguments` object or array.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */function isFlattenable(value){return isArray(value)||isArguments(value)||!!(spreadableSymbol&&value&&value[spreadableSymbol]);}/**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */function isIndex(value,length){var type=_typeof$2(value);length=length==null?MAX_SAFE_INTEGER:length;return !!length&&(type=='number'||type!='symbol'&&reIsUint.test(value))&&value>-1&&value%1==0&&value<length;}/**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */function isIterateeCall(value,index,object){if(!isObject(object)){return false;}var type=_typeof$2(index);if(type=='number'?isArrayLike(object)&&isIndex(index,object.length):type=='string'&&index in object){return eq(object[index],value);}return false;}/**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */function isKey(value,object){if(isArray(value)){return false;}var type=_typeof$2(value);if(type=='number'||type=='symbol'||type=='boolean'||value==null||isSymbol(value)){return true;}return reIsPlainProp.test(value)||!reIsDeepProp.test(value)||object!=null&&value in Object(object);}/**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */function isKeyable(value){var type=_typeof$2(value);return type=='string'||type=='number'||type=='symbol'||type=='boolean'?value!=='__proto__':value===null;}/**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */function isLaziable(func){var funcName=getFuncName(func),other=lodash[funcName];if(typeof other!='function'||!(funcName in LazyWrapper.prototype)){return false;}if(func===other){return true;}var data=getData(other);return !!data&&func===data[0];}/**
	     * Checks if `func` has its source masked.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	     */function isMasked(func){return !!maskSrcKey&&maskSrcKey in func;}/**
	     * Checks if `func` is capable of being masked.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
	     */var isMaskable=coreJsData?isFunction:stubFalse;/**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */function isPrototype(value){var Ctor=value&&value.constructor,proto=typeof Ctor=='function'&&Ctor.prototype||objectProto;return value===proto;}/**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */function isStrictComparable(value){return value===value&&!isObject(value);}/**
	     * A specialized version of `matchesProperty` for source values suitable
	     * for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */function matchesStrictComparable(key,srcValue){return function(object){if(object==null){return false;}return object[key]===srcValue&&(srcValue!==undefined$1||key in Object(object));};}/**
	     * A specialized version of `_.memoize` which clears the memoized function's
	     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	     *
	     * @private
	     * @param {Function} func The function to have its output memoized.
	     * @returns {Function} Returns the new memoized function.
	     */function memoizeCapped(func){var result=memoize(func,function(key){if(cache.size===MAX_MEMOIZE_SIZE){cache.clear();}return key;});var cache=result.cache;return result;}/**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */function mergeData(data,source){var bitmask=data[1],srcBitmask=source[1],newBitmask=bitmask|srcBitmask,isCommon=newBitmask<(WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG|WRAP_ARY_FLAG);var isCombo=srcBitmask==WRAP_ARY_FLAG&&bitmask==WRAP_CURRY_FLAG||srcBitmask==WRAP_ARY_FLAG&&bitmask==WRAP_REARG_FLAG&&data[7].length<=source[8]||srcBitmask==(WRAP_ARY_FLAG|WRAP_REARG_FLAG)&&source[7].length<=source[8]&&bitmask==WRAP_CURRY_FLAG;// Exit early if metadata can't be merged.
	if(!(isCommon||isCombo)){return data;}// Use source `thisArg` if available.
	if(srcBitmask&WRAP_BIND_FLAG){data[2]=source[2];// Set when currying a bound function.
	newBitmask|=bitmask&WRAP_BIND_FLAG?0:WRAP_CURRY_BOUND_FLAG;}// Compose partial arguments.
	var value=source[3];if(value){var partials=data[3];data[3]=partials?composeArgs(partials,value,source[4]):value;data[4]=partials?replaceHolders(data[3],PLACEHOLDER):source[4];}// Compose partial right arguments.
	value=source[5];if(value){partials=data[5];data[5]=partials?composeArgsRight(partials,value,source[6]):value;data[6]=partials?replaceHolders(data[5],PLACEHOLDER):source[6];}// Use source `argPos` if available.
	value=source[7];if(value){data[7]=value;}// Use source `ary` if it's smaller.
	if(srcBitmask&WRAP_ARY_FLAG){data[8]=data[8]==null?source[8]:nativeMin(data[8],source[8]);}// Use source `arity` if one is not provided.
	if(data[9]==null){data[9]=source[9];}// Use source `func` and merge bitmasks.
	data[0]=source[0];data[1]=newBitmask;return data;}/**
	     * This function is like
	     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * except that it includes inherited enumerable properties.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */function nativeKeysIn(object){var result=[];if(object!=null){for(var key in Object(object)){result.push(key);}}return result;}/**
	     * Converts `value` to a string using `Object.prototype.toString`.
	     *
	     * @private
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     */function objectToString(value){return nativeObjectToString.call(value);}/**
	     * A specialized version of `baseRest` which transforms the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @param {Function} transform The rest array transform.
	     * @returns {Function} Returns the new function.
	     */function overRest(func,start,transform){start=nativeMax(start===undefined$1?func.length-1:start,0);return function(){var args=arguments,index=-1,length=nativeMax(args.length-start,0),array=Array(length);while(++index<length){array[index]=args[start+index];}index=-1;var otherArgs=Array(start+1);while(++index<start){otherArgs[index]=args[index];}otherArgs[start]=transform(array);return apply(func,this,otherArgs);};}/**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */function parent(object,path){return path.length<2?object:baseGet(object,baseSlice(path,0,-1));}/**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */function reorder(array,indexes){var arrLength=array.length,length=nativeMin(indexes.length,arrLength),oldArray=copyArray(array);while(length--){var index=indexes[length];array[length]=isIndex(index,arrLength)?oldArray[index]:undefined$1;}return array;}/**
	     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the property to get.
	     * @returns {*} Returns the property value.
	     */function safeGet(object,key){if(key==='constructor'&&typeof object[key]==='function'){return;}if(key=='__proto__'){return;}return object[key];}/**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */var setData=shortOut(baseSetData);/**
	     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */var setTimeout=ctxSetTimeout||function(func,wait){return root.setTimeout(func,wait);};/**
	     * Sets the `toString` method of `func` to return `string`.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */var setToString=shortOut(baseSetToString);/**
	     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	     * with wrapper details in a comment at the top of the source body.
	     *
	     * @private
	     * @param {Function} wrapper The function to modify.
	     * @param {Function} reference The reference function.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Function} Returns `wrapper`.
	     */function setWrapToString(wrapper,reference,bitmask){var source=reference+'';return setToString(wrapper,insertWrapDetails(source,updateWrapDetails(getWrapDetails(source),bitmask)));}/**
	     * Creates a function that'll short out and invoke `identity` instead
	     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	     * milliseconds.
	     *
	     * @private
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new shortable function.
	     */function shortOut(func){var count=0,lastCalled=0;return function(){var stamp=nativeNow(),remaining=HOT_SPAN-(stamp-lastCalled);lastCalled=stamp;if(remaining>0){if(++count>=HOT_COUNT){return arguments[0];}}else {count=0;}return func.apply(undefined$1,arguments);};}/**
	     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @param {number} [size=array.length] The size of `array`.
	     * @returns {Array} Returns `array`.
	     */function shuffleSelf(array,size){var index=-1,length=array.length,lastIndex=length-1;size=size===undefined$1?length:size;while(++index<size){var rand=baseRandom(index,lastIndex),value=array[rand];array[rand]=array[index];array[index]=value;}array.length=size;return array;}/**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */var stringToPath=memoizeCapped(function(string){var result=[];if(string.charCodeAt(0)===46/* . */){result.push('');}string.replace(rePropName,function(match,number,quote,subString){result.push(quote?subString.replace(reEscapeChar,'$1'):number||match);});return result;});/**
	     * Converts `value` to a string key if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the key.
	     */function toKey(value){if(typeof value=='string'||isSymbol(value)){return value;}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}/**
	     * Converts `func` to its source code.
	     *
	     * @private
	     * @param {Function} func The function to convert.
	     * @returns {string} Returns the source code.
	     */function toSource(func){if(func!=null){try{return funcToString.call(func);}catch(e){}try{return func+'';}catch(e){}}return '';}/**
	     * Updates wrapper `details` based on `bitmask` flags.
	     *
	     * @private
	     * @returns {Array} details The details to modify.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Array} Returns `details`.
	     */function updateWrapDetails(details,bitmask){arrayEach(wrapFlags,function(pair){var value='_.'+pair[0];if(bitmask&pair[1]&&!arrayIncludes(details,value)){details.push(value);}});return details.sort();}/**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */function wrapperClone(wrapper){if(wrapper instanceof LazyWrapper){return wrapper.clone();}var result=new LodashWrapper(wrapper.__wrapped__,wrapper.__chain__);result.__actions__=copyArray(wrapper.__actions__);result.__index__=wrapper.__index__;result.__values__=wrapper.__values__;return result;}/*------------------------------------------------------------------------*/ /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the new array of chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */function chunk(array,size,guard){if(guard?isIterateeCall(array,size,guard):size===undefined$1){size=1;}else {size=nativeMax(toInteger(size),0);}var length=array==null?0:array.length;if(!length||size<1){return [];}var index=0,resIndex=0,result=Array(nativeCeil(length/size));while(index<length){result[resIndex++]=baseSlice(array,index,index+=size);}return result;}/**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */function compact(array){var index=-1,length=array==null?0:array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(value){result[resIndex++]=value;}}return result;}/**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */function concat(){var length=arguments.length;if(!length){return [];}var args=Array(length-1),array=arguments[0],index=length;while(index--){args[index-1]=arguments[index];}return arrayPush(isArray(array)?copyArray(array):[array],baseFlatten(args,1));}/**
	     * Creates an array of `array` values not included in the other given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * **Note:** Unlike `_.pullAll`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.without, _.xor
	     * @example
	     *
	     * _.difference([2, 1], [2, 3]);
	     * // => [1]
	     */var difference=baseRest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true)):[];});/**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */var differenceBy=baseRest(function(array,values){var iteratee=last(values);if(isArrayLikeObject(iteratee)){iteratee=undefined$1;}return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true),getIteratee(iteratee,2)):[];});/**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. The order and
	     * references of result values are determined by the first array. The comparator
	     * is invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */var differenceWith=baseRest(function(array,values){var comparator=last(values);if(isArrayLikeObject(comparator)){comparator=undefined$1;}return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true),undefined$1,comparator):[];});/**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */function drop(array,n,guard){var length=array==null?0:array.length;if(!length){return [];}n=guard||n===undefined$1?1:toInteger(n);return baseSlice(array,n<0?0:n,length);}/**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */function dropRight(array,n,guard){var length=array==null?0:array.length;if(!length){return [];}n=guard||n===undefined$1?1:toInteger(n);n=length-n;return baseSlice(array,0,n<0?0:n);}/**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */function dropRightWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),true,true):[];}/**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */function dropWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),true):[];}/**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */function fill(array,value,start,end){var length=array==null?0:array.length;if(!length){return [];}if(start&&typeof start!='number'&&isIterateeCall(array,value,start)){start=0;end=length;}return baseFill(array,value,start,end);}/**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */function findIndex(array,predicate,fromIndex){var length=array==null?0:array.length;if(!length){return -1;}var index=fromIndex==null?0:toInteger(fromIndex);if(index<0){index=nativeMax(length+index,0);}return baseFindIndex(array,getIteratee(predicate,3),index);}/**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */function findLastIndex(array,predicate,fromIndex){var length=array==null?0:array.length;if(!length){return -1;}var index=length-1;if(fromIndex!==undefined$1){index=toInteger(fromIndex);index=fromIndex<0?nativeMax(length+index,0):nativeMin(index,length-1);}return baseFindIndex(array,getIteratee(predicate,3),index,true);}/**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */function flatten(array){var length=array==null?0:array.length;return length?baseFlatten(array,1):[];}/**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */function flattenDeep(array){var length=array==null?0:array.length;return length?baseFlatten(array,INFINITY):[];}/**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */function flattenDepth(array,depth){var length=array==null?0:array.length;if(!length){return [];}depth=depth===undefined$1?1:toInteger(depth);return baseFlatten(array,depth);}/**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['a', 1], ['b', 2]]);
	     * // => { 'a': 1, 'b': 2 }
	     */function fromPairs(pairs){var index=-1,length=pairs==null?0:pairs.length,result={};while(++index<length){var pair=pairs[index];result[pair[0]]=pair[1];}return result;}/**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */function head(array){return array&&array.length?array[0]:undefined$1;}/**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the
	     * offset from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */function indexOf(array,value,fromIndex){var length=array==null?0:array.length;if(!length){return -1;}var index=fromIndex==null?0:toInteger(fromIndex);if(index<0){index=nativeMax(length+index,0);}return baseIndexOf(array,value,index);}/**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */function initial(array){var length=array==null?0:array.length;return length?baseSlice(array,0,-1):[];}/**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [2, 3]);
	     * // => [2]
	     */var intersection=baseRest(function(arrays){var mapped=arrayMap(arrays,castArrayLikeObject);return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped):[];});/**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */var intersectionBy=baseRest(function(arrays){var iteratee=last(arrays),mapped=arrayMap(arrays,castArrayLikeObject);if(iteratee===last(mapped)){iteratee=undefined$1;}else {mapped.pop();}return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped,getIteratee(iteratee,2)):[];});/**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. The order and references
	     * of result values are determined by the first array. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */var intersectionWith=baseRest(function(arrays){var comparator=last(arrays),mapped=arrayMap(arrays,castArrayLikeObject);comparator=typeof comparator=='function'?comparator:undefined$1;if(comparator){mapped.pop();}return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped,undefined$1,comparator):[];});/**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */function join(array,separator){return array==null?'':nativeJoin.call(array,separator);}/**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */function last(array){var length=array==null?0:array.length;return length?array[length-1]:undefined$1;}/**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */function lastIndexOf(array,value,fromIndex){var length=array==null?0:array.length;if(!length){return -1;}var index=length;if(fromIndex!==undefined$1){index=toInteger(fromIndex);index=index<0?nativeMax(length+index,0):nativeMin(index,length-1);}return value===value?strictLastIndexOf(array,value,index):baseFindIndex(array,baseIsNaN,index,true);}/**
	     * Gets the element at index `n` of `array`. If `n` is negative, the nth
	     * element from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.11.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=0] The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     *
	     * _.nth(array, 1);
	     * // => 'b'
	     *
	     * _.nth(array, -2);
	     * // => 'c';
	     */function nth(array,n){return array&&array.length?baseNth(array,toInteger(n)):undefined$1;}/**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pull(array, 'a', 'c');
	     * console.log(array);
	     * // => ['b', 'b']
	     */var pull=baseRest(pullAll);/**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pullAll(array, ['a', 'c']);
	     * console.log(array);
	     * // => ['b', 'b']
	     */function pullAll(array,values){return array&&array.length&&values&&values.length?basePullAll(array,values):array;}/**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */function pullAllBy(array,values,iteratee){return array&&array.length&&values&&values.length?basePullAll(array,values,getIteratee(iteratee,2)):array;}/**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */function pullAllWith(array,values,comparator){return array&&array.length&&values&&values.length?basePullAll(array,values,undefined$1,comparator):array;}/**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     * var pulled = _.pullAt(array, [1, 3]);
	     *
	     * console.log(array);
	     * // => ['a', 'c']
	     *
	     * console.log(pulled);
	     * // => ['b', 'd']
	     */var pullAt=flatRest(function(array,indexes){var length=array==null?0:array.length,result=baseAt(array,indexes);basePullAt(array,arrayMap(indexes,function(index){return isIndex(index,length)?+index:index;}).sort(compareAscending));return result;});/**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */function remove(array,predicate){var result=[];if(!(array&&array.length)){return result;}var index=-1,indexes=[],length=array.length;predicate=getIteratee(predicate,3);while(++index<length){var value=array[index];if(predicate(value,index,array)){result.push(value);indexes.push(index);}}basePullAt(array,indexes);return result;}/**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */function reverse(array){return array==null?array:nativeReverse.call(array);}/**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */function slice(array,start,end){var length=array==null?0:array.length;if(!length){return [];}if(end&&typeof end!='number'&&isIterateeCall(array,start,end)){start=0;end=length;}else {start=start==null?0:toInteger(start);end=end===undefined$1?length:toInteger(end);}return baseSlice(array,start,end);}/**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     */function sortedIndex(array,value){return baseSortedIndex(array,value);}/**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 0
	     */function sortedIndexBy(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee,2));}/**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 1
	     */function sortedIndexOf(array,value){var length=array==null?0:array.length;if(length){var index=baseSortedIndex(array,value);if(index<length&&eq(array[index],value)){return index;}}return -1;}/**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
	     * // => 4
	     */function sortedLastIndex(array,value){return baseSortedIndex(array,value,true);}/**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 1
	     */function sortedLastIndexBy(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee,2),true);}/**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 3
	     */function sortedLastIndexOf(array,value){var length=array==null?0:array.length;if(length){var index=baseSortedIndex(array,value,true)-1;if(eq(array[index],value)){return index;}}return -1;}/**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */function sortedUniq(array){return array&&array.length?baseSortedUniq(array):[];}/**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */function sortedUniqBy(array,iteratee){return array&&array.length?baseSortedUniq(array,getIteratee(iteratee,2)):[];}/**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */function tail(array){var length=array==null?0:array.length;return length?baseSlice(array,1,length):[];}/**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */function take(array,n,guard){if(!(array&&array.length)){return [];}n=guard||n===undefined$1?1:toInteger(n);return baseSlice(array,0,n<0?0:n);}/**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */function takeRight(array,n,guard){var length=array==null?0:array.length;if(!length){return [];}n=guard||n===undefined$1?1:toInteger(n);n=length-n;return baseSlice(array,n<0?0:n,length);}/**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */function takeRightWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),false,true):[];}/**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */function takeWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3)):[];}/**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2], [1, 2]);
	     * // => [2, 1]
	     */var union=baseRest(function(arrays){return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true));});/**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which uniqueness is computed. Result values are chosen from the first
	     * array in which the value occurs. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */var unionBy=baseRest(function(arrays){var iteratee=last(arrays);if(isArrayLikeObject(iteratee)){iteratee=undefined$1;}return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true),getIteratee(iteratee,2));});/**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. Result values are chosen from
	     * the first array in which the value occurs. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */var unionWith=baseRest(function(arrays){var comparator=last(arrays);comparator=typeof comparator=='function'?comparator:undefined$1;return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true),undefined$1,comparator);});/**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each element
	     * is kept. The order of result values is determined by the order they occur
	     * in the array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */function uniq(array){return array&&array.length?baseUniq(array):[];}/**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The order of result values is determined by the
	     * order they occur in the array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */function uniqBy(array,iteratee){return array&&array.length?baseUniq(array,getIteratee(iteratee,2)):[];}/**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The order of result values is
	     * determined by the order they occur in the array.The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */function uniqWith(array,comparator){comparator=typeof comparator=='function'?comparator:undefined$1;return array&&array.length?baseUniq(array,undefined$1,comparator):[];}/**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['a', 'b'], [1, 2], [true, false]]
	     */function unzip(array){if(!(array&&array.length)){return [];}var length=0;array=arrayFilter(array,function(group){if(isArrayLikeObject(group)){length=nativeMax(group.length,length);return true;}});return baseTimes(length,function(index){return arrayMap(array,baseProperty(index));});}/**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */function unzipWith(array,iteratee){if(!(array&&array.length)){return [];}var result=unzip(array);if(iteratee==null){return result;}return arrayMap(result,function(group){return apply(iteratee,undefined$1,group);});}/**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.pull`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.xor
	     * @example
	     *
	     * _.without([2, 1, 2, 3], 1, 2);
	     * // => [3]
	     */var without=baseRest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,values):[];});/**
	     * Creates an array of unique values that is the
	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.without
	     * @example
	     *
	     * _.xor([2, 1], [2, 3]);
	     * // => [1, 3]
	     */var xor=baseRest(function(arrays){return baseXor(arrayFilter(arrays,isArrayLikeObject));});/**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which by which they're compared. The order of result values is determined
	     * by the order they occur in the arrays. The iteratee is invoked with one
	     * argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2, 3.4]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */var xorBy=baseRest(function(arrays){var iteratee=last(arrays);if(isArrayLikeObject(iteratee)){iteratee=undefined$1;}return baseXor(arrayFilter(arrays,isArrayLikeObject),getIteratee(iteratee,2));});/**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The order of result values is
	     * determined by the order they occur in the arrays. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */var xorWith=baseRest(function(arrays){var comparator=last(arrays);comparator=typeof comparator=='function'?comparator:undefined$1;return baseXor(arrayFilter(arrays,isArrayLikeObject),undefined$1,comparator);});/**
	     * Creates an array of grouped elements, the first of which contains the
	     * first elements of the given arrays, the second of which contains the
	     * second elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     */var zip=baseRest(unzip);/**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */function zipObject(props,values){return baseZipObject(props||[],values||[],assignValue);}/**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */function zipObjectDeep(props,values){return baseZipObject(props||[],values||[],baseSet);}/**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */var zipWith=baseRest(function(arrays){var length=arrays.length,iteratee=length>1?arrays[length-1]:undefined$1;iteratee=typeof iteratee=='function'?(arrays.pop(),iteratee):undefined$1;return unzipWith(arrays,iteratee);});/*------------------------------------------------------------------------*/ /**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */function chain(value){var result=lodash(value);result.__chain__=true;return result;}/**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */function tap(value,interceptor){interceptor(value);return value;}/**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */function thru(value,interceptor){return interceptor(value);}/**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @since 1.0.0
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     */var wrapperAt=flatRest(function(paths){var length=paths.length,start=length?paths[0]:0,value=this.__wrapped__,interceptor=function interceptor(object){return baseAt(object,paths);};if(length>1||this.__actions__.length||!(value instanceof LazyWrapper)||!isIndex(start)){return this.thru(interceptor);}value=value.slice(start,+start+(length?1:0));value.__actions__.push({'func':thru,'args':[interceptor],'thisArg':undefined$1});return new LodashWrapper(value,this.__chain__).thru(function(array){if(length&&!array.length){array.push(undefined$1);}return array;});});/**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */function wrapperChain(){return chain(this);}/**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */function wrapperCommit(){return new LodashWrapper(this.value(),this.__chain__);}/**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */function wrapperNext(){if(this.__values__===undefined$1){this.__values__=toArray(this.value());}var done=this.__index__>=this.__values__.length,value=done?undefined$1:this.__values__[this.__index__++];return {'done':done,'value':value};}/**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */function wrapperToIterator(){return this;}/**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */function wrapperPlant(value){var result,parent=this;while(parent instanceof baseLodash){var clone=wrapperClone(parent);clone.__index__=0;clone.__values__=undefined$1;if(result){previous.__wrapped__=clone;}else {result=clone;}var previous=clone;parent=parent.__wrapped__;}previous.__wrapped__=value;return result;}/**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */function wrapperReverse(){var value=this.__wrapped__;if(value instanceof LazyWrapper){var wrapped=value;if(this.__actions__.length){wrapped=new LazyWrapper(this);}wrapped=wrapped.reverse();wrapped.__actions__.push({'func':thru,'args':[reverse],'thisArg':undefined$1});return new LodashWrapper(wrapped,this.__chain__);}return this.thru(reverse);}/**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */function wrapperValue(){return baseWrapperValue(this.__wrapped__,this.__actions__);}/*------------------------------------------------------------------------*/ /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the number of times the key was returned by `iteratee`. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */var countBy=createAggregator(function(result,value,key){if(hasOwnProperty.call(result,key)){++result[key];}else {baseAssignValue(result,key,1);}});/**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * **Note:** This method returns `true` for
	     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
	     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
	     * elements of empty collections.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */function every(collection,predicate,guard){var func=isArray(collection)?arrayEvery:baseEvery;if(guard&&isIterateeCall(collection,predicate,guard)){predicate=undefined$1;}return func(collection,getIteratee(predicate,3));}/**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * **Note:** Unlike `_.remove`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.reject
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     *
	     * // Combining several predicates using `_.overEvery` or `_.overSome`.
	     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
	     * // => objects for ['fred', 'barney']
	     */function filter(collection,predicate){var func=isArray(collection)?arrayFilter:baseFilter;return func(collection,getIteratee(predicate,3));}/**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */var find=createFind(findIndex);/**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=collection.length-1] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */var findLast=createFind(findLastIndex);/**
	     * Creates a flattened array of values by running each element in `collection`
	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */function flatMap(collection,iteratee){return baseFlatten(map(collection,iteratee),1);}/**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */function flatMapDeep(collection,iteratee){return baseFlatten(map(collection,iteratee),INFINITY);}/**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */function flatMapDepth(collection,iteratee,depth){depth=depth===undefined$1?1:toInteger(depth);return baseFlatten(map(collection,iteratee),depth);}/**
	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEachRight
	     * @example
	     *
	     * _.forEach([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */function forEach(collection,iteratee){var func=isArray(collection)?arrayEach:baseEach;return func(collection,getIteratee(iteratee,3));}/**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEach
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */function forEachRight(collection,iteratee){var func=isArray(collection)?arrayEachRight:baseEachRight;return func(collection,getIteratee(iteratee,3));}/**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The order of grouped values
	     * is determined by the order they occur in `collection`. The corresponding
	     * value of each key is an array of elements responsible for generating the
	     * key. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */var groupBy=createAggregator(function(result,value,key){if(hasOwnProperty.call(result,key)){result[key].push(value);}else {baseAssignValue(result,key,[value]);}});/**
	     * Checks if `value` is in `collection`. If `collection` is a string, it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'a': 1, 'b': 2 }, 1);
	     * // => true
	     *
	     * _.includes('abcd', 'bc');
	     * // => true
	     */function includes(collection,value,fromIndex,guard){collection=isArrayLike(collection)?collection:values(collection);fromIndex=fromIndex&&!guard?toInteger(fromIndex):0;var length=collection.length;if(fromIndex<0){fromIndex=nativeMax(length+fromIndex,0);}return isString(collection)?fromIndex<=length&&collection.indexOf(value,fromIndex)>-1:!!length&&baseIndexOf(collection,value,fromIndex)>-1;}/**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `path` is a function, it's invoked
	     * for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */var invokeMap=baseRest(function(collection,path,args){var index=-1,isFunc=typeof path=='function',result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value){result[++index]=isFunc?apply(path,value,args):baseInvoke(value,path,args);});return result;});/**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */var keyBy=createAggregator(function(result,value,key){baseAssignValue(result,key,value);});/**
	     * Creates an array of values by running each element in `collection` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */function map(collection,iteratee){var func=isArray(collection)?arrayMap:baseMap;return func(collection,getIteratee(iteratee,3));}/**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */function orderBy(collection,iteratees,orders,guard){if(collection==null){return [];}if(!isArray(iteratees)){iteratees=iteratees==null?[]:[iteratees];}orders=guard?undefined$1:orders;if(!isArray(orders)){orders=orders==null?[]:[orders];}return baseOrderBy(collection,iteratees,orders);}/**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */var partition=createAggregator(function(result,value,key){result[key?0:1].push(value);},function(){return [[],[]];});/**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` thru `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given, the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduceRight
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */function reduce(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduce:baseReduce,initAccum=arguments.length<3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEach);}/**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduce
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */function reduceRight(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduceRight:baseReduce,initAccum=arguments.length<3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEachRight);}/**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.filter
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */function reject(collection,predicate){var func=isArray(collection)?arrayFilter:baseFilter;return func(collection,negate(getIteratee(predicate,3)));}/**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */function sample(collection){var func=isArray(collection)?arraySample:baseSample;return func(collection);}/**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=1] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */function sampleSize(collection,n,guard){if(guard?isIterateeCall(collection,n,guard):n===undefined$1){n=1;}else {n=toInteger(n);}var func=isArray(collection)?arraySampleSize:baseSampleSize;return func(collection,n);}/**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */function shuffle(collection){var func=isArray(collection)?arrayShuffle:baseShuffle;return func(collection);}/**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */function size(collection){if(collection==null){return 0;}if(isArrayLike(collection)){return isString(collection)?stringSize(collection):collection.length;}var tag=getTag(collection);if(tag==mapTag||tag==setTag){return collection.size;}return baseKeys(collection).length;}/**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */function some(collection,predicate,guard){var func=isArray(collection)?arraySome:baseSome;if(guard&&isIterateeCall(collection,predicate,guard)){predicate=undefined$1;}return func(collection,getIteratee(predicate,3));}/**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection thru each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 30 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, [function(o) { return o.user; }]);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
	     */var sortBy=baseRest(function(collection,iteratees){if(collection==null){return [];}var length=iteratees.length;if(length>1&&isIterateeCall(collection,iteratees[0],iteratees[1])){iteratees=[];}else if(length>2&&isIterateeCall(iteratees[0],iteratees[1],iteratees[2])){iteratees=[iteratees[0]];}return baseOrderBy(collection,baseFlatten(iteratees,1),[]);});/*------------------------------------------------------------------------*/ /**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => Logs the number of milliseconds it took for the deferred invocation.
	     */var now=ctxNow||function(){return root.Date.now();};/*------------------------------------------------------------------------*/ /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */function after(n,func){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}n=toInteger(n);return function(){if(--n<1){return func.apply(this,arguments);}};}/**
	     * Creates a function that invokes `func`, with up to `n` arguments,
	     * ignoring any additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */function ary(func,n,guard){n=guard?undefined$1:n;n=func&&n==null?func.length:n;return createWrap(func,WRAP_ARY_FLAG,undefined$1,undefined$1,undefined$1,undefined$1,n);}/**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => Allows adding up to 4 contacts to the list.
	     */function before(n,func){var result;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}n=toInteger(n);return function(){if(--n>0){result=func.apply(this,arguments);}if(n<=1){func=undefined$1;}return result;};}/**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and `partials` prepended to the arguments it receives.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * function greet(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * }
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */var bind=baseRest(function(func,thisArg,partials){var bitmask=WRAP_BIND_FLAG;if(partials.length){var holders=replaceHolders(partials,getHolder(bind));bitmask|=WRAP_PARTIAL_FLAG;}return createWrap(func,bitmask,thisArg,partials,holders);});/**
	     * Creates a function that invokes the method at `object[key]` with `partials`
	     * prepended to the arguments it receives.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist. See
	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */var bindKey=baseRest(function(object,key,partials){var bitmask=WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG;if(partials.length){var holders=replaceHolders(partials,getHolder(bindKey));bitmask|=WRAP_PARTIAL_FLAG;}return createWrap(key,bitmask,object,partials,holders);});/**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */function curry(func,arity,guard){arity=guard?undefined$1:arity;var result=createWrap(func,WRAP_CURRY_FLAG,undefined$1,undefined$1,undefined$1,undefined$1,undefined$1,arity);result.placeholder=curry.placeholder;return result;}/**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */function curryRight(func,arity,guard){arity=guard?undefined$1:arity;var result=createWrap(func,WRAP_CURRY_RIGHT_FLAG,undefined$1,undefined$1,undefined$1,undefined$1,undefined$1,arity);result.placeholder=curryRight.placeholder;return result;}/**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide `options` to indicate whether `func` should be invoked on the
	     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent
	     * calls to the debounced function return the result of the last `func`
	     * invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the debounced function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */function debounce(func,wait,options){var lastArgs,lastThis,maxWait,result,timerId,lastCallTime,lastInvokeTime=0,leading=false,maxing=false,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}wait=toNumber(wait)||0;if(isObject(options)){leading=!!options.leading;maxing='maxWait'in options;maxWait=maxing?nativeMax(toNumber(options.maxWait)||0,wait):maxWait;trailing='trailing'in options?!!options.trailing:trailing;}function invokeFunc(time){var args=lastArgs,thisArg=lastThis;lastArgs=lastThis=undefined$1;lastInvokeTime=time;result=func.apply(thisArg,args);return result;}function leadingEdge(time){// Reset any `maxWait` timer.
	lastInvokeTime=time;// Start the timer for the trailing edge.
	timerId=setTimeout(timerExpired,wait);// Invoke the leading edge.
	return leading?invokeFunc(time):result;}function remainingWait(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime,timeWaiting=wait-timeSinceLastCall;return maxing?nativeMin(timeWaiting,maxWait-timeSinceLastInvoke):timeWaiting;}function shouldInvoke(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime;// Either this is the first call, activity has stopped and we're at the
	// trailing edge, the system time has gone backwards and we're treating
	// it as the trailing edge, or we've hit the `maxWait` limit.
	return lastCallTime===undefined$1||timeSinceLastCall>=wait||timeSinceLastCall<0||maxing&&timeSinceLastInvoke>=maxWait;}function timerExpired(){var time=now();if(shouldInvoke(time)){return trailingEdge(time);}// Restart the timer.
	timerId=setTimeout(timerExpired,remainingWait(time));}function trailingEdge(time){timerId=undefined$1;// Only invoke if we have `lastArgs` which means `func` has been
	// debounced at least once.
	if(trailing&&lastArgs){return invokeFunc(time);}lastArgs=lastThis=undefined$1;return result;}function cancel(){if(timerId!==undefined$1){clearTimeout(timerId);}lastInvokeTime=0;lastArgs=lastCallTime=lastThis=timerId=undefined$1;}function flush(){return timerId===undefined$1?result:trailingEdge(now());}function debounced(){var time=now(),isInvoking=shouldInvoke(time);lastArgs=arguments;lastThis=this;lastCallTime=time;if(isInvoking){if(timerId===undefined$1){return leadingEdge(lastCallTime);}if(maxing){// Handle invocations in a tight loop.
	clearTimeout(timerId);timerId=setTimeout(timerExpired,wait);return invokeFunc(lastCallTime);}}if(timerId===undefined$1){timerId=setTimeout(timerExpired,wait);}return result;}debounced.cancel=cancel;debounced.flush=flush;return debounced;}/**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => Logs 'deferred' after one millisecond.
	     */var defer=baseRest(function(func,args){return baseDelay(func,1,args);});/**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => Logs 'later' after one second.
	     */var delay=baseRest(function(func,wait,args){return baseDelay(func,toNumber(wait)||0,args);});/**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new flipped function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */function flip(func){return createWrap(func,WRAP_FLIP_FLAG);}/**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided, it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoized function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */function memoize(func,resolver){if(typeof func!='function'||resolver!=null&&typeof resolver!='function'){throw new TypeError(FUNC_ERROR_TEXT);}var memoized=function memoized(){var args=arguments,key=resolver?resolver.apply(this,args):args[0],cache=memoized.cache;if(cache.has(key)){return cache.get(key);}var result=func.apply(this,args);memoized.cache=cache.set(key,result)||cache;return result;};memoized.cache=new(memoize.Cache||MapCache)();return memoized;}// Expose `MapCache`.
	memoize.Cache=MapCache;/**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new negated function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */function negate(predicate){if(typeof predicate!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return function(){var args=arguments;switch(args.length){case 0:return !predicate.call(this);case 1:return !predicate.call(this,args[0]);case 2:return !predicate.call(this,args[0],args[1]);case 3:return !predicate.call(this,args[0],args[1],args[2]);}return !predicate.apply(this,args);};}/**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // => `createApplication` is invoked once
	     */function once(func){return before(2,func);}/**
	     * Creates a function that invokes `func` with its arguments transformed.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms=[_.identity]]
	     *  The argument transforms.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, [square, doubled]);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */var overArgs=castRest(function(func,transforms){transforms=transforms.length==1&&isArray(transforms[0])?arrayMap(transforms[0],baseUnary(getIteratee())):arrayMap(baseFlatten(transforms,1),baseUnary(getIteratee()));var funcsLength=transforms.length;return baseRest(function(args){var index=-1,length=nativeMin(args.length,funcsLength);while(++index<length){args[index]=transforms[index].call(this,args[index]);}return apply(func,this,args);});});/**
	     * Creates a function that invokes `func` with `partials` prepended to the
	     * arguments it receives. This method is like `_.bind` except it does **not**
	     * alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.2.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */var partial=baseRest(function(func,partials){var holders=replaceHolders(partials,getHolder(partial));return createWrap(func,WRAP_PARTIAL_FLAG,undefined$1,partials,holders);});/**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to the arguments it receives.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */var partialRight=baseRest(function(func,partials){var holders=replaceHolders(partials,getHolder(partialRight));return createWrap(func,WRAP_PARTIAL_RIGHT_FLAG,undefined$1,partials,holders);});/**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified `indexes` where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, [2, 0, 1]);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */var rearg=flatRest(function(func,indexes){return createWrap(func,WRAP_REARG_FLAG,undefined$1,undefined$1,undefined$1,indexes);});/**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */function rest(func,start){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}start=start===undefined$1?start:toInteger(start);return baseRest(func,start);}/**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */function spread(func,start){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}start=start==null?0:nativeMax(toInteger(start),0);return baseRest(function(args){var array=args[start],otherArgs=castSlice(args,0,start);if(array){arrayPush(otherArgs,array);}return apply(func,this,otherArgs);});}/**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide `options` to indicate whether `func`
	     * should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */function throttle(func,wait,options){var leading=true,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(isObject(options)){leading='leading'in options?!!options.leading:leading;trailing='trailing'in options?!!options.trailing:trailing;}return debounce(func,wait,{'leading':leading,'maxWait':wait,'trailing':trailing});}/**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */function unary(func){return ary(func,1);}/**
	     * Creates a function that provides `value` to `wrapper` as its first
	     * argument. Any additional arguments provided to the function are appended
	     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
	     * binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */function wrap(value,wrapper){return partial(castFunction(wrapper),value);}/*------------------------------------------------------------------------*/ /**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */function castArray(){if(!arguments.length){return [];}var value=arguments[0];return isArray(value)?value:[value];}/**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeep
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */function clone(value){return baseClone(value,CLONE_SYMBOLS_FLAG);}/**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeepWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */function cloneWith(value,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;return baseClone(value,CLONE_SYMBOLS_FLAG,customizer);}/**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.clone
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */function cloneDeep(value){return baseClone(value,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG);}/**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.cloneWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */function cloneDeepWith(value,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;return baseClone(value,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG,customizer);}/**
	     * Checks if `object` conforms to `source` by invoking the predicate
	     * properties of `source` with the corresponding property values of `object`.
	     *
	     * **Note:** This method is equivalent to `_.conforms` when `source` is
	     * partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
	     * // => true
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
	     * // => false
	     */function conformsTo(object,source){return source==null||baseConformsTo(object,source,keys(source));}/**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */function eq(value,other){return value===other||value!==value&&other!==other;}/**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     * @see _.lt
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */var gt=createRelationalOperation(baseGt);/**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
	     *  `other`, else `false`.
	     * @see _.lte
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */var gte=createRelationalOperation(function(value,other){return value>=other;});/**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */var isArguments=baseIsArguments(function(){return arguments;}())?baseIsArguments:function(value){return isObjectLike(value)&&hasOwnProperty.call(value,'callee')&&!propertyIsEnumerable.call(value,'callee');};/**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */var isArray=Array.isArray;/**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */var isArrayBuffer=nodeIsArrayBuffer?baseUnary(nodeIsArrayBuffer):baseIsArrayBuffer;/**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */function isArrayLike(value){return value!=null&&isLength(value.length)&&!isFunction(value);}/**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */function isArrayLikeObject(value){return isObjectLike(value)&&isArrayLike(value);}/**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */function isBoolean(value){return value===true||value===false||isObjectLike(value)&&baseGetTag(value)==boolTag;}/**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */var isBuffer=nativeIsBuffer||stubFalse;/**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */var isDate=nodeIsDate?baseUnary(nodeIsDate):baseIsDate;/**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */function isElement(value){return isObjectLike(value)&&value.nodeType===1&&!isPlainObject(value);}/**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */function isEmpty(value){if(value==null){return true;}if(isArrayLike(value)&&(isArray(value)||typeof value=='string'||typeof value.splice=='function'||isBuffer(value)||isTypedArray(value)||isArguments(value))){return !value.length;}var tag=getTag(value);if(tag==mapTag||tag==setTag){return !value.size;}if(isPrototype(value)){return !baseKeys(value).length;}for(var key in value){if(hasOwnProperty.call(value,key)){return false;}}return true;}/**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are compared by strict equality, i.e. `===`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */function isEqual(value,other){return baseIsEqual(value,other);}/**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */function isEqualWith(value,other,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;var result=customizer?customizer(value,other):undefined$1;return result===undefined$1?baseIsEqual(value,other,undefined$1,customizer):!!result;}/**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */function isError(value){if(!isObjectLike(value)){return false;}var tag=baseGetTag(value);return tag==errorTag||tag==domExcTag||typeof value.message=='string'&&typeof value.name=='string'&&!isPlainObject(value);}/**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     *
	     * _.isFinite('3');
	     * // => false
	     */function isFinite(value){return typeof value=='number'&&nativeIsFinite(value);}/**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */function isFunction(value){if(!isObject(value)){return false;}// The use of `Object#toString` avoids issues with the `typeof` operator
	// in Safari 9 which returns 'object' for typed arrays and other constructors.
	var tag=baseGetTag(value);return tag==funcTag||tag==genTag||tag==asyncTag||tag==proxyTag;}/**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */function isInteger(value){return typeof value=='number'&&value==toInteger(value);}/**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */function isLength(value){return typeof value=='number'&&value>-1&&value%1==0&&value<=MAX_SAFE_INTEGER;}/**
	     * Checks if `value` is the
	     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */function isObject(value){var type=_typeof$2(value);return value!=null&&(type=='object'||type=='function');}/**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */function isObjectLike(value){return value!=null&&_typeof$2(value)=='object';}/**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */var isMap=nodeIsMap?baseUnary(nodeIsMap):baseIsMap;/**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values.
	     *
	     * **Note:** This method is equivalent to `_.matches` when `source` is
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.isMatch(object, { 'b': 2 });
	     * // => true
	     *
	     * _.isMatch(object, { 'b': 1 });
	     * // => false
	     */function isMatch(object,source){return object===source||baseIsMatch(object,source,getMatchData(source));}/**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */function isMatchWith(object,source,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;return baseIsMatch(object,source,getMatchData(source),customizer);}/**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is based on
	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	     * `undefined` and other non-number values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */function isNaN(value){// An `NaN` primitive is the only value that is not equal to itself.
	// Perform the `toStringTag` check first to avoid errors with some
	// ActiveX objects in IE.
	return isNumber(value)&&value!=+value;}/**
	     * Checks if `value` is a pristine native function.
	     *
	     * **Note:** This method can't reliably detect native functions in the presence
	     * of the core-js package because core-js circumvents this kind of detection.
	     * Despite multiple requests, the core-js maintainer has made it clear: any
	     * attempt to fix the detection will be obstructed. As a result, we're left
	     * with little choice but to throw an error. Unfortunately, this also affects
	     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
	     * which rely on core-js.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */function isNative(value){if(isMaskable(value)){throw new Error(CORE_ERROR_TEXT);}return baseIsNative(value);}/**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */function isNull(value){return value===null;}/**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */function isNil(value){return value==null;}/**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */function isNumber(value){return typeof value=='number'||isObjectLike(value)&&baseGetTag(value)==numberTag;}/**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */function isPlainObject(value){if(!isObjectLike(value)||baseGetTag(value)!=objectTag){return false;}var proto=getPrototype(value);if(proto===null){return true;}var Ctor=hasOwnProperty.call(proto,'constructor')&&proto.constructor;return typeof Ctor=='function'&&Ctor instanceof Ctor&&funcToString.call(Ctor)==objectCtorString;}/**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */var isRegExp=nodeIsRegExp?baseUnary(nodeIsRegExp):baseIsRegExp;/**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */function isSafeInteger(value){return isInteger(value)&&value>=-MAX_SAFE_INTEGER&&value<=MAX_SAFE_INTEGER;}/**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */var isSet=nodeIsSet?baseUnary(nodeIsSet):baseIsSet;/**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */function isString(value){return typeof value=='string'||!isArray(value)&&isObjectLike(value)&&baseGetTag(value)==stringTag;}/**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */function isSymbol(value){return _typeof$2(value)=='symbol'||isObjectLike(value)&&baseGetTag(value)==symbolTag;}/**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */var isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray;/**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */function isUndefined(value){return value===undefined$1;}/**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */function isWeakMap(value){return isObjectLike(value)&&getTag(value)==weakMapTag;}/**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */function isWeakSet(value){return isObjectLike(value)&&baseGetTag(value)==weakSetTag;}/**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     * @see _.gt
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */var lt=createRelationalOperation(baseLt);/**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to
	     *  `other`, else `false`.
	     * @see _.gte
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */var lte=createRelationalOperation(function(value,other){return value<=other;});/**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */function toArray(value){if(!value){return [];}if(isArrayLike(value)){return isString(value)?stringToArray(value):copyArray(value);}if(symIterator&&value[symIterator]){return iteratorToArray(value[symIterator]());}var tag=getTag(value),func=tag==mapTag?mapToArray:tag==setTag?setToArray:values;return func(value);}/**
	     * Converts `value` to a finite number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.12.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted number.
	     * @example
	     *
	     * _.toFinite(3.2);
	     * // => 3.2
	     *
	     * _.toFinite(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toFinite(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toFinite('3.2');
	     * // => 3.2
	     */function toFinite(value){if(!value){return value===0?value:0;}value=toNumber(value);if(value===INFINITY||value===-INFINITY){var sign=value<0?-1:1;return sign*MAX_INTEGER;}return value===value?value:0;}/**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3.2);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3.2');
	     * // => 3
	     */function toInteger(value){var result=toFinite(value),remainder=result%1;return result===result?remainder?result-remainder:result:0;}/**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3.2);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3.2');
	     * // => 3
	     */function toLength(value){return value?baseClamp(toInteger(value),0,MAX_ARRAY_LENGTH):0;}/**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3.2);
	     * // => 3.2
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3.2');
	     * // => 3.2
	     */function toNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}if(isObject(value)){var other=typeof value.valueOf=='function'?value.valueOf():value;value=isObject(other)?other+'':other;}if(typeof value!='string'){return value===0?value:+value;}value=baseTrim(value);var isBinary=reIsBinary.test(value);return isBinary||reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value;}/**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */function toPlainObject(value){return copyObject(value,keysIn(value));}/**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3.2);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3.2');
	     * // => 3
	     */function toSafeInteger(value){return value?baseClamp(toInteger(value),-MAX_SAFE_INTEGER,MAX_SAFE_INTEGER):value===0?value:0;}/**
	     * Converts `value` to a string. An empty string is returned for `null`
	     * and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */function toString(value){return value==null?'':baseToString(value);}/*------------------------------------------------------------------------*/ /**
	     * Assigns own enumerable string keyed properties of source objects to the
	     * destination object. Source objects are applied from left to right.
	     * Subsequent sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assignIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assign({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3 }
	     */var assign=createAssigner(function(object,source){if(isPrototype(source)||isArrayLike(source)){copyObject(source,keys(source),object);return;}for(var key in source){if(hasOwnProperty.call(source,key)){assignValue(object,key,source[key]);}}});/**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assign
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
	     */var assignIn=createAssigner(function(object,source){copyObject(source,keysIn(source),object);});/**
	     * This method is like `_.assignIn` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */var assignInWith=createAssigner(function(object,source,srcIndex,customizer){copyObject(source,keysIn(source),object,customizer);});/**
	     * This method is like `_.assign` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignInWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */var assignWith=createAssigner(function(object,source,srcIndex,customizer){copyObject(source,keys(source),object,customizer);});/**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Array} Returns the picked values.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     */var at=flatRest(baseAt);/**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given, its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */function create(prototype,properties){var result=baseCreate(prototype);return properties==null?result:baseAssign(result,properties);}/**
	     * Assigns own and inherited enumerable string keyed properties of source
	     * objects to the destination object for all destination properties that
	     * resolve to `undefined`. Source objects are applied from left to right.
	     * Once a property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaultsDeep
	     * @example
	     *
	     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */var defaults=baseRest(function(object,sources){object=Object(object);var index=-1;var length=sources.length;var guard=length>2?sources[2]:undefined$1;if(guard&&isIterateeCall(sources[0],sources[1],guard)){length=1;}while(++index<length){var source=sources[index];var props=keysIn(source);var propsIndex=-1;var propsLength=props.length;while(++propsIndex<propsLength){var key=props[propsIndex];var value=object[key];if(value===undefined$1||eq(value,objectProto[key])&&!hasOwnProperty.call(object,key)){object[key]=source[key];}}}return object;});/**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaults
	     * @example
	     *
	     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
	     * // => { 'a': { 'b': 2, 'c': 3 } }
	     */var defaultsDeep=baseRest(function(args){args.push(undefined$1,customDefaultsMerge);return apply(mergeWith,undefined$1,args);});/**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */function findKey(object,predicate){return baseFindKey(object,getIteratee(predicate,3),baseForOwn);}/**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */function findLastKey(object,predicate){return baseFindKey(object,getIteratee(predicate,3),baseForOwnRight);}/**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object and invokes `iteratee` for each property. The iteratee is invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forInRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */function forIn(object,iteratee){return object==null?object:baseFor(object,getIteratee(iteratee,3),keysIn);}/**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */function forInRight(object,iteratee){return object==null?object:baseForRight(object,getIteratee(iteratee,3),keysIn);}/**
	     * Iterates over own enumerable string keyed properties of an object and
	     * invokes `iteratee` for each property. The iteratee is invoked with three
	     * arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwnRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */function forOwn(object,iteratee){return object&&baseForOwn(object,getIteratee(iteratee,3));}/**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */function forOwnRight(object,iteratee){return object&&baseForOwnRight(object,getIteratee(iteratee,3));}/**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functionsIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */function functions(object){return object==null?[]:baseFunctions(object,keys(object));}/**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functions
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */function functionsIn(object){return object==null?[]:baseFunctions(object,keysIn(object));}/**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined`, the `defaultValue` is returned in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */function get(object,path,defaultValue){var result=object==null?undefined$1:baseGet(object,path);return result===undefined$1?defaultValue:result;}/**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': 2 } };
	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b');
	     * // => true
	     *
	     * _.has(object, ['a', 'b']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */function has(object,path){return object!=null&&hasPath(object,path,baseHas);}/**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */function hasIn(object,path){return object!=null&&hasPath(object,path,baseHasIn);}/**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite
	     * property assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */var invert=createInverter(function(result,value,key){if(value!=null&&typeof value.toString!='function'){value=nativeObjectToString.call(value);}result[value]=key;},constant(identity));/**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` thru `iteratee`. The
	     * corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */var invertBy=createInverter(function(result,value,key){if(value!=null&&typeof value.toString!='function'){value=nativeObjectToString.call(value);}if(hasOwnProperty.call(result,value)){result[value].push(key);}else {result[value]=[key];}},getIteratee);/**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */var invoke=baseRest(baseInvoke);/**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */function keys(object){return isArrayLike(object)?arrayLikeKeys(object):baseKeys(object);}/**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */function keysIn(object){return isArrayLike(object)?arrayLikeKeys(object,true):baseKeysIn(object);}/**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	     * with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapValues
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */function mapKeys(object,iteratee){var result={};iteratee=getIteratee(iteratee,3);baseForOwn(object,function(value,key,object){baseAssignValue(result,iteratee(value,key,object),value);});return result;}/**
	     * Creates an object with the same keys as `object` and values generated
	     * by running each own enumerable string keyed property of `object` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapKeys
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */function mapValues(object,iteratee){var result={};iteratee=getIteratee(iteratee,3);baseForOwn(object,function(value,key,object){baseAssignValue(result,key,iteratee(value,key,object));});return result;}/**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable string keyed properties of source objects into the
	     * destination object. Source properties that resolve to `undefined` are
	     * skipped if a destination value exists. Array and plain object properties
	     * are merged recursively. Other objects and value types are overridden by
	     * assignment. Source objects are applied from left to right. Subsequent
	     * sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {
	     *   'a': [{ 'b': 2 }, { 'd': 4 }]
	     * };
	     *
	     * var other = {
	     *   'a': [{ 'c': 3 }, { 'e': 5 }]
	     * };
	     *
	     * _.merge(object, other);
	     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	     */var merge=createAssigner(function(object,source,srcIndex){baseMerge(object,source,srcIndex);});/**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined`, merging is handled by the
	     * method instead. The `customizer` is invoked with six arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = { 'a': [1], 'b': [2] };
	     * var other = { 'a': [3], 'b': [4] };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'a': [1, 3], 'b': [2, 4] }
	     */var mergeWith=createAssigner(function(object,source,srcIndex,customizer){baseMerge(object,source,srcIndex,customizer);});/**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable property paths of `object` that are not omitted.
	     *
	     * **Note:** This method is considerably slower than `_.pick`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to omit.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */var omit=flatRest(function(object,paths){var result={};if(object==null){return result;}var isDeep=false;paths=arrayMap(paths,function(path){path=castPath(path,object);isDeep||(isDeep=path.length>1);return path;});copyObject(object,getAllKeysIn(object),result);if(isDeep){result=baseClone(result,CLONE_DEEP_FLAG|CLONE_FLAT_FLAG|CLONE_SYMBOLS_FLAG,customOmitClone);}var length=paths.length;while(length--){baseUnset(result,paths[length]);}return result;});/**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */function omitBy(object,predicate){return pickBy(object,negate(getIteratee(predicate)));}/**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */var pick=flatRest(function(object,paths){return object==null?{}:basePick(object,paths);});/**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */function pickBy(object,predicate){if(object==null){return {};}var props=arrayMap(getAllKeysIn(object),function(prop){return [prop];});predicate=getIteratee(predicate);return basePickBy(object,props,function(value,path){return predicate(value,path[0]);});}/**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */function result(object,path,defaultValue){path=castPath(path,object);var index=-1,length=path.length;// Ensure the loop is entered when path is empty.
	if(!length){length=1;object=undefined$1;}while(++index<length){var value=object==null?undefined$1:object[toKey(path[index])];if(value===undefined$1){index=length;value=defaultValue;}object=isFunction(value)?value.call(object):value;}return object;}/**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, ['x', '0', 'y', 'z'], 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */function set(object,path,value){return object==null?object:baseSet(object,path,value);}/**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */function setWith(object,path,value,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;return object==null?object:baseSet(object,path,value,customizer);}/**
	     * Creates an array of own enumerable string keyed-value pairs for `object`
	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
	     * entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entries
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */var toPairs=createToPairs(keys);/**
	     * Creates an array of own and inherited enumerable string keyed-value pairs
	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
	     * or set, its entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entriesIn
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
	     */var toPairsIn=createToPairs(keysIn);/**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable string keyed properties thru `iteratee`, with each invocation
	     * potentially mutating the `accumulator` object. If `accumulator` is not
	     * provided, a new object with the same `[[Prototype]]` will be used. The
	     * iteratee is invoked with four arguments: (accumulator, value, key, object).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */function transform(object,iteratee,accumulator){var isArr=isArray(object),isArrLike=isArr||isBuffer(object)||isTypedArray(object);iteratee=getIteratee(iteratee,4);if(accumulator==null){var Ctor=object&&object.constructor;if(isArrLike){accumulator=isArr?new Ctor():[];}else if(isObject(object)){accumulator=isFunction(Ctor)?baseCreate(getPrototype(object)):{};}else {accumulator={};}}(isArrLike?arrayEach:baseForOwn)(object,function(value,index,object){return iteratee(accumulator,value,index,object);});return accumulator;}/**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, ['a', '0', 'b', 'c']);
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */function unset(object,path){return object==null?true:baseUnset(object,path);}/**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */function update(object,path,updater){return object==null?object:baseUpdate(object,path,castFunction(updater));}/**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */function updateWith(object,path,updater,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;return object==null?object:baseUpdate(object,path,castFunction(updater),customizer);}/**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */function values(object){return object==null?[]:baseValues(object,keys(object));}/**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */function valuesIn(object){return object==null?[]:baseValues(object,keysIn(object));}/*------------------------------------------------------------------------*/ /**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */function clamp(number,lower,upper){if(upper===undefined$1){upper=lower;lower=undefined$1;}if(upper!==undefined$1){upper=toNumber(upper);upper=upper===upper?upper:0;}if(lower!==undefined$1){lower=toNumber(lower);lower=lower===lower?lower:0;}return baseClamp(toNumber(number),lower,upper);}/**
	     * Checks if `n` is between `start` and up to, but not including, `end`. If
	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @see _.range, _.rangeRight
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */function inRange(number,start,end){start=toFinite(start);if(end===undefined$1){end=start;start=0;}else {end=toFinite(end);}number=toNumber(number);return baseInRange(number,start,end);}/**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */function random(lower,upper,floating){if(floating&&typeof floating!='boolean'&&isIterateeCall(lower,upper,floating)){upper=floating=undefined$1;}if(floating===undefined$1){if(typeof upper=='boolean'){floating=upper;upper=undefined$1;}else if(typeof lower=='boolean'){floating=lower;lower=undefined$1;}}if(lower===undefined$1&&upper===undefined$1){lower=0;upper=1;}else {lower=toFinite(lower);if(upper===undefined$1){upper=lower;lower=0;}else {upper=toFinite(upper);}}if(lower>upper){var temp=lower;lower=upper;upper=temp;}if(floating||lower%1||upper%1){var rand=nativeRandom();return nativeMin(lower+rand*(upper-lower+freeParseFloat('1e-'+((rand+'').length-1))),upper);}return baseRandom(lower,upper);}/*------------------------------------------------------------------------*/ /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar--');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__FOO_BAR__');
	     * // => 'fooBar'
	     */var camelCase=createCompounder(function(result,word,index){word=word.toLowerCase();return result+(index?capitalize(word):word);});/**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */function capitalize(string){return upperFirst(toString(string).toLowerCase());}/**
	     * Deburrs `string` by converting
	     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	     * letters to basic Latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */function deburr(string){string=toString(string);return string&&string.replace(reLatin,deburrLetter).replace(reComboMark,'');}/**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search up to.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */function endsWith(string,target,position){string=toString(string);target=baseToString(target);var length=string.length;position=position===undefined$1?length:baseClamp(toInteger(position),0,length);var end=position;position-=target.length;return position>=0&&string.slice(position,end)==target;}/**
	     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
	     * corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */function escape(string){string=toString(string);return string&&reHasUnescapedHtml.test(string)?string.replace(reUnescapedHtml,escapeHtmlChar):string;}/**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */function escapeRegExp(string){string=toString(string);return string&&reHasRegExpChar.test(string)?string.replace(reRegExpChar,'\\$&'):string;}/**
	     * Converts `string` to
	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__FOO_BAR__');
	     * // => 'foo-bar'
	     */var kebabCase=createCompounder(function(result,word,index){return result+(index?'-':'')+word.toLowerCase();});/**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar--');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */var lowerCase=createCompounder(function(result,word,index){return result+(index?' ':'')+word.toLowerCase();});/**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */var lowerFirst=createCaseFirst('toLowerCase');/**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */function pad(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;if(!length||strLength>=length){return string;}var mid=(length-strLength)/2;return createPadding(nativeFloor(mid),chars)+string+createPadding(nativeCeil(mid),chars);}/**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */function padEnd(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;return length&&strLength<length?string+createPadding(length-strLength,chars):string;}/**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */function padStart(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;return length&&strLength<length?createPadding(length-strLength,chars)+string:string;}/**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */function parseInt(string,radix,guard){if(guard||radix==null){radix=0;}else if(radix){radix=+radix;}return nativeParseInt(toString(string).replace(reTrimStart,''),radix||0);}/**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=1] The number of times to repeat the string.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */function repeat(string,n,guard){if(guard?isIterateeCall(string,n,guard):n===undefined$1){n=1;}else {n=toInteger(n);}return baseRepeat(toString(string),n);}/**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */function replace(){var args=arguments,string=toString(args[0]);return args.length<3?string:string.replace(args[1],args[2]);}/**
	     * Converts `string` to
	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--FOO-BAR--');
	     * // => 'foo_bar'
	     */var snakeCase=createCompounder(function(result,word,index){return result+(index?'_':'')+word.toLowerCase();});/**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */function split(string,separator,limit){if(limit&&typeof limit!='number'&&isIterateeCall(string,separator,limit)){separator=limit=undefined$1;}limit=limit===undefined$1?MAX_ARRAY_LENGTH:limit>>>0;if(!limit){return [];}string=toString(string);if(string&&(typeof separator=='string'||separator!=null&&!isRegExp(separator))){separator=baseToString(separator);if(!separator&&hasUnicode(string)){return castSlice(stringToArray(string),0,limit);}}return string.split(separator,limit);}/**
	     * Converts `string` to
	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.1.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar--');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__FOO_BAR__');
	     * // => 'FOO BAR'
	     */var startCase=createCompounder(function(result,word,index){return result+(index?' ':'')+upperFirst(word);});/**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */function startsWith(string,target,position){string=toString(string);position=position==null?0:baseClamp(toInteger(position),0,string.length);target=baseToString(target);return string.slice(position,position+target.length)==target;}/**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given, it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES template literal delimiter as an "interpolate" delimiter.
	     * // Disable support by replacing the "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */function template(string,options,guard){// Based on John Resig's `tmpl` implementation
	// (http://ejohn.org/blog/javascript-micro-templating/)
	// and Laura Doktorova's doT.js (https://github.com/olado/doT).
	var settings=lodash.templateSettings;if(guard&&isIterateeCall(string,options,guard)){options=undefined$1;}string=toString(string);options=assignInWith({},options,settings,customDefaultsAssignIn);var imports=assignInWith({},options.imports,settings.imports,customDefaultsAssignIn),importsKeys=keys(imports),importsValues=baseValues(imports,importsKeys);var isEscaping,isEvaluating,index=0,interpolate=options.interpolate||reNoMatch,source="__p += '";// Compile the regexp to match each delimiter.
	var reDelimiters=RegExp((options.escape||reNoMatch).source+'|'+interpolate.source+'|'+(interpolate===reInterpolate?reEsTemplate:reNoMatch).source+'|'+(options.evaluate||reNoMatch).source+'|$','g');// Use a sourceURL for easier debugging.
	// The sourceURL gets injected into the source that's eval-ed, so be careful
	// to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
	// and escape the comment, thus injecting code that gets evaled.
	var sourceURL='//# sourceURL='+(hasOwnProperty.call(options,'sourceURL')?(options.sourceURL+'').replace(/\s/g,' '):'lodash.templateSources['+ ++templateCounter+']')+'\n';string.replace(reDelimiters,function(match,escapeValue,interpolateValue,esTemplateValue,evaluateValue,offset){interpolateValue||(interpolateValue=esTemplateValue);// Escape characters that can't be included in string literals.
	source+=string.slice(index,offset).replace(reUnescapedString,escapeStringChar);// Replace delimiters with snippets.
	if(escapeValue){isEscaping=true;source+="' +\n__e("+escapeValue+") +\n'";}if(evaluateValue){isEvaluating=true;source+="';\n"+evaluateValue+";\n__p += '";}if(interpolateValue){source+="' +\n((__t = ("+interpolateValue+")) == null ? '' : __t) +\n'";}index=offset+match.length;// The JS engine embedded in Adobe products needs `match` returned in
	// order to produce the correct `offset` value.
	return match;});source+="';\n";// If `variable` is not specified wrap a with-statement around the generated
	// code to add the data object to the top of the scope chain.
	var variable=hasOwnProperty.call(options,'variable')&&options.variable;if(!variable){source='with (obj) {\n'+source+'\n}\n';}// Throw an error if a forbidden character was found in `variable`, to prevent
	// potential command injection attacks.
	else if(reForbiddenIdentifierChars.test(variable)){throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);}// Cleanup code by stripping empty strings.
	source=(isEvaluating?source.replace(reEmptyStringLeading,''):source).replace(reEmptyStringMiddle,'$1').replace(reEmptyStringTrailing,'$1;');// Frame code as the function body.
	source='function('+(variable||'obj')+') {\n'+(variable?'':'obj || (obj = {});\n')+"var __t, __p = ''"+(isEscaping?', __e = _.escape':'')+(isEvaluating?', __j = Array.prototype.join;\n'+"function print() { __p += __j.call(arguments, '') }\n":';\n')+source+'return __p\n}';var result=attempt(function(){return Function(importsKeys,sourceURL+'return '+source).apply(undefined$1,importsValues);});// Provide the compiled function's source by its `toString` method or
	// the `source` property as a convenience for inlining compiled templates.
	result.source=source;if(isError(result)){throw result;}return result;}/**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */function toLower(value){return toString(value).toLowerCase();}/**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */function toUpper(value){return toString(value).toUpperCase();}/**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */function trim(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined$1)){return baseTrim(string);}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),chrSymbols=stringToArray(chars),start=charsStartIndex(strSymbols,chrSymbols),end=charsEndIndex(strSymbols,chrSymbols)+1;return castSlice(strSymbols,start,end).join('');}/**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */function trimEnd(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined$1)){return string.slice(0,trimmedEndIndex(string)+1);}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),end=charsEndIndex(strSymbols,stringToArray(chars))+1;return castSlice(strSymbols,0,end).join('');}/**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */function trimStart(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined$1)){return string.replace(reTrimStart,'');}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),start=charsStartIndex(strSymbols,stringToArray(chars));return castSlice(strSymbols,start).join('');}/**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */function truncate(string,options){var length=DEFAULT_TRUNC_LENGTH,omission=DEFAULT_TRUNC_OMISSION;if(isObject(options)){var separator='separator'in options?options.separator:separator;length='length'in options?toInteger(options.length):length;omission='omission'in options?baseToString(options.omission):omission;}string=toString(string);var strLength=string.length;if(hasUnicode(string)){var strSymbols=stringToArray(string);strLength=strSymbols.length;}if(length>=strLength){return string;}var end=length-stringSize(omission);if(end<1){return omission;}var result=strSymbols?castSlice(strSymbols,0,end).join(''):string.slice(0,end);if(separator===undefined$1){return result+omission;}if(strSymbols){end+=result.length-end;}if(isRegExp(separator)){if(string.slice(end).search(separator)){var match,substring=result;if(!separator.global){separator=RegExp(separator.source,toString(reFlags.exec(separator))+'g');}separator.lastIndex=0;while(match=separator.exec(substring)){var newEnd=match.index;}result=result.slice(0,newEnd===undefined$1?end:newEnd);}}else if(string.indexOf(baseToString(separator),end)!=end){var index=result.lastIndexOf(separator);if(index>-1){result=result.slice(0,index);}}return result+omission;}/**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */function unescape(string){string=toString(string);return string&&reHasEscapedHtml.test(string)?string.replace(reEscapedHtml,unescapeHtmlChar):string;}/**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */var upperCase=createCompounder(function(result,word,index){return result+(index?' ':'')+word.toUpperCase();});/**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */var upperFirst=createCaseFirst('toUpperCase');/**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */function words(string,pattern,guard){string=toString(string);pattern=guard?undefined$1:pattern;if(pattern===undefined$1){return hasUnicodeWord(string)?unicodeWords(string):asciiWords(string);}return string.match(pattern)||[];}/*------------------------------------------------------------------------*/ /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */var attempt=baseRest(function(func,args){try{return apply(func,undefined$1,args);}catch(e){return isError(e)?e:new Error(e);}});/**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'click': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, ['click']);
	     * jQuery(element).on('click', view.click);
	     * // => Logs 'clicked docs' when clicked.
	     */var bindAll=flatRest(function(object,methodNames){arrayEach(methodNames,function(key){key=toKey(key);baseAssignValue(object,key,bind(object[key],object));});return object;});/**
	     * Creates a function that iterates over `pairs` and invokes the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new composite function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.stubTrue,                      _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */function cond(pairs){var length=pairs==null?0:pairs.length,toIteratee=getIteratee();pairs=!length?[]:arrayMap(pairs,function(pair){if(typeof pair[1]!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return [toIteratee(pair[0]),pair[1]];});return baseRest(function(args){var index=-1;while(++index<length){var pair=pairs[index];if(apply(pair[0],this,args)){return apply(pair[1],this,args);}}});}/**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.conformsTo` with
	     * `source` partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 2, 'b': 1 },
	     *   { 'a': 1, 'b': 2 }
	     * ];
	     *
	     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
	     * // => [{ 'a': 1, 'b': 2 }]
	     */function conforms(source){return baseConforms(baseClone(source,CLONE_DEEP_FLAG));}/**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new constant function.
	     * @example
	     *
	     * var objects = _.times(2, _.constant({ 'a': 1 }));
	     *
	     * console.log(objects);
	     * // => [{ 'a': 1 }, { 'a': 1 }]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => true
	     */function constant(value){return function(){return value;};}/**
	     * Checks `value` to determine whether a default value should be returned in
	     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
	     * or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Util
	     * @param {*} value The value to check.
	     * @param {*} defaultValue The default value.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * _.defaultTo(1, 10);
	     * // => 1
	     *
	     * _.defaultTo(undefined, 10);
	     * // => 10
	     */function defaultTo(value,defaultValue){return value==null||value!==value?defaultValue:value;}/**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flowRight
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow([_.add, square]);
	     * addSquare(1, 2);
	     * // => 9
	     */var flow=createFlow();/**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @since 3.0.0
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flow
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight([square, _.add]);
	     * addSquare(1, 2);
	     * // => 9
	     */var flowRight=createFlow(true);/**
	     * This method returns the first argument it receives.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     *
	     * console.log(_.identity(object) === object);
	     * // => true
	     */function identity(value){return value;}/**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name, the created function returns the
	     * property value for a given element. If `func` is an array or object, the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */function iteratee(func){return baseIteratee(typeof func=='function'?func:baseClone(func,CLONE_DEEP_FLAG));}/**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.isMatch` with `source`
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * **Note:** Multiple values can be checked by combining several matchers
	     * using `_.overSome`
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
	     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
	     *
	     * // Checking for several possible values
	     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
	     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
	     */function matches(source){return baseMatches(baseClone(source,CLONE_DEEP_FLAG));}/**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** Partial comparisons will match empty array and empty object
	     * `srcValue` values against any array or object value, respectively. See
	     * `_.isEqual` for a list of supported value comparisons.
	     *
	     * **Note:** Multiple values can be checked by combining several matchers
	     * using `_.overSome`
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.find(objects, _.matchesProperty('a', 4));
	     * // => { 'a': 4, 'b': 5, 'c': 6 }
	     *
	     * // Checking for several possible values
	     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
	     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
	     */function matchesProperty(path,srcValue){return baseMatchesProperty(path,baseClone(srcValue,CLONE_DEEP_FLAG));}/**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': _.constant(2) } },
	     *   { 'a': { 'b': _.constant(1) } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(objects, _.method(['a', 'b']));
	     * // => [2, 1]
	     */var method=baseRest(function(path,args){return function(object){return baseInvoke(object,path,args);};});/**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */var methodOf=baseRest(function(object,args){return function(path){return baseInvoke(object,path,args);};});/**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function, then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */function mixin(object,source,options){var props=keys(source),methodNames=baseFunctions(source,props);if(options==null&&!(isObject(source)&&(methodNames.length||!props.length))){options=source;source=object;object=this;methodNames=baseFunctions(source,keys(source));}var chain=!(isObject(options)&&'chain'in options)||!!options.chain,isFunc=isFunction(object);arrayEach(methodNames,function(methodName){var func=source[methodName];object[methodName]=func;if(isFunc){object.prototype[methodName]=function(){var chainAll=this.__chain__;if(chain||chainAll){var result=object(this.__wrapped__),actions=result.__actions__=copyArray(this.__actions__);actions.push({'func':func,'args':arguments,'thisArg':object});result.__chain__=chainAll;return result;}return func.apply(object,arrayPush([this.value()],arguments));};}});return object;}/**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */function noConflict(){if(root._===this){root._=oldDash;}return this;}/**
	     * This method returns `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * _.times(2, _.noop);
	     * // => [undefined, undefined]
	     */function noop(){// No operation performed.
	}/**
	     * Creates a function that gets the argument at index `n`. If `n` is negative,
	     * the nth argument from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new pass-thru function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     * func('a', 'b', 'c', 'd');
	     * // => 'b'
	     *
	     * var func = _.nthArg(-2);
	     * func('a', 'b', 'c', 'd');
	     * // => 'c'
	     */function nthArg(n){n=toInteger(n);return baseRest(function(args){return baseNth(args,n);});}/**
	     * Creates a function that invokes `iteratees` with the arguments it receives
	     * and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over([Math.max, Math.min]);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */var over=createOver(arrayMap);/**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * Following shorthands are possible for providing predicates.
	     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
	     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */var overEvery=createOver(arrayEvery);/**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * Following shorthands are possible for providing predicates.
	     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
	     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     *
	     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
	     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
	     */var overSome=createOver(arraySome);/**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': 2 } },
	     *   { 'a': { 'b': 1 } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	     * // => [1, 2]
	     */function property(path){return isKey(path)?baseProperty(toKey(path)):basePropertyDeep(path);}/**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */function propertyOf(object){return function(path){return object==null?undefined$1:baseGet(object,path);};}/**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified,
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.rangeRight
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */var range=createRange();/**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.range
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */var rangeRight=createRange(true);/**
	     * This method returns a new empty array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Array} Returns the new empty array.
	     * @example
	     *
	     * var arrays = _.times(2, _.stubArray);
	     *
	     * console.log(arrays);
	     * // => [[], []]
	     *
	     * console.log(arrays[0] === arrays[1]);
	     * // => false
	     */function stubArray(){return [];}/**
	     * This method returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `false`.
	     * @example
	     *
	     * _.times(2, _.stubFalse);
	     * // => [false, false]
	     */function stubFalse(){return false;}/**
	     * This method returns a new empty object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Object} Returns the new empty object.
	     * @example
	     *
	     * var objects = _.times(2, _.stubObject);
	     *
	     * console.log(objects);
	     * // => [{}, {}]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => false
	     */function stubObject(){return {};}/**
	     * This method returns an empty string.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {string} Returns the empty string.
	     * @example
	     *
	     * _.times(2, _.stubString);
	     * // => ['', '']
	     */function stubString(){return '';}/**
	     * This method returns `true`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `true`.
	     * @example
	     *
	     * _.times(2, _.stubTrue);
	     * // => [true, true]
	     */function stubTrue(){return true;}/**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(0));
	     * // => [0, 0, 0, 0]
	     */function times(n,iteratee){n=toInteger(n);if(n<1||n>MAX_SAFE_INTEGER){return [];}var index=MAX_ARRAY_LENGTH,length=nativeMin(n,MAX_ARRAY_LENGTH);iteratee=getIteratee(iteratee);n-=MAX_ARRAY_LENGTH;var result=baseTimes(length,iteratee);while(++index<n){iteratee(index);}return result;}/**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     */function toPath(value){if(isArray(value)){return arrayMap(value,toKey);}return isSymbol(value)?[value]:copyArray(stringToPath(toString(value)));}/**
	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */function uniqueId(prefix){var id=++idCounter;return toString(prefix)+id;}/*------------------------------------------------------------------------*/ /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */var add=createMathOperation(function(augend,addend){return augend+addend;},0);/**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */var ceil=createRound('ceil');/**
	     * Divide two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} dividend The first number in a division.
	     * @param {number} divisor The second number in a division.
	     * @returns {number} Returns the quotient.
	     * @example
	     *
	     * _.divide(6, 4);
	     * // => 1.5
	     */var divide=createMathOperation(function(dividend,divisor){return dividend/divisor;},1);/**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */var floor=createRound('floor');/**
	     * Computes the maximum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */function max(array){return array&&array.length?baseExtremum(array,identity,baseGt):undefined$1;}/**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */function maxBy(array,iteratee){return array&&array.length?baseExtremum(array,getIteratee(iteratee,2),baseGt):undefined$1;}/**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */function mean(array){return baseMean(array,identity);}/**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */function meanBy(array,iteratee){return baseMean(array,getIteratee(iteratee,2));}/**
	     * Computes the minimum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */function min(array){return array&&array.length?baseExtremum(array,identity,baseLt):undefined$1;}/**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */function minBy(array,iteratee){return array&&array.length?baseExtremum(array,getIteratee(iteratee,2),baseLt):undefined$1;}/**
	     * Multiply two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} multiplier The first number in a multiplication.
	     * @param {number} multiplicand The second number in a multiplication.
	     * @returns {number} Returns the product.
	     * @example
	     *
	     * _.multiply(6, 4);
	     * // => 24
	     */var multiply=createMathOperation(function(multiplier,multiplicand){return multiplier*multiplicand;},1);/**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */var round=createRound('round');/**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */var subtract=createMathOperation(function(minuend,subtrahend){return minuend-subtrahend;},0);/**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */function sum(array){return array&&array.length?baseSum(array,identity):0;}/**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */function sumBy(array,iteratee){return array&&array.length?baseSum(array,getIteratee(iteratee,2)):0;}/*------------------------------------------------------------------------*/ // Add methods that return wrapped values in chain sequences.
	lodash.after=after;lodash.ary=ary;lodash.assign=assign;lodash.assignIn=assignIn;lodash.assignInWith=assignInWith;lodash.assignWith=assignWith;lodash.at=at;lodash.before=before;lodash.bind=bind;lodash.bindAll=bindAll;lodash.bindKey=bindKey;lodash.castArray=castArray;lodash.chain=chain;lodash.chunk=chunk;lodash.compact=compact;lodash.concat=concat;lodash.cond=cond;lodash.conforms=conforms;lodash.constant=constant;lodash.countBy=countBy;lodash.create=create;lodash.curry=curry;lodash.curryRight=curryRight;lodash.debounce=debounce;lodash.defaults=defaults;lodash.defaultsDeep=defaultsDeep;lodash.defer=defer;lodash.delay=delay;lodash.difference=difference;lodash.differenceBy=differenceBy;lodash.differenceWith=differenceWith;lodash.drop=drop;lodash.dropRight=dropRight;lodash.dropRightWhile=dropRightWhile;lodash.dropWhile=dropWhile;lodash.fill=fill;lodash.filter=filter;lodash.flatMap=flatMap;lodash.flatMapDeep=flatMapDeep;lodash.flatMapDepth=flatMapDepth;lodash.flatten=flatten;lodash.flattenDeep=flattenDeep;lodash.flattenDepth=flattenDepth;lodash.flip=flip;lodash.flow=flow;lodash.flowRight=flowRight;lodash.fromPairs=fromPairs;lodash.functions=functions;lodash.functionsIn=functionsIn;lodash.groupBy=groupBy;lodash.initial=initial;lodash.intersection=intersection;lodash.intersectionBy=intersectionBy;lodash.intersectionWith=intersectionWith;lodash.invert=invert;lodash.invertBy=invertBy;lodash.invokeMap=invokeMap;lodash.iteratee=iteratee;lodash.keyBy=keyBy;lodash.keys=keys;lodash.keysIn=keysIn;lodash.map=map;lodash.mapKeys=mapKeys;lodash.mapValues=mapValues;lodash.matches=matches;lodash.matchesProperty=matchesProperty;lodash.memoize=memoize;lodash.merge=merge;lodash.mergeWith=mergeWith;lodash.method=method;lodash.methodOf=methodOf;lodash.mixin=mixin;lodash.negate=negate;lodash.nthArg=nthArg;lodash.omit=omit;lodash.omitBy=omitBy;lodash.once=once;lodash.orderBy=orderBy;lodash.over=over;lodash.overArgs=overArgs;lodash.overEvery=overEvery;lodash.overSome=overSome;lodash.partial=partial;lodash.partialRight=partialRight;lodash.partition=partition;lodash.pick=pick;lodash.pickBy=pickBy;lodash.property=property;lodash.propertyOf=propertyOf;lodash.pull=pull;lodash.pullAll=pullAll;lodash.pullAllBy=pullAllBy;lodash.pullAllWith=pullAllWith;lodash.pullAt=pullAt;lodash.range=range;lodash.rangeRight=rangeRight;lodash.rearg=rearg;lodash.reject=reject;lodash.remove=remove;lodash.rest=rest;lodash.reverse=reverse;lodash.sampleSize=sampleSize;lodash.set=set;lodash.setWith=setWith;lodash.shuffle=shuffle;lodash.slice=slice;lodash.sortBy=sortBy;lodash.sortedUniq=sortedUniq;lodash.sortedUniqBy=sortedUniqBy;lodash.split=split;lodash.spread=spread;lodash.tail=tail;lodash.take=take;lodash.takeRight=takeRight;lodash.takeRightWhile=takeRightWhile;lodash.takeWhile=takeWhile;lodash.tap=tap;lodash.throttle=throttle;lodash.thru=thru;lodash.toArray=toArray;lodash.toPairs=toPairs;lodash.toPairsIn=toPairsIn;lodash.toPath=toPath;lodash.toPlainObject=toPlainObject;lodash.transform=transform;lodash.unary=unary;lodash.union=union;lodash.unionBy=unionBy;lodash.unionWith=unionWith;lodash.uniq=uniq;lodash.uniqBy=uniqBy;lodash.uniqWith=uniqWith;lodash.unset=unset;lodash.unzip=unzip;lodash.unzipWith=unzipWith;lodash.update=update;lodash.updateWith=updateWith;lodash.values=values;lodash.valuesIn=valuesIn;lodash.without=without;lodash.words=words;lodash.wrap=wrap;lodash.xor=xor;lodash.xorBy=xorBy;lodash.xorWith=xorWith;lodash.zip=zip;lodash.zipObject=zipObject;lodash.zipObjectDeep=zipObjectDeep;lodash.zipWith=zipWith;// Add aliases.
	lodash.entries=toPairs;lodash.entriesIn=toPairsIn;lodash.extend=assignIn;lodash.extendWith=assignInWith;// Add methods to `lodash.prototype`.
	mixin(lodash,lodash);/*------------------------------------------------------------------------*/ // Add methods that return unwrapped values in chain sequences.
	lodash.add=add;lodash.attempt=attempt;lodash.camelCase=camelCase;lodash.capitalize=capitalize;lodash.ceil=ceil;lodash.clamp=clamp;lodash.clone=clone;lodash.cloneDeep=cloneDeep;lodash.cloneDeepWith=cloneDeepWith;lodash.cloneWith=cloneWith;lodash.conformsTo=conformsTo;lodash.deburr=deburr;lodash.defaultTo=defaultTo;lodash.divide=divide;lodash.endsWith=endsWith;lodash.eq=eq;lodash.escape=escape;lodash.escapeRegExp=escapeRegExp;lodash.every=every;lodash.find=find;lodash.findIndex=findIndex;lodash.findKey=findKey;lodash.findLast=findLast;lodash.findLastIndex=findLastIndex;lodash.findLastKey=findLastKey;lodash.floor=floor;lodash.forEach=forEach;lodash.forEachRight=forEachRight;lodash.forIn=forIn;lodash.forInRight=forInRight;lodash.forOwn=forOwn;lodash.forOwnRight=forOwnRight;lodash.get=get;lodash.gt=gt;lodash.gte=gte;lodash.has=has;lodash.hasIn=hasIn;lodash.head=head;lodash.identity=identity;lodash.includes=includes;lodash.indexOf=indexOf;lodash.inRange=inRange;lodash.invoke=invoke;lodash.isArguments=isArguments;lodash.isArray=isArray;lodash.isArrayBuffer=isArrayBuffer;lodash.isArrayLike=isArrayLike;lodash.isArrayLikeObject=isArrayLikeObject;lodash.isBoolean=isBoolean;lodash.isBuffer=isBuffer;lodash.isDate=isDate;lodash.isElement=isElement;lodash.isEmpty=isEmpty;lodash.isEqual=isEqual;lodash.isEqualWith=isEqualWith;lodash.isError=isError;lodash.isFinite=isFinite;lodash.isFunction=isFunction;lodash.isInteger=isInteger;lodash.isLength=isLength;lodash.isMap=isMap;lodash.isMatch=isMatch;lodash.isMatchWith=isMatchWith;lodash.isNaN=isNaN;lodash.isNative=isNative;lodash.isNil=isNil;lodash.isNull=isNull;lodash.isNumber=isNumber;lodash.isObject=isObject;lodash.isObjectLike=isObjectLike;lodash.isPlainObject=isPlainObject;lodash.isRegExp=isRegExp;lodash.isSafeInteger=isSafeInteger;lodash.isSet=isSet;lodash.isString=isString;lodash.isSymbol=isSymbol;lodash.isTypedArray=isTypedArray;lodash.isUndefined=isUndefined;lodash.isWeakMap=isWeakMap;lodash.isWeakSet=isWeakSet;lodash.join=join;lodash.kebabCase=kebabCase;lodash.last=last;lodash.lastIndexOf=lastIndexOf;lodash.lowerCase=lowerCase;lodash.lowerFirst=lowerFirst;lodash.lt=lt;lodash.lte=lte;lodash.max=max;lodash.maxBy=maxBy;lodash.mean=mean;lodash.meanBy=meanBy;lodash.min=min;lodash.minBy=minBy;lodash.stubArray=stubArray;lodash.stubFalse=stubFalse;lodash.stubObject=stubObject;lodash.stubString=stubString;lodash.stubTrue=stubTrue;lodash.multiply=multiply;lodash.nth=nth;lodash.noConflict=noConflict;lodash.noop=noop;lodash.now=now;lodash.pad=pad;lodash.padEnd=padEnd;lodash.padStart=padStart;lodash.parseInt=parseInt;lodash.random=random;lodash.reduce=reduce;lodash.reduceRight=reduceRight;lodash.repeat=repeat;lodash.replace=replace;lodash.result=result;lodash.round=round;lodash.runInContext=runInContext;lodash.sample=sample;lodash.size=size;lodash.snakeCase=snakeCase;lodash.some=some;lodash.sortedIndex=sortedIndex;lodash.sortedIndexBy=sortedIndexBy;lodash.sortedIndexOf=sortedIndexOf;lodash.sortedLastIndex=sortedLastIndex;lodash.sortedLastIndexBy=sortedLastIndexBy;lodash.sortedLastIndexOf=sortedLastIndexOf;lodash.startCase=startCase;lodash.startsWith=startsWith;lodash.subtract=subtract;lodash.sum=sum;lodash.sumBy=sumBy;lodash.template=template;lodash.times=times;lodash.toFinite=toFinite;lodash.toInteger=toInteger;lodash.toLength=toLength;lodash.toLower=toLower;lodash.toNumber=toNumber;lodash.toSafeInteger=toSafeInteger;lodash.toString=toString;lodash.toUpper=toUpper;lodash.trim=trim;lodash.trimEnd=trimEnd;lodash.trimStart=trimStart;lodash.truncate=truncate;lodash.unescape=unescape;lodash.uniqueId=uniqueId;lodash.upperCase=upperCase;lodash.upperFirst=upperFirst;// Add aliases.
	lodash.each=forEach;lodash.eachRight=forEachRight;lodash.first=head;mixin(lodash,function(){var source={};baseForOwn(lodash,function(func,methodName){if(!hasOwnProperty.call(lodash.prototype,methodName)){source[methodName]=func;}});return source;}(),{'chain':false});/*------------------------------------------------------------------------*/ /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */lodash.VERSION=VERSION;// Assign default placeholders.
	arrayEach(['bind','bindKey','curry','curryRight','partial','partialRight'],function(methodName){lodash[methodName].placeholder=lodash;});// Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	arrayEach(['drop','take'],function(methodName,index){LazyWrapper.prototype[methodName]=function(n){n=n===undefined$1?1:nativeMax(toInteger(n),0);var result=this.__filtered__&&!index?new LazyWrapper(this):this.clone();if(result.__filtered__){result.__takeCount__=nativeMin(n,result.__takeCount__);}else {result.__views__.push({'size':nativeMin(n,MAX_ARRAY_LENGTH),'type':methodName+(result.__dir__<0?'Right':'')});}return result;};LazyWrapper.prototype[methodName+'Right']=function(n){return this.reverse()[methodName](n).reverse();};});// Add `LazyWrapper` methods that accept an `iteratee` value.
	arrayEach(['filter','map','takeWhile'],function(methodName,index){var type=index+1,isFilter=type==LAZY_FILTER_FLAG||type==LAZY_WHILE_FLAG;LazyWrapper.prototype[methodName]=function(iteratee){var result=this.clone();result.__iteratees__.push({'iteratee':getIteratee(iteratee,3),'type':type});result.__filtered__=result.__filtered__||isFilter;return result;};});// Add `LazyWrapper` methods for `_.head` and `_.last`.
	arrayEach(['head','last'],function(methodName,index){var takeName='take'+(index?'Right':'');LazyWrapper.prototype[methodName]=function(){return this[takeName](1).value()[0];};});// Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	arrayEach(['initial','tail'],function(methodName,index){var dropName='drop'+(index?'':'Right');LazyWrapper.prototype[methodName]=function(){return this.__filtered__?new LazyWrapper(this):this[dropName](1);};});LazyWrapper.prototype.compact=function(){return this.filter(identity);};LazyWrapper.prototype.find=function(predicate){return this.filter(predicate).head();};LazyWrapper.prototype.findLast=function(predicate){return this.reverse().find(predicate);};LazyWrapper.prototype.invokeMap=baseRest(function(path,args){if(typeof path=='function'){return new LazyWrapper(this);}return this.map(function(value){return baseInvoke(value,path,args);});});LazyWrapper.prototype.reject=function(predicate){return this.filter(negate(getIteratee(predicate)));};LazyWrapper.prototype.slice=function(start,end){start=toInteger(start);var result=this;if(result.__filtered__&&(start>0||end<0)){return new LazyWrapper(result);}if(start<0){result=result.takeRight(-start);}else if(start){result=result.drop(start);}if(end!==undefined$1){end=toInteger(end);result=end<0?result.dropRight(-end):result.take(end-start);}return result;};LazyWrapper.prototype.takeRightWhile=function(predicate){return this.reverse().takeWhile(predicate).reverse();};LazyWrapper.prototype.toArray=function(){return this.take(MAX_ARRAY_LENGTH);};// Add `LazyWrapper` methods to `lodash.prototype`.
	baseForOwn(LazyWrapper.prototype,function(func,methodName){var checkIteratee=/^(?:filter|find|map|reject)|While$/.test(methodName),isTaker=/^(?:head|last)$/.test(methodName),lodashFunc=lodash[isTaker?'take'+(methodName=='last'?'Right':''):methodName],retUnwrapped=isTaker||/^find/.test(methodName);if(!lodashFunc){return;}lodash.prototype[methodName]=function(){var value=this.__wrapped__,args=isTaker?[1]:arguments,isLazy=value instanceof LazyWrapper,iteratee=args[0],useLazy=isLazy||isArray(value);var interceptor=function interceptor(value){var result=lodashFunc.apply(lodash,arrayPush([value],args));return isTaker&&chainAll?result[0]:result;};if(useLazy&&checkIteratee&&typeof iteratee=='function'&&iteratee.length!=1){// Avoid lazy use if the iteratee has a "length" value other than `1`.
	isLazy=useLazy=false;}var chainAll=this.__chain__,isHybrid=!!this.__actions__.length,isUnwrapped=retUnwrapped&&!chainAll,onlyLazy=isLazy&&!isHybrid;if(!retUnwrapped&&useLazy){value=onlyLazy?value:new LazyWrapper(this);var result=func.apply(value,args);result.__actions__.push({'func':thru,'args':[interceptor],'thisArg':undefined$1});return new LodashWrapper(result,chainAll);}if(isUnwrapped&&onlyLazy){return func.apply(this,args);}result=this.thru(interceptor);return isUnwrapped?isTaker?result.value()[0]:result.value():result;};});// Add `Array` methods to `lodash.prototype`.
	arrayEach(['pop','push','shift','sort','splice','unshift'],function(methodName){var func=arrayProto[methodName],chainName=/^(?:push|sort|unshift)$/.test(methodName)?'tap':'thru',retUnwrapped=/^(?:pop|shift)$/.test(methodName);lodash.prototype[methodName]=function(){var args=arguments;if(retUnwrapped&&!this.__chain__){var value=this.value();return func.apply(isArray(value)?value:[],args);}return this[chainName](function(value){return func.apply(isArray(value)?value:[],args);});};});// Map minified method names to their real names.
	baseForOwn(LazyWrapper.prototype,function(func,methodName){var lodashFunc=lodash[methodName];if(lodashFunc){var key=lodashFunc.name+'';if(!hasOwnProperty.call(realNames,key)){realNames[key]=[];}realNames[key].push({'name':methodName,'func':lodashFunc});}});realNames[createHybrid(undefined$1,WRAP_BIND_KEY_FLAG).name]=[{'name':'wrapper','func':undefined$1}];// Add methods to `LazyWrapper`.
	LazyWrapper.prototype.clone=lazyClone;LazyWrapper.prototype.reverse=lazyReverse;LazyWrapper.prototype.value=lazyValue;// Add chain sequence methods to the `lodash` wrapper.
	lodash.prototype.at=wrapperAt;lodash.prototype.chain=wrapperChain;lodash.prototype.commit=wrapperCommit;lodash.prototype.next=wrapperNext;lodash.prototype.plant=wrapperPlant;lodash.prototype.reverse=wrapperReverse;lodash.prototype.toJSON=lodash.prototype.valueOf=lodash.prototype.value=wrapperValue;// Add lazy aliases.
	lodash.prototype.first=lodash.prototype.head;if(symIterator){lodash.prototype[symIterator]=wrapperToIterator;}return lodash;};/*--------------------------------------------------------------------------*/ // Export lodash.
	var _=runInContext();// Some AMD build optimizers, like r.js, check for condition patterns like:
	if(freeModule){// Export for Node.js.
	(freeModule.exports=_)._=_;// Export for CommonJS support.
	freeExports._=_;}else {// Export to the global object.
	root._=_;}}).call(commonjsGlobal);})(lodash,lodash.exports);

	function _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

	function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

	function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

	function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

	function _createSuper$4(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$4(); return function _createSuperInternal() { var Super = _getPrototypeOf$3(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$3(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$3(this, result); }; }

	function _isNativeReflectConstruct$4() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

	var SyncListImpl = /*#__PURE__*/function (_SyncEntity) {
	  _inherits$3(SyncListImpl, _SyncEntity);

	  var _super = _createSuper$4(SyncListImpl);

	  /**
	   * @private
	   */
	  function SyncListImpl(services, descriptor, removalHandler) {
	    var _this;

	    _classCallCheck$3(this, SyncListImpl);

	    _this = _super.call(this, services, removalHandler);

	    var updateRequestReducer = function updateRequestReducer(acc, input) {
	      return typeof input.ttl === 'number' ? {
	        ttl: input.ttl
	      } : acc;
	    };

	    _this.updateMergingQueue = new NamespacedMergingQueue(updateRequestReducer);
	    _this.cache = new ItemsCache();
	    _this.descriptor = descriptor;
	    _this.descriptor.date_updated = new Date(_this.descriptor.date_updated);
	    return _this;
	  } // private props


	  _createClass$3(SyncListImpl, [{
	    key: "uri",
	    get: function get() {
	      return this.descriptor.url;
	    }
	  }, {
	    key: "revision",
	    get: function get() {
	      return this.descriptor.revision;
	    }
	  }, {
	    key: "lastEventId",
	    get: function get() {
	      return this.descriptor.last_event_id;
	    }
	  }, {
	    key: "links",
	    get: function get() {
	      return this.descriptor.links;
	    }
	  }, {
	    key: "dateExpires",
	    get: function get() {
	      return this.descriptor.date_expires;
	    }
	  }, {
	    key: "type",
	    get: function get() {
	      return 'list';
	    } // below properties are specific to Insights only

	  }, {
	    key: "indexName",
	    get: function get() {
	      return undefined;
	    }
	  }, {
	    key: "queryString",
	    get: function get() {
	      return undefined;
	    } // public props, documented along with class description

	  }, {
	    key: "sid",
	    get: function get() {
	      return this.descriptor.sid;
	    }
	  }, {
	    key: "uniqueName",
	    get: function get() {
	      return this.descriptor.unique_name || null;
	    }
	  }, {
	    key: "dateUpdated",
	    get: function get() {
	      return this.descriptor.date_updated;
	    }
	  }, {
	    key: "_addOrUpdateItemOnServer",
	    value: function () {
	      var _addOrUpdateItemOnServer2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, data, ifMatch, ttl) {
	        var requestBody, response;
	        return _regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                requestBody = {
	                  data: data
	                };

	                if (ttl !== undefined) {
	                  requestBody.ttl = ttl;
	                }

	                _context.next = 4;
	                return this.services.network.post(url, requestBody, ifMatch);

	              case 4:
	                response = _context.sent;
	                response.body.data = data;
	                response.body.date_updated = new Date(response.body.date_updated);
	                return _context.abrupt("return", response.body);

	              case 8:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function _addOrUpdateItemOnServer(_x, _x2, _x3, _x4) {
	        return _addOrUpdateItemOnServer2.apply(this, arguments);
	      }

	      return _addOrUpdateItemOnServer;
	    }()
	  }, {
	    key: "push",
	    value: function () {
	      var _push = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value, itemMetadata) {
	        var ttl, item, index;
	        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                ttl = (itemMetadata || {}).ttl;
	                _context2.next = 3;
	                return this._addOrUpdateItemOnServer(this.links.items, value, undefined, ttl);

	              case 3:
	                item = _context2.sent;
	                index = Number(item.index);

	                this._handleItemMutated(index, item.url, item.last_event_id, item.revision, value, item.date_updated, item.date_expires, true, false);

	                return _context2.abrupt("return", this.cache.getValue(index));

	              case 7:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function push(_x5, _x6) {
	        return _push.apply(this, arguments);
	      }

	      return push;
	    }()
	  }, {
	    key: "set",
	    value: function () {
	      var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(index, value, itemMetadataUpdates) {
	        var _this2 = this;

	        var input;
	        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                input = itemMetadataUpdates || {};
	                return _context3.abrupt("return", this.updateMergingQueue.squashAndAdd(index, input, function (input) {
	                  return _this2._updateItemUnconditionally(index, value, input.ttl);
	                }));

	              case 2:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function set(_x7, _x8, _x9) {
	        return _set.apply(this, arguments);
	      }

	      return set;
	    }()
	  }, {
	    key: "_updateItemUnconditionally",
	    value: function () {
	      var _updateItemUnconditionally2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(index, data, ttl) {
	        var existingItem, itemDescriptor;
	        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                _context4.next = 2;
	                return this.get(index);

	              case 2:
	                existingItem = _context4.sent;
	                _context4.next = 5;
	                return this._addOrUpdateItemOnServer(existingItem.url, data, undefined, ttl);

	              case 5:
	                itemDescriptor = _context4.sent;

	                this._handleItemMutated(index, itemDescriptor.url, itemDescriptor.last_event_id, itemDescriptor.revision, itemDescriptor.data, itemDescriptor.date_updated, itemDescriptor.date_expires, false, false);

	                return _context4.abrupt("return", this.cache.getValue(index));

	              case 8:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this);
	      }));

	      function _updateItemUnconditionally(_x10, _x11, _x12) {
	        return _updateItemUnconditionally2.apply(this, arguments);
	      }

	      return _updateItemUnconditionally;
	    }()
	  }, {
	    key: "_updateItemWithIfMatch",
	    value: function () {
	      var _updateItemWithIfMatch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(index, mutatorFunction, ttl) {
	        var existingItem, data, ifMatch, itemDescriptor;
	        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                _context5.next = 2;
	                return this.get(index);

	              case 2:
	                existingItem = _context5.sent;
	                data = mutatorFunction(deepClone(existingItem.data));

	                if (!data) {
	                  _context5.next = 25;
	                  break;
	                }

	                ifMatch = existingItem.revision;
	                _context5.prev = 6;
	                _context5.next = 9;
	                return this._addOrUpdateItemOnServer(existingItem.url, data, ifMatch, ttl);

	              case 9:
	                itemDescriptor = _context5.sent;

	                this._handleItemMutated(index, itemDescriptor.url, itemDescriptor.last_event_id, itemDescriptor.revision, itemDescriptor.data, itemDescriptor.date_updated, itemDescriptor.date_expires, false, false);

	                return _context5.abrupt("return", this.cache.getValue(index));

	              case 14:
	                _context5.prev = 14;
	                _context5.t0 = _context5["catch"](6);

	                if (!(_context5.t0.status === 412)) {
	                  _context5.next = 22;
	                  break;
	                }

	                _context5.next = 19;
	                return this._getItemFromServer(index);

	              case 19:
	                return _context5.abrupt("return", this._updateItemWithIfMatch(index, mutatorFunction, ttl));

	              case 22:
	                throw _context5.t0;

	              case 23:
	                _context5.next = 26;
	                break;

	              case 25:
	                return _context5.abrupt("return", existingItem);

	              case 26:
	              case "end":
	                return _context5.stop();
	            }
	          }
	        }, _callee5, this, [[6, 14]]);
	      }));

	      function _updateItemWithIfMatch(_x13, _x14, _x15) {
	        return _updateItemWithIfMatch2.apply(this, arguments);
	      }

	      return _updateItemWithIfMatch;
	    }()
	  }, {
	    key: "mutate",
	    value: function () {
	      var _mutate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(index, mutator, itemMetadataUpdates) {
	        var _this3 = this;

	        var input;
	        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
	          while (1) {
	            switch (_context6.prev = _context6.next) {
	              case 0:
	                input = itemMetadataUpdates || {};
	                return _context6.abrupt("return", this.updateMergingQueue.add(index, input, function (input) {
	                  return _this3._updateItemWithIfMatch(index, mutator, input.ttl);
	                }));

	              case 2:
	              case "end":
	                return _context6.stop();
	            }
	          }
	        }, _callee6, this);
	      }));

	      function mutate(_x16, _x17, _x18) {
	        return _mutate.apply(this, arguments);
	      }

	      return mutate;
	    }()
	  }, {
	    key: "update",
	    value: function () {
	      var _update2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(index, obj, itemMetadataUpdates) {
	        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
	          while (1) {
	            switch (_context7.prev = _context7.next) {
	              case 0:
	                return _context7.abrupt("return", this.mutate(index, function (remote) {
	                  return Object.assign(remote, obj);
	                }, itemMetadataUpdates));

	              case 1:
	              case "end":
	                return _context7.stop();
	            }
	          }
	        }, _callee7, this);
	      }));

	      function update(_x19, _x20, _x21) {
	        return _update2.apply(this, arguments);
	      }

	      return update;
	    }()
	  }, {
	    key: "remove",
	    value: function () {
	      var _remove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(index) {
	        var item, previousItemData, response;
	        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
	          while (1) {
	            switch (_context8.prev = _context8.next) {
	              case 0:
	                _context8.next = 2;
	                return this.get(index);

	              case 2:
	                item = _context8.sent;
	                previousItemData = deepClone(item.data);
	                _context8.next = 6;
	                return this.services.network.delete(item.url);

	              case 6:
	                response = _context8.sent;

	                this._handleItemRemoved(index, response.body.last_event_id, previousItemData, new Date(response.body.date_updated), false);

	              case 8:
	              case "end":
	                return _context8.stop();
	            }
	          }
	        }, _callee8, this);
	      }));

	      function remove(_x22) {
	        return _remove.apply(this, arguments);
	      }

	      return remove;
	    }()
	  }, {
	    key: "get",
	    value: function () {
	      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(index) {
	        var cachedItem;
	        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
	          while (1) {
	            switch (_context9.prev = _context9.next) {
	              case 0:
	                cachedItem = this.cache.get(index);

	                if (!cachedItem) {
	                  _context9.next = 3;
	                  break;
	                }

	                return _context9.abrupt("return", cachedItem.value);

	              case 3:
	                return _context9.abrupt("return", this._getItemFromServer(index));

	              case 4:
	              case "end":
	                return _context9.stop();
	            }
	          }
	        }, _callee9, this);
	      }));

	      function get(_x23) {
	        return _get.apply(this, arguments);
	      }

	      return get;
	    }()
	  }, {
	    key: "_getItemFromServer",
	    value: function () {
	      var _getItemFromServer2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(index) {
	        var result;
	        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
	          while (1) {
	            switch (_context10.prev = _context10.next) {
	              case 0:
	                _context10.next = 2;
	                return this._queryItemsFromServer({
	                  index: index
	                });

	              case 2:
	                result = _context10.sent;

	                if (!(result.items.length < 1)) {
	                  _context10.next = 7;
	                  break;
	                }

	                throw new SyncError("No item with index ".concat(index, " found"), 404, 54151);

	              case 7:
	                return _context10.abrupt("return", result.items[0]);

	              case 8:
	              case "end":
	                return _context10.stop();
	            }
	          }
	        }, _callee10, this);
	      }));

	      function _getItemFromServer(_x24) {
	        return _getItemFromServer2.apply(this, arguments);
	      }

	      return _getItemFromServer;
	    }()
	    /**
	     * Query items from the List
	     * @param args Argument pack for the query.
	     *             May include the following parameters:
	     *
	     *             - index -- Returns the Item with the specified index or an empty items array, if one doesn't exist.
	     *             - from -- Item index offset specifying the starting point of the query (inclusive). If not specified,
	     *                       the query starts from either the first or the last item in the List (by index),
	     *                       depending on the Order query parameter.
	     *             - order -- String(Optional) -- Determines the order of the query. Items are ordered numerically by index.
	     *                                            One of {asc, desc}, defaults to asc.
	     *             - pageSize -- Maximum number of Items in the response (i.e. in this page). Defaults to 50.
	     *                           The max page size is 1000. Note: PageSize between 100 and 1000 returns at most 100 items.
	     *             - pageToken - Direct paging token, for starting from a specific page.
	     *             - Metadata - May have the value list. If specified, returns the state of the List in the list attribute of the response.
	     *             - HideExpired - Determines whether expired List items are filtered out from the result list. By default, is false.
	     *
	     *             Stuff not accepted by the service, internal to SDK:
	     *
	     *             - limit
	     *
	     *   Valid query parameter combinations
	     *   These are the valid query parameter combinations. [x] should be read as “if x is not provided, the default value is assumed”.
	     *   The combinations are in order of precedence - e.g., if both Index and PageToken are provided, PageToken is ignored.
	     *   +-----------------------------------------+------------------------------------------------------------------------------+
	     *   | Index, [Metadata]                       | Returns 0-1 Items with the given Index                                       |
	     *   | PageToken, [Metadata]                   | Returns a page based on the PageToken returned from a previous query,        |
	     *   |                                         | with this and all following pages modified by any provided query parameters. |
	     *   | [From], [Order], [Pagesize], [Metadata] | Performs an initial query from a specified offset.                           |
	     *   |                                         | Returned PageTokens in the meta block should be used for pagination.         |
	     *   +-----------------------------------------+------------------------------------------------------------------------------+
	     * @private
	     */

	  }, {
	    key: "queryItems",
	    value: function () {
	      var _queryItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(args) {
	        var _ref2, _args$prevPageItemId, _ref3, _args$nextPageItemId2, _ref4, _args$prevPageItemId2, _ref5, _args$nextPageItemId3;

	        var cached, fillingSubsequentPage, oldArgs, _ref, _args$nextPageItemId, goingBackwards, cacheIterator, cachedItems, itemsCountToGet, _iterator, _step, _item, getLimit, doFetch, fetchedItems, items, _iterator2, _step2, item;

	        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
	          while (1) {
	            switch (_context11.prev = _context11.next) {
	              case 0:
	                if (!args.index) {
	                  _context11.next = 5;
	                  break;
	                }

	                cached = this.cache.get(args.index);

	                if (!cached) {
	                  _context11.next = 4;
	                  break;
	                }

	                return _context11.abrupt("return", this.makePaginator(cached.isValid ? [cached.value] : [], args, false, false));

	              case 4:
	                return _context11.abrupt("return", this._querySingleItemFromServer(args.index));

	              case 5:
	                // If a paginator calls here with nextPageItemId or prevPageItemId it means we are trying to fetch a next or previous
	                // page accordingly. the task is to determine the direction (based on args.order and direction of queried page) and
	                // prefill it from the cache as much as possible.
	                fillingSubsequentPage = !!args.nextPageItemId || !!args.prevPageItemId;
	                oldArgs = _objectSpread$2({}, args);

	                if (fillingSubsequentPage) {
	                  args.from = (_ref = (_args$nextPageItemId = args.nextPageItemId) !== null && _args$nextPageItemId !== void 0 ? _args$nextPageItemId : args.prevPageItemId) !== null && _ref !== void 0 ? _ref : args.from;
	                }

	                goingBackwards = !!args.prevPageItemId; // If from and order are specified, fetch page of items.

	                cacheIterator = args.order === 'desc' ? goingBackwards ? this.cache.getIterator((_ref2 = (_args$prevPageItemId = args.prevPageItemId) !== null && _args$prevPageItemId !== void 0 ? _args$prevPageItemId : args.from) !== null && _ref2 !== void 0 ? _ref2 : null) : this.cache.getReverseIterator((_ref3 = (_args$nextPageItemId2 = args.nextPageItemId) !== null && _args$nextPageItemId2 !== void 0 ? _args$nextPageItemId2 : args.from) !== null && _ref3 !== void 0 ? _ref3 : null) : goingBackwards ? this.cache.getReverseIterator((_ref4 = (_args$prevPageItemId2 = args.prevPageItemId) !== null && _args$prevPageItemId2 !== void 0 ? _args$prevPageItemId2 : args.from) !== null && _ref4 !== void 0 ? _ref4 : null) : this.cache.getIterator((_ref5 = (_args$nextPageItemId3 = args.nextPageItemId) !== null && _args$nextPageItemId3 !== void 0 ? _args$nextPageItemId3 : args.from) !== null && _ref5 !== void 0 ? _ref5 : null);
	                cachedItems = [];
	                itemsCountToGet = fillingSubsequentPage ? args.limit + 1 : args.limit;
	                _iterator = _createForOfIteratorHelper$1(cacheIterator);
	                _context11.prev = 13;

	                _iterator.s();

	              case 15:
	                if ((_step = _iterator.n()).done) {
	                  _context11.next = 25;
	                  break;
	                }

	                _item = _step.value;

	                if (!(fillingSubsequentPage && _item.value.index == args.from)) {
	                  _context11.next = 19;
	                  break;
	                }

	                return _context11.abrupt("continue", 23);

	              case 19:
	                cachedItems.push(_item.value);

	                if (!(cachedItems.length >= args.limit)) {
	                  _context11.next = 23;
	                  break;
	                }

	                if (goingBackwards) {
	                  lodash.exports.reverse(cachedItems);
	                } // We've got a full page of items, so we can easily generate prev/next page navigation
	                // However, the first item in the page cannot be collectionBegin, and the last item cannot be collectionEnd


	                return _context11.abrupt("return", this.makePaginator(cachedItems, args, this._prevPageAllowed(cachedItems, args.order), this._nextPageAllowed(cachedItems, args.order)));

	              case 23:
	                _context11.next = 15;
	                break;

	              case 25:
	                _context11.next = 30;
	                break;

	              case 27:
	                _context11.prev = 27;
	                _context11.t0 = _context11["catch"](13);

	                _iterator.e(_context11.t0);

	              case 30:
	                _context11.prev = 30;

	                _iterator.f();

	                return _context11.finish(30);

	              case 33:
	                // cache was not enough, so continue fetching from the server in the same direction
	                // whatever the last fetched item was, it will be the next `from`
	                if (cachedItems.length > 0) {
	                  args.from = lodash.exports.last(cachedItems).index;
	                } // Maximum sync page size is 100 items, 10 is simply 1/10th of that.


	                getLimit = Math.max(itemsCountToGet - cachedItems.length, 10);

	                if (goingBackwards) {
	                  args.order = args.order === 'desc' ? 'asc' : 'desc';
	                }

	                doFetch = args.from !== (oldArgs.order === 'desc' ? goingBackwards ? this.cache.collectionEnd : this.cache.collectionBegin : goingBackwards ? this.cache.collectionBegin : this.cache.collectionEnd);

	                if (!doFetch) {
	                  _context11.next = 65;
	                  break;
	                }

	                _context11.next = 40;
	                return this._queryItemsFromServer(_objectSpread$2(_objectSpread$2({}, args), {}, {
	                  limit: getLimit
	                }));

	              case 40:
	                fetchedItems = _context11.sent;
	                items = fetchedItems.items;
	                this.cache.populate(items, !fetchedItems.hasPrevPage, !fetchedItems.hasNextPage);
	                _iterator2 = _createForOfIteratorHelper$1(items);
	                _context11.prev = 44;

	                _iterator2.s();

	              case 46:
	                if ((_step2 = _iterator2.n()).done) {
	                  _context11.next = 55;
	                  break;
	                }

	                item = _step2.value;

	                if (!((cachedItems.length > 0 || fillingSubsequentPage) && item.index == args.from)) {
	                  _context11.next = 50;
	                  break;
	                }

	                return _context11.abrupt("continue", 53);

	              case 50:
	                if (goingBackwards) {
	                  cachedItems.unshift(item);
	                } else {
	                  cachedItems.push(item);
	                }

	                if (!(cachedItems.length >= args.limit)) {
	                  _context11.next = 53;
	                  break;
	                }

	                return _context11.abrupt("break", 55);

	              case 53:
	                _context11.next = 46;
	                break;

	              case 55:
	                _context11.next = 60;
	                break;

	              case 57:
	                _context11.prev = 57;
	                _context11.t1 = _context11["catch"](44);

	                _iterator2.e(_context11.t1);

	              case 60:
	                _context11.prev = 60;

	                _iterator2.f();

	                return _context11.finish(60);

	              case 63:
	                _context11.next = 66;
	                break;

	              case 65:
	                if (goingBackwards) {
	                  lodash.exports.reverse(cachedItems);
	                }

	              case 66:
	                return _context11.abrupt("return", this.makePaginator(cachedItems, oldArgs, this._prevPageAllowed(cachedItems, oldArgs.order), this._nextPageAllowed(cachedItems, oldArgs.order)));

	              case 67:
	              case "end":
	                return _context11.stop();
	            }
	          }
	        }, _callee11, this, [[13, 27, 30, 33], [44, 57, 60, 63]]);
	      }));

	      function queryItems(_x25) {
	        return _queryItems.apply(this, arguments);
	      }

	      return queryItems;
	    }()
	  }, {
	    key: "_prevPageAllowed",
	    value: function _prevPageAllowed(items, order) {
	      return items.length > 0 && lodash.exports.head(items).index !== (order === 'desc' ? this.cache.collectionEnd : this.cache.collectionBegin);
	    }
	  }, {
	    key: "_nextPageAllowed",
	    value: function _nextPageAllowed(items, order) {
	      return items.length > 0 && lodash.exports.last(items).index !== (order === 'desc' ? this.cache.collectionBegin : this.cache.collectionEnd);
	    } // Paginator depends on:
	    // - items listed
	    // - was there a previous token (prevPage)
	    // - was there a next token (nextPage)
	    // - order of items asc/desc

	  }, {
	    key: "makePaginator",
	    value: function makePaginator(items, args, prevPage, nextPage) {
	      var _this4 = this;

	      args.nextPageItemId = args.prevPageItemId = null;

	      var hasPrevPage = prevPage && this._prevPageAllowed(items, args.order);

	      var hasNextPage = nextPage && this._nextPageAllowed(items, args.order);

	      return new Paginator(items, function (adds) {
	        return _this4.queryItems(_objectSpread$2(_objectSpread$2({}, args), adds));
	      }, hasPrevPage ? lodash.exports.head(items).index : null, hasNextPage ? lodash.exports.last(items).index : null);
	    }
	  }, {
	    key: "_querySingleItemFromServer",
	    value: function () {
	      var _querySingleItemFromServer2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(index) {
	        var fetchedItems;
	        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
	          while (1) {
	            switch (_context12.prev = _context12.next) {
	              case 0:
	                _context12.next = 2;
	                return this._queryItemsFromServer({
	                  index: index
	                });

	              case 2:
	                fetchedItems = _context12.sent;

	                if (fetchedItems.items.length === 0) {
	                  // Successfully failed to fetch by key, mark it as a tombstone.
	                  this.cache.delete(index, null);
	                }

	                return _context12.abrupt("return", fetchedItems);

	              case 5:
	              case "end":
	                return _context12.stop();
	            }
	          }
	        }, _callee12, this);
	      }));

	      function _querySingleItemFromServer(_x26) {
	        return _querySingleItemFromServer2.apply(this, arguments);
	      }

	      return _querySingleItemFromServer;
	    }()
	  }, {
	    key: "_queryItemsFromServer",
	    value: function () {
	      var _queryItemsFromServer2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(args) {
	        var _response$body$items,
	            _response$body,
	            _this5 = this;

	        var uri, response, items, meta;
	        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
	          while (1) {
	            switch (_context13.prev = _context13.next) {
	              case 0:
	                uri = new UriBuilder(this.links.items).queryParam('HideExpired', true) // either
	                .queryParam('Index', args.index) // or
	                .queryParam('PageToken', args.pageToken) // or
	                .queryParam('From', args.from).queryParam('PageSize', args.limit) // @fixme use pageSize not limit?
	                .queryParam('Order', args.order).build();
	                _context13.next = 3;
	                return this.services.network.get(uri);

	              case 3:
	                response = _context13.sent;
	                items = ((_response$body$items = (_response$body = response.body) === null || _response$body === void 0 ? void 0 : _response$body.items) !== null && _response$body$items !== void 0 ? _response$body$items : []).map(function (el) {
	                  el.date_updated = new Date(el.date_updated); // FIXME: handleItem mutated inserts items into the cache, so populate call later only updates the bounds? Split it.

	                  _this5._handleItemMutated(el.index, el.url, el.last_event_id, el.revision, el.data, el.date_updated, el.date_expires, false, true);

	                  return _this5.cache.getValue(el.index);
	                });
	                meta = response.body.meta;
	                return _context13.abrupt("return", this.makePaginator(items, args, !!meta.previous_token, !!meta.next_token));

	              case 7:
	              case "end":
	                return _context13.stop();
	            }
	          }
	        }, _callee13, this);
	      }));

	      function _queryItemsFromServer(_x27) {
	        return _queryItemsFromServer2.apply(this, arguments);
	      }

	      return _queryItemsFromServer;
	    }()
	  }, {
	    key: "getItems",
	    value: function () {
	      var _getItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(args) {
	        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
	          while (1) {
	            switch (_context14.prev = _context14.next) {
	              case 0:
	                args = args || {};
	                validatePageSize(args.pageSize);
	                args.limit = args.pageSize || args.limit || 50;
	                args.order = args.order || 'asc';
	                return _context14.abrupt("return", this.queryItems(args));

	              case 5:
	              case "end":
	                return _context14.stop();
	            }
	          }
	        }, _callee14, this);
	      }));

	      function getItems(_x28) {
	        return _getItems.apply(this, arguments);
	      }

	      return getItems;
	    }()
	    /**
	     * @return {Promise<Object>} Context of List
	     * @private
	     */

	  }, {
	    key: "getContext",
	    value: function () {
	      var _getContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {
	        var response;
	        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
	          while (1) {
	            switch (_context15.prev = _context15.next) {
	              case 0:
	                if (this.context) {
	                  _context15.next = 5;
	                  break;
	                }

	                _context15.next = 3;
	                return this.services.network.get(this.links.context);

	              case 3:
	                response = _context15.sent;

	                // store fetched context if we have't received any newer update
	                this._updateContextIfRequired(response.body.data, response.body.last_event_id);

	              case 5:
	                return _context15.abrupt("return", this.context);

	              case 6:
	              case "end":
	                return _context15.stop();
	            }
	          }
	        }, _callee15, this);
	      }));

	      function getContext() {
	        return _getContext.apply(this, arguments);
	      }

	      return getContext;
	    }()
	  }, {
	    key: "setTtl",
	    value: function () {
	      var _setTtl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(ttl) {
	        var requestBody, response;
	        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
	          while (1) {
	            switch (_context16.prev = _context16.next) {
	              case 0:
	                _context16.prev = 0;
	                requestBody = {
	                  ttl: ttl
	                };
	                _context16.next = 4;
	                return this.services.network.post(this.uri, requestBody);

	              case 4:
	                response = _context16.sent;
	                this.descriptor.date_expires = response.body.date_expires;
	                _context16.next = 12;
	                break;

	              case 8:
	                _context16.prev = 8;
	                _context16.t0 = _context16["catch"](0);

	                if (_context16.t0.status === 404) {
	                  this.onRemoved(false);
	                }

	                throw _context16.t0;

	              case 12:
	              case "end":
	                return _context16.stop();
	            }
	          }
	        }, _callee16, this, [[0, 8]]);
	      }));

	      function setTtl(_x29) {
	        return _setTtl.apply(this, arguments);
	      }

	      return setTtl;
	    }()
	  }, {
	    key: "setItemTtl",
	    value: function () {
	      var _setItemTtl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(index, ttl) {
	        var existingItem, requestBody, response;
	        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
	          while (1) {
	            switch (_context17.prev = _context17.next) {
	              case 0:
	                _context17.next = 2;
	                return this.get(index);

	              case 2:
	                existingItem = _context17.sent;
	                requestBody = {
	                  ttl: ttl
	                };
	                _context17.next = 6;
	                return this.services.network.post(existingItem.url, requestBody);

	              case 6:
	                response = _context17.sent;
	                existingItem.updateDateExpires(response.body.date_expires);

	              case 8:
	              case "end":
	                return _context17.stop();
	            }
	          }
	        }, _callee17, this);
	      }));

	      function setItemTtl(_x30, _x31) {
	        return _setItemTtl.apply(this, arguments);
	      }

	      return setItemTtl;
	    }()
	  }, {
	    key: "removeList",
	    value: function () {
	      var _removeList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {
	        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
	          while (1) {
	            switch (_context18.prev = _context18.next) {
	              case 0:
	                _context18.next = 2;
	                return this.services.network.delete(this.uri);

	              case 2:
	                this.onRemoved(true);

	              case 3:
	              case "end":
	                return _context18.stop();
	            }
	          }
	        }, _callee18, this);
	      }));

	      function removeList() {
	        return _removeList.apply(this, arguments);
	      }

	      return removeList;
	    }()
	  }, {
	    key: "onRemoved",
	    value: function onRemoved(locally) {
	      this._unsubscribe();

	      this.removalHandler(this.type, this.sid, this.uniqueName);
	      this.broadcastEventToListeners('removed', {
	        isLocal: locally
	      });
	    }
	  }, {
	    key: "shouldIgnoreEvent",
	    value: function shouldIgnoreEvent(key, last_event_id) {
	      return this.cache.isKnown(key, last_event_id);
	    }
	    /**
	     * Handle update, which came from the server.
	     * @private
	     */

	  }, {
	    key: "_update",
	    value: function _update(update, isStrictlyOrdered) {
	      var itemIndex = Number(update.item_index);
	      update.date_created = new Date(update.date_created); // update.date_expires = new Date(update.date_expires);

	      switch (update.type) {
	        case 'list_item_added':
	        case 'list_item_updated':
	          {
	            this._handleItemMutated(itemIndex, update.item_url, update.id, update.item_revision, update.item_data, update.date_created, update.date_expires, // orchestration events include date_expires since June 2020, SP-386
	            update.type === 'list_item_added', true);
	          }
	          break;

	        case 'list_item_removed':
	          {
	            this._handleItemRemoved(itemIndex, update.id, update.item_data, update.date_created, true);
	          }
	          break;

	        case 'list_context_updated':
	          {
	            this._handleContextUpdate(update.context_data, update.id, update.date_created);
	          }
	          break;

	        case 'list_removed':
	          {
	            this.onRemoved(false);
	          }
	          break;
	      }

	      if (isStrictlyOrdered) {
	        this._advanceLastEventId(update.id, update.list_revision);
	      }
	    }
	  }, {
	    key: "_advanceLastEventId",
	    value: function _advanceLastEventId(eventId, revision) {
	      if (this.lastEventId < eventId) {
	        this.descriptor.last_event_id = eventId;

	        if (revision) {
	          this.descriptor.revision = revision;
	        }
	      }
	    }
	  }, {
	    key: "_updateRootDateUpdated",
	    value: function _updateRootDateUpdated(dateUpdated) {
	      if (!this.descriptor.date_updated || dateUpdated.getTime() > this.descriptor.date_updated.getTime()) {
	        this.descriptor.date_updated = dateUpdated;
	        this.services.storage.update(this.type, this.sid, this.uniqueName, {
	          date_updated: dateUpdated
	        });
	      }
	    }
	  }, {
	    key: "_handleItemMutated",
	    value: function _handleItemMutated(index, url, lastEventId, revision, data, dateUpdated, dateExpires, added, remote) {
	      if (this.shouldIgnoreEvent(index, lastEventId)) {
	        log$1.trace("Item ".concat(index, " update skipped, current: ").concat(this.lastEventId, ", remote: ").concat(lastEventId));
	        return;
	      }

	      this._updateRootDateUpdated(dateUpdated);

	      var item = this.cache.getValue(index);

	      if (!item) {
	        var newItem = new SyncListItem({
	          index: index,
	          url: url,
	          lastEventId: lastEventId,
	          revision: revision,
	          data: data,
	          dateUpdated: dateUpdated,
	          dateExpires: dateExpires
	        });
	        this.cache.store(index, newItem, lastEventId);
	        this.emitItemMutationEvent(newItem, remote, added);
	        return;
	      }

	      var previousItemData = deepClone(item.data);
	      item.update(lastEventId, revision, data, dateUpdated);
	      this.cache.store(index, item, lastEventId);

	      if (dateExpires !== undefined) {
	        item.updateDateExpires(dateExpires);
	      }

	      this.emitItemMutationEvent(item, remote, false, previousItemData);
	    }
	    /**
	     * @private
	     */

	  }, {
	    key: "emitItemMutationEvent",
	    value: function emitItemMutationEvent(item, remote, added) {
	      var previousItemData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
	      var eventName = added ? 'itemAdded' : 'itemUpdated';
	      var args = {
	        item: item,
	        isLocal: !remote
	      };

	      if (!added) {
	        args.previousItemData = previousItemData;
	      }

	      this.broadcastEventToListeners(eventName, args);
	    }
	    /**
	     * @private
	     */

	  }, {
	    key: "_handleItemRemoved",
	    value: function _handleItemRemoved(index, lastEventId, oldData, dateUpdated, remote) {
	      this._updateRootDateUpdated(dateUpdated);

	      this.cache.delete(index, lastEventId);
	      this.broadcastEventToListeners('itemRemoved', {
	        index: index,
	        isLocal: !remote,
	        previousItemData: oldData
	      });
	    }
	    /**
	     * @private
	     */

	  }, {
	    key: "_handleContextUpdate",
	    value: function _handleContextUpdate(data, eventId, dateUpdated) {
	      this._updateRootDateUpdated(dateUpdated);

	      if (this._updateContextIfRequired(data, eventId)) {
	        this.broadcastEventToListeners('contextUpdated', {
	          context: data,
	          isLocal: false
	        });
	      }
	    }
	    /**
	     * @private
	     */

	  }, {
	    key: "_updateContextIfRequired",
	    value: function _updateContextIfRequired(data, eventId) {
	      if (!this.contextEventId || eventId > this.contextEventId) {
	        this.context = data;
	        this.contextEventId = eventId;
	        return true;
	      } else {
	        log$1.trace('Context update skipped, current:', this.lastEventId, ', remote:', eventId);
	        return false;
	      }
	    }
	  }], [{
	    key: "type",
	    get: function get() {
	      return 'list';
	    }
	  }]);

	  return SyncListImpl;
	}(SyncEntity);
	/**
	 * Represents a Sync list, which stores an ordered list of values.
	 * Use the {@link SyncClient.list} method to obtain a reference to a Sync list.
	 * Information about rate limits can be found [here](https://www.twilio.com/docs/sync/limits).
	 */


	var SyncList = /*#__PURE__*/function (_Closeable) {
	  _inherits$3(SyncList, _Closeable);

	  var _super2 = _createSuper$4(SyncList);

	  /**
	   * @internal
	   */
	  function SyncList(syncListImpl) {
	    var _this6;

	    _classCallCheck$3(this, SyncList);

	    _this6 = _super2.call(this);
	    _this6.syncListImpl = syncListImpl;

	    _this6.syncListImpl.attach(_assertThisInitialized$2(_this6));

	    return _this6;
	  }
	  /**
	   * Fired when a new item appears in the list, regardless of whether its creator was local or remote.
	   *
	   * Parameters:
	   * 1. object `args` - info object provided with the event. It has the following properties:
	   *     * {@link SyncListItem} `item` - added item
	   *     * boolean `isLocal` - equals true if the item was added by a local actor, false otherwise
	   * @example
	   * ```typescript
	   * list.on('itemAdded', (args) => {
	   *   console.log(`List item ${args.item.index} was added`);
	   *   console.log('args.item.data:', args.item.data);
	   *   console.log('args.isLocal:', args.isLocal);
	   * });
	   * ```
	   * @event
	   */

	  /**
	   * Fired when a list item is updated (not added or removed, but changed), regardless of whether the updater was local or remote.
	   *
	   * Parameters:
	   * 1. object `args` - info object provided with the event. It has the following properties:
	   *     * {@link SyncListItem} `item` - updated item
	   *     * boolean `isLocal` - equals true if the item was updated by a local actor, false otherwise
	   *     * object `previousItemData` - contains a snapshot of the item data before the update
	   * @example
	   * ```typescript
	   * list.on('itemUpdated', (args) => {
	   *   console.log(`List item ${args.item.index} was updated`);
	   *   console.log('args.item.data:', args.item.data);
	   *   console.log('args.isLocal:', args.isLocal);
	   *   console.log('args.previousItemData:', args.previousItemData);
	   * });
	   * ```
	   * @event
	   */

	  /**
	   * Fired when a list item is removed, regardless of whether the remover was local or remote.
	   *
	   * Parameters:
	   * 1. object `args` - info object provided with the event. It has the following properties:
	   *     * number `index` - index of the removed item
	   *     * boolean `isLocal` - equals true if the item was removed by a local actor, false otherwise
	   *     * object `previousItemData` - contains a snapshot of the item data before the removal
	   * @example
	   * ```typescript
	   * list.on('itemRemoved', (args) => {
	   *   console.log(`List item ${args.index} was removed`);
	   *   console.log('args.previousItemData:', args.previousItemData);
	   *   console.log('args.isLocal:', args.isLocal);
	   * });
	   * ```
	   * @event
	   */

	  /**
	   * Fired when a list is deleted entirely, by any actor local or remote.
	   *
	   * Parameters:
	   * 1. object `args` - info object provided with the event. It has the following properties:
	   *     * boolean `isLocal` - equals true if the list was removed by a local actor, false otherwise
	   * @example
	   * ```typescript
	   * list.on('removed', (args) => {
	   *   console.log(`List ${list.sid} was removed`);
	   *   console.log('args.isLocal:', args.isLocal);
	   * });
	   * ```
	   * @event
	   */


	  _createClass$3(SyncList, [{
	    key: "uri",
	    get: // private props
	    function get() {
	      return this.syncListImpl.uri;
	    }
	  }, {
	    key: "revision",
	    get: function get() {
	      return this.syncListImpl.revision;
	    }
	  }, {
	    key: "lastEventId",
	    get: function get() {
	      return this.syncListImpl.lastEventId;
	    }
	  }, {
	    key: "links",
	    get: function get() {
	      return this.syncListImpl.links;
	    }
	  }, {
	    key: "dateExpires",
	    get: function get() {
	      return this.syncListImpl.dateExpires;
	    }
	  }, {
	    key: "type",
	    get: function get() {
	      return SyncListImpl.type;
	    }
	    /**
	     * Unique ID of the list, immutable identifier assigned by the system.
	     */

	  }, {
	    key: "sid",
	    get: function get() {
	      return this.syncListImpl.sid;
	    }
	    /**
	     * Unique name of the list, immutable identifier that can be assigned to the list during creation.
	     */

	  }, {
	    key: "uniqueName",
	    get: function get() {
	      return this.syncListImpl.uniqueName;
	    }
	    /**
	     * Date when the list was last updated, given in UTC ISO 8601 format (e.g., '2018-04-26T15:23:19.732Z').
	     */

	  }, {
	    key: "dateUpdated",
	    get: function get() {
	      return this.syncListImpl.dateUpdated;
	    }
	  }, {
	    key: "push",
	    value:
	    /**
	     * Add a new item to the list.
	     * @param data Data to be added.
	     * @param itemMetadata Item metadata.
	     * @return The newly added item.
	     * @example
	     * ```typescript
	     * list.push({ name: 'John Smith' }, { ttl: 86400 })
	     *   .then((item) => {
	     *     console.log(`List Item push() successful, item index: ${item.index}, data:`, item.data)
	     *   })
	     *   .catch((error) => {
	     *     console.error('List Item push() failed', error);
	     *   });
	     * ```
	     */
	    function () {
	      var _push2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(data, itemMetadata) {
	        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
	          while (1) {
	            switch (_context19.prev = _context19.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context19.abrupt("return", this.syncListImpl.push(data, itemMetadata));

	              case 2:
	              case "end":
	                return _context19.stop();
	            }
	          }
	        }, _callee19, this);
	      }));

	      function push(_x32, _x33) {
	        return _push2.apply(this, arguments);
	      }

	      return push;
	    }()
	    /**
	     * Assign new data to an existing item, given its index.
	     * @param index Index of the item to be updated.
	     * @param value New data to be assigned to an item.
	     * @param itemMetadataUpdates New item metadata.
	     * @return A promise with the updated item containing latest known data.
	     * The promise will be rejected if the item does not exist.
	     * @example
	     * ```typescript
	     * list.set(42, { name: 'John Smith' }, { ttl: 86400 })
	     *   .then((item) => {
	     *     console.log('List Item set() successful, item data:', item.data)
	     *   })
	     *   .catch((error) => {
	     *     console.error('List Item set() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "set",
	    value: function () {
	      var _set2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(index, value, itemMetadataUpdates) {
	        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
	          while (1) {
	            switch (_context20.prev = _context20.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context20.abrupt("return", this.syncListImpl.set(index, value, itemMetadataUpdates));

	              case 2:
	              case "end":
	                return _context20.stop();
	            }
	          }
	        }, _callee20, this);
	      }));

	      function set(_x34, _x35, _x36) {
	        return _set2.apply(this, arguments);
	      }

	      return set;
	    }()
	    /**
	     * Modify an existing item by applying a mutation function to it.
	     * @param index Index of the item to be changed.
	     * @param mutator A function that outputs a new data based on the existing data.
	     * @param itemMetadataUpdates New item metadata.
	     * @return Resolves with the most recent item state, the output of a successful
	     * mutation or a state that prompted graceful cancellation (mutator returned `null`). This promise
	     * will be rejected if the indicated item does not already exist.
	     * @example
	     * ```typescript
	     * const mutatorFunction = (currentValue) => {
	     *     currentValue.viewCount = (currentValue.viewCount || 0) + 1;
	     *     return currentValue;
	     * };
	     * list.mutate(42, mutatorFunction, { ttl: 86400 })
	     *   .then((item) => {
	     *     console.log('List Item mutate() successful, new data:', item.data)
	     *   })
	     *   .catch((error) => {
	     *     console.error('List Item mutate() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "mutate",
	    value: function () {
	      var _mutate2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(index, mutator, itemMetadataUpdates) {
	        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
	          while (1) {
	            switch (_context21.prev = _context21.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context21.abrupt("return", this.syncListImpl.mutate(index, mutator, itemMetadataUpdates));

	              case 2:
	              case "end":
	                return _context21.stop();
	            }
	          }
	        }, _callee21, this);
	      }));

	      function mutate(_x37, _x38, _x39) {
	        return _mutate2.apply(this, arguments);
	      }

	      return mutate;
	    }()
	    /**
	     * Modify an existing item by appending new fields (or overwriting existing ones) with the values from the object.
	     * This is equivalent to
	     * ```typescript
	     * list.mutate(42, (currentValue) => Object.assign(currentValue, obj));
	     * ```
	     * @param index Index of an item to be changed.
	     * @param obj Set of fields to update.
	     * @param itemMetadataUpdates New item metadata.
	     * @return A promise with a modified item containing latest known data.
	     * The promise will be rejected if the item was not found.
	     * @example
	     * ```typescript
	     * // Say, the List Item (index: 42) data is `{ name: 'John Smith' }`
	     * list.update(42, { age: 34 }, { ttl: 86400 })
	     *   .then((item) => {
	     *     // Now the List Item data is `{ name: 'John Smith', age: 34 }`
	     *     console.log('List Item update() successful, new data:', item.data);
	     *   })
	     *   .catch((error) => {
	     *     console.error('List Item update() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "update",
	    value: function () {
	      var _update3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(index, obj, itemMetadataUpdates) {
	        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
	          while (1) {
	            switch (_context22.prev = _context22.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context22.abrupt("return", this.syncListImpl.update(index, obj, itemMetadataUpdates));

	              case 2:
	              case "end":
	                return _context22.stop();
	            }
	          }
	        }, _callee22, this);
	      }));

	      function update(_x40, _x41, _x42) {
	        return _update3.apply(this, arguments);
	      }

	      return update;
	    }()
	    /**
	     * Delete an item given its index.
	     * @param index Index of the item to be removed.
	     * @return A promise to remove the item.
	     * The promise will be rejected if the item was not found.
	     * @example
	     * ```typescript
	     * list.remove(42)
	     *   .then(() => {
	     *     console.log('List Item remove() successful');
	     *   })
	     *   .catch((error) => {
	     *     console.error('List Item remove() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "remove",
	    value: function () {
	      var _remove2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(index) {
	        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
	          while (1) {
	            switch (_context23.prev = _context23.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context23.abrupt("return", this.syncListImpl.remove(index));

	              case 2:
	              case "end":
	                return _context23.stop();
	            }
	          }
	        }, _callee23, this);
	      }));

	      function remove(_x43) {
	        return _remove2.apply(this, arguments);
	      }

	      return remove;
	    }()
	    /**
	     * Retrieve an item by List index.
	     * @param index Item index in the list.
	     * @return A promise with the item containing latest known data.
	     * The promise will be rejected if the item was not found.
	     * @example
	     * ```typescript
	     * list.get(42)
	     *   .then((item) => {
	     *     console.log('List Item get() successful, item data:', item.data)
	     *   })
	     *   .catch((error) => {
	     *     console.error('List Item get() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "get",
	    value: function () {
	      var _get3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(index) {
	        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
	          while (1) {
	            switch (_context24.prev = _context24.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context24.abrupt("return", this.syncListImpl.get(index));

	              case 2:
	              case "end":
	                return _context24.stop();
	            }
	          }
	        }, _callee24, this);
	      }));

	      function get(_x44) {
	        return _get3.apply(this, arguments);
	      }

	      return get;
	    }()
	    /**
	     * Retrieve a list context
	     * @return A promise with the list's context
	     * @internal
	     */

	  }, {
	    key: "getContext",
	    value: function () {
	      var _getContext2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25() {
	        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
	          while (1) {
	            switch (_context25.prev = _context25.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context25.abrupt("return", this.syncListImpl.getContext());

	              case 2:
	              case "end":
	                return _context25.stop();
	            }
	          }
	        }, _callee25, this);
	      }));

	      function getContext() {
	        return _getContext2.apply(this, arguments);
	      }

	      return getContext;
	    }()
	    /**
	     * Query a list of items from collection.
	     * Information about the query limits can be found {@link https://www.twilio.com/docs/sync/limits|here}.
	     * @param queryOptions Query options.
	     * @example
	     * ```typescript
	     * const pageHandler = (paginator) => {
	     *   paginator.items.forEach((item) => {
	     *     console.log(`Item ${item.index}:`, item.data);
	     *   });
	     *   return paginator.hasNextPage
	     *     ? paginator.nextPage().then(pageHandler)
	     *     : null;
	     * };
	     * list.getItems({ from: 0, order: 'asc' })
	     *   .then(pageHandler)
	     *   .catch((error) => {
	     *     console.error('List getItems() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "getItems",
	    value: function () {
	      var _getItems2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(queryOptions) {
	        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
	          while (1) {
	            switch (_context26.prev = _context26.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context26.abrupt("return", this.syncListImpl.getItems(queryOptions));

	              case 2:
	              case "end":
	                return _context26.stop();
	            }
	          }
	        }, _callee26, this);
	      }));

	      function getItems(_x45) {
	        return _getItems2.apply(this, arguments);
	      }

	      return getItems;
	    }()
	    /**
	     * Update the time-to-live of the list.
	     * @param ttl Specifies the TTL in seconds after which the list is subject to automatic deletion. The value 0 means infinity.
	     * @return A promise that resolves after the TTL update was successful.
	     * @example
	     * ```typescript
	     * list.setTtl(3600)
	     *   .then(() => {
	     *     console.log('List setTtl() successful');
	     *   })
	     *   .catch((error) => {
	     *     console.error('List setTtl() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "setTtl",
	    value: function () {
	      var _setTtl2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(ttl) {
	        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
	          while (1) {
	            switch (_context27.prev = _context27.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context27.abrupt("return", this.syncListImpl.setTtl(ttl));

	              case 2:
	              case "end":
	                return _context27.stop();
	            }
	          }
	        }, _callee27, this);
	      }));

	      function setTtl(_x46) {
	        return _setTtl2.apply(this, arguments);
	      }

	      return setTtl;
	    }()
	    /**
	     * Update the time-to-live of a list item.
	     * @param index Item index.
	     * @param ttl Specifies the TTL in seconds after which the list item is subject to automatic deletion. The value 0 means infinity.
	     * @return A promise that resolves after the TTL update was successful.
	     * @example
	     * ```typescript
	     * list.setItemTtl(42, 86400)
	     *   .then(() => {
	     *     console.log('List setItemTtl() successful');
	     *   })
	     *   .catch((error) => {
	     *     console.error('List setItemTtl() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "setItemTtl",
	    value: function () {
	      var _setItemTtl2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(index, ttl) {
	        return _regeneratorRuntime.wrap(function _callee28$(_context28) {
	          while (1) {
	            switch (_context28.prev = _context28.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context28.abrupt("return", this.syncListImpl.setItemTtl(index, ttl));

	              case 2:
	              case "end":
	                return _context28.stop();
	            }
	          }
	        }, _callee28, this);
	      }));

	      function setItemTtl(_x47, _x48) {
	        return _setItemTtl2.apply(this, arguments);
	      }

	      return setItemTtl;
	    }()
	    /**
	     * Delete this list. It will be impossible to restore it.
	     * @return A promise that resolves when the list has been deleted.
	     * @example
	     * list.removeList()
	     *   .then(() => {
	     *     console.log('List removeList() successful');
	     *   })
	     *   .catch((error) => {
	     *     console.error('List removeList() failed', error);
	     *   });
	     */

	  }, {
	    key: "removeList",
	    value: function () {
	      var _removeList2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29() {
	        return _regeneratorRuntime.wrap(function _callee29$(_context29) {
	          while (1) {
	            switch (_context29.prev = _context29.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context29.abrupt("return", this.syncListImpl.removeList());

	              case 2:
	              case "end":
	                return _context29.stop();
	            }
	          }
	        }, _callee29, this);
	      }));

	      function removeList() {
	        return _removeList2.apply(this, arguments);
	      }

	      return removeList;
	    }()
	    /**
	     * Conclude work with the list instance and remove all event listeners attached to it.
	     * Any subsequent operation on this object will be rejected with error.
	     * Other local copies of this list will continue operating and receiving events normally.
	     * @example
	     * ```typescript
	     * list.close();
	     * ```
	     */

	  }, {
	    key: "close",
	    value: function close() {
	      _get$1(_getPrototypeOf$3(SyncList.prototype), "close", this).call(this);

	      this.syncListImpl.detach(this.listenerUuid);
	    }
	  }], [{
	    key: "type",
	    get: function get() {
	      return SyncListImpl.type;
	    }
	  }]);

	  return SyncList;
	}(Closeable);

	_defineProperty$2(SyncList, "itemAdded", 'itemAdded');

	_defineProperty$2(SyncList, "itemUpdated", 'itemUpdated');

	_defineProperty$2(SyncList, "itemRemoved", 'itemRemoved');

	_defineProperty$2(SyncList, "removed", 'removed');

	__decorate([validateTypesAsync_1(pureObject_1, ['undefined', objectSchema_1('item metadata', {
	  ttl: [nonNegativeInteger_1, 'undefined']
	})]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object]), __metadata("design:returntype", Promise)], SyncList.prototype, "push", null);

	__decorate([validateTypesAsync_1(nonNegativeInteger_1, pureObject_1, ['undefined', objectSchema_1('item metadata', {
	  ttl: [nonNegativeInteger_1, 'undefined']
	})]), __metadata("design:type", Function), __metadata("design:paramtypes", [Number, Object, Object]), __metadata("design:returntype", Promise)], SyncList.prototype, "set", null);

	__decorate([validateTypesAsync_1(nonNegativeInteger_1, 'function', ['undefined', objectSchema_1('item metadata', {
	  ttl: [nonNegativeInteger_1, 'undefined']
	})]), __metadata("design:type", Function), __metadata("design:paramtypes", [Number, Function, Object]), __metadata("design:returntype", Promise)], SyncList.prototype, "mutate", null);

	__decorate([validateTypesAsync_1(nonNegativeInteger_1, pureObject_1, ['undefined', objectSchema_1('item metadata', {
	  ttl: [nonNegativeInteger_1, 'undefined']
	})]), __metadata("design:type", Function), __metadata("design:paramtypes", [Number, Object, Object]), __metadata("design:returntype", Promise)], SyncList.prototype, "update", null);

	__decorate([validateTypesAsync_1(nonNegativeInteger_1), __metadata("design:type", Function), __metadata("design:paramtypes", [Number]), __metadata("design:returntype", Promise)], SyncList.prototype, "remove", null);

	__decorate([validateTypesAsync_1(nonNegativeInteger_1), __metadata("design:type", Function), __metadata("design:paramtypes", [Number]), __metadata("design:returntype", Promise)], SyncList.prototype, "get", null);

	__decorate([validateTypesAsync_1(['undefined', objectSchema_1('query options', {
	  from: [nonNegativeInteger_1, 'undefined'],
	  pageSize: [custom_1(function (value) {
	    return [isPositiveInteger(value), 'a positive integer'];
	  }), 'undefined'],
	  order: [custom_1(function (value) {
	    return [value === 'asc' || value === 'desc', "either 'asc' or 'desc'"];
	  }), 'undefined']
	})]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], SyncList.prototype, "getItems", null);

	__decorate([validateTypesAsync_1(nonNegativeInteger_1), __metadata("design:type", Function), __metadata("design:paramtypes", [Number]), __metadata("design:returntype", Promise)], SyncList.prototype, "setTtl", null);

	__decorate([validateTypesAsync_1(nonNegativeInteger_1, nonNegativeInteger_1), __metadata("design:type", Function), __metadata("design:paramtypes", [Number, Number]), __metadata("design:returntype", Promise)], SyncList.prototype, "setItemTtl", null);

	/**
	 * Represents an individual element in a Sync map.
	 */
	var SyncMapItem = /*#__PURE__*/function () {
	  /**
	   * @internal
	   */
	  function SyncMapItem(descriptor) {
	    _classCallCheck$3(this, SyncMapItem);

	    this.descriptor = descriptor;
	  }

	  _createClass$3(SyncMapItem, [{
	    key: "uri",
	    get: function get() {
	      return this.descriptor.url;
	    }
	  }, {
	    key: "revision",
	    get: function get() {
	      return this.descriptor.revision;
	    }
	  }, {
	    key: "lastEventId",
	    get: function get() {
	      return this.descriptor.last_event_id;
	    }
	  }, {
	    key: "dateExpires",
	    get: function get() {
	      return this.descriptor.date_expires;
	    }
	    /**
	     * The identifier that maps to this item within the containing Map.
	     */

	  }, {
	    key: "key",
	    get: function get() {
	      return this.descriptor.key;
	    }
	    /**
	     * The contents of the item.
	     */

	  }, {
	    key: "data",
	    get: function get() {
	      return this.descriptor.data;
	    }
	    /**
	     * Date when the map item was last updated.
	     */

	  }, {
	    key: "dateUpdated",
	    get: function get() {
	      return this.descriptor.date_updated;
	    }
	    /**
	     * CachedValue interface.
	     */

	  }, {
	    key: "cacheKey",
	    get: function get() {
	      return this.key;
	    }
	    /**
	     * @internal
	     */

	  }, {
	    key: "update",
	    value: function update(eventId, revision, value, dateUpdated) {
	      this.descriptor.last_event_id = eventId;
	      this.descriptor.revision = revision;
	      this.descriptor.data = value;
	      this.descriptor.date_updated = dateUpdated;
	      return this;
	    }
	    /**
	     * @internal
	     */

	  }, {
	    key: "updateDateExpires",
	    value: function updateDateExpires(dateExpires) {
	      this.descriptor.date_expires = dateExpires;
	    }
	  }]);

	  return SyncMapItem;
	}();

	function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

	function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

	function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

	function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

	function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = _getPrototypeOf$3(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$3(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$3(this, result); }; }

	function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

	var SyncMapImpl = /*#__PURE__*/function (_SyncEntity) {
	  _inherits$3(SyncMapImpl, _SyncEntity);

	  var _super = _createSuper$3(SyncMapImpl);

	  /**
	   * @private
	   */
	  function SyncMapImpl(services, descriptor, removalHandler) {
	    var _this;

	    _classCallCheck$3(this, SyncMapImpl);

	    _this = _super.call(this, services, removalHandler);

	    var updateRequestReducer = function updateRequestReducer(acc, input) {
	      return typeof input.ttl === 'number' ? {
	        ttl: input.ttl
	      } : acc;
	    };

	    _this.updateMergingQueue = new NamespacedMergingQueue(updateRequestReducer);
	    _this.cache = new ItemsCache();
	    _this.descriptor = descriptor;
	    _this.descriptor.date_updated = new Date(_this.descriptor.date_updated);

	    if (descriptor.items) {
	      descriptor.items.forEach(function (itemDescriptor) {
	        itemDescriptor.date_updated = new Date(itemDescriptor.date_updated);

	        _this.cache.store(itemDescriptor.key, new SyncMapItem(itemDescriptor), itemDescriptor.last_event_id);
	      });
	    }

	    return _this;
	  } // private props


	  _createClass$3(SyncMapImpl, [{
	    key: "uri",
	    get: function get() {
	      return this.descriptor.url;
	    }
	  }, {
	    key: "links",
	    get: function get() {
	      return this.descriptor.links;
	    }
	  }, {
	    key: "revision",
	    get: function get() {
	      return this.descriptor.revision;
	    }
	  }, {
	    key: "lastEventId",
	    get: function get() {
	      return this.descriptor.last_event_id;
	    }
	  }, {
	    key: "dateExpires",
	    get: function get() {
	      return this.descriptor.date_expires;
	    }
	  }, {
	    key: "type",
	    get: function get() {
	      return 'map';
	    } // below properties are specific to Insights only

	  }, {
	    key: "indexName",
	    get: function get() {
	      return undefined;
	    }
	  }, {
	    key: "queryString",
	    get: function get() {
	      return undefined;
	    } // public props, documented along with class description

	  }, {
	    key: "sid",
	    get: function get() {
	      return this.descriptor.sid;
	    }
	  }, {
	    key: "uniqueName",
	    get: function get() {
	      return this.descriptor.unique_name || null;
	    }
	  }, {
	    key: "dateUpdated",
	    get: function get() {
	      return this.descriptor.date_updated;
	    }
	  }, {
	    key: "set",
	    value: function () {
	      var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, value, itemMetadataUpdates) {
	        var _this2 = this;

	        var input;
	        return _regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                input = itemMetadataUpdates || {};
	                return _context.abrupt("return", this.updateMergingQueue.squashAndAdd(key, input, function (input) {
	                  return _this2._putItemUnconditionally(key, value, input.ttl);
	                }));

	              case 2:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function set(_x, _x2, _x3) {
	        return _set.apply(this, arguments);
	      }

	      return set;
	    }()
	  }, {
	    key: "get",
	    value: function () {
	      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key) {
	        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                if (!(key === null || key === undefined)) {
	                  _context2.next = 2;
	                  break;
	                }

	                throw new SyncError('SyncMapItem key may not be empty', 400, 54209);

	              case 2:
	                if (!this.cache.has(key)) {
	                  _context2.next = 6;
	                  break;
	                }

	                return _context2.abrupt("return", this.cache.getValue(key));

	              case 6:
	                return _context2.abrupt("return", this._getItemFromServer(key));

	              case 7:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function get(_x4) {
	        return _get.apply(this, arguments);
	      }

	      return get;
	    }()
	  }, {
	    key: "_getItemFromServer",
	    value: function () {
	      var _getItemFromServer2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(key) {
	        var result;
	        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                _context3.next = 2;
	                return this._queryItemsFromServer({
	                  key: key
	                });

	              case 2:
	                result = _context3.sent;

	                if (!(result.items.length < 1)) {
	                  _context3.next = 7;
	                  break;
	                }

	                throw new SyncError("The specified Map Item does not exist", 404, 54201);

	              case 7:
	                return _context3.abrupt("return", result.items[0]);

	              case 8:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function _getItemFromServer(_x5) {
	        return _getItemFromServer2.apply(this, arguments);
	      }

	      return _getItemFromServer;
	    }()
	  }, {
	    key: "mutate",
	    value: function () {
	      var _mutate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(key, mutator, itemMetadataUpdates) {
	        var _this3 = this;

	        var input;
	        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                input = itemMetadataUpdates || {};
	                return _context4.abrupt("return", this.updateMergingQueue.add(key, input, function (input) {
	                  return _this3._putItemWithIfMatch(key, mutator, input.ttl);
	                }));

	              case 2:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this);
	      }));

	      function mutate(_x6, _x7, _x8) {
	        return _mutate.apply(this, arguments);
	      }

	      return mutate;
	    }()
	  }, {
	    key: "update",
	    value: function () {
	      var _update2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(key, obj, itemMetadataUpdates) {
	        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                return _context5.abrupt("return", this.mutate(key, function (remote) {
	                  return Object.assign(remote, obj);
	                }, itemMetadataUpdates));

	              case 1:
	              case "end":
	                return _context5.stop();
	            }
	          }
	        }, _callee5, this);
	      }));

	      function update(_x9, _x10, _x11) {
	        return _update2.apply(this, arguments);
	      }

	      return update;
	    }()
	  }, {
	    key: "_putItemUnconditionally",
	    value: function () {
	      var _putItemUnconditionally2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(key, data, ttl) {
	        var result, item;
	        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
	          while (1) {
	            switch (_context6.prev = _context6.next) {
	              case 0:
	                _context6.next = 2;
	                return this._putItemToServer(key, data, undefined, ttl);

	              case 2:
	                result = _context6.sent;
	                item = result.item;

	                this._handleItemMutated(item.key, item.url, item.last_event_id, item.revision, item.data, item.date_updated, item.date_expires, result.added, false);

	                return _context6.abrupt("return", this.cache.getValue(item.key));

	              case 6:
	              case "end":
	                return _context6.stop();
	            }
	          }
	        }, _callee6, this);
	      }));

	      function _putItemUnconditionally(_x12, _x13, _x14) {
	        return _putItemUnconditionally2.apply(this, arguments);
	      }

	      return _putItemUnconditionally;
	    }()
	  }, {
	    key: "_putItemWithIfMatch",
	    value: function () {
	      var _putItemWithIfMatch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(key, mutatorFunction, ttl) {
	        var currentItem, data, ifMatch, result, item;
	        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
	          while (1) {
	            switch (_context7.prev = _context7.next) {
	              case 0:
	                _context7.next = 2;
	                return this.get(key).catch(function (error) {
	                  if (error.status === 404) {
	                    // PUT /Items/myKey with `If-Match: -1` acts as "put if not exists"
	                    return new SyncMapItem({
	                      key: key,
	                      data: {},
	                      last_event_id: -1,
	                      revision: '-1',
	                      url: null,
	                      date_updated: null,
	                      date_expires: null
	                    });
	                  } else {
	                    throw error;
	                  }
	                });

	              case 2:
	                currentItem = _context7.sent;
	                data = mutatorFunction(deepClone(currentItem.data));

	                if (!data) {
	                  _context7.next = 26;
	                  break;
	                }

	                ifMatch = currentItem.revision;
	                _context7.prev = 6;
	                _context7.next = 9;
	                return this._putItemToServer(key, data, ifMatch, ttl);

	              case 9:
	                result = _context7.sent;
	                item = result.item;

	                this._handleItemMutated(item.key, item.url, item.last_event_id, item.revision, item.data, item.date_updated, item.date_expires, result.added, false);

	                return _context7.abrupt("return", this.cache.getValue(item.key));

	              case 15:
	                _context7.prev = 15;
	                _context7.t0 = _context7["catch"](6);

	                if (!(_context7.t0.status === 412)) {
	                  _context7.next = 23;
	                  break;
	                }

	                _context7.next = 20;
	                return this._getItemFromServer(key);

	              case 20:
	                return _context7.abrupt("return", this._putItemWithIfMatch(key, mutatorFunction, ttl));

	              case 23:
	                throw _context7.t0;

	              case 24:
	                _context7.next = 27;
	                break;

	              case 26:
	                return _context7.abrupt("return", currentItem);

	              case 27:
	              case "end":
	                return _context7.stop();
	            }
	          }
	        }, _callee7, this, [[6, 15]]);
	      }));

	      function _putItemWithIfMatch(_x15, _x16, _x17) {
	        return _putItemWithIfMatch2.apply(this, arguments);
	      }

	      return _putItemWithIfMatch;
	    }()
	  }, {
	    key: "_putItemToServer",
	    value: function () {
	      var _putItemToServer2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(key, data, ifMatch, ttl) {
	        var url, requestBody, response, mapItemDescriptor, added;
	        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
	          while (1) {
	            switch (_context8.prev = _context8.next) {
	              case 0:
	                url = new UriBuilder(this.links.items).pathSegment(key).build();
	                requestBody = {
	                  data: data
	                };

	                if (ttl !== undefined) {
	                  requestBody.ttl = ttl;
	                }

	                _context8.prev = 3;
	                _context8.next = 6;
	                return this.services.network.put(url, requestBody, ifMatch);

	              case 6:
	                response = _context8.sent;
	                mapItemDescriptor = response.body;
	                mapItemDescriptor.data = data; // The server does not return the data in the response

	                mapItemDescriptor.date_updated = new Date(mapItemDescriptor.date_updated);
	                added = response.status.code === 201;
	                return _context8.abrupt("return", {
	                  added: added,
	                  item: mapItemDescriptor
	                });

	              case 14:
	                _context8.prev = 14;
	                _context8.t0 = _context8["catch"](3);

	                if (_context8.t0.status === 404) {
	                  this.onRemoved(false);
	                }

	                throw _context8.t0;

	              case 18:
	              case "end":
	                return _context8.stop();
	            }
	          }
	        }, _callee8, this, [[3, 14]]);
	      }));

	      function _putItemToServer(_x18, _x19, _x20, _x21) {
	        return _putItemToServer2.apply(this, arguments);
	      }

	      return _putItemToServer;
	    }()
	  }, {
	    key: "remove",
	    value: function () {
	      var _remove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(key) {
	        var item, previousItemData, response;
	        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
	          while (1) {
	            switch (_context9.prev = _context9.next) {
	              case 0:
	                _context9.next = 2;
	                return this.get(key);

	              case 2:
	                item = _context9.sent;
	                previousItemData = deepClone(item.data);
	                _context9.next = 6;
	                return this.services.network.delete(item.uri);

	              case 6:
	                response = _context9.sent;

	                this._handleItemRemoved(key, response.body.last_event_id, previousItemData, new Date(response.body.date_updated), false);

	              case 8:
	              case "end":
	                return _context9.stop();
	            }
	          }
	        }, _callee9, this);
	      }));

	      function remove(_x22) {
	        return _remove.apply(this, arguments);
	      }

	      return remove;
	    }()
	    /**
	     * @param args Argument pack for the query.
	     *             May include the following parameters:
	     *
	     *             - key -- Returns the Item with the specified key or an empty items array, if one doesn't exist.
	     *             - from -- Item index offset specifying the starting point of the query (inclusive). If not specified,
	     *                       the query starts from either the first or the last item in the List (by index),
	     *                       depending on the Order query parameter.
	     *             - order -- String(Optional) -- Determines the order of the query. Items are ordered numerically by index.
	     *                                            One of {asc, desc}, defaults to asc.
	     *             - pageSize -- Maximum number of Items in the response (i.e. in this page). Defaults to 50.
	     *                           The max page size is 1000. Note: PageSize between 100 and 1000 returns at most 100 items.
	     *             - pageToken - Direct paging token, for starting from a specific page.
	     *             - Metadata - May have the value list. If specified, returns the state of the List in the list attribute of the response.
	     *             - HideExpired - Determines whether expired List items are filtered out from the result list. By default, is false.
	     *
	     *             Stuff not accepted by the service, internal to SDK:
	     *
	     *             - limit
	     *             - isNextPage
	     *
	     *   Valid query parameter combinations
	     *   These are the valid query parameter combinations. [x] should be read as “if x is not provided, the default value is assumed”.
	     *   The combinations are in order of precedence - e.g., if both Key and PageToken are provided, PageToken is ignored.
	     *   +-----------------------------------------+------------------------------------------------------------------------------+
	     *   | Key, [Metadata]                         | Returns 0-1 Items with the given Key                                         |
	     *   | PageToken, [Metadata]                   | Returns a page based on the PageToken returned from a previous query,        |
	     *   |                                         | with this and all following pages modified by any provided query parameters. |
	     *   | [From], [Order], [Pagesize], [Metadata] | Performs an initial query from a specified offset.                           |
	     *   |                                         | Returned PageTokens in the meta block should be used for pagination.         |
	     *   +-----------------------------------------+------------------------------------------------------------------------------+
	     * @private
	     */

	  }, {
	    key: "queryItems",
	    value: function () {
	      var _queryItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(args) {
	        var _ref2, _args$prevPageItemId, _ref3, _args$nextPageItemId2, _ref4, _args$prevPageItemId2, _ref5, _args$nextPageItemId3;

	        var cached, fillingSubsequentPage, oldArgs, _ref, _args$nextPageItemId, goingBackwards, cacheIterator, cachedItems, itemsCountToGet, _iterator, _step, _item, getLimit, doFetch, fetchedItems, items, _iterator2, _step2, item;

	        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
	          while (1) {
	            switch (_context10.prev = _context10.next) {
	              case 0:
	                if (!args.key) {
	                  _context10.next = 5;
	                  break;
	                }

	                cached = this.cache.get(args.key);

	                if (!cached) {
	                  _context10.next = 4;
	                  break;
	                }

	                return _context10.abrupt("return", this.makePaginator(cached.isValid ? [cached.value] : [], args, false, false));

	              case 4:
	                return _context10.abrupt("return", this._querySingleItemFromServer(args.key));

	              case 5:
	                // If a paginator calls here with nextPageItemId or prevPageItemId it means we are trying to fetch a next or previous
	                // page accordingly. the task is to determine the direction (based on args.order and direction of queried page) and
	                // prefill it from the cache as much as possible.
	                fillingSubsequentPage = !!args.nextPageItemId || !!args.prevPageItemId;
	                oldArgs = _objectSpread$1({}, args);

	                if (fillingSubsequentPage) {
	                  args.from = (_ref = (_args$nextPageItemId = args.nextPageItemId) !== null && _args$nextPageItemId !== void 0 ? _args$nextPageItemId : args.prevPageItemId) !== null && _ref !== void 0 ? _ref : args.from;
	                }

	                goingBackwards = !!args.prevPageItemId; // If from and order are specified, fetch page of items.

	                cacheIterator = args.order === 'desc' ? goingBackwards ? this.cache.getIterator((_ref2 = (_args$prevPageItemId = args.prevPageItemId) !== null && _args$prevPageItemId !== void 0 ? _args$prevPageItemId : args.from) !== null && _ref2 !== void 0 ? _ref2 : null) : this.cache.getReverseIterator((_ref3 = (_args$nextPageItemId2 = args.nextPageItemId) !== null && _args$nextPageItemId2 !== void 0 ? _args$nextPageItemId2 : args.from) !== null && _ref3 !== void 0 ? _ref3 : null) : goingBackwards ? this.cache.getReverseIterator((_ref4 = (_args$prevPageItemId2 = args.prevPageItemId) !== null && _args$prevPageItemId2 !== void 0 ? _args$prevPageItemId2 : args.from) !== null && _ref4 !== void 0 ? _ref4 : null) : this.cache.getIterator((_ref5 = (_args$nextPageItemId3 = args.nextPageItemId) !== null && _args$nextPageItemId3 !== void 0 ? _args$nextPageItemId3 : args.from) !== null && _ref5 !== void 0 ? _ref5 : null);
	                cachedItems = [];
	                itemsCountToGet = fillingSubsequentPage ? args.limit + 1 : args.limit;
	                _iterator = _createForOfIteratorHelper(cacheIterator);
	                _context10.prev = 13;

	                _iterator.s();

	              case 15:
	                if ((_step = _iterator.n()).done) {
	                  _context10.next = 25;
	                  break;
	                }

	                _item = _step.value;

	                if (!(fillingSubsequentPage && _item.value.key == args.from)) {
	                  _context10.next = 19;
	                  break;
	                }

	                return _context10.abrupt("continue", 23);

	              case 19:
	                cachedItems.push(_item.value);

	                if (!(cachedItems.length >= args.limit)) {
	                  _context10.next = 23;
	                  break;
	                }

	                if (goingBackwards) {
	                  lodash.exports.reverse(cachedItems);
	                } // We've got a full page of items, so we can easily generate prev/next page navigation
	                // However, the first item in the page cannot be collectionBegin, and the last item cannot be collectionEnd


	                return _context10.abrupt("return", this.makePaginator(cachedItems, args, this._prevPageAllowed(cachedItems, args.order), this._nextPageAllowed(cachedItems, args.order)));

	              case 23:
	                _context10.next = 15;
	                break;

	              case 25:
	                _context10.next = 30;
	                break;

	              case 27:
	                _context10.prev = 27;
	                _context10.t0 = _context10["catch"](13);

	                _iterator.e(_context10.t0);

	              case 30:
	                _context10.prev = 30;

	                _iterator.f();

	                return _context10.finish(30);

	              case 33:
	                // cache was not enough, so continue fetching from the server in the same direction
	                // whatever the last fetched item was, it will be the next `from`
	                if (cachedItems.length > 0) {
	                  args.from = lodash.exports.last(cachedItems).key;
	                } // Maximum sync page size is 100 items, 10 is simply 1/10th of that.


	                getLimit = Math.max(itemsCountToGet - cachedItems.length, 10);

	                if (goingBackwards) {
	                  args.order = args.order === 'desc' ? 'asc' : 'desc';
	                }

	                doFetch = args.from !== (oldArgs.order === 'desc' ? goingBackwards ? this.cache.collectionEnd : this.cache.collectionBegin : goingBackwards ? this.cache.collectionBegin : this.cache.collectionEnd);

	                if (!doFetch) {
	                  _context10.next = 65;
	                  break;
	                }

	                _context10.next = 40;
	                return this._queryItemsFromServer(_objectSpread$1(_objectSpread$1({}, args), {}, {
	                  limit: getLimit
	                }));

	              case 40:
	                fetchedItems = _context10.sent;
	                items = fetchedItems.items;
	                this.cache.populate(items, !fetchedItems.hasPrevPage, !fetchedItems.hasNextPage);
	                _iterator2 = _createForOfIteratorHelper(items);
	                _context10.prev = 44;

	                _iterator2.s();

	              case 46:
	                if ((_step2 = _iterator2.n()).done) {
	                  _context10.next = 55;
	                  break;
	                }

	                item = _step2.value;

	                if (!((cachedItems.length > 0 || fillingSubsequentPage) && item.key == args.from)) {
	                  _context10.next = 50;
	                  break;
	                }

	                return _context10.abrupt("continue", 53);

	              case 50:
	                if (goingBackwards) {
	                  cachedItems.unshift(item);
	                } else {
	                  cachedItems.push(item);
	                }

	                if (!(cachedItems.length >= args.limit)) {
	                  _context10.next = 53;
	                  break;
	                }

	                return _context10.abrupt("break", 55);

	              case 53:
	                _context10.next = 46;
	                break;

	              case 55:
	                _context10.next = 60;
	                break;

	              case 57:
	                _context10.prev = 57;
	                _context10.t1 = _context10["catch"](44);

	                _iterator2.e(_context10.t1);

	              case 60:
	                _context10.prev = 60;

	                _iterator2.f();

	                return _context10.finish(60);

	              case 63:
	                _context10.next = 66;
	                break;

	              case 65:
	                if (goingBackwards) {
	                  lodash.exports.reverse(cachedItems);
	                }

	              case 66:
	                return _context10.abrupt("return", this.makePaginator(cachedItems, oldArgs, this._prevPageAllowed(cachedItems, oldArgs.order), this._nextPageAllowed(cachedItems, oldArgs.order)));

	              case 67:
	              case "end":
	                return _context10.stop();
	            }
	          }
	        }, _callee10, this, [[13, 27, 30, 33], [44, 57, 60, 63]]);
	      }));

	      function queryItems(_x23) {
	        return _queryItems.apply(this, arguments);
	      }

	      return queryItems;
	    }()
	  }, {
	    key: "_prevPageAllowed",
	    value: function _prevPageAllowed(items, order) {
	      return items.length > 0 && lodash.exports.head(items).key !== (order === 'desc' ? this.cache.collectionEnd : this.cache.collectionBegin);
	    }
	  }, {
	    key: "_nextPageAllowed",
	    value: function _nextPageAllowed(items, order) {
	      return items.length > 0 && lodash.exports.last(items).key !== (order === 'desc' ? this.cache.collectionBegin : this.cache.collectionEnd);
	    } // Paginator depends on:
	    // - items listed
	    // - was there a previous token (prevPage)
	    // - was there a next token (nextPage)
	    // - order of items asc/desc

	  }, {
	    key: "makePaginator",
	    value: function makePaginator(items, args, prevPage, nextPage) {
	      var _this4 = this;

	      args.nextPageItemId = args.prevPageItemId = null;

	      var hasPrevPage = prevPage && this._prevPageAllowed(items, args.order);

	      var hasNextPage = nextPage && this._nextPageAllowed(items, args.order);

	      return new Paginator(items, function (adds) {
	        return _this4.queryItems(_objectSpread$1(_objectSpread$1({}, args), adds));
	      }, hasPrevPage ? lodash.exports.head(items).key : null, hasNextPage ? lodash.exports.last(items).key : null);
	    }
	  }, {
	    key: "_querySingleItemFromServer",
	    value: function () {
	      var _querySingleItemFromServer2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(key) {
	        var fetchedItems;
	        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
	          while (1) {
	            switch (_context11.prev = _context11.next) {
	              case 0:
	                _context11.next = 2;
	                return this._queryItemsFromServer({
	                  key: key
	                });

	              case 2:
	                fetchedItems = _context11.sent;

	                if (fetchedItems.items.length === 0) {
	                  // Successfully failed to fetch by key, mark it as a tombstone.
	                  this.cache.delete(key, null);
	                }

	                return _context11.abrupt("return", fetchedItems);

	              case 5:
	              case "end":
	                return _context11.stop();
	            }
	          }
	        }, _callee11, this);
	      }));

	      function _querySingleItemFromServer(_x24) {
	        return _querySingleItemFromServer2.apply(this, arguments);
	      }

	      return _querySingleItemFromServer;
	    }()
	  }, {
	    key: "_queryItemsFromServer",
	    value: function () {
	      var _queryItemsFromServer2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(args) {
	        var _response$body$items,
	            _response$body,
	            _this5 = this;

	        var uri, response, items, meta;
	        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
	          while (1) {
	            switch (_context12.prev = _context12.next) {
	              case 0:
	                uri = new UriBuilder(this.links.items).queryParam('HideExpired', true) // either
	                .queryParam('Key', args.key) // or
	                .queryParam('PageToken', args.pageToken) // or
	                .queryParam('From', args.from).queryParam('PageSize', args.limit).queryParam('Order', args.order).build();
	                _context12.next = 3;
	                return this.services.network.get(uri);

	              case 3:
	                response = _context12.sent;
	                items = ((_response$body$items = (_response$body = response.body) === null || _response$body === void 0 ? void 0 : _response$body.items) !== null && _response$body$items !== void 0 ? _response$body$items : []).map(function (el) {
	                  el.date_updated = new Date(el.date_updated);

	                  _this5._handleItemMutated(el.key, el.url, el.last_event_id, el.revision, el.data, el.date_updated, el.date_expires, false, true);

	                  return _this5.cache.getValue(el.key);
	                });
	                meta = response.body.meta;
	                return _context12.abrupt("return", this.makePaginator(items, args, !!meta.previous_token, !!meta.next_token));

	              case 7:
	              case "end":
	                return _context12.stop();
	            }
	          }
	        }, _callee12, this);
	      }));

	      function _queryItemsFromServer(_x25) {
	        return _queryItemsFromServer2.apply(this, arguments);
	      }

	      return _queryItemsFromServer;
	    }()
	  }, {
	    key: "getItems",
	    value: function () {
	      var _getItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(args) {
	        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
	          while (1) {
	            switch (_context13.prev = _context13.next) {
	              case 0:
	                args = args || {};
	                validatePageSize(args.pageSize);
	                args.limit = args.pageSize || args.limit || 50;
	                args.order = args.order || 'asc';
	                return _context13.abrupt("return", this.queryItems(args));

	              case 5:
	              case "end":
	                return _context13.stop();
	            }
	          }
	        }, _callee13, this);
	      }));

	      function getItems(_x26) {
	        return _getItems.apply(this, arguments);
	      }

	      return getItems;
	    }()
	  }, {
	    key: "shouldIgnoreEvent",
	    value: function shouldIgnoreEvent(key, eventId) {
	      return this.cache.isKnown(key, eventId);
	    }
	    /**
	     * Handle update from the server
	     * @private
	     */

	  }, {
	    key: "_update",
	    value: function _update(update, isStrictlyOrdered) {
	      update.date_created = new Date(update.date_created); // update.date_expires = new Date(update.date_expires);

	      switch (update.type) {
	        case 'map_item_added':
	        case 'map_item_updated':
	          {
	            this._handleItemMutated(update.item_key, update.item_url, update.id, update.item_revision, update.item_data, update.date_created, update.date_expires, // orchestration events include date_expires since June 2020, SP-386
	            update.type === 'map_item_added', true);
	          }
	          break;

	        case 'map_item_removed':
	          {
	            this._handleItemRemoved(update.item_key, update.id, update.item_data, update.date_created, true);
	          }
	          break;

	        case 'map_removed':
	          {
	            this.onRemoved(false);
	          }
	          break;
	      }

	      if (isStrictlyOrdered) {
	        this._advanceLastEventId(update.id, update.map_revision);
	      }
	    }
	  }, {
	    key: "_advanceLastEventId",
	    value: function _advanceLastEventId(eventId, revision) {
	      if (this.lastEventId < eventId) {
	        this.descriptor.last_event_id = eventId;

	        if (revision) {
	          this.descriptor.revision = revision;
	        }
	      }
	    }
	  }, {
	    key: "_updateRootDateUpdated",
	    value: function _updateRootDateUpdated(dateUpdated) {
	      if (!this.descriptor.date_updated || dateUpdated.getTime() > this.descriptor.date_updated.getTime()) {
	        this.descriptor.date_updated = dateUpdated;
	        this.services.storage.update(this.type, this.sid, this.uniqueName, {
	          date_updated: dateUpdated
	        });
	      }
	    }
	  }, {
	    key: "_handleItemMutated",
	    value: function _handleItemMutated(key, url, lastEventId, revision, data, dateUpdated, dateExpires, added, remote) {
	      if (this.shouldIgnoreEvent(key, lastEventId)) {
	        log$1.trace('SyncMapItem ', key, ' update skipped, current:', this.lastEventId, ', remote:', lastEventId);
	        return;
	      }

	      this._updateRootDateUpdated(dateUpdated);

	      var item = this.cache.getValue(key);

	      if (!item) {
	        var newItem = new SyncMapItem({
	          key: key,
	          url: url,
	          last_event_id: lastEventId,
	          revision: revision,
	          data: data,
	          date_updated: dateUpdated,
	          date_expires: dateExpires
	        });
	        this.cache.store(key, newItem, lastEventId);
	        this.emitItemMutationEvent(newItem, remote, added);
	        return;
	      }

	      var previousItemData = deepClone(item.data);
	      item.update(lastEventId, revision, data, dateUpdated);
	      this.cache.store(key, item, lastEventId);

	      if (dateExpires !== undefined) {
	        item.updateDateExpires(dateExpires);
	      }

	      this.emitItemMutationEvent(item, remote, false, previousItemData);
	    }
	  }, {
	    key: "emitItemMutationEvent",
	    value: function emitItemMutationEvent(item, remote, added) {
	      var previousItemData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
	      var eventName = added ? 'itemAdded' : 'itemUpdated';
	      var args = {
	        item: item,
	        isLocal: !remote
	      };

	      if (!added) {
	        args.previousItemData = previousItemData;
	      }

	      this.broadcastEventToListeners(eventName, args);
	    }
	    /**
	     * @private
	     */

	  }, {
	    key: "_handleItemRemoved",
	    value: function _handleItemRemoved(key, eventId, oldData, dateUpdated, remote) {
	      this._updateRootDateUpdated(dateUpdated);

	      this.cache.delete(key, eventId);
	      this.broadcastEventToListeners('itemRemoved', {
	        key: key,
	        isLocal: !remote,
	        previousItemData: oldData
	      });
	    }
	  }, {
	    key: "onRemoved",
	    value: function onRemoved(locally) {
	      this._unsubscribe();

	      this.removalHandler(this.type, this.sid, this.uniqueName);
	      this.broadcastEventToListeners('removed', {
	        isLocal: locally
	      });
	    }
	  }, {
	    key: "setTtl",
	    value: function () {
	      var _setTtl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(ttl) {
	        var requestBody, response;
	        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
	          while (1) {
	            switch (_context14.prev = _context14.next) {
	              case 0:
	                _context14.prev = 0;
	                requestBody = {
	                  ttl: ttl
	                };
	                _context14.next = 4;
	                return this.services.network.post(this.uri, requestBody);

	              case 4:
	                response = _context14.sent;
	                this.descriptor.date_expires = response.body.date_expires;
	                _context14.next = 12;
	                break;

	              case 8:
	                _context14.prev = 8;
	                _context14.t0 = _context14["catch"](0);

	                if (_context14.t0.status === 404) {
	                  this.onRemoved(false);
	                }

	                throw _context14.t0;

	              case 12:
	              case "end":
	                return _context14.stop();
	            }
	          }
	        }, _callee14, this, [[0, 8]]);
	      }));

	      function setTtl(_x27) {
	        return _setTtl.apply(this, arguments);
	      }

	      return setTtl;
	    }()
	  }, {
	    key: "setItemTtl",
	    value: function () {
	      var _setItemTtl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(key, ttl) {
	        var existingItem, requestBody, response;
	        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
	          while (1) {
	            switch (_context15.prev = _context15.next) {
	              case 0:
	                _context15.next = 2;
	                return this.get(key);

	              case 2:
	                existingItem = _context15.sent;
	                requestBody = {
	                  ttl: ttl
	                };
	                _context15.next = 6;
	                return this.services.network.post(existingItem.uri, requestBody);

	              case 6:
	                response = _context15.sent;
	                existingItem.updateDateExpires(response.body.date_expires);

	              case 8:
	              case "end":
	                return _context15.stop();
	            }
	          }
	        }, _callee15, this);
	      }));

	      function setItemTtl(_x28, _x29) {
	        return _setItemTtl.apply(this, arguments);
	      }

	      return setItemTtl;
	    }()
	  }, {
	    key: "removeMap",
	    value: function () {
	      var _removeMap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {
	        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
	          while (1) {
	            switch (_context16.prev = _context16.next) {
	              case 0:
	                _context16.next = 2;
	                return this.services.network.delete(this.uri);

	              case 2:
	                this.onRemoved(true);

	              case 3:
	              case "end":
	                return _context16.stop();
	            }
	          }
	        }, _callee16, this);
	      }));

	      function removeMap() {
	        return _removeMap.apply(this, arguments);
	      }

	      return removeMap;
	    }()
	  }], [{
	    key: "type",
	    get: function get() {
	      return 'map';
	    }
	  }]);

	  return SyncMapImpl;
	}(SyncEntity);
	/**
	 * Represents a Sync map, which is a data structure that stores an unordered set of key-value pairs.
	 * Use the {@link SyncClient.map} method to obtain a reference to a Sync map.
	 * Information about rate limits can be found [here](https://www.twilio.com/docs/sync/limits).
	 */


	var SyncMap = /*#__PURE__*/function (_Closeable) {
	  _inherits$3(SyncMap, _Closeable);

	  var _super2 = _createSuper$3(SyncMap);

	  /**
	   * @internal
	   */
	  function SyncMap(syncMapImpl) {
	    var _this6;

	    _classCallCheck$3(this, SyncMap);

	    _this6 = _super2.call(this);
	    _this6.syncMapImpl = syncMapImpl;

	    _this6.syncMapImpl.attach(_assertThisInitialized$2(_this6));

	    return _this6;
	  }
	  /**
	   * Fired when a new item appears in the map, regardless of whether its creator was local or remote.
	   *
	   * Parameters:
	   * 1. object `args` - info object provided with the event. It has the following properties:
	   *     * {@link SyncMapItem} `item` - added item
	   *     * boolean `isLocal` - equals true if the item was added by a local actor, false otherwise
	   * @example
	   * ```typescript
	   * map.on('itemAdded', (args) => {
	   *   console.log(`Map item ${args.item.key} was added`);
	   *   console.log('args.item.data:', args.item.data);
	   *   console.log('args.isLocal:', args.isLocal);
	   * });
	   * ```
	   * @event
	   */

	  /**
	   * Fired when a map item is updated (not added or removed, but changed), regardless of whether the updater was local or remote.
	   *
	   * Parameters:
	   * 1. object `args` - info object provided with the event. It has the following properties:
	   *     * {@link SyncMapItem} `item` - updated item
	   *     * boolean `isLocal` - equals true if the item was updated by a local actor, false otherwise
	   *     * object `previousItemData` - contains a snapshot of the item data before the update
	   * @example
	   * ```typescript
	   * map.on('itemUpdated', (args) => {
	   *   console.log(`Map item ${args.item.key} was updated`);
	   *   console.log('args.item.data:', args.item.data);
	   *   console.log('args.isLocal:', args.isLocal);
	   *   console.log('args.previousItemData:', args.previousItemData);
	   * });
	   * ```
	   * @event
	   */

	  /**
	   * Fired when a map item is removed, regardless of whether the remover was local or remote.
	   *
	   * Parameters:
	   * 1. object `args` - info object provided with the event. It has the following properties:
	   *     * string `key` - the key of the removed item
	   *     * boolean `isLocal` - equals true if the item was added by a local actor, false otherwise
	   *     * object `previousItemData` - contains a snapshot of the item data before removal
	   * @example
	   * ```typescript
	   * map.on('itemRemoved', (args) => {
	   *   console.log(`Map item ${args.key} was removed`);
	   *   console.log('args.previousItemData:', args.previousItemData);
	   *   console.log('args.isLocal:', args.isLocal);
	   * });
	   * ```
	   * @event
	   */

	  /**
	   * Fired when a map is deleted entirely, by any actor local or remote.
	   *
	   * Parameters:
	   * 1. object `args` - info object provided with the event. It has the following properties:
	   *     * boolean `isLocal` - equals true if the map was removed by a local actor, false otherwise
	   * @example
	   * ```typescript
	   * map.on('removed', (args) => {
	   *   console.log(`Map ${map.sid} was removed`);
	   *   console.log('args.isLocal:', args.isLocal);
	   * });
	   * ```
	   * @event
	   */


	  _createClass$3(SyncMap, [{
	    key: "uri",
	    get: // private props
	    function get() {
	      return this.syncMapImpl.uri;
	    }
	  }, {
	    key: "links",
	    get: function get() {
	      return this.syncMapImpl.links;
	    }
	  }, {
	    key: "revision",
	    get: function get() {
	      return this.syncMapImpl.revision;
	    }
	  }, {
	    key: "lastEventId",
	    get: function get() {
	      return this.syncMapImpl.lastEventId;
	    }
	  }, {
	    key: "dateExpires",
	    get: function get() {
	      return this.syncMapImpl.dateExpires;
	    }
	  }, {
	    key: "type",
	    get: function get() {
	      return SyncMapImpl.type;
	    }
	    /**
	     * An immutable identifier (a SID) assigned by the system on creation.
	     */

	  }, {
	    key: "sid",
	    get: function get() {
	      return this.syncMapImpl.sid;
	    }
	    /**
	     * An optional immutable identifier that may be assigned by the
	     * programmer to this map on creation. Unique among other Maps.
	     */

	  }, {
	    key: "uniqueName",
	    get: function get() {
	      return this.syncMapImpl.uniqueName;
	    }
	    /**
	     * Date when the map was last updated.
	     */

	  }, {
	    key: "dateUpdated",
	    get: function get() {
	      return this.syncMapImpl.dateUpdated;
	    }
	  }, {
	    key: "set",
	    value:
	    /**
	     * Add a new item to the map with the given key-value pair. Overwrites any data that might already exist with that key.
	     * @param key Unique item identifier.
	     * @param data Data to be set.
	     * @param itemMetadataUpdates New item metadata.
	     * @return Newly added item, or modified one if already exists, with the latest known data.
	     * @example
	     * ```typescript
	     * map.set('myKey', { name: 'John Smith' }, { ttl: 86400 })
	     *   .then((item) => {
	     *     console.log('Map SyncMapItem set() successful, item data:', item.data);
	     *   })
	     *   .catch((error) => {
	     *     console.error('Map SyncMapItem set() failed', error);
	     *   });
	     * ```
	     */
	    function () {
	      var _set2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(key, data, itemMetadataUpdates) {
	        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
	          while (1) {
	            switch (_context17.prev = _context17.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context17.abrupt("return", this.syncMapImpl.set(key, data, itemMetadataUpdates));

	              case 2:
	              case "end":
	                return _context17.stop();
	            }
	          }
	        }, _callee17, this);
	      }));

	      function set(_x30, _x31, _x32) {
	        return _set2.apply(this, arguments);
	      }

	      return set;
	    }()
	    /**
	     * Retrieve an item by key.
	     * @param key Identifies the desired item.
	     * @return A promise that resolves when the item has been fetched.
	     * This promise will be rejected if item was not found.
	     * @example
	     * ```typescript
	     * map.get('myKey')
	     *   .then((item) => {
	     *     console.log('Map SyncMapItem get() successful, item data:', item.data)
	     *   })
	     *   .catch((error) => {
	     *     console.error('Map SyncMapItem get() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "get",
	    value: function () {
	      var _get3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(key) {
	        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
	          while (1) {
	            switch (_context18.prev = _context18.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context18.abrupt("return", this.syncMapImpl.get(key));

	              case 2:
	              case "end":
	                return _context18.stop();
	            }
	          }
	        }, _callee18, this);
	      }));

	      function get(_x33) {
	        return _get3.apply(this, arguments);
	      }

	      return get;
	    }()
	    /**
	     * Schedules a modification to this Map SyncMapItem that will apply a mutation function.
	     * If no SyncMapItem with the given key exists, it will first be created, having the default data (`{}`).
	     * @param key Selects the map item to be mutated.
	     * @param mutator A function that outputs a new data based on the existing data.
	     * May be called multiple times, particularly if this Map SyncMapItem is modified concurrently by remote code.
	     * If the mutation ultimately succeeds, the Map SyncMapItem will have made the particular transition described
	     * by this function.
	     * @param itemMetadataUpdates New item metadata.
	     * @return Resolves with the most recent item state, the output of a successful
	     * mutation or a state that prompted graceful cancellation (mutator returned `null`).
	     * @example
	     * ```typescript
	     * const mutatorFunction = (currentData) => {
	     *     currentData.viewCount = (currentData.viewCount || 0) + 1;
	     *     return currentData;
	     * };
	     * map.mutate('myKey', mutatorFunction, { ttl: 86400 })
	     *   .then((item) => {
	     *     console.log('Map SyncMapItem mutate() successful, new data:', item.data)
	     *   })
	     *   .catch((error) => {
	     *     console.error('Map SyncMapItem mutate() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "mutate",
	    value: function () {
	      var _mutate2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(key, mutator, itemMetadataUpdates) {
	        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
	          while (1) {
	            switch (_context19.prev = _context19.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context19.abrupt("return", this.syncMapImpl.mutate(key, mutator, itemMetadataUpdates));

	              case 2:
	              case "end":
	                return _context19.stop();
	            }
	          }
	        }, _callee19, this);
	      }));

	      function mutate(_x34, _x35, _x36) {
	        return _mutate2.apply(this, arguments);
	      }

	      return mutate;
	    }()
	    /**
	     * Modify a map item by appending new fields (or by overwriting existing ones) with the values from
	     * the provided Object. Creates a new item if no item by this key exists, copying all given fields and values
	     * into it.
	     * This is equivalent to
	     * ```typescript
	     * map.mutate('myKey', (currentData) => Object.assign(currentData, obj));
	     * ```
	     * @param key Selects the map item to update.
	     * @param obj Specifies the particular (top-level) attributes that will receive new values.
	     * @param itemMetadataUpdates New item metadata.
	     * @return A promise resolving to the modified item in its new state.
	     * @example
	     * ```typescript
	     * // Say, the Map SyncMapItem (key: `'myKey'`) data is `{ name: 'John Smith' }`
	     * map.update('myKey', { age: 34 }, { ttl: 86400 })
	     *   .then((item) => {
	     *     // Now the Map SyncMapItem data is `{ name: 'John Smith', age: 34 }`
	     *     console.log('Map SyncMapItem update() successful, new data:', item.data);
	     *   })
	     *   .catch((error) => {
	     *     console.error('Map SyncMapItem update() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "update",
	    value: function () {
	      var _update3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(key, obj, itemMetadataUpdates) {
	        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
	          while (1) {
	            switch (_context20.prev = _context20.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context20.abrupt("return", this.syncMapImpl.update(key, obj, itemMetadataUpdates));

	              case 2:
	              case "end":
	                return _context20.stop();
	            }
	          }
	        }, _callee20, this);
	      }));

	      function update(_x37, _x38, _x39) {
	        return _update3.apply(this, arguments);
	      }

	      return update;
	    }()
	    /**
	     * Delete an item, given its key.
	     * @param key Selects the item to delete.
	     * @return A promise to remove an item.
	     * The promise will be rejected if 'key' is undefined or an item was not found.
	     * @example
	     * ```typescript
	     * map.remove('myKey')
	     *   .then(() => {
	     *     console.log('Map SyncMapItem remove() successful');
	     *   })
	     *   .catch((error) => {
	     *     console.error('Map SyncMapItem remove() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "remove",
	    value: function () {
	      var _remove2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(key) {
	        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
	          while (1) {
	            switch (_context21.prev = _context21.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context21.abrupt("return", this.syncMapImpl.remove(key));

	              case 2:
	              case "end":
	                return _context21.stop();
	            }
	          }
	        }, _callee21, this);
	      }));

	      function remove(_x40) {
	        return _remove2.apply(this, arguments);
	      }

	      return remove;
	    }()
	    /**
	     * Get a complete list of items from the map.
	     * Information about the query limits can be found [here](https://www.twilio.com/docs/sync/limits).
	     * @param queryOptions Query options.
	     * @example
	     * ```typescript
	     * const pageHandler = (paginator) => {
	     *   paginator.items.forEach((item) => {
	     *     console.log(`SyncMapItem ${item.key}: `, item.data);
	     *   });
	     *   return paginator.hasNextPage
	     *     ? paginator.nextPage().then(pageHandler)
	     *     : null;
	     * };
	     * map.getItems({ from: 'myKey', order: 'asc' })
	     *   .then(pageHandler)
	     *   .catch((error) => {
	     *     console.error('Map getItems() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "getItems",
	    value: function () {
	      var _getItems2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(queryOptions) {
	        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
	          while (1) {
	            switch (_context22.prev = _context22.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context22.abrupt("return", this.syncMapImpl.getItems(queryOptions));

	              case 2:
	              case "end":
	                return _context22.stop();
	            }
	          }
	        }, _callee22, this);
	      }));

	      function getItems(_x41) {
	        return _getItems2.apply(this, arguments);
	      }

	      return getItems;
	    }()
	    /**
	     * Update the time-to-live of the map.
	     * @param ttl Specifies the TTL in seconds after which the map is subject to automatic deletion. The value 0 means infinity.
	     * @return A promise that resolves after the TTL update was successful.
	     * @example
	     * ```typescript
	     * map.setTtl(3600)
	     *   .then(() => {
	     *     console.log('Map setTtl() successful');
	     *   })
	     *   .catch((error) => {
	     *     console.error('Map setTtl() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "setTtl",
	    value: function () {
	      var _setTtl2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(ttl) {
	        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
	          while (1) {
	            switch (_context23.prev = _context23.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context23.abrupt("return", this.syncMapImpl.setTtl(ttl));

	              case 2:
	              case "end":
	                return _context23.stop();
	            }
	          }
	        }, _callee23, this);
	      }));

	      function setTtl(_x42) {
	        return _setTtl2.apply(this, arguments);
	      }

	      return setTtl;
	    }()
	    /**
	     * Update the time-to-live of a map item.
	     * @param key SyncMapItem key.
	     * @param ttl Specifies the TTL in seconds after which the map item is subject to automatic deletion. The value 0 means infinity.
	     * @return A promise that resolves after the TTL update was successful.
	     * @example
	     * ```typescript
	     * map.setItemTtl('myKey', 86400)
	     *   .then(() => {
	     *     console.log('Map setItemTtl() successful');
	     *   })
	     *   .catch((error) => {
	     *     console.error('Map setItemTtl() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "setItemTtl",
	    value: function () {
	      var _setItemTtl2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(key, ttl) {
	        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
	          while (1) {
	            switch (_context24.prev = _context24.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context24.abrupt("return", this.syncMapImpl.setItemTtl(key, ttl));

	              case 2:
	              case "end":
	                return _context24.stop();
	            }
	          }
	        }, _callee24, this);
	      }));

	      function setItemTtl(_x43, _x44) {
	        return _setItemTtl2.apply(this, arguments);
	      }

	      return setItemTtl;
	    }()
	    /**
	     * Delete this map. It will be impossible to restore it.
	     * @return A promise that resolves when the map has been deleted.
	     * @example
	     * ```typescript
	     * map.removeMap()
	     *   .then(() => {
	     *     console.log('Map removeMap() successful');
	     *   })
	     *   .catch((error) => {
	     *     console.error('Map removeMap() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "removeMap",
	    value: function () {
	      var _removeMap2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25() {
	        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
	          while (1) {
	            switch (_context25.prev = _context25.next) {
	              case 0:
	                this.ensureNotClosed();
	                _context25.next = 3;
	                return this.syncMapImpl.removeMap();

	              case 3:
	              case "end":
	                return _context25.stop();
	            }
	          }
	        }, _callee25, this);
	      }));

	      function removeMap() {
	        return _removeMap2.apply(this, arguments);
	      }

	      return removeMap;
	    }()
	    /**
	     * Conclude work with the map instance and remove all event listeners attached to it.
	     * Any subsequent operation on this object will be rejected with error.
	     * Other local copies of this map will continue operating and receiving events normally.
	     * @example
	     * ```typescript
	     * map.close();
	     * ````
	     */

	  }, {
	    key: "close",
	    value: function close() {
	      _get$1(_getPrototypeOf$3(SyncMap.prototype), "close", this).call(this);

	      this.syncMapImpl.detach(this.listenerUuid);
	    }
	  }], [{
	    key: "type",
	    get: function get() {
	      return SyncMapImpl.type;
	    }
	  }]);

	  return SyncMap;
	}(Closeable);

	_defineProperty$2(SyncMap, "itemAdded", 'itemAdded');

	_defineProperty$2(SyncMap, "itemUpdated", 'itemUpdated');

	_defineProperty$2(SyncMap, "itemRemoved", 'itemRemoved');

	_defineProperty$2(SyncMap, "removed", 'removed');

	__decorate([validateTypesAsync_1('string', pureObject_1, ['undefined', objectSchema_1('item metadata', {
	  ttl: [nonNegativeInteger_1, 'undefined']
	})]), __metadata("design:type", Function), __metadata("design:paramtypes", [String, Object, Object]), __metadata("design:returntype", Promise)], SyncMap.prototype, "set", null);

	__decorate([validateTypesAsync_1('string'), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], SyncMap.prototype, "get", null);

	__decorate([validateTypesAsync_1('string', 'function', ['undefined', objectSchema_1('item metadata', {
	  ttl: [nonNegativeInteger_1, 'undefined']
	})]), __metadata("design:type", Function), __metadata("design:paramtypes", [String, Function, Object]), __metadata("design:returntype", Promise)], SyncMap.prototype, "mutate", null);

	__decorate([validateTypesAsync_1('string', pureObject_1, ['undefined', objectSchema_1('item metadata', {
	  ttl: [nonNegativeInteger_1, 'undefined']
	})]), __metadata("design:type", Function), __metadata("design:paramtypes", [String, Object, Object]), __metadata("design:returntype", Promise)], SyncMap.prototype, "update", null);

	__decorate([validateTypesAsync_1('string'), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], SyncMap.prototype, "remove", null);

	__decorate([validateTypesAsync_1(['undefined', objectSchema_1('query options', {
	  from: ['string', 'undefined'],
	  pageSize: [custom_1(function (value) {
	    return [isPositiveInteger(value), 'a positive integer'];
	  }), 'undefined'],
	  order: [custom_1(function (value) {
	    return [value === 'asc' || value === 'desc', "either 'asc' or 'desc'"];
	  }), 'undefined']
	})]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], SyncMap.prototype, "getItems", null);

	__decorate([validateTypesAsync_1(nonNegativeInteger_1), __metadata("design:type", Function), __metadata("design:paramtypes", [Number]), __metadata("design:returntype", Promise)], SyncMap.prototype, "setTtl", null);

	__decorate([validateTypesAsync_1('string', nonNegativeInteger_1), __metadata("design:type", Function), __metadata("design:paramtypes", [String, Number]), __metadata("design:returntype", Promise)], SyncMap.prototype, "setItemTtl", null);

	function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf$3(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$3(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$3(this, result); }; }

	function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

	var SyncStreamImpl = /*#__PURE__*/function (_SyncEntity) {
	  _inherits$3(SyncStreamImpl, _SyncEntity);

	  var _super = _createSuper$2(SyncStreamImpl);

	  /**
	   * @internal
	   */
	  function SyncStreamImpl(services, descriptor, removalHandler) {
	    var _this;

	    _classCallCheck$3(this, SyncStreamImpl);

	    _this = _super.call(this, services, removalHandler);
	    _this.descriptor = descriptor;
	    return _this;
	  } // private props


	  _createClass$3(SyncStreamImpl, [{
	    key: "uri",
	    get: function get() {
	      return this.descriptor.url;
	    }
	  }, {
	    key: "links",
	    get: function get() {
	      return this.descriptor.links;
	    }
	  }, {
	    key: "dateExpires",
	    get: function get() {
	      return this.descriptor.date_expires;
	    }
	  }, {
	    key: "type",
	    get: function get() {
	      return 'stream';
	    }
	  }, {
	    key: "lastEventId",
	    get: function get() {
	      return null;
	    } // below properties are specific to Insights only

	  }, {
	    key: "indexName",
	    get: function get() {
	      return undefined;
	    }
	  }, {
	    key: "queryString",
	    get: function get() {
	      return undefined;
	    } // public props, documented along with class description

	  }, {
	    key: "sid",
	    get: function get() {
	      return this.descriptor.sid;
	    }
	  }, {
	    key: "uniqueName",
	    get: function get() {
	      return this.descriptor.unique_name || null;
	    }
	  }, {
	    key: "publishMessage",
	    value: function () {
	      var _publishMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
	        var requestBody, response, responseBody, event;
	        return _regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                requestBody = {
	                  data: data
	                };
	                _context.next = 3;
	                return this.services.network.post(this.links.messages, requestBody);

	              case 3:
	                response = _context.sent;
	                responseBody = response.body;
	                event = this._handleMessagePublished(responseBody.sid, data, false);
	                return _context.abrupt("return", event);

	              case 7:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function publishMessage(_x) {
	        return _publishMessage.apply(this, arguments);
	      }

	      return publishMessage;
	    }()
	  }, {
	    key: "setTtl",
	    value: function () {
	      var _setTtl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ttl) {
	        var requestBody, response;
	        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                _context2.prev = 0;
	                requestBody = {
	                  ttl: ttl
	                };
	                _context2.next = 4;
	                return this.services.network.post(this.uri, requestBody);

	              case 4:
	                response = _context2.sent;
	                this.descriptor.date_expires = response.body.date_expires;
	                _context2.next = 12;
	                break;

	              case 8:
	                _context2.prev = 8;
	                _context2.t0 = _context2["catch"](0);

	                if (_context2.t0.status === 404) {
	                  this.onRemoved(false);
	                }

	                throw _context2.t0;

	              case 12:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this, [[0, 8]]);
	      }));

	      function setTtl(_x2) {
	        return _setTtl.apply(this, arguments);
	      }

	      return setTtl;
	    }()
	  }, {
	    key: "removeStream",
	    value: function () {
	      var _removeStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
	        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                _context3.next = 2;
	                return this.services.network.delete(this.uri);

	              case 2:
	                this.onRemoved(true);

	              case 3:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function removeStream() {
	        return _removeStream.apply(this, arguments);
	      }

	      return removeStream;
	    }()
	    /**
	     * Handle event from the server
	     * @private
	     */

	  }, {
	    key: "_update",
	    value: function _update(update) {
	      switch (update.type) {
	        case 'stream_message_published':
	          {
	            this._handleMessagePublished(update.message_sid, update.message_data, true);

	            break;
	          }

	        case 'stream_removed':
	          {
	            this.onRemoved(false);
	            break;
	          }
	      }
	    }
	  }, {
	    key: "_handleMessagePublished",
	    value: function _handleMessagePublished(sid, data, remote) {
	      var event = {
	        sid: sid,
	        data: data
	      };
	      this.broadcastEventToListeners('messagePublished', {
	        message: event,
	        isLocal: !remote
	      });
	      return event;
	    }
	  }, {
	    key: "onRemoved",
	    value: function onRemoved(isLocal) {
	      this._unsubscribe();

	      this.removalHandler(this.type, this.sid, this.uniqueName);
	      this.broadcastEventToListeners('removed', {
	        isLocal: isLocal
	      });
	    }
	  }], [{
	    key: "type",
	    get: function get() {
	      return 'stream';
	    }
	  }]);

	  return SyncStreamImpl;
	}(SyncEntity);

	__decorate([validateTypesAsync_1(pureObject_1), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], SyncStreamImpl.prototype, "publishMessage", null);

	__decorate([validateTypesAsync_1(nonNegativeInteger_1), __metadata("design:type", Function), __metadata("design:paramtypes", [Number]), __metadata("design:returntype", Promise)], SyncStreamImpl.prototype, "setTtl", null);
	/**
	 * A Sync primitive for pub-sub messaging. Stream Messages are not persisted, exist
	 * only in transit, and will be dropped if (due to congestion or network anomalies) they
	 * cannot be delivered promptly. Use the {@link SyncClient.stream} method to obtain a reference to a Sync Message Stream.
	 * Information about rate limits can be found [here](https://www.twilio.com/docs/sync/limits).
	 */


	var SyncStream = /*#__PURE__*/function (_Closeable) {
	  _inherits$3(SyncStream, _Closeable);

	  var _super2 = _createSuper$2(SyncStream);

	  /**
	   * @internal
	   */
	  function SyncStream(syncStreamImpl) {
	    var _this2;

	    _classCallCheck$3(this, SyncStream);

	    _this2 = _super2.call(this);
	    _this2.syncStreamImpl = syncStreamImpl;

	    _this2.syncStreamImpl.attach(_assertThisInitialized$2(_this2));

	    return _this2;
	  }
	  /**
	   * Fired when a message is published to the stream either locally or by a remote actor.
	   *
	   * Parameters:
	   * 1. object `args` - info object provided with the event. It has the following properties:
	   *     * {@link SyncStreamMessage} `message` -  Published message
	   *     * boolean `isLocal` - equals true if the message was published by a local actor, false otherwise
	   * @example
	   * ```typescript
	   * stream.on('messagePublished', (args) => {
	   *   console.log('Stream message published');
	   *   console.log('Message SID:', args.message.sid);
	   *   console.log('Message data: ', args.message.data);
	   *   console.log('args.isLocal:', args.isLocal);
	   * });
	   * ```
	   * @event
	   */

	  /**
	   * Fired when a stream is removed entirely, regardless of whether the remover was local or remote.
	   *
	   * Parameters:
	   * 1. object `args` - info object provided with the event. It has the following properties:
	   *     * boolean `isLocal` - equals true if the stream was removed by a local actor, false otherwise
	   * @example
	   * ```typescript
	   * stream.on('removed', (args) => {
	   *   console.log(`Stream ${stream.sid} was removed`);
	   *   console.log('args.isLocal:', args.isLocal);
	   * });
	   * ```
	   * @event
	   */


	  _createClass$3(SyncStream, [{
	    key: "uri",
	    get: // private props
	    function get() {
	      return this.syncStreamImpl.uri;
	    }
	  }, {
	    key: "links",
	    get: function get() {
	      return this.syncStreamImpl.links;
	    }
	  }, {
	    key: "dateExpires",
	    get: function get() {
	      return this.syncStreamImpl.dateExpires;
	    }
	  }, {
	    key: "type",
	    get: function get() {
	      return SyncStreamImpl.type;
	    }
	  }, {
	    key: "lastEventId",
	    get: function get() {
	      return null;
	    }
	    /**
	     * The immutable system-assigned identifier of this stream. Never null.
	     */

	  }, {
	    key: "sid",
	    get: function get() {
	      return this.syncStreamImpl.sid;
	    }
	    /**
	     * A unique identifier optionally assigned to the stream on creation.
	     */

	  }, {
	    key: "uniqueName",
	    get: function get() {
	      return this.syncStreamImpl.uniqueName;
	    }
	  }, {
	    key: "publishMessage",
	    value:
	    /**
	     * Publish a message to the stream. The system will attempt delivery to all online subscribers.
	     * @param data The body of the dispatched message. Maximum size in serialized JSON: 4KB.
	     * A rate limit applies to this operation, refer to the [Sync API documentation](https://www.twilio.com/docs/api/sync) for details.
	     * @return A promise which resolves after the message is successfully published
	     * to the Sync service. Resolves irrespective of ultimate delivery to any subscribers.
	     * @example
	     * ```typescript
	     * stream.publishMessage({ x: 42, y: 123 })
	     *   .then((message) => {
	     *     console.log('Stream publishMessage() successful, message SID:', message.sid);
	     *   })
	     *   .catch((error) => {
	     *     console.error('Stream publishMessage() failed', error);
	     *   });
	     * ```
	     */
	    function () {
	      var _publishMessage2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(data) {
	        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context4.abrupt("return", this.syncStreamImpl.publishMessage(data));

	              case 2:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this);
	      }));

	      function publishMessage(_x3) {
	        return _publishMessage2.apply(this, arguments);
	      }

	      return publishMessage;
	    }()
	    /**
	     * Update the time-to-live of the stream.
	     * @param ttl Specifies the TTL in seconds after which the stream is subject to automatic deletion. The value 0 means infinity.
	     * @return A promise that resolves after the TTL update was successful.
	     * @example
	     * ```typescript
	     * stream.setTtl(3600)
	     *   .then(() => {
	     *     console.log('Stream setTtl() successful');
	     *   })
	     *   .catch((error) => {
	     *     console.error('Stream setTtl() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "setTtl",
	    value: function () {
	      var _setTtl2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(ttl) {
	        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context5.abrupt("return", this.syncStreamImpl.setTtl(ttl));

	              case 2:
	              case "end":
	                return _context5.stop();
	            }
	          }
	        }, _callee5, this);
	      }));

	      function setTtl(_x4) {
	        return _setTtl2.apply(this, arguments);
	      }

	      return setTtl;
	    }()
	    /**
	     * Permanently delete this Stream.
	     * @return A promise which resolves after the Stream is successfully deleted.
	     * @example
	     * ```typescript
	     * stream.removeStream()
	     *   .then(() => {
	     *     console.log('Stream removeStream() successful');
	     *   })
	     *   .catch((error) => {
	     *     console.error('Stream removeStream() failed', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "removeStream",
	    value: function () {
	      var _removeStream2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
	        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
	          while (1) {
	            switch (_context6.prev = _context6.next) {
	              case 0:
	                this.ensureNotClosed();
	                return _context6.abrupt("return", this.syncStreamImpl.removeStream());

	              case 2:
	              case "end":
	                return _context6.stop();
	            }
	          }
	        }, _callee6, this);
	      }));

	      function removeStream() {
	        return _removeStream2.apply(this, arguments);
	      }

	      return removeStream;
	    }()
	    /**
	     * Conclude work with the stream instance and remove all event listeners attached to it.
	     * Any subsequent operation on this object will be rejected with error.
	     * Other local copies of this stream will continue operating and receiving events normally.
	     * @example
	     * ```typescript
	     * stream.close();
	     * ```
	     */

	  }, {
	    key: "close",
	    value: function close() {
	      _get$1(_getPrototypeOf$3(SyncStream.prototype), "close", this).call(this);

	      this.syncStreamImpl.detach(this.listenerUuid);
	    }
	  }], [{
	    key: "type",
	    get: function get() {
	      return SyncStreamImpl.type;
	    }
	  }]);

	  return SyncStream;
	}(Closeable);

	_defineProperty$2(SyncStream, "messagePublished", 'messagePublished');

	_defineProperty$2(SyncStream, "removed", 'removed');

	__decorate([validateTypesAsync_1(pureObject_1), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], SyncStream.prototype, "publishMessage", null);

	__decorate([validateTypesAsync_1(nonNegativeInteger_1), __metadata("design:type", Function), __metadata("design:paramtypes", [Number]), __metadata("design:returntype", Promise)], SyncStream.prototype, "setTtl", null);

	var ClientInfo = /*#__PURE__*/_createClass$3(function ClientInfo(version) {
	  _classCallCheck$3(this, ClientInfo);

	  this.sdk = 'js';
	  this.sdkVer = version;
	  this.os = platform.exports.os.family;
	  this.osVer = platform.exports.os.version;
	  this.pl = platform.exports.name;
	  this.plVer = platform.exports.version;
	});

	/**
	 * Container for entities which are known by the client.
	 * It's needed for deduplication when the client obtains the same object several times.
	 * @internal
	 */
	var EntitiesCache = /*#__PURE__*/function () {
	  function EntitiesCache() {
	    _classCallCheck$3(this, EntitiesCache);

	    this.names = new Map();
	    this.entities = new Map();
	  }

	  _createClass$3(EntitiesCache, [{
	    key: "store",
	    value: function store(entity) {
	      var stored = this.entities.get(entity.sid);

	      if (stored) {
	        return stored;
	      }

	      this.entities.set(entity.sid, entity);

	      if (entity.uniqueName) {
	        this.names.set(entity.type + '::' + entity.uniqueName, entity.sid);
	      }

	      return entity;
	    }
	  }, {
	    key: "getResolved",
	    value: function getResolved(id, type) {
	      var resolvedSid = this.names.get(type + '::' + id);
	      return resolvedSid ? this.entities.get(resolvedSid) : null;
	    }
	  }, {
	    key: "get",
	    value: function get(id, type) {
	      return this.entities.get(id) || this.getResolved(id, type) || null;
	    }
	  }, {
	    key: "remove",
	    value: function remove(sid) {
	      var cached = this.entities.get(sid);

	      if (cached) {
	        this.entities.delete(sid);

	        if (cached.uniqueName) {
	          this.names.delete(cached.type + '::' + cached.uniqueName);
	        }
	      }
	    }
	  }]);

	  return EntitiesCache;
	}();

	function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf$3(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$3(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$3(this, result); }; }

	function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	/**
	 * An individual result from a LiveQuery or InstantQuery result set.
	 */

	var InsightsItem = /*#__PURE__*/function () {
	  /**
	   * @internal
	   */
	  function InsightsItem(key, value, lastEventId) {
	    _classCallCheck$3(this, InsightsItem);

	    this.key = key;
	    this.value = value;
	    this.lastEventId = lastEventId;
	  }
	  /**
	   * The identifier that maps to this item within the search result.
	   */

	  /**
	   * The contents of the item.
	   */

	  /**
	   * The revision of the item.
	   */


	  _createClass$3(InsightsItem, [{
	    key: "cacheKey",
	    get:
	    /**
	     * CachedValue interface.
	     */
	    function get() {
	      return this.key;
	    }
	  }]);

	  return InsightsItem;
	}();
	var LiveQueryImpl = /*#__PURE__*/function (_SyncEntity) {
	  _inherits$3(LiveQueryImpl, _SyncEntity);

	  var _super = _createSuper$1(LiveQueryImpl);

	  function LiveQueryImpl(descriptor, services, removalHandler, items) {
	    var _this;

	    _classCallCheck$3(this, LiveQueryImpl);

	    _this = _super.call(this, services, removalHandler);
	    _this.descriptor = descriptor;
	    _this.cache = new ItemsCache();

	    if (items) {
	      items.forEach(function (item) {
	        var newItem = new InsightsItem(item.key, item.data, item.revision); // @fixme item.lasteventid?

	        _this.cache.store(item.key, newItem, item.revision); // @fixme item.lasteventid?

	      });
	    }

	    return _this;
	  } // public


	  _createClass$3(LiveQueryImpl, [{
	    key: "sid",
	    get: function get() {
	      return this.descriptor.sid;
	    } // private extension of SyncEntity

	  }, {
	    key: "uniqueName",
	    get: function get() {
	      return null;
	    }
	  }, {
	    key: "type",
	    get: function get() {
	      return LiveQueryImpl.type;
	    }
	  }, {
	    key: "lastEventId",
	    get: function get() {
	      return this.descriptor.last_event_id;
	    }
	  }, {
	    key: "indexName",
	    get: function get() {
	      return this.descriptor.indexName;
	    }
	  }, {
	    key: "queryString",
	    get: function get() {
	      return this.descriptor.queryExpression;
	    } // custom private props

	  }, {
	    key: "queryUri",
	    get: function get() {
	      return this.descriptor.queryUri;
	    }
	  }, {
	    key: "liveQueryDescriptor",
	    get: function get() {
	      return this.descriptor;
	    } // dummy stub from iface

	  }, {
	    key: "onRemoved",
	    value: function onRemoved() {}
	  }, {
	    key: "getItems",
	    value: function getItems() {
	      var dataByKey = {};
	      this.cache.forEach(function (key, item) {
	        dataByKey[key] = item.value;
	      });
	      return dataByKey;
	    }
	    /**
	     * @internal
	     */

	  }, {
	    key: "_update",
	    value: function _update(message, isStrictlyOrdered) {
	      switch (message.type) {
	        case 'live_query_item_updated':
	          this.handleItemMutated(message.item_key, message.item_data, message.item_revision);
	          break;

	        case 'live_query_item_removed':
	          this.handleItemRemoved(message.item_key, message.item_revision);
	          break;

	        case 'live_query_updated':
	          this.handleBatchUpdate(message.items);
	          break;
	      }

	      if (isStrictlyOrdered) {
	        this._advanceLastEventId(message.last_event_id);
	      }
	    }
	  }, {
	    key: "handleItemMutated",
	    value: function handleItemMutated(key, value, lastEventId) {
	      if (this.shouldIgnoreEvent(key, lastEventId)) {
	        log$1.trace("Item ".concat(key, " update skipped, revision: ").concat(lastEventId));
	        return;
	      }

	      var newItem = new InsightsItem(key, value, lastEventId);
	      this.cache.store(key, newItem, lastEventId);
	      this.broadcastEventToListeners('itemUpdated', newItem);
	    }
	  }, {
	    key: "handleItemRemoved",
	    value: function handleItemRemoved(key, lastEventId) {
	      if (this.shouldIgnoreEvent(key, lastEventId)) {
	        log$1.trace("Item ".concat(key, " delete skipped, revision: ").concat(lastEventId));
	        return;
	      }

	      this.cache.delete(key, lastEventId);
	      this.broadcastEventToListeners('itemRemoved', {
	        key: key
	      });
	    }
	  }, {
	    key: "handleBatchUpdate",
	    value: function handleBatchUpdate(items) {
	      var _this2 = this;

	      // preprocess item set for easy key-based access
	      var newItems = {};

	      if (items != null) {
	        items.forEach(function (item) {
	          newItems[item.key] = {
	            data: item.data,
	            revision: item.revision
	          };
	        });
	      } // go through existing items and generate update/remove events for them


	      this.cache.forEach(function (key, item) {
	        var newItem = newItems[key];

	        if (newItem != null) {
	          _this2.handleItemMutated(key, newItem.data, newItem.revision);
	        } else {
	          _this2.handleItemRemoved(key, null); // force deletion w/o revision

	        } // once item is handled, remove it from the incoming array


	        delete newItems[key];
	      }); // once we handled all the known items, handle remaining pack

	      for (var key in newItems) {
	        this.handleItemMutated(key, newItems[key].data, newItems[key].revision);
	      }
	    }
	  }, {
	    key: "shouldIgnoreEvent",
	    value: function shouldIgnoreEvent(key, eventId) {
	      return key != null && eventId != null && this.cache.isKnown(key, eventId);
	    }
	    /**
	     * @internal
	     */

	  }, {
	    key: "_advanceLastEventId",
	    value: function _advanceLastEventId(eventId, revision) {
	      // LiveQuery is not versioned in any way, so simply ignore second param and act upon lastEventId only
	      if (this.lastEventId < eventId) {
	        this.descriptor.last_event_id = eventId;
	      }
	    }
	  }], [{
	    key: "type",
	    get: function get() {
	      return 'live_query';
	    }
	  }]);

	  return LiveQueryImpl;
	}(SyncEntity);
	function queryItems(_x) {
	  return _queryItems.apply(this, arguments);
	}
	/**
	 * Represents a long-running query against Flex data wherein the returned result set
	 * subsequently receives pushed updates whenever new (or updated) records would match the
	 * given expression. Updated results are presented row-by-row until this query is explicitly
	 * closed.
	 *
	 * Use the {@link SyncClient.liveQuery} method to create a live query.
	 */

	function _queryItems() {
	  _queryItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params) {
	    var network, queryString, uri, type, liveQueryRequestBody, response;
	    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
	      while (1) {
	        switch (_context3.prev = _context3.next) {
	          case 0:
	            network = params.network, queryString = params.queryString, uri = params.uri, type = params.type;

	            if (!(queryString == null)) {
	              _context3.next = 3;
	              break;
	            }

	            throw new SyncError("Invalid query", 400, 54507);

	          case 3:
	            liveQueryRequestBody = {
	              query_string: queryString // raw query string (like `key == "value" AND key2 != "value2"`)

	            };

	            if (type === LiveQuery.type) {
	              liveQueryRequestBody.type = type;
	            }

	            _context3.next = 7;
	            return network.post(uri, liveQueryRequestBody, undefined, true);

	          case 7:
	            response = _context3.sent;
	            return _context3.abrupt("return", response.body);

	          case 9:
	          case "end":
	            return _context3.stop();
	        }
	      }
	    }, _callee3);
	  }));
	  return _queryItems.apply(this, arguments);
	}

	var LiveQuery = /*#__PURE__*/function (_Closeable) {
	  _inherits$3(LiveQuery, _Closeable);

	  var _super2 = _createSuper$1(LiveQuery);

	  /**
	   * @internal
	   */
	  function LiveQuery(liveQueryImpl) {
	    var _this3;

	    _classCallCheck$3(this, LiveQuery);

	    _this3 = _super2.call(this);
	    _this3.liveQueryImpl = liveQueryImpl;

	    _this3.liveQueryImpl.attach(_assertThisInitialized$2(_this3));

	    return _this3;
	  }
	  /**
	   * Fired when an item has been added or updated.
	   *
	   * Parameters:
	   * 1. {@link InsightsItem} `item` - updated item
	   * @example
	   * ```typescript
	   * liveQuery.on('itemUpdated', (item) => {
	   *   console.log(`Item ${item.key} was updated`'`);
	   *   console.log('Item value:', item.value);
	   * });
	   * ```
	   * @event
	   */

	  /**
	   * Fired when an existing item has been removed.
	   *
	   * Parameters:
	   * 1. object `args` - info object provided with the event. It has the following properties:
	   *     * object `key` - the key of the removed item
	   * @example
	   * ```typescript
	   * liveQuery.on('itemRemoved', (args) => {
	   *   console.log(`Item ${args.key} was removed`);
	   * });
	   * ```
	   * @event
	   */


	  _createClass$3(LiveQuery, [{
	    key: "type",
	    get: function get() {
	      return LiveQueryImpl.type;
	    }
	  }, {
	    key: "lastEventId",
	    get: function get() {
	      return this.liveQueryImpl.lastEventId;
	    }
	    /**
	     * The immutable identifier of this query object, assigned by the system.
	     */

	  }, {
	    key: "sid",
	    get: function get() {
	      return this.liveQueryImpl.sid;
	    }
	  }, {
	    key: "close",
	    value:
	    /**
	     * Closes this query instance and unsubscribes from further service events.
	     * This will eventually stop the physical inflow of updates over the network,
	     * when all other instances of this query are closed as well.
	     */
	    function close() {
	      _get$1(_getPrototypeOf$3(LiveQuery.prototype), "close", this).call(this);

	      this.liveQueryImpl.detach(this.listenerUuid);
	    }
	    /**
	     * @return A snapshot of items matching the current query expression.
	     */

	  }, {
	    key: "getItems",
	    value: function getItems() {
	      this.ensureNotClosed();
	      return this.liveQueryImpl.getItems();
	    }
	  }], [{
	    key: "type",
	    get: // private props
	    function get() {
	      return LiveQueryImpl.type;
	    }
	  }]);

	  return LiveQuery;
	}(Closeable);
	/**
	 * Allows repetitive quick searches against specific Flex data.
	 * Unlike a LiveQuery, this result set does not subscribe to any updates and therefore
	 * receives no events beyond the initial result set.
	 *
	 * Use the {@link SyncClient.instantQuery} method to create an Instant Query.
	 */

	_defineProperty$2(LiveQuery, "itemUpdated", 'itemUpdated');

	_defineProperty$2(LiveQuery, "itemRemoved", 'itemRemoved');

	var InstantQuery = /*#__PURE__*/function (_ReplayEventEmitter) {
	  _inherits$3(InstantQuery, _ReplayEventEmitter);

	  var _super3 = _createSuper$1(InstantQuery);

	  /**
	   * @internal
	   */
	  function InstantQuery(params) {
	    var _this4;

	    _classCallCheck$3(this, InstantQuery);

	    _this4 = _super3.call(this);

	    _defineProperty$2(_assertThisInitialized$2(_this4), "queryExpression", null);

	    _defineProperty$2(_assertThisInitialized$2(_this4), "items", {});

	    Object.assign(_assertThisInitialized$2(_this4), params);

	    _this4.updateIndexName(params.indexName);

	    return _this4;
	  }
	  /**
	   * Fired when a search result is ready.
	   *
	   * Parameters:
	   * 1. {@link ItemsSnapshot} `items` - a snapshot of items matching current query expression.
	   * @example
	   * ```typescript
	   * instantQuery.on('searchResult', (items) => {
	   *    Object.entries(items).forEach(([key, value]) => {
	   *      console.log('Search result item key:', key);
	   *      console.log('Search result item value:', value);
	   *    });
	   * });
	   * ```
	   * @event
	   */


	  _createClass$3(InstantQuery, [{
	    key: "type",
	    get: function get() {
	      return InstantQuery.type;
	    }
	  }, {
	    key: "search",
	    value:
	    /**
	     * Spawns a new search request. The result will be provided asynchronously via the {@link InstantQuery.searchResult}
	     * event.
	     * @param queryExpression A query expression to be executed against the given data index. For more information
	     * on the syntax read {@link SyncClient.liveQuery}.
	     * @return A promise that resolves when query result has been received.
	     */
	    function () {
	      var _search = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(queryExpression) {
	        var _this5 = this;

	        var response;
	        return _regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                this.items = {};
	                _context.prev = 1;
	                _context.next = 4;
	                return queryItems({
	                  network: this.network,
	                  uri: this.queryUri,
	                  queryString: queryExpression
	                });

	              case 4:
	                response = _context.sent;
	                this.queryExpression = queryExpression;

	                if (response.items) {
	                  response.items.forEach(function (item) {
	                    _this5.items[item.key] = item.data;
	                  });
	                }

	                this.emit('searchResult', this.getItems());
	                _context.next = 15;
	                break;

	              case 10:
	                _context.prev = 10;
	                _context.t0 = _context["catch"](1);
	                log$1.error("Error '".concat(_context.t0.message, "' while executing query '").concat(queryExpression, "'"));
	                this.queryExpression = null;
	                throw _context.t0;

	              case 15:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this, [[1, 10]]);
	      }));

	      function search(_x2) {
	        return _search.apply(this, arguments);
	      }

	      return search;
	    }()
	    /**
	     * Instantiates a LiveQuery object based on the last known query expression that was passed to the
	     * {@link InstantQuery.search} method. This LiveQuery will start receiving updates with new results,
	     * while current object can be still used to execute repetitive searches.
	     * @return A promise which resolves when the LiveQuery object is ready.
	     */

	  }, {
	    key: "subscribe",
	    value: function () {
	      var _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
	        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                if (!(this.queryExpression == null)) {
	                  _context2.next = 2;
	                  break;
	                }

	                return _context2.abrupt("return", Promise.reject(new SyncError("Invalid query", 400, 54507)));

	              case 2:
	                return _context2.abrupt("return", this.liveQueryCreator(this.indexName, this.queryExpression));

	              case 3:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function subscribe() {
	        return _subscribe.apply(this, arguments);
	      }

	      return subscribe;
	    }()
	    /**
	     * @return A snapshot of items matching current query expression.
	     */

	  }, {
	    key: "getItems",
	    value: function getItems() {
	      return this.items;
	    }
	    /**
	     * Set new index name
	     * @param indexName New index name to set
	     */

	  }, {
	    key: "updateIndexName",
	    value: function updateIndexName(indexName) {
	      this.indexName = indexName;
	      this.queryUri = this.generateQueryUri(this.indexName);
	    }
	  }, {
	    key: "generateQueryUri",
	    value: function generateQueryUri(indexName) {
	      return new UriBuilder(this.insightsUri).pathSegment(indexName).pathSegment('Items').build();
	    }
	  }], [{
	    key: "type",
	    get: // private props
	    function get() {
	      return 'instant_query';
	    }
	  }]);

	  return InstantQuery;
	}(ReplayEventEmitter_1);

	_defineProperty$2(InstantQuery, "searchResult", 'searchResult');

	__decorate([validateTypesAsync_1('string'), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], InstantQuery.prototype, "search", null);

	__decorate([validateTypes_1(nonEmptyString_1), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", void 0)], InstantQuery.prototype, "updateIndexName", null);

	var version = "3.3.7";

	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf$3(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$3(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$3(this, result); }; }

	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
	var SYNC_PRODUCT_ID = 'data_sync';
	var SDK_VERSION = version;

	function decompose(arg) {
	  if (!arg) {
	    return {
	      mode: 'create_new'
	    };
	  } else if (typeof arg === 'string') {
	    return {
	      id: arg,
	      mode: 'open_or_create'
	    };
	  } else {
	    var mode = arg.mode || (arg.id ? 'open_or_create' : 'create_new');
	    return _objectSpread(_objectSpread({}, arg), {}, {
	      mode: mode
	    });
	  }
	}

	var SYNC_DOCUMENT_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.document';
	var SYNC_LIST_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.list';
	var SYNC_MAP_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.map';
	var SYNC_NOTIFICATION_TYPE = 'twilio.sync.event';
	/**
	 * Client for the Twilio Sync service.
	 *
	 * @example
	 * ```typescript
	 * // Using NPM resolution
	 * const SyncClient = require('twilio-sync');
	 * const syncClient = new SyncClient(token, { loglevel: 'debug' });
	 *
	 * // Using CDN
	 * const syncClient = new Twilio.Sync.Client(token, { logLevel: 'debug' });
	 * ```
	 */

	var Client = /*#__PURE__*/function (_ReplayEventEmitter) {
	  _inherits$3(Client, _ReplayEventEmitter);

	  var _super = _createSuper(Client);

	  /**
	   * @param fpaToken Twilio access token.
	   * @param options Options to customize the client.
	   */
	  function Client(fpaToken) {
	    var _options$twilsockClie;

	    var _this;

	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    _classCallCheck$3(this, Client);

	    _this = _super.call(this);

	    if (!fpaToken) {
	      throw new Error('Sync library needs a valid Twilio token to be passed');
	    }

	    if (options.hasOwnProperty('logLevel')) {
	      log$1.setLevel(options.logLevel);
	    } else {
	      log$1.setLevel('silent');
	    }

	    var productId = options.productId = options.productId || SYNC_PRODUCT_ID; // Fill ClientMetadata

	    options.clientMetadata = options.clientMetadata || {};

	    if (!options.clientMetadata.hasOwnProperty('type')) {
	      options.clientMetadata.type = 'sync';
	    }

	    if (!options.clientMetadata.hasOwnProperty('sdk')) {
	      options.clientMetadata.sdk = 'JS';
	      options.clientMetadata.sdkv = SDK_VERSION;
	    }

	    var startTwilsock = !options.twilsockClient; // Create default init registrations if none were provided.
	    // Otherwise, the outside party have to list all the init registrations they need, including Sync ones.

	    if (!options.initRegistrations) {
	      var initRegistration = new browser$2.InitRegistration(productId);
	      Client.populateInitRegistrations(initRegistration);
	      options.initRegistrations = [initRegistration];
	    }

	    var twilsock = options.twilsockClient = (_options$twilsockClie = options.twilsockClient) !== null && _options$twilsockClie !== void 0 ? _options$twilsockClie : new browser$2.Twilsock(fpaToken, productId, options);
	    twilsock.on('tokenAboutToExpire', function () {
	      return _this.emit('tokenAboutToExpire');
	    });
	    twilsock.on('tokenExpired', function () {
	      return _this.emit('tokenExpired');
	    });
	    twilsock.on('connectionError', function (err) {
	      return _this.emit('connectionError', err);
	    });
	    twilsock.on('stateChanged', function (state) {
	      _this.emit('connectionStateChanged', state);
	      /**
	       * Handle transport establishing event
	       * If we have any subscriptions - we should check object for modifications
	       */


	      _this.services.subscriptions.onConnectionStateChanged(state === 'connected');
	    });
	    twilsock.on('message', function (messageType, payload) {
	      return _this._routeMessage(messageType, payload);
	    });
	    var config = new Configuration(options);
	    var network = new NetworkService(new ClientInfo(SDK_VERSION), config, twilsock);
	    var storage = new SessionStorage(config);
	    _this.services = {
	      config: config,
	      twilsock: twilsock,
	      network: network,
	      storage: storage,
	      router: _assertThisInitialized$2(_this),
	      subscriptions: null
	    };
	    _this.services.subscriptions = new Subscriptions(_this.services);
	    _this.entities = new EntitiesCache(); // Start only if we created twilsock locally,
	    // otherwise it's the responsibility of whoever created the Twilsock client.

	    if (startTwilsock) {
	      twilsock.connect();
	    }

	    return _this;
	  }
	  /**
	   * Fired when connection state has been changed.
	   *
	   * Parameters:
	   * 1. {@link ConnectionState} `connectionState` - contains current service connection state.
	   * @example
	   * ```typescript
	   * syncClient.on('connectionStateChanged', (newState) => {
	   *   console.log('Received a new connection state:', newState);
	   * });
	   * ```
	   * @event
	   */

	  /**
	   * Fired when connection is interrupted by unexpected reason.
	   *
	   * Parameters:
	   * 1. object `connectionError` - connection error details. It has following properties:
	   *     * boolean `terminal` - twilsock will stop connection attempts
	   *     * string `message` - root cause
	   *     * number? `httpStatusCode` - HTTP status code if available
	   *     * number? `errorCode` - Twilio public error code if available
	   * @example
	   * ```typescript
	   * syncClient.on('connectionError', (connectionError) => {
	   *   console.error('Connection was interrupted:', connectionError.message);
	   *   console.error('Is terminal:', connectionError.terminal);
	   * });
	   * ```
	   * @event
	   */

	  /**
	   * Fired when the access token is about to expire and needs to be updated.
	   * The trigger takes place three minutes before the JWT access token expiry.
	   * For long living applications, you should refresh the token when either
	   * {@link SyncClient.tokenAboutToExpire | tokenAboutToExpire} or
	   * {@link SyncClient.tokenExpired | tokenExpire} events occur; handling just
	   * one of them is sufficient.
	   * @example
	   * The following example illustrates access token refresh.
	   * ```typescript
	   * syncClient.on('tokenAboutToExpire', () => {
	   *   // Obtain a JWT access token: https://www.twilio.com/docs/sync/identity-and-access-tokens
	   *   const token = '<your-access-token-here>';
	   *   syncClient.updateToken(token);
	   * });
	   * ```
	   * @event
	   */

	  /**
	   * Fired when the access token is expired.
	   * In case the token is not refreshed, all subsequent Sync operations will fail and the client will disconnect.
	   * For long living applications, you should refresh the token when either
	   * {@link SyncClient.tokenAboutToExpire | tokenAboutToExpire} or
	   * {@link SyncClient.tokenExpired | tokenExpire} events occur; handling just
	   * one of them is sufficient.
	   * @event
	   */


	  _createClass$3(Client, [{
	    key: "_routeMessage",
	    value:
	    /**
	     * Entry point for all the incoming messages (Router).
	     *
	     * @param type Type of the incoming message
	     * @param message Message to route
	     * @internal
	     */
	    function _routeMessage(type, message) {
	      log$1.trace('Notification type:', type, 'content:', message);

	      switch (type) {
	        case SYNC_DOCUMENT_NOTIFICATION_TYPE:
	        case SYNC_LIST_NOTIFICATION_TYPE:
	        case SYNC_MAP_NOTIFICATION_TYPE:
	          this.services.subscriptions.acceptMessage(message, false);
	          break;

	        case SYNC_NOTIFICATION_TYPE:
	          this.services.subscriptions.acceptMessage(message, true);
	          break;
	      }
	    }
	    /**
	     * Subscribe for events (Router)
	     *
	     * @internal
	     */

	  }, {
	    key: "_subscribe",
	    value: function _subscribe(sid, entity) {
	      this.services.subscriptions.add(sid, entity);
	    }
	    /**
	     * Unsubscribe from events (Router)
	     *
	     * @internal
	     */

	  }, {
	    key: "_unsubscribe",
	    value: function _unsubscribe(sid) {
	      this.services.subscriptions.remove(sid);
	    }
	    /**
	     * Current version of the Sync client.
	     */

	  }, {
	    key: "connectionState",
	    get:
	    /**
	     * Current service connection state.
	     */
	    function get() {
	      return this.services.twilsock.state;
	    }
	    /**
	     * Returns a promise which resolves when library is correctly initialized
	     * Or throws if initialization is impossible
	     *
	     * @internal
	     */

	  }, {
	    key: "ensureReady",
	    value: function () {
	      var _ensureReady = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
	        var storageSettings;
	        return _regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (this.services.config.sessionStorageEnabled) {
	                  _context.next = 2;
	                  break;
	                }

	                return _context.abrupt("return");

	              case 2:
	                _context.prev = 2;
	                _context.next = 5;
	                return this.services.twilsock.storageId();

	              case 5:
	                storageSettings = _context.sent;
	                this.services.storage.updateStorageId(storageSettings.id);
	                _context.next = 12;
	                break;

	              case 9:
	                _context.prev = 9;
	                _context.t0 = _context["catch"](2);
	                log$1.warn('Failed to initialize storage', _context.t0);

	              case 12:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this, [[2, 9]]);
	      }));

	      function ensureReady() {
	        return _ensureReady.apply(this, arguments);
	      }

	      return ensureReady;
	    }()
	  }, {
	    key: "storeRootInSessionCache",
	    value: function storeRootInSessionCache(type, id, value) {
	      // can't store without id
	      if (!this.services.config.sessionStorageEnabled || !id) {
	        return;
	      }

	      var valueToStore = deepClone(value);

	      if (type === SyncList.type || type === SyncMap.type) {
	        valueToStore['last_event_id'] = null;
	        delete valueToStore['items'];
	      }

	      this.services.storage.store(type, id, valueToStore);
	    }
	  }, {
	    key: "readRootFromSessionCache",
	    value: function readRootFromSessionCache(type, id) {
	      if (!this.services.config.sessionStorageEnabled || !id) {
	        return null;
	      }

	      return this.services.storage.read(type, id);
	    }
	  }, {
	    key: "_get",
	    value: function () {
	      var _get2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(baseUri, id) {
	        var optimistic,
	            uri,
	            response,
	            _args2 = arguments;
	        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                optimistic = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : false;

	                if (id) {
	                  _context2.next = 3;
	                  break;
	                }

	                throw new SyncError("Cannot get entity without id", 404);

	              case 3:
	                uri = new UriBuilder(baseUri).pathSegment(id).queryParam('Include', optimistic ? 'items' : undefined).build();
	                _context2.next = 6;
	                return this.services.network.get(uri);

	              case 6:
	                response = _context2.sent;
	                return _context2.abrupt("return", response.body);

	              case 8:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function _get(_x, _x2) {
	        return _get2.apply(this, arguments);
	      }

	      return _get;
	    }()
	  }, {
	    key: "_createDocument",
	    value: function _createDocument(id, data, ttl) {
	      var requestBody = {
	        unique_name: id,
	        data: data || {}
	      };

	      if (ttl !== undefined) {
	        requestBody.ttl = ttl;
	      }

	      return this.services.network.post(this.services.config.documentsUri, requestBody).then(function (response) {
	        response.body.data = requestBody.data;
	        return response.body;
	      });
	    }
	  }, {
	    key: "_getDocument",
	    value: function () {
	      var _getDocument2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {
	        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                return _context3.abrupt("return", this.readRootFromSessionCache(SyncDocument.type, id) || this._get(this.services.config.documentsUri, id));

	              case 1:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function _getDocument(_x3) {
	        return _getDocument2.apply(this, arguments);
	      }

	      return _getDocument;
	    }()
	  }, {
	    key: "_createList",
	    value: function _createList(id, purpose, context, ttl) {
	      var requestBody = {
	        unique_name: id,
	        purpose: purpose,
	        context: context
	      };

	      if (ttl !== undefined) {
	        requestBody.ttl = ttl;
	      }

	      return this.services.network.post(this.services.config.listsUri, requestBody).then(function (response) {
	        return response.body;
	      });
	    }
	  }, {
	    key: "_getList",
	    value: function () {
	      var _getList2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id) {
	        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                return _context4.abrupt("return", this.readRootFromSessionCache(SyncList.type, id) || this._get(this.services.config.listsUri, id));

	              case 1:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this);
	      }));

	      function _getList(_x4) {
	        return _getList2.apply(this, arguments);
	      }

	      return _getList;
	    }()
	  }, {
	    key: "_createMap",
	    value: function _createMap(id, ttl) {
	      var requestBody = {
	        unique_name: id
	      };

	      if (ttl !== undefined) {
	        requestBody.ttl = ttl;
	      }

	      return this.services.network.post(this.services.config.mapsUri, requestBody).then(function (response) {
	        return response.body;
	      });
	    }
	  }, {
	    key: "_getMap",
	    value: function () {
	      var _getMap2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(id) {
	        var optimistic,
	            _args5 = arguments;
	        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                optimistic = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : false;
	                return _context5.abrupt("return", this.readRootFromSessionCache(SyncMap.type, id) || this._get(this.services.config.mapsUri, id, optimistic));

	              case 2:
	              case "end":
	                return _context5.stop();
	            }
	          }
	        }, _callee5, this);
	      }));

	      function _getMap(_x5) {
	        return _getMap2.apply(this, arguments);
	      }

	      return _getMap;
	    }()
	  }, {
	    key: "_getStream",
	    value: function () {
	      var _getStream2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(id) {
	        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
	          while (1) {
	            switch (_context6.prev = _context6.next) {
	              case 0:
	                return _context6.abrupt("return", this.readRootFromSessionCache(SyncStream.type, id) || this._get(this.services.config.streamsUri, id, false));

	              case 1:
	              case "end":
	                return _context6.stop();
	            }
	          }
	        }, _callee6, this);
	      }));

	      function _getStream(_x6) {
	        return _getStream2.apply(this, arguments);
	      }

	      return _getStream;
	    }()
	  }, {
	    key: "_createStream",
	    value: function () {
	      var _createStream2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(id, ttl) {
	        var requestBody, response;
	        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
	          while (1) {
	            switch (_context7.prev = _context7.next) {
	              case 0:
	                requestBody = {
	                  unique_name: id
	                };

	                if (ttl !== undefined) {
	                  requestBody.ttl = ttl;
	                }

	                _context7.next = 4;
	                return this.services.network.post(this.services.config.streamsUri, requestBody);

	              case 4:
	                response = _context7.sent;
	                return _context7.abrupt("return", response.body);

	              case 6:
	              case "end":
	                return _context7.stop();
	            }
	          }
	        }, _callee7, this);
	      }));

	      function _createStream(_x7, _x8) {
	        return _createStream2.apply(this, arguments);
	      }

	      return _createStream;
	    }()
	  }, {
	    key: "_getLiveQuery",
	    value: function _getLiveQuery(sid) {
	      return this.readRootFromSessionCache(LiveQuery.type, sid);
	    }
	  }, {
	    key: "getCached",
	    value: function getCached(id, type) {
	      if (id) {
	        return this.entities.get(id, type) || null;
	      }

	      return null;
	    }
	  }, {
	    key: "removeFromCacheAndSession",
	    value: function removeFromCacheAndSession(type, sid, uniqueName) {
	      this.entities.remove(sid);

	      if (this.services.config.sessionStorageEnabled) {
	        this.services.storage.remove(type, sid, uniqueName);
	      }
	    }
	    /**
	     * Read or create a Sync document.
	     * @param arg Could be any of the following:
	     * * Unique name or SID identifying the Sync document - opens the document with the given identifier or creates one if it does not exist.
	     * * none - creates a new document with a randomly assigned SID and no unique name.
	     * * {@link OpenDocumentOptions} object for more granular control.
	     * @return A promise which resolves after the document is successfully read (or created).
	     * This promise may reject if the document could not be created or if this endpoint lacks the necessary permissions to access it.
	     * @example
	     * ```typescript
	     * syncClient.document('MyDocument')
	     *   .then((document) => {
	     *     console.log('Successfully opened a document. SID:', document.sid);
	     *     document.on('updated', (event) => {
	     *       console.log('Received an "updated" event: ', event);
	     *     });
	     *   })
	     *   .catch((error) => {
	     *     console.error('Unexpected error', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "document",
	    value: function () {
	      var _document = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(arg) {
	        var _this2 = this;

	        var opts, docDescriptor, docFromInMemoryCache, syncDocumentImpl;
	        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
	          while (1) {
	            switch (_context8.prev = _context8.next) {
	              case 0:
	                _context8.next = 2;
	                return this.ensureReady();

	              case 2:
	                opts = decompose(arg);

	                if (!(opts.mode === 'create_new')) {
	                  _context8.next = 9;
	                  break;
	                }

	                _context8.next = 6;
	                return this._createDocument(opts.id, opts.data, opts.ttl);

	              case 6:
	                docDescriptor = _context8.sent;
	                _context8.next = 39;
	                break;

	              case 9:
	                docFromInMemoryCache = this.getCached(opts.id, SyncDocument.type);

	                if (!docFromInMemoryCache) {
	                  _context8.next = 14;
	                  break;
	                }

	                return _context8.abrupt("return", new SyncDocument(docFromInMemoryCache));

	              case 14:
	                _context8.prev = 14;
	                _context8.next = 17;
	                return this._getDocument(opts.id);

	              case 17:
	                docDescriptor = _context8.sent;
	                _context8.next = 39;
	                break;

	              case 20:
	                _context8.prev = 20;
	                _context8.t0 = _context8["catch"](14);

	                if (!(_context8.t0.status !== 404 || opts.mode === 'open_existing')) {
	                  _context8.next = 26;
	                  break;
	                }

	                throw _context8.t0;

	              case 26:
	                _context8.prev = 26;
	                _context8.next = 29;
	                return this._createDocument(opts.id, opts.data, opts.ttl);

	              case 29:
	                docDescriptor = _context8.sent;
	                _context8.next = 39;
	                break;

	              case 32:
	                _context8.prev = 32;
	                _context8.t1 = _context8["catch"](26);

	                if (!(_context8.t1.status === 409)) {
	                  _context8.next = 38;
	                  break;
	                }

	                return _context8.abrupt("return", this.document(arg));

	              case 38:
	                throw _context8.t1;

	              case 39:
	                this.storeRootInSessionCache(SyncDocument.type, opts.id, docDescriptor);
	                syncDocumentImpl = new SyncDocumentImpl(this.services, docDescriptor, function (type, sid, uniqueName) {
	                  return _this2.removeFromCacheAndSession(type, sid, uniqueName);
	                });
	                syncDocumentImpl = this.entities.store(syncDocumentImpl);
	                return _context8.abrupt("return", new SyncDocument(syncDocumentImpl));

	              case 43:
	              case "end":
	                return _context8.stop();
	            }
	          }
	        }, _callee8, this, [[14, 20], [26, 32]]);
	      }));

	      function document(_x9) {
	        return _document.apply(this, arguments);
	      }

	      return document;
	    }()
	    /**
	     * Read or create a Sync map.
	     * @param arg Could be any of the following:
	     * * Unique name or SID identifying the Sync map - opens the map with the given identifier or creates one if it does not exist.
	     * * none - creates a new map with a randomly assigned SID and no unique name.
	     * * {@link OpenMapOptions} object for more granular control.
	     * @return A promise which resolves after the map is successfully read (or created).
	     * This promise may reject if the map could not be created or if this endpoint lacks the necessary permissions to access it.
	     * @example
	     * ```typescript
	     * syncClient.map('MyMap')
	     *   .then((map) => {
	     *     console.log('Successfully opened a map. SID:', map.sid);
	     *     map.on('itemUpdated', (event) => {
	     *       console.log('Received an "itemUpdated" event:', event);
	     *     });
	     *   })
	     *   .catch((error) => {
	     *     console.error('Unexpected error', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "map",
	    value: function () {
	      var _map = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(arg) {
	        var _this3 = this;

	        var opts, mapDescriptor, mapFromInMemoryCache, syncMapImpl;
	        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
	          while (1) {
	            switch (_context9.prev = _context9.next) {
	              case 0:
	                _context9.next = 2;
	                return this.ensureReady();

	              case 2:
	                opts = decompose(arg);

	                if (!(opts.mode === 'create_new')) {
	                  _context9.next = 9;
	                  break;
	                }

	                _context9.next = 6;
	                return this._createMap(opts.id, opts.ttl);

	              case 6:
	                mapDescriptor = _context9.sent;
	                _context9.next = 39;
	                break;

	              case 9:
	                mapFromInMemoryCache = this.getCached(opts.id, SyncMap.type);

	                if (!mapFromInMemoryCache) {
	                  _context9.next = 14;
	                  break;
	                }

	                return _context9.abrupt("return", new SyncMap(mapFromInMemoryCache));

	              case 14:
	                _context9.prev = 14;
	                _context9.next = 17;
	                return this._getMap(opts.id, opts.includeItems);

	              case 17:
	                mapDescriptor = _context9.sent;
	                _context9.next = 39;
	                break;

	              case 20:
	                _context9.prev = 20;
	                _context9.t0 = _context9["catch"](14);

	                if (!(_context9.t0.status !== 404 || opts.mode === 'open_existing')) {
	                  _context9.next = 26;
	                  break;
	                }

	                throw _context9.t0;

	              case 26:
	                _context9.prev = 26;
	                _context9.next = 29;
	                return this._createMap(opts.id, opts.ttl);

	              case 29:
	                mapDescriptor = _context9.sent;
	                _context9.next = 39;
	                break;

	              case 32:
	                _context9.prev = 32;
	                _context9.t1 = _context9["catch"](26);

	                if (!(_context9.t1.status === 409)) {
	                  _context9.next = 38;
	                  break;
	                }

	                return _context9.abrupt("return", this.map(arg));

	              case 38:
	                throw _context9.t1;

	              case 39:
	                this.storeRootInSessionCache(SyncMap.type, opts.id, mapDescriptor);
	                syncMapImpl = new SyncMapImpl(this.services, mapDescriptor, function (type, sid, uniqueName) {
	                  return _this3.removeFromCacheAndSession(type, sid, uniqueName);
	                });
	                syncMapImpl = this.entities.store(syncMapImpl);
	                return _context9.abrupt("return", new SyncMap(syncMapImpl));

	              case 43:
	              case "end":
	                return _context9.stop();
	            }
	          }
	        }, _callee9, this, [[14, 20], [26, 32]]);
	      }));

	      function map(_x10) {
	        return _map.apply(this, arguments);
	      }

	      return map;
	    }()
	    /**
	     * Read or create a Sync list.
	     * @param arg Could be any of the following:
	     * * Unique name or SID identifying a Sync list - opens the list with the given identifier or creates one if it does not exist.
	     * * none - creates a new list with a randomly assigned SID and no unique name.
	     * * {@link OpenListOptions} object for more granular control.
	     * @return A promise which resolves after the list is successfully read (or created).
	     * This promise may reject if the list could not be created or if this endpoint lacks the necessary permissions to access it.
	     * @example
	     * ```typescript
	     * syncClient.list('MyList')
	     *   .then((list) => {
	     *     console.log('Successfully opened a List. SID:', list.sid);
	     *     list.on('itemAdded', (event) => {
	     *       console.log('Received an "itemAdded" event:', event);
	     *     });
	     *   })
	     *   .catch((error) => {
	     *     console.error('Unexpected error', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "list",
	    value: function () {
	      var _list = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(arg) {
	        var _this4 = this;

	        var opts, listDescriptor, listFromInMemoryCache, syncListImpl;
	        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
	          while (1) {
	            switch (_context10.prev = _context10.next) {
	              case 0:
	                _context10.next = 2;
	                return this.ensureReady();

	              case 2:
	                opts = decompose(arg);

	                if (!(opts.mode === 'create_new')) {
	                  _context10.next = 9;
	                  break;
	                }

	                _context10.next = 6;
	                return this._createList(opts.id, opts.purpose, opts.context, opts.ttl);

	              case 6:
	                listDescriptor = _context10.sent;
	                _context10.next = 39;
	                break;

	              case 9:
	                listFromInMemoryCache = this.getCached(opts.id, SyncList.type);

	                if (!listFromInMemoryCache) {
	                  _context10.next = 14;
	                  break;
	                }

	                return _context10.abrupt("return", new SyncList(listFromInMemoryCache));

	              case 14:
	                _context10.prev = 14;
	                _context10.next = 17;
	                return this._getList(opts.id);

	              case 17:
	                listDescriptor = _context10.sent;
	                _context10.next = 39;
	                break;

	              case 20:
	                _context10.prev = 20;
	                _context10.t0 = _context10["catch"](14);

	                if (!(_context10.t0.status !== 404 || opts.mode === 'open_existing')) {
	                  _context10.next = 26;
	                  break;
	                }

	                throw _context10.t0;

	              case 26:
	                _context10.prev = 26;
	                _context10.next = 29;
	                return this._createList(opts.id, opts.purpose, opts.context, opts.ttl);

	              case 29:
	                listDescriptor = _context10.sent;
	                _context10.next = 39;
	                break;

	              case 32:
	                _context10.prev = 32;
	                _context10.t1 = _context10["catch"](26);

	                if (!(_context10.t1.status === 409)) {
	                  _context10.next = 38;
	                  break;
	                }

	                return _context10.abrupt("return", this.list(arg));

	              case 38:
	                throw _context10.t1;

	              case 39:
	                this.storeRootInSessionCache(SyncList.type, opts.id, listDescriptor);
	                syncListImpl = new SyncListImpl(this.services, listDescriptor, function (type, sid, uniqueName) {
	                  return _this4.removeFromCacheAndSession(type, sid, uniqueName);
	                });
	                syncListImpl = this.entities.store(syncListImpl);
	                return _context10.abrupt("return", new SyncList(syncListImpl));

	              case 43:
	              case "end":
	                return _context10.stop();
	            }
	          }
	        }, _callee10, this, [[14, 20], [26, 32]]);
	      }));

	      function list(_x11) {
	        return _list.apply(this, arguments);
	      }

	      return list;
	    }()
	    /**
	     * Read or create a Sync message stream.
	     * @param arg Could be any of the following:
	     * * Unique name or SID identifying a stream - opens the stream with the given identifier or creates one if it does not exist.
	     * * none - creates a new stream with a randomly assigned SID and no unique name.
	     * * {@link OpenStreamOptions} object for more granular control.
	     * @return A promise which resolves after the stream is successfully read (or created).
	     * The flow of messages will begin imminently (but not necessarily immediately) upon resolution.
	     * This promise may reject if the stream could not be created or if this endpoint lacks the necessary permissions to access it.
	     * @example
	     * ```typescript
	     * syncClient.stream('MyStream')
	     *   .then((stream) => {
	     *     console.log('Successfully opened a message stream. SID:', stream.sid);
	     *     stream.on('messagePublished', (event) => {
	     *       console.log('Received a "messagePublished" event:', event);
	     *     });
	     *   })
	     *   .catch((error) => {
	     *     console.error('Unexpected error', error);
	     *   });
	     * ```
	     */

	  }, {
	    key: "stream",
	    value: function () {
	      var _stream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(arg) {
	        var _this5 = this;

	        var opts, streamDescriptor, streamFromInMemoryCache, streamRemovalHandler, syncStreamImpl;
	        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
	          while (1) {
	            switch (_context11.prev = _context11.next) {
	              case 0:
	                _context11.next = 2;
	                return this.ensureReady();

	              case 2:
	                opts = decompose(arg);

	                if (!(opts.mode === 'create_new')) {
	                  _context11.next = 9;
	                  break;
	                }

	                _context11.next = 6;
	                return this._createStream(opts.id, opts.ttl);

	              case 6:
	                streamDescriptor = _context11.sent;
	                _context11.next = 39;
	                break;

	              case 9:
	                streamFromInMemoryCache = this.getCached(opts.id, SyncStream.type);

	                if (!streamFromInMemoryCache) {
	                  _context11.next = 14;
	                  break;
	                }

	                return _context11.abrupt("return", new SyncStream(streamFromInMemoryCache));

	              case 14:
	                _context11.prev = 14;
	                _context11.next = 17;
	                return this._getStream(opts.id);

	              case 17:
	                streamDescriptor = _context11.sent;
	                _context11.next = 39;
	                break;

	              case 20:
	                _context11.prev = 20;
	                _context11.t0 = _context11["catch"](14);

	                if (!(_context11.t0.status !== 404 || opts.mode === 'open_existing')) {
	                  _context11.next = 26;
	                  break;
	                }

	                throw _context11.t0;

	              case 26:
	                _context11.prev = 26;
	                _context11.next = 29;
	                return this._createStream(opts.id, opts.ttl);

	              case 29:
	                streamDescriptor = _context11.sent;
	                _context11.next = 39;
	                break;

	              case 32:
	                _context11.prev = 32;
	                _context11.t1 = _context11["catch"](26);

	                if (!(_context11.t1.status === 409)) {
	                  _context11.next = 38;
	                  break;
	                }

	                return _context11.abrupt("return", this.stream(arg));

	              case 38:
	                throw _context11.t1;

	              case 39:
	                this.storeRootInSessionCache(SyncStream.type, opts.id, streamDescriptor);

	                streamRemovalHandler = function streamRemovalHandler(type, sid, uniqueName) {
	                  return _this5.removeFromCacheAndSession(type, sid, uniqueName);
	                };

	                syncStreamImpl = new SyncStreamImpl(this.services, streamDescriptor, streamRemovalHandler);
	                syncStreamImpl = this.entities.store(syncStreamImpl);
	                return _context11.abrupt("return", new SyncStream(syncStreamImpl));

	              case 44:
	              case "end":
	                return _context11.stop();
	            }
	          }
	        }, _callee11, this, [[14, 20], [26, 32]]);
	      }));

	      function stream(_x12) {
	        return _stream.apply(this, arguments);
	      }

	      return stream;
	    }()
	    /**
	     * Gracefully shuts the Sync client down.
	     */

	  }, {
	    key: "shutdown",
	    value: function () {
	      var _shutdown = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
	        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
	          while (1) {
	            switch (_context12.prev = _context12.next) {
	              case 0:
	                _context12.next = 2;
	                return this.services.subscriptions.shutdown();

	              case 2:
	                _context12.next = 4;
	                return this.services.twilsock.disconnect();

	              case 4:
	              case "end":
	                return _context12.stop();
	            }
	          }
	        }, _callee12, this);
	      }));

	      function shutdown() {
	        return _shutdown.apply(this, arguments);
	      }

	      return shutdown;
	    }()
	    /**
	     * Set the authentication token.
	     * @param token New token to set.
	     */

	  }, {
	    key: "updateToken",
	    value: function () {
	      var _updateToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(token) {
	        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
	          while (1) {
	            switch (_context13.prev = _context13.next) {
	              case 0:
	                return _context13.abrupt("return", this.services.twilsock.updateToken(token).catch(function (error) {
	                  var _error$reply;

	                  var status = error === null || error === void 0 ? void 0 : (_error$reply = error.reply) === null || _error$reply === void 0 ? void 0 : _error$reply.status;

	                  if ((status === null || status === void 0 ? void 0 : status.code) === 401 && (status === null || status === void 0 ? void 0 : status.status) === 'UNAUTHORIZED') {
	                    throw new SyncError('Updated token was rejected by server', 400, 51130);
	                  }

	                  throw error;
	                }));

	              case 1:
	              case "end":
	                return _context13.stop();
	            }
	          }
	        }, _callee13, this);
	      }));

	      function updateToken(_x13) {
	        return _updateToken.apply(this, arguments);
	      }

	      return updateToken;
	    }()
	    /**
	     * For Flex customers only. Establishes a long-running query against Flex data wherein the returned
	     * result set is updated whenever new (or updated) records match the given expression. Updated results
	     * are presented row-by-row according to the lifetime of the returned LiveQuery object.
	     *
	     * @param indexName Must specify one of the Flex data classes for which Live Queries are available.
	     * @param queryExpression A query expression to be executed against the given data index.
	     * Please review the [Live Query Language](https://www.twilio.com/docs/sync/live-query)
	     * page for Sync client limits and a full list of operators currently supported in query expressions.
	     *
	     * @return A promise that resolves when the query has been successfully executed.
	     * @example
	     * ```typescript
	     * syncClient.liveQuery('tr-worker', 'data.attributes.worker_name == "Bob"')
	     *   .then((args) => {
	     *      console.log('Subscribed to live data updates for worker Bob');
	     *      const items = args.getItems();
	     *      Object.entries(items).forEach(([key, value]) => {
	     *        console.log('Search result item key:', key);
	     *        console.log('Search result item value:', value);
	     *      });
	     *   })
	     *   .catch((err) => {
	     *      console.error('Error when subscribing to live updates for worker Bob', err);
	     *   });
	     * ```
	     */

	  }, {
	    key: "liveQuery",
	    value: function () {
	      var _liveQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(indexName, queryExpression) {
	        var _this6 = this;

	        var queryUri, response, liveQueryImpl, descriptor, liveQueryRemovalHandler;
	        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
	          while (1) {
	            switch (_context14.prev = _context14.next) {
	              case 0:
	                _context14.next = 2;
	                return this.ensureReady();

	              case 2:
	                queryUri = new UriBuilder(this.services.config.insightsUri).pathSegment(indexName).pathSegment('Items').build(); // send query to CDS to get server-generated sid and item list

	                _context14.next = 5;
	                return queryItems({
	                  network: this.services.network,
	                  uri: queryUri,
	                  queryString: queryExpression,
	                  type: LiveQuery.type
	                });

	              case 5:
	                response = _context14.sent;
	                liveQueryImpl = this.getCached(response.query_id, LiveQuery.type);

	                if (!liveQueryImpl) {
	                  descriptor = this._getLiveQuery(response.query_id);

	                  if (!descriptor) {
	                    descriptor = {
	                      indexName: indexName,
	                      queryExpression: queryExpression,
	                      sid: response.query_id,
	                      queryUri: queryUri,
	                      last_event_id: response.last_event_id
	                    };
	                  }

	                  liveQueryRemovalHandler = function liveQueryRemovalHandler(type, sid, uniqueName) {
	                    return _this6.removeFromCacheAndSession(type, sid, uniqueName);
	                  };

	                  liveQueryImpl = new LiveQueryImpl(descriptor, this.services, liveQueryRemovalHandler, response.items);
	                }

	                this.storeRootInSessionCache(LiveQuery.type, response.query_id, liveQueryImpl.liveQueryDescriptor);
	                liveQueryImpl = this.entities.store(liveQueryImpl);
	                return _context14.abrupt("return", new LiveQuery(liveQueryImpl));

	              case 11:
	              case "end":
	                return _context14.stop();
	            }
	          }
	        }, _callee14, this);
	      }));

	      function liveQuery(_x14, _x15) {
	        return _liveQuery.apply(this, arguments);
	      }

	      return liveQuery;
	    }()
	    /**
	     * For Flex customers only. Creates a query object that can be used to issue one-time queries repeatedly
	     * against the target index.
	     *
	     * @param indexName Must specify one of the Flex data classes for which live queries are available.
	     * @return A promise which resolves after the instance of InstantQuery is successfully created.
	     * @example
	     * ```typescript
	     * syncClient.instantQuery('tr-worker')
	     *   .then((q) => {
	     *     q.on('searchResult', (items) => {
	     *       Object.entries(items).forEach(([key, value]) => {
	     *         console.log('Search result item key:', key);
	     *         console.log('Search result item value:', value);
	     *       });
	     *     });
	     *   });
	     * ```
	     */

	  }, {
	    key: "instantQuery",
	    value: function () {
	      var _instantQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(indexName) {
	        var _this7 = this;

	        var liveQueryCreator;
	        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
	          while (1) {
	            switch (_context15.prev = _context15.next) {
	              case 0:
	                _context15.next = 2;
	                return this.ensureReady();

	              case 2:
	                liveQueryCreator = function liveQueryCreator(indexName, queryExpression) {
	                  return _this7.liveQuery(indexName, queryExpression);
	                };

	                return _context15.abrupt("return", new InstantQuery({
	                  indexName: indexName,
	                  network: this.services.network,
	                  insightsUri: this.services.config.insightsUri,
	                  liveQueryCreator: liveQueryCreator
	                }));

	              case 4:
	              case "end":
	                return _context15.stop();
	            }
	          }
	        }, _callee15, this);
	      }));

	      function instantQuery(_x16) {
	        return _instantQuery.apply(this, arguments);
	      }

	      return instantQuery;
	    }()
	  }], [{
	    key: "populateInitRegistrations",
	    value: function populateInitRegistrations(reg) {
	      reg.populateInitRegistrations([SYNC_NOTIFICATION_TYPE, SYNC_DOCUMENT_NOTIFICATION_TYPE, SYNC_LIST_NOTIFICATION_TYPE, SYNC_MAP_NOTIFICATION_TYPE]);
	    }
	  }, {
	    key: "version",
	    get: function get() {
	      return SDK_VERSION;
	    }
	  }]);

	  return Client;
	}(ReplayEventEmitter_1);

	_defineProperty$2(Client, "connectionStateChanged", 'connectionStateChanged');

	_defineProperty$2(Client, "connectionError", 'connectionError');

	_defineProperty$2(Client, "tokenAboutToExpire", 'tokenAboutToExpire');

	_defineProperty$2(Client, "tokenExpired", 'tokenExpired');

	__decorate([validateTypesAsync_1(['undefined', 'string', objectSchema_1('open document options', {
	  id: ['string', 'undefined'],
	  mode: [literal_1('open_or_create', 'open_existing', 'create_new'), 'undefined'],
	  ttl: [nonNegativeInteger_1, 'undefined'],
	  data: [pureObject_1, 'undefined', literal_1(null)]
	})]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], Client.prototype, "document", null);

	__decorate([validateTypesAsync_1(['undefined', 'string', objectSchema_1('open map options', {
	  id: ['string', 'undefined'],
	  mode: [literal_1('open_or_create', 'open_existing', 'create_new'), 'undefined'],
	  ttl: [nonNegativeInteger_1, 'undefined'],
	  data: [pureObject_1, 'undefined', literal_1(null)],
	  includeItems: ['boolean', 'undefined']
	})]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], Client.prototype, "map", null);

	__decorate([validateTypesAsync_1(['undefined', 'string', objectSchema_1('open list options', {
	  id: ['string', 'undefined'],
	  mode: [literal_1('open_or_create', 'open_existing', 'create_new'), 'undefined'],
	  ttl: [nonNegativeInteger_1, 'undefined'],
	  data: [pureObject_1, 'undefined', literal_1(null)],
	  purpose: ['string', 'undefined'],
	  context: [pureObject_1, 'undefined'],
	  includeItems: ['boolean', 'undefined']
	})]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], Client.prototype, "list", null);

	__decorate([validateTypesAsync_1(['undefined', 'string', objectSchema_1('open stream options', {
	  id: ['string', 'undefined'],
	  mode: [literal_1('open_or_create', 'open_existing', 'create_new'), 'undefined'],
	  ttl: [nonNegativeInteger_1, 'undefined'],
	  data: [pureObject_1, 'undefined', literal_1(null)]
	})]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], Client.prototype, "stream", null);

	__decorate([validateTypesAsync_1(nonEmptyString_1), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Client.prototype, "updateToken", null);

	__decorate([validateTypesAsync_1(nonEmptyString_1, 'string'), __metadata("design:type", Function), __metadata("design:paramtypes", [String, String]), __metadata("design:returntype", Promise)], Client.prototype, "liveQuery", null);

	__decorate([validateTypesAsync_1(nonEmptyString_1), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Client.prototype, "instantQuery", null);

	exports.Client = Client;
	exports.InsightsItem = InsightsItem;
	exports.InstantQuery = InstantQuery;
	exports.LiveQuery = LiveQuery;
	exports.Paginator = Paginator;
	exports.SyncClient = Client;
	exports.SyncDocument = SyncDocument;
	exports.SyncList = SyncList;
	exports.SyncListItem = SyncListItem;
	exports.SyncMap = SyncMap;
	exports.SyncMapItem = SyncMapItem;
	exports.SyncStream = SyncStream;

	Object.defineProperty(exports, '__esModule', { value: true });

	return exports;

})({});

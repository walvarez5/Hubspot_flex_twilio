{"version":3,"file":"registrations.js","sources":["../../src/services/registrations.ts"],"sourcesContent":["import { log } from \"../logger\";\nimport { v4 as uuid } from \"uuid\";\nimport type { Context, MessageType } from \"../protocol/protocol\";\nimport { PacketInterface } from \"../packetinterface\";\nimport { TwilsockError } from \"../error/twilsockerror\";\nimport { ReplayEventEmitter } from \"@twilio/replay-event-emitter\";\n\ntype RegistrationsEvents = {\n  registered: (contextId: string) => void;\n  registrationFailed: (contextId: string, error: Error) => void;\n};\n\n/**\n * Registrations module handles all operations with registration contexts through twilsock.\n * Main role: it automatically refreshes all registrations after reconnect.\n */\nclass Registrations extends ReplayEventEmitter<RegistrationsEvents> {\n  private readonly registrations: Map<string, Context>;\n  private readonly registrationsInProgress: Map<string, Set<unknown>>;\n\n  constructor(private readonly transport: PacketInterface) {\n    super();\n\n    this.registrations = new Map();\n    this.registrationsInProgress = new Map();\n  }\n\n  private async putNotificationContext(\n    contextId: string,\n    context: Context\n  ): Promise<void> {\n    const header = {\n      method: \"put_notification_ctx\" as MessageType,\n      notification_ctx_id: contextId,\n    };\n    await this.transport.sendWithReply(header, context);\n  }\n\n  private async deleteNotificationContext(contextId: string): Promise<void> {\n    const message = {\n      method: \"delete_notification_ctx\" as MessageType,\n      notification_ctx_id: contextId,\n    };\n    await this.transport.sendWithReply(message);\n  }\n\n  private async updateRegistration(contextId: string, context: Context) {\n    log.debug(\"update registration for context\", contextId);\n\n    let registrationAttempts = this.registrationsInProgress.get(contextId);\n    if (!registrationAttempts) {\n      registrationAttempts = new Set();\n      this.registrationsInProgress.set(contextId, registrationAttempts);\n    }\n\n    const attemptId = uuid();\n    registrationAttempts.add(attemptId);\n\n    try {\n      await this.putNotificationContext(contextId, context);\n\n      log.debug(\"registration attempt succeeded for context\", context);\n      registrationAttempts.delete(attemptId);\n      if (registrationAttempts.size === 0) {\n        this.registrationsInProgress.delete(contextId);\n        this.emit(\"registered\", contextId);\n      }\n    } catch (err) {\n      log.warn(\"registration attempt failed for context\", context);\n      log.debug(err);\n\n      registrationAttempts.delete(attemptId);\n      if (registrationAttempts.size === 0) {\n        this.registrationsInProgress.delete(contextId);\n        this.emit(\"registrationFailed\", contextId, err);\n      }\n    }\n  }\n\n  public async updateRegistrations(): Promise<void> {\n    log.trace(`refreshing ${this.registrations.size} registrations`);\n    const promises: Promise<void>[] = [];\n    this.registrations.forEach((context: Context, id) => {\n      promises.push(this.updateRegistration(id, context));\n    });\n    await Promise.all(promises);\n  }\n\n  public async setNotificationsContext(\n    contextId: string,\n    context: Context\n  ): Promise<void> {\n    if (!contextId || !context) {\n      throw new TwilsockError(\"Invalid arguments provided\");\n    }\n\n    this.registrations.set(contextId, context);\n    return await this.updateRegistration(contextId, context);\n  }\n\n  public async removeNotificationsContext(contextId: string): Promise<void> {\n    if (!this.registrations.has(contextId)) {\n      return;\n    }\n\n    await this.deleteNotificationContext(contextId);\n    if (this.transport.isConnected) {\n      this.registrations.delete(contextId);\n    }\n  }\n}\n\nexport { Registrations };\n"],"names":["ReplayEventEmitter","log","uuid","TwilsockError"],"mappings":"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"}
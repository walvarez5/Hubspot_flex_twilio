{"version":3,"file":"upstream.js","sources":["../../src/services/upstream.ts"],"sourcesContent":["import { log } from \"../logger\";\nimport { Configuration } from \"../configuration\";\nimport { PacketInterface } from \"../packetinterface\";\nimport { TwilsockError } from \"../error/twilsockerror\";\nimport { TwilsockUpstreamError } from \"../error/twilsockupstreamerror\";\nimport { Headers, Result } from \"../interfaces/transport\";\nimport type {\n  Address,\n  Headers as ProtocolHeaders,\n  Context,\n  Request as ProtocolRequest,\n} from \"../protocol/protocol\";\nimport * as Messages from \"../protocol/messages\";\nimport { TransportUnavailableError } from \"../error/transportunavailableerror\";\nimport { TwilsockChannel } from \"../twilsock\";\nimport { TwilsockReplyError } from \"../error/twilsockreplyerror\";\nconst REQUEST_TIMEOUT = 20000;\n\ntype MessageType = {\n  to: Address;\n  headers: ProtocolHeaders;\n  body: Context;\n  grant?: string;\n};\n\nfunction isHttpSuccess(code: number): boolean {\n  return code >= 200 && code < 300;\n}\n\nfunction isHttpReply(packet): boolean {\n  return packet && packet.header && packet.header.http_status;\n}\n\ninterface Request {\n  message: MessageType;\n  timeout: ReturnType<typeof setTimeout>;\n  reject: (reason?: TwilsockReplyError | TwilsockError) => void;\n  resolve: (value: Result<Context> | PromiseLike<Result<Context>>) => void;\n  alreadyRejected: boolean;\n}\n\nfunction parseUri(uri: string) {\n  const match = uri.match(\n    /^(https?\\:)\\/\\/(([^:\\/?#]*)(?:\\:([0-9]+))?)(\\/[^?#]*)(\\?[^#]*|)(#.*|)$/\n  );\n  if (match) {\n    const uriStruct = {\n      protocol: match[1],\n      host: match[2],\n      hostname: match[3],\n      port: match[4],\n      pathname: match[5],\n      search: match[6],\n      hash: match[7],\n      params: {},\n    };\n\n    if (uriStruct.search.length > 0) {\n      const paramsString = uriStruct.search.substring(1);\n      uriStruct.params = paramsString\n        .split(\"&\")\n        .map((el) => el.split(\"=\"))\n        .reduce((prev, curr) => {\n          if (!prev.hasOwnProperty(curr[0])) {\n            prev[curr[0]] = curr[1];\n          } else if (Array.isArray(prev[curr[0]])) {\n            prev[curr[0]].push(curr[1]);\n          } else {\n            prev[curr[0]] = [prev[curr[0]], curr[1]];\n          }\n          return prev;\n        }, {});\n    }\n    return uriStruct;\n  }\n  throw new TwilsockError(\"Incorrect URI: \" + uri);\n}\n\nfunction twilsockAddress(method: string, uri: string): Address {\n  const parsedUri = parseUri(uri);\n  const to = {\n    method: method,\n    host: parsedUri.host,\n    path: parsedUri.pathname,\n  } as Address;\n  if (parsedUri.params) {\n    to.params = parsedUri.params;\n  }\n  return to;\n}\n\nfunction twilsockParams(\n  method: string,\n  uri: string,\n  headers: Headers,\n  body?,\n  grant?: string\n) {\n  return {\n    to: twilsockAddress(method, uri),\n    headers: headers,\n    body: body,\n    grant: grant,\n  };\n}\n\nclass Upstream {\n  private readonly config: Configuration;\n  private readonly transport: PacketInterface;\n  private readonly pendingMessages: Request[];\n  private readonly twilsock: TwilsockChannel;\n\n  constructor(\n    transport: PacketInterface,\n    twilsock: TwilsockChannel,\n    config: Configuration\n  ) {\n    this.config = config;\n    this.transport = transport;\n    this.pendingMessages = [];\n    this.twilsock = twilsock;\n  }\n\n  public saveMessage(message: MessageType): Promise<Result<Context>> {\n    return new Promise<Result<Context>>((resolve, reject) => {\n      const requestDescriptor = {\n        message,\n        resolve,\n        reject,\n        alreadyRejected: false,\n        timeout: setTimeout(() => {\n          log.debug(\"request is timed out\");\n          reject(\n            new TwilsockError(\n              `request '${message.to.method}' to '${message.to.host}' timed out`\n            )\n          );\n          requestDescriptor.alreadyRejected = true;\n        }, REQUEST_TIMEOUT),\n      };\n      this.pendingMessages.push(requestDescriptor);\n    });\n  }\n\n  public sendPendingMessages(): void {\n    while (this.pendingMessages.length > 0) {\n      const request = this.pendingMessages[0];\n      // Do not send message if we've rejected its promise already\n      if (!request.alreadyRejected) {\n        try {\n          const message = request.message;\n          this.actualSend(message)\n            .then((response) => request.resolve(response))\n            .catch((e) => request.reject(e));\n          clearTimeout(request.timeout);\n        } catch (e) {\n          log.debug(\"Failed to send pending message\", e);\n          break;\n        }\n      }\n      this.pendingMessages.splice(0, 1);\n    }\n  }\n\n  public rejectPendingMessages(): void {\n    this.pendingMessages.forEach((message) => {\n      message.reject(\n        new TransportUnavailableError( // @todo Error Unhandled promise rejection!\n          \"Unable to connect: \" + this.twilsock.getTerminationReason\n        )\n      );\n      message.alreadyRejected = true;\n      clearTimeout(message.timeout);\n    });\n\n    this.pendingMessages.splice(0, this.pendingMessages.length);\n  }\n\n  public async actualSend(message: MessageType): Promise<Result<Context>> {\n    const address = message.to as Address;\n    const headers = message.headers as ProtocolHeaders;\n    const body = message.body;\n    const grant = message.grant ?? this.config.activeGrant;\n\n    const httpRequest = {\n      host: address.host,\n      path: address.path,\n      method: address.method,\n      params: address.params,\n      headers: headers,\n    } as ProtocolRequest;\n\n    const upstreamMessage = new Messages.Message(\n      grant,\n      headers[\"Content-Type\"] || \"application/json\",\n      httpRequest\n    );\n\n    log.trace(\"Sending upstream message\", upstreamMessage);\n\n    const reply = await this.transport.sendWithReply(upstreamMessage, body);\n\n    log.trace(\"Received upstream message response\", reply);\n\n    if (isHttpReply(reply) && !isHttpSuccess(reply.header.http_status.code)) {\n      throw new TwilsockUpstreamError(\n        reply.header.http_status.code,\n        reply.header.http_status.status,\n        reply.body\n      );\n    }\n\n    return {\n      status: reply.header.http_status,\n      headers: reply.header.http_headers,\n      body: reply.body,\n    };\n  }\n\n  /**\n   * Send an upstream message\n   * @param {string} method The upstream method\n   * @param {string} url URL to send the message to\n   * @param {object} [headers] The message headers\n   * @param {any} [body] The message body\n   * @param {string} [grant] The product grant\n   * @returns {Promise<Result>} Result from remote side\n   */\n  public send(\n    method: string,\n    url: string,\n    headers: Headers = {},\n    body?: Context | string,\n    grant?: string\n  ): Promise<Result<Context>> {\n    if (this.twilsock.isTerminalState) {\n      return Promise.reject(\n        new TransportUnavailableError(\n          \"Unable to connect: \" + this.twilsock.getTerminationReason\n        )\n      );\n    }\n\n    const twilsockMessage = twilsockParams(method, url, headers, body, grant);\n    if (!this.twilsock.isConnected) {\n      return this.saveMessage(twilsockMessage);\n    }\n    return this.actualSend(twilsockMessage);\n  }\n}\n\nexport { Upstream };\n"],"names":["TwilsockError","log","TransportUnavailableError","message","Messages.Message","TwilsockUpstreamError"],"mappings":"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"}
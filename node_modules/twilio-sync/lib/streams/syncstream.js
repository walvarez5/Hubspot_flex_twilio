"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const entity_1 = require("../entity");
const closeable_1 = require("../closeable");
const twilio_sdk_type_validator_1 = require("twilio-sdk-type-validator");
class SyncStreamImpl extends entity_1.SyncEntity {
    /**
     * @private
     */
    constructor(services, descriptor, removalHandler) {
        super(services, removalHandler);
        this.descriptor = descriptor;
    }
    // private props
    get uri() {
        return this.descriptor.url;
    }
    get links() {
        return this.descriptor.links;
    }
    static get type() {
        return 'stream';
    }
    get dateExpires() {
        return this.descriptor.date_expires;
    }
    get type() {
        return 'stream';
    }
    get lastEventId() {
        return null;
    }
    // below properties are specific to Insights only
    get indexName() {
        return undefined;
    }
    get queryString() {
        return undefined;
    }
    // public props, documented along with class description
    get sid() {
        return this.descriptor.sid;
    }
    get uniqueName() {
        return this.descriptor.unique_name || null;
    }
    async publishMessage(data) {
        const requestBody = { data };
        const response = await this.services.network.post(this.links.messages, requestBody);
        const responseBody = response.body;
        const event = this._handleMessagePublished(responseBody.sid, data, false);
        return event;
    }
    async setTtl(ttl) {
        try {
            const requestBody = { ttl: ttl };
            const response = await this.services.network.post(this.uri, requestBody);
            this.descriptor.date_expires = response.body.date_expires;
        }
        catch (error) {
            if (error.status === 404) {
                this.onRemoved(false);
            }
            throw error;
        }
    }
    async removeStream() {
        await this.services.network.delete(this.uri);
        this.onRemoved(true);
    }
    /**
     * Handle event from the server
     * @private
     */
    _update(update) {
        switch (update.type) {
            case 'stream_message_published': {
                this._handleMessagePublished(update.message_sid, update.message_data, true);
                break;
            }
            case 'stream_removed': {
                this.onRemoved(false);
                break;
            }
        }
    }
    _handleMessagePublished(sid, data, remote) {
        const event = {
            sid: sid,
            data: data
        };
        this.broadcastEventToListeners('messagePublished', { message: event, isLocal: !remote });
        return event;
    }
    onRemoved(isLocal) {
        this._unsubscribe();
        this.removalHandler(this.type, this.sid, this.uniqueName);
        this.broadcastEventToListeners('removed', { isLocal: isLocal });
    }
}
__decorate([
    twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.pureObject),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], SyncStreamImpl.prototype, "publishMessage", null);
__decorate([
    twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonNegativeInteger),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number]),
    __metadata("design:returntype", Promise)
], SyncStreamImpl.prototype, "setTtl", null);
exports.SyncStreamImpl = SyncStreamImpl;
/**
 * @class
 * @alias Stream
 * @classdesc A Sync primitive for pub-sub messaging. Stream Messages are not persisted, exist
 *     only in transit, and will be dropped if (due to congestion or network anomalies) they
 *     cannot be delivered promptly. Use the {@link Client#stream} method to obtain a reference to a Sync Message Stream.
 * Information about rate limits can be found {@link https://www.twilio.com/docs/sync/limits|here}.
 * @property {String} sid The immutable system-assigned identifier of this stream. Never null.
 * @property {String} [uniqueName=null] A unique identifier optionally assigned to the stream on creation.
 *
 * @fires Stream#messagePublished
 * @fires Stream#removed
 */
class SyncStream extends closeable_1.default {
    constructor(syncStreamImpl) {
        super();
        this.syncStreamImpl = syncStreamImpl;
        this.syncStreamImpl.attach(this);
    }
    // private props
    get uri() {
        return this.syncStreamImpl.uri;
    }
    get links() {
        return this.syncStreamImpl.links;
    }
    static get type() {
        return SyncStreamImpl.type;
    }
    get dateExpires() {
        return this.syncStreamImpl.dateExpires;
    }
    get type() {
        return SyncStreamImpl.type;
    }
    get lastEventId() {
        return null;
    }
    // public props, documented along with class description
    get sid() {
        return this.syncStreamImpl.sid;
    }
    get uniqueName() {
        return this.syncStreamImpl.uniqueName;
    }
    /**
     * Publish a Message to the Stream. The system will attempt delivery to all online subscribers.
     * @param {Object} data The body of the dispatched message. Maximum size in serialized JSON: 4KB.
     * A rate limit applies to this operation, refer to the [Sync API documentation]{@link https://www.twilio.com/docs/api/sync} for details.
     * @return {Promise<StreamMessage>} A promise which resolves after the message is successfully published
     *   to the Sync service. Resolves irrespective of ultimate delivery to any subscribers.
     * @public
     * @example
     * stream.publishMessage({ x: 42, y: 123 })
     *   .then(function(message) {
     *     console.log('Stream publishMessage() successful, message SID:' + message.sid);
     *   })
     *   .catch(function(error) {
     *     console.error('Stream publishMessage() failed', error);
     *   });
     */
    async publishMessage(data) {
        this.ensureNotClosed();
        return this.syncStreamImpl.publishMessage(data);
    }
    /**
     * Update the time-to-live of the stream.
     * @param {Number} ttl Specifies the TTL in seconds after which the stream is subject to automatic deletion. The value 0 means infinity.
     * @return {Promise<void>} A promise that resolves after the TTL update was successful.
     * @public
     * @example
     * stream.setTtl(3600)
     *   .then(function() {
     *     console.log('Stream setTtl() successful');
     *   })
     *   .catch(function(error) {
     *     console.error('Stream setTtl() failed', error);
     *   });
     */
    async setTtl(ttl) {
        this.ensureNotClosed();
        return this.syncStreamImpl.setTtl(ttl);
    }
    /**
     * Permanently delete this Stream.
     * @return {Promise<void>} A promise which resolves after the Stream is successfully deleted.
     * @public
     * @example
     * stream.removeStream()
     *   .then(function() {
     *     console.log('Stream removeStream() successful');
     *   })
     *   .catch(function(error) {
     *     console.error('Stream removeStream() failed', error);
     *   });
     */
    async removeStream() {
        this.ensureNotClosed();
        return this.syncStreamImpl.removeStream();
    }
    /**
     * Conclude work with the stream instance and remove all event listeners attached to it.
     * Any subsequent operation on this object will be rejected with error.
     * Other local copies of this stream will continue operating and receiving events normally.
     * @public
     * @example
     * stream.close();
     */
    close() {
        super.close();
        this.syncStreamImpl.detach(this.listenerUuid);
    }
}
__decorate([
    twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.pureObject),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], SyncStream.prototype, "publishMessage", null);
__decorate([
    twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonNegativeInteger),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number]),
    __metadata("design:returntype", Promise)
], SyncStream.prototype, "setTtl", null);
exports.SyncStream = SyncStream;
exports.default = SyncStream;
/**
 * @class StreamMessage
 * @classdesc Stream Message descriptor.
 * @property {String} sid Contains Stream Message SID.
 * @property {Object} data Contains Stream Message data.
 */
/**
 * Fired when a Message is published to the Stream either locally or by a remote actor.
 * @event Stream#messagePublished
 * @param {Object} args Arguments provided with the event.
 * @param {StreamMessage} args.message Published message.
 * @param {Boolean} args.isLocal Equals 'true' if message was published by local code, 'false' otherwise.
 * @example
 * stream.on('messagePublished', function(args) {
 *   console.log('Stream message published');
 *   console.log('Message SID: ' + args.message.sid);
 *   console.log('Message data: ', args.message.data);
 *   console.log('args.isLocal:', args.isLocal);
 * });
 */
/**
 * Fired when a stream is removed entirely, whether the remover was local or remote.
 * @event Stream#removed
 * @param {Object} args Arguments provided with the event.
 * @param {Boolean} args.isLocal Equals 'true' if stream was removed by local code, 'false' otherwise.
 * @example
 * stream.on('removed', function(args) {
 *   console.log('Stream ' + stream.sid + ' was removed');
 *   console.log('args.isLocal:', args.isLocal);
 * });
 */

"use strict";

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var syncerror_1 = require("./syncerror");
/**
 * Deep-clone an object. Note that this does not work on object containing
 * functions.
 * @param {object} obj - the object to deep-clone
 * @returns {object}
 */
function deepClone(obj) {
    return JSON.parse((0, _stringify2.default)(obj));
}
exports.deepClone = deepClone;
function validatePageSize(pageSize) {
    var validPageSize = pageSize === undefined || isPositiveInteger(pageSize);
    if (!validPageSize) {
        throw new syncerror_1.default("Invalid pageSize parameter. Expected a positive integer, was '" + pageSize + "'.", 400, 20007);
    }
}
exports.validatePageSize = validatePageSize;
function validateMode(mode) {
    if (!['open_or_create', 'open_existing', 'create_new'].includes(mode)) {
        throw new Error("Invalid open mode. Expected one of { 'create_new', 'open_or_create', 'open_existing' }");
    }
}
exports.validateMode = validateMode;
function isInteger(number) {
    return !isNaN(parseInt(number)) && isFinite(number);
}
function isPositiveInteger(number) {
    return isInteger(number) && number > 0;
}
exports.isPositiveInteger = isPositiveInteger;
function isNonNegativeInteger(number) {
    return isInteger(number) && number >= 0;
}
{"version":3,"sources":["/Users/kevin/Dev/OpenSource/http/response-iterator/src/iterators/reader.ts"],"sourcesContent":["const hasIterator = typeof Symbol !== 'undefined' && Symbol.asyncIterator;\n\n/* c8 ignore start */\nexport default function readerIterator<T>(reader): AsyncIterableIterator<T> {\n  const iterator = {\n    next(): Promise<IteratorResult<T, boolean>> {\n      return reader.read();\n    },\n  };\n\n  if (hasIterator) {\n    iterator[Symbol.asyncIterator] = function (): AsyncIterator<T> {\n      return this;\n    };\n  }\n\n  return iterator as AsyncIterableIterator<T>;\n}\n/* c8 ignore stop */\n"],"names":["readerIterator","hasIterator","Symbol","asyncIterator","reader","iterator","next","read"],"mappings":";;;;+BAEA,mBAAmB,GACnB,UAeA,kBAAkB;;;eAfMA;;;AAHxB,IAAMC,cAAc,OAAOC,WAAW,eAAeA,OAAOC,aAAa;AAG1D,SAASH,eAAkBI,MAAM;IAC9C,IAAMC,WAAW;QACfC,MAAAA,SAAAA;YACE,OAAOF,OAAOG,IAAI;QACpB;IACF;IAEA,IAAIN,aAAa;QACfI,QAAQ,CAACH,OAAOC,aAAa,CAAC,GAAG;YAC/B,OAAO,IAAI;QACb;IACF;IAEA,OAAOE;AACT"}
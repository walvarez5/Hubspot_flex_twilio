/**
 * Types defined here exactly match types accepted by the executeAfm resource.
 *
 * >>> Note for developers: when you modify these structures, be sure to update gooddata-js execute-afm.convert.ts
 * with conversion from AFM types to the new/updated construct.
 *
 * Types currently map executeAfm version 3.
 */
export declare namespace ExecuteAFM {
    interface IExecution {
        execution: {
            afm: IAfm;
            resultSpec?: IResultSpec;
        };
    }
    interface IAfm {
        attributes?: IAttribute[];
        measures?: IMeasure[];
        filters?: CompatibilityFilter[];
        nativeTotals?: INativeTotalItem[];
    }
    interface IResultSpec {
        dimensions?: IDimension[];
        sorts?: SortItem[];
    }
    interface IAttribute {
        localIdentifier: Identifier;
        displayForm: ObjQualifier;
        alias?: string;
    }
    interface IMeasure {
        localIdentifier: Identifier;
        definition: MeasureDefinition;
        alias?: string;
        format?: string;
    }
    type MeasureDefinition = ISimpleMeasureDefinition | IArithmeticMeasureDefinition | IPopMeasureDefinition | IPreviousPeriodMeasureDefinition;
    interface ISimpleMeasureDefinition {
        measure: ISimpleMeasure;
    }
    interface IArithmeticMeasureDefinition {
        arithmeticMeasure: IArithmeticMeasure;
    }
    interface IPopMeasureDefinition {
        popMeasure: IPopMeasure;
    }
    interface IPreviousPeriodMeasureDefinition {
        previousPeriodMeasure: IPreviousPeriodMeasure;
    }
    type SimpleMeasureAggregation = 'sum' | 'count' | 'avg' | 'min' | 'max' | 'median' | 'runsum';
    interface ISimpleMeasure {
        item: ObjQualifier;
        aggregation?: SimpleMeasureAggregation;
        filters?: FilterItem[];
        computeRatio?: boolean;
    }
    type ArithmeticMeasureOperator = 'sum' | 'difference' | 'multiplication' | 'ratio' | 'change';
    interface IArithmeticMeasure {
        measureIdentifiers: Identifier[];
        operator: ArithmeticMeasureOperator;
    }
    interface IPopMeasure {
        measureIdentifier: Identifier;
        popAttribute: ObjQualifier;
    }
    interface IPreviousPeriodMeasure {
        measureIdentifier: Identifier;
        dateDataSets: IPreviousPeriodDateDataSet[];
    }
    interface IPreviousPeriodDateDataSet {
        dataSet: ObjQualifier;
        periodsAgo: number;
    }
    type Identifier = string;
    type ObjQualifier = IObjUriQualifier | IObjIdentifierQualifier;
    interface IObjIdentifierQualifier {
        identifier: string;
    }
    interface IObjUriQualifier {
        uri: string;
    }
    type ExtendedFilter = FilterItem | IMeasureValueFilter | IRankingFilter;
    type CompatibilityFilter = IExpressionFilter | ExtendedFilter;
    type FilterItem = DateFilterItem | AttributeFilterItem;
    type AttributeFilterItem = IPositiveAttributeFilter | INegativeAttributeFilter;
    type DateFilterItem = IAbsoluteDateFilter | IRelativeDateFilter;
    interface IAttributeElementsByRef {
        uris: string[];
    }
    interface IAttributeElementsByValue {
        values: string[];
    }
    type AttributeElements = string[] | IAttributeElementsByRef | IAttributeElementsByValue;
    interface IPositiveAttributeFilter {
        positiveAttributeFilter: {
            displayForm: ObjQualifier;
            in: AttributeElements;
        };
    }
    interface INegativeAttributeFilter {
        negativeAttributeFilter: {
            displayForm: ObjQualifier;
            notIn: AttributeElements;
        };
    }
    interface IAbsoluteDateFilter {
        absoluteDateFilter: {
            dataSet: ObjQualifier;
            from: string;
            to: string;
        };
    }
    interface IRelativeDateFilter {
        relativeDateFilter: {
            dataSet: ObjQualifier;
            granularity: string;
            from: number;
            to: number;
        };
    }
    type ComparisonConditionOperator = 'GREATER_THAN' | 'GREATER_THAN_OR_EQUAL_TO' | 'LESS_THAN' | 'LESS_THAN_OR_EQUAL_TO' | 'EQUAL_TO' | 'NOT_EQUAL_TO';
    interface IComparisonCondition {
        comparison: {
            operator: ComparisonConditionOperator;
            value: number;
            treatNullValuesAs?: number;
        };
    }
    type RangeConditionOperator = 'BETWEEN' | 'NOT_BETWEEN';
    interface IRangeCondition {
        range: {
            operator: RangeConditionOperator;
            from: number;
            to: number;
            treatNullValuesAs?: number;
        };
    }
    type MeasureValueFilterCondition = IComparisonCondition | IRangeCondition;
    interface ILocalIdentifierQualifier {
        localIdentifier: string;
    }
    type Qualifier = ObjQualifier | ILocalIdentifierQualifier;
    interface IMeasureValueFilter {
        measureValueFilter: {
            measure: Qualifier;
            condition?: MeasureValueFilterCondition;
        };
    }
    type RankingFilterOperator = 'TOP' | 'BOTTOM';
    interface IRankingFilter {
        rankingFilter: {
            measures: Qualifier[];
            attributes?: Qualifier[];
            operator: RankingFilterOperator;
            value: number;
        };
    }
    interface IExpressionFilter {
        value: string;
    }
    interface ITotalItem {
        measureIdentifier: Identifier;
        type: TotalType;
        attributeIdentifier: Identifier;
    }
    type TotalType = 'sum' | 'avg' | 'max' | 'min' | 'nat' | 'med';
    interface INativeTotalItem {
        measureIdentifier: Identifier;
        attributeIdentifiers: Identifier[];
    }
    interface IDimension {
        itemIdentifiers: Identifier[];
        totals?: ITotalItem[];
    }
    type SortItem = IAttributeSortItem | IMeasureSortItem;
    type SortDirection = 'asc' | 'desc';
    interface IAttributeSortItem {
        attributeSortItem: {
            direction: SortDirection;
            attributeIdentifier: Identifier;
            aggregation?: 'sum';
        };
    }
    type VisualizationStyleType = 'common' | 'table' | 'line' | 'column' | 'bar' | 'area';
    interface IVisualizationStyle {
        visualizationStyle: {
            type: VisualizationStyleType;
            colorPalette: {
                measure?: {
                    color: string;
                    periodOverPeriod: string;
                };
                stack?: any;
            };
        };
    }
    interface IMeasureSortItem {
        measureSortItem: {
            direction: SortDirection;
            locators: LocatorItem[];
        };
    }
    type LocatorItem = IAttributeLocatorItem | IMeasureLocatorItem;
    interface IAttributeLocatorItem {
        attributeLocatorItem: {
            attributeIdentifier: Identifier;
            element: string;
        };
    }
    interface IMeasureLocatorItem {
        measureLocatorItem: {
            measureIdentifier: Identifier;
        };
    }
    function isObjectUriQualifier(qualifier: ExecuteAFM.ObjQualifier): qualifier is ExecuteAFM.IObjUriQualifier;
    function isObjIdentifierQualifier(qualifier: ExecuteAFM.ObjQualifier): qualifier is ExecuteAFM.IObjIdentifierQualifier;
    function isSimpleMeasureDefinition(definition: ExecuteAFM.MeasureDefinition): definition is ExecuteAFM.ISimpleMeasureDefinition;
    function isArithmeticMeasureDefinition(definition: ExecuteAFM.MeasureDefinition): definition is ExecuteAFM.IArithmeticMeasureDefinition;
    function isPopMeasureDefinition(definition: ExecuteAFM.MeasureDefinition): definition is ExecuteAFM.IPopMeasureDefinition;
    function isPreviousPeriodMeasureDefinition(definition: ExecuteAFM.MeasureDefinition): definition is ExecuteAFM.IPreviousPeriodMeasureDefinition;
    function isAttributeSortItem(sortItem: ExecuteAFM.SortItem): sortItem is ExecuteAFM.IAttributeSortItem;
    function isMeasureSortItem(sortItem: ExecuteAFM.SortItem): sortItem is ExecuteAFM.IMeasureSortItem;
    function isMeasureLocatorItem(locator: ExecuteAFM.LocatorItem): locator is ExecuteAFM.IMeasureLocatorItem;
    function isDateFilter(filter: ExecuteAFM.CompatibilityFilter): filter is ExecuteAFM.DateFilterItem;
    function isRelativeDateFilter(filter: ExecuteAFM.CompatibilityFilter): filter is ExecuteAFM.IRelativeDateFilter;
    function isAbsoluteDateFilter(filter: ExecuteAFM.CompatibilityFilter): filter is ExecuteAFM.IAbsoluteDateFilter;
    function isAttributeFilter(filter: ExecuteAFM.CompatibilityFilter): filter is ExecuteAFM.AttributeFilterItem;
    function isPositiveAttributeFilter(filter: ExecuteAFM.CompatibilityFilter): filter is ExecuteAFM.IPositiveAttributeFilter;
    function isNegativeAttributeFilter(filter: ExecuteAFM.CompatibilityFilter): filter is ExecuteAFM.INegativeAttributeFilter;
    function isMeasureValueFilter(filter: ExecuteAFM.CompatibilityFilter): filter is ExecuteAFM.IMeasureValueFilter;
    function isRankingFilter(filter: ExecuteAFM.CompatibilityFilter): filter is ExecuteAFM.IRankingFilter;
    function isExpressionFilter(filter: ExecuteAFM.CompatibilityFilter): filter is ExecuteAFM.IExpressionFilter;
    function isAttributeElementsArray(attributeElements: AttributeElements): attributeElements is string[];
    function isAttributeElementsByRef(attributeElements: ExecuteAFM.AttributeElements): attributeElements is ExecuteAFM.IAttributeElementsByRef;
    function isAttributeElementsByValue(attributeElements: ExecuteAFM.AttributeElements): attributeElements is ExecuteAFM.IAttributeElementsByValue;
}

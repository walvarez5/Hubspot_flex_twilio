export declare namespace Execution {
    interface IMeasureHeaderItem {
        measureHeaderItem: {
            uri?: string;
            identifier?: string;
            localIdentifier: string;
            name: string;
            format: string;
        };
    }
    interface ITotalHeaderItem {
        totalHeaderItem: {
            name: string;
        };
    }
    interface IMeasureGroupHeader {
        measureGroupHeader: {
            items: IMeasureHeaderItem[];
            totalItems?: ITotalHeaderItem[];
        };
    }
    interface IAttributeHeader {
        attributeHeader: {
            uri: string;
            identifier: string;
            localIdentifier: string;
            name: string;
            totalItems?: ITotalHeaderItem[];
            formOf: {
                uri: string;
                identifier: string;
                name: string;
            };
        };
    }
    type IHeader = IMeasureGroupHeader | IAttributeHeader;
    interface IResultAttributeHeaderItem {
        attributeHeaderItem: {
            uri: string;
            name: string;
        };
    }
    interface IResultMeasureHeaderItem {
        measureHeaderItem: {
            name: string;
            order: number;
        };
    }
    interface IResultTotalHeaderItem {
        totalHeaderItem: {
            name: string;
            type: string;
        };
    }
    type IResultHeaderItem = IResultAttributeHeaderItem | IResultMeasureHeaderItem | IResultTotalHeaderItem;
    interface IResultDimension {
        headers: IHeader[];
    }
    interface IExecutionResponse {
        links: {
            executionResult: string;
        };
        dimensions: IResultDimension[];
    }
    interface IExecutionResponseWrapper {
        executionResponse: IExecutionResponse;
    }
    type DataValue = null | string | number;
    interface Warning {
        warningCode: string;
        message: string;
        parameters?: any[];
    }
    interface IExecutionResult {
        headerItems?: IResultHeaderItem[][][];
        data: DataValue[][] | DataValue[];
        totals?: DataValue[][][];
        paging: {
            count: number[];
            offset: number[];
            total: number[];
        };
        warnings?: Warning[];
    }
    interface IExecutionResultWrapper {
        executionResult: IExecutionResult;
    }
    interface IError extends Error {
        response: Response;
    }
    /**
     * Combination of both AFM executions responses
     *
     * `null` value as executionResult means empty response (HTTP 204)
     */
    interface IExecutionResponses {
        executionResponse: IExecutionResponse;
        executionResult: IExecutionResult | null;
    }
    function isAttributeHeaderItem(header: IResultHeaderItem): header is IResultAttributeHeaderItem;
    function isMeasureHeaderItem(header: IResultHeaderItem): header is IResultMeasureHeaderItem;
    function isTotalHeaderItem(header: IResultHeaderItem): header is IResultTotalHeaderItem;
    function isAttributeHeader(header: IHeader): header is IAttributeHeader;
    function isMeasureGroupHeader(header: IHeader): header is IMeasureGroupHeader;
}

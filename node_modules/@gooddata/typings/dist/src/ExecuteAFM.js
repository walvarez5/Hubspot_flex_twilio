"use strict";
exports.__esModule = true;
exports.ExecuteAFM = void 0;
// (C) 2020 GoodData Corporation
var isEmpty = require("lodash/isEmpty");
var isArray = require("lodash/isArray");
/**
 * Types defined here exactly match types accepted by the executeAfm resource.
 *
 * >>> Note for developers: when you modify these structures, be sure to update gooddata-js execute-afm.convert.ts
 * with conversion from AFM types to the new/updated construct.
 *
 * Types currently map executeAfm version 3.
 */
var ExecuteAFM;
(function (ExecuteAFM) {
    function isObjectUriQualifier(qualifier) {
        return !isEmpty(qualifier) && qualifier.uri !== undefined;
    }
    ExecuteAFM.isObjectUriQualifier = isObjectUriQualifier;
    function isObjIdentifierQualifier(qualifier) {
        return !isEmpty(qualifier) && qualifier.identifier !== undefined;
    }
    ExecuteAFM.isObjIdentifierQualifier = isObjIdentifierQualifier;
    function isSimpleMeasureDefinition(definition) {
        return !isEmpty(definition) && definition.measure !== undefined;
    }
    ExecuteAFM.isSimpleMeasureDefinition = isSimpleMeasureDefinition;
    function isArithmeticMeasureDefinition(definition) {
        return !isEmpty(definition)
            && definition.arithmeticMeasure !== undefined;
    }
    ExecuteAFM.isArithmeticMeasureDefinition = isArithmeticMeasureDefinition;
    function isPopMeasureDefinition(definition) {
        return !isEmpty(definition) && definition.popMeasure !== undefined;
    }
    ExecuteAFM.isPopMeasureDefinition = isPopMeasureDefinition;
    function isPreviousPeriodMeasureDefinition(definition) {
        return !isEmpty(definition)
            && definition.previousPeriodMeasure !== undefined;
    }
    ExecuteAFM.isPreviousPeriodMeasureDefinition = isPreviousPeriodMeasureDefinition;
    function isAttributeSortItem(sortItem) {
        return !isEmpty(sortItem) && sortItem.attributeSortItem !== undefined;
    }
    ExecuteAFM.isAttributeSortItem = isAttributeSortItem;
    function isMeasureSortItem(sortItem) {
        return !isEmpty(sortItem) && sortItem.measureSortItem !== undefined;
    }
    ExecuteAFM.isMeasureSortItem = isMeasureSortItem;
    function isMeasureLocatorItem(locator) {
        return !isEmpty(locator)
            && locator.measureLocatorItem !== undefined;
    }
    ExecuteAFM.isMeasureLocatorItem = isMeasureLocatorItem;
    function isDateFilter(filter) {
        return !isEmpty(filter) && (isRelativeDateFilter(filter) || isAbsoluteDateFilter(filter));
    }
    ExecuteAFM.isDateFilter = isDateFilter;
    function isRelativeDateFilter(filter) {
        return !isEmpty(filter) && filter.relativeDateFilter !== undefined;
    }
    ExecuteAFM.isRelativeDateFilter = isRelativeDateFilter;
    function isAbsoluteDateFilter(filter) {
        return !isEmpty(filter) && filter.absoluteDateFilter !== undefined;
    }
    ExecuteAFM.isAbsoluteDateFilter = isAbsoluteDateFilter;
    function isAttributeFilter(filter) {
        return !isEmpty(filter) && (isPositiveAttributeFilter(filter) || isNegativeAttributeFilter(filter));
    }
    ExecuteAFM.isAttributeFilter = isAttributeFilter;
    function isPositiveAttributeFilter(filter) {
        return !isEmpty(filter)
            && filter.positiveAttributeFilter !== undefined;
    }
    ExecuteAFM.isPositiveAttributeFilter = isPositiveAttributeFilter;
    function isNegativeAttributeFilter(filter) {
        return !isEmpty(filter)
            && filter.negativeAttributeFilter !== undefined;
    }
    ExecuteAFM.isNegativeAttributeFilter = isNegativeAttributeFilter;
    function isMeasureValueFilter(filter) {
        return !isEmpty(filter)
            && filter.measureValueFilter !== undefined;
    }
    ExecuteAFM.isMeasureValueFilter = isMeasureValueFilter;
    function isRankingFilter(filter) {
        return !isEmpty(filter)
            && filter.rankingFilter !== undefined;
    }
    ExecuteAFM.isRankingFilter = isRankingFilter;
    function isExpressionFilter(filter) {
        return !isEmpty(filter) && filter.value !== undefined;
    }
    ExecuteAFM.isExpressionFilter = isExpressionFilter;
    function isAttributeElementsArray(attributeElements) {
        return attributeElements !== undefined && attributeElements instanceof Array;
    }
    ExecuteAFM.isAttributeElementsArray = isAttributeElementsArray;
    function isAttributeElementsByRef(attributeElements) {
        return !isEmpty(attributeElements)
            && attributeElements.uris !== undefined;
    }
    ExecuteAFM.isAttributeElementsByRef = isAttributeElementsByRef;
    function isAttributeElementsByValue(attributeElements) {
        return !isEmpty(attributeElements)
            && isArray(attributeElements.values);
    }
    ExecuteAFM.isAttributeElementsByValue = isAttributeElementsByValue;
})(ExecuteAFM = exports.ExecuteAFM || (exports.ExecuteAFM = {}));
//# sourceMappingURL=ExecuteAFM.js.map
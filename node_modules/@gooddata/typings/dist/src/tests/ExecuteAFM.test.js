"use strict";
exports.__esModule = true;
// (C) 2019-2020 GoodData Corporation
var ExecuteAFM_1 = require("../ExecuteAFM");
describe('AFM', function () {
    var expressionFilter = {
        value: 'MAQL'
    };
    var relativeDateFilter = {
        relativeDateFilter: {
            dataSet: {
                uri: '/gdc/mock/ds'
            },
            granularity: 'gram',
            from: -10,
            to: 0
        }
    };
    var absoluteDateFilter = {
        absoluteDateFilter: {
            dataSet: {
                uri: '/gdc/mock/ds'
            },
            from: '1',
            to: '2'
        }
    };
    var negativeAttributeFilter = {
        negativeAttributeFilter: {
            displayForm: {
                uri: '/gdc/mock/date'
            },
            notIn: ['/gdc/mock/attribute/value_1', '/gdc/mock/attribute/value_2']
        }
    };
    var positiveAttributeFilter = {
        positiveAttributeFilter: {
            displayForm: {
                uri: '/gdc/mock/attribute'
            },
            "in": ['/gdc/mock/attribute/value_1', '/gdc/mock/attribute/value_2']
        }
    };
    var measureValueFilter = {
        measureValueFilter: {
            measure: {
                uri: '/gdc/mock/date'
            }
        }
    };
    var rankingFilter = {
        rankingFilter: {
            measures: [{
                    uri: '/gdc/mock/date'
                }],
            operator: 'TOP',
            value: 3
        }
    };
    describe('isDateFilter', function () {
        it('should return false when null is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isDateFilter(null);
            expect(result).toEqual(false);
        });
        it('should return false when undefined is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isDateFilter(undefined);
            expect(result).toEqual(false);
        });
        it('should return true when relative date filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isDateFilter(relativeDateFilter);
            expect(result).toEqual(true);
        });
        it('should return true when absolute date filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isDateFilter(absoluteDateFilter);
            expect(result).toEqual(true);
        });
        it('should return false when negative attribute filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isDateFilter(negativeAttributeFilter);
            expect(result).toEqual(false);
        });
        it('should return false when positive attribute filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isDateFilter(positiveAttributeFilter);
            expect(result).toEqual(false);
        });
        it('should return false when measure value filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isDateFilter(measureValueFilter);
            expect(result).toEqual(false);
        });
        it('should return false when ranking filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isDateFilter(rankingFilter);
            expect(result).toEqual(false);
        });
        it('should return false when expression filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isDateFilter(expressionFilter);
            expect(result).toEqual(false);
        });
    });
    describe('isRelativeDateFilter', function () {
        it('should return false when null is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isRelativeDateFilter(null);
            expect(result).toEqual(false);
        });
        it('should return false when undefined is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isRelativeDateFilter(undefined);
            expect(result).toEqual(false);
        });
        it('should return true when relative date filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isRelativeDateFilter(relativeDateFilter);
            expect(result).toEqual(true);
        });
        it('should return true when absolute date filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isRelativeDateFilter(absoluteDateFilter);
            expect(result).toEqual(false);
        });
        it('should return false when negative attribute filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isRelativeDateFilter(negativeAttributeFilter);
            expect(result).toEqual(false);
        });
        it('should return false when positive attribute filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isRelativeDateFilter(positiveAttributeFilter);
            expect(result).toEqual(false);
        });
        it('should return false when measure value filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isRelativeDateFilter(measureValueFilter);
            expect(result).toEqual(false);
        });
        it('should return false when ranking filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isRelativeDateFilter(rankingFilter);
            expect(result).toEqual(false);
        });
        it('should return false when expression filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isRelativeDateFilter(expressionFilter);
            expect(result).toEqual(false);
        });
    });
    describe('isAbsoluteDateFilter', function () {
        it('should return false when null is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAbsoluteDateFilter(null);
            expect(result).toEqual(false);
        });
        it('should return false when undefined is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAbsoluteDateFilter(undefined);
            expect(result).toEqual(false);
        });
        it('should return true when relative date filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAbsoluteDateFilter(relativeDateFilter);
            expect(result).toEqual(false);
        });
        it('should return true when absolute date filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAbsoluteDateFilter(absoluteDateFilter);
            expect(result).toEqual(true);
        });
        it('should return false when negative attribute filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAbsoluteDateFilter(negativeAttributeFilter);
            expect(result).toEqual(false);
        });
        it('should return false when positive attribute filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAbsoluteDateFilter(positiveAttributeFilter);
            expect(result).toEqual(false);
        });
        it('should return false when measure value filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAbsoluteDateFilter(measureValueFilter);
            expect(result).toEqual(false);
        });
        it('should return false when ranking filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAbsoluteDateFilter(rankingFilter);
            expect(result).toEqual(false);
        });
        it('should return false when expression filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAbsoluteDateFilter(expressionFilter);
            expect(result).toEqual(false);
        });
    });
    describe('isAttributeFilter', function () {
        it('should return false when null is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeFilter(null);
            expect(result).toEqual(false);
        });
        it('should return false when undefined is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeFilter(undefined);
            expect(result).toEqual(false);
        });
        it('should return true when relative date filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeFilter(relativeDateFilter);
            expect(result).toEqual(false);
        });
        it('should return true when absolute date filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeFilter(absoluteDateFilter);
            expect(result).toEqual(false);
        });
        it('should return false when negative attribute filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeFilter(negativeAttributeFilter);
            expect(result).toEqual(true);
        });
        it('should return false when positive attribute filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeFilter(positiveAttributeFilter);
            expect(result).toEqual(true);
        });
        it('should return false when measure value filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeFilter(measureValueFilter);
            expect(result).toEqual(false);
        });
        it('should return false when ranking filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeFilter(rankingFilter);
            expect(result).toEqual(false);
        });
        it('should return false when expression filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeFilter(expressionFilter);
            expect(result).toEqual(false);
        });
    });
    describe('isPositiveAttributeFilter', function () {
        it('should return false when null is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isPositiveAttributeFilter(null);
            expect(result).toEqual(false);
        });
        it('should return false when undefined is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isPositiveAttributeFilter(undefined);
            expect(result).toEqual(false);
        });
        it('should return true when relative date filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isPositiveAttributeFilter(relativeDateFilter);
            expect(result).toEqual(false);
        });
        it('should return true when absolute date filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isPositiveAttributeFilter(absoluteDateFilter);
            expect(result).toEqual(false);
        });
        it('should return false when negative attribute filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isPositiveAttributeFilter(negativeAttributeFilter);
            expect(result).toEqual(false);
        });
        it('should return false when positive attribute filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isPositiveAttributeFilter(positiveAttributeFilter);
            expect(result).toEqual(true);
        });
        it('should return false when measure value filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isPositiveAttributeFilter(measureValueFilter);
            expect(result).toEqual(false);
        });
        it('should return false when ranking filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isPositiveAttributeFilter(rankingFilter);
            expect(result).toEqual(false);
        });
        it('should return false when expression filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isPositiveAttributeFilter(expressionFilter);
            expect(result).toEqual(false);
        });
    });
    describe('isNegativeAttributeFilter', function () {
        it('should return false when null is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isNegativeAttributeFilter(null);
            expect(result).toEqual(false);
        });
        it('should return false when undefined is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isNegativeAttributeFilter(undefined);
            expect(result).toEqual(false);
        });
        it('should return true when relative date filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isNegativeAttributeFilter(relativeDateFilter);
            expect(result).toEqual(false);
        });
        it('should return true when absolute date filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isNegativeAttributeFilter(absoluteDateFilter);
            expect(result).toEqual(false);
        });
        it('should return false when negative attribute filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isNegativeAttributeFilter(negativeAttributeFilter);
            expect(result).toEqual(true);
        });
        it('should return false when positive attribute filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isNegativeAttributeFilter(positiveAttributeFilter);
            expect(result).toEqual(false);
        });
        it('should return false when measure value filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isNegativeAttributeFilter(measureValueFilter);
            expect(result).toEqual(false);
        });
        it('should return false when ranking filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isNegativeAttributeFilter(rankingFilter);
            expect(result).toEqual(false);
        });
        it('should return false when expression filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isNegativeAttributeFilter(expressionFilter);
            expect(result).toEqual(false);
        });
    });
    describe('isMeasureValueFilter', function () {
        it('should return false when null is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isMeasureValueFilter(null);
            expect(result).toEqual(false);
        });
        it('should return false when undefined is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isMeasureValueFilter(undefined);
            expect(result).toEqual(false);
        });
        it('should return true when relative date filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isMeasureValueFilter(relativeDateFilter);
            expect(result).toEqual(false);
        });
        it('should return true when absolute date filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isMeasureValueFilter(absoluteDateFilter);
            expect(result).toEqual(false);
        });
        it('should return false when negative attribute filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isMeasureValueFilter(negativeAttributeFilter);
            expect(result).toEqual(false);
        });
        it('should return false when positive attribute filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isMeasureValueFilter(positiveAttributeFilter);
            expect(result).toEqual(false);
        });
        it('should return false when measure value filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isMeasureValueFilter(measureValueFilter);
            expect(result).toEqual(true);
        });
        it('should return false when ranking filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isMeasureValueFilter(rankingFilter);
            expect(result).toEqual(false);
        });
        it('should return false when expression filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isMeasureValueFilter(expressionFilter);
            expect(result).toEqual(false);
        });
    });
    describe('isExpressionFilter', function () {
        it('should return false when null is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isExpressionFilter(null);
            expect(result).toEqual(false);
        });
        it('should return false when undefined is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isExpressionFilter(undefined);
            expect(result).toEqual(false);
        });
        it('should return true when relative date filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isExpressionFilter(relativeDateFilter);
            expect(result).toEqual(false);
        });
        it('should return true when absolute date filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isExpressionFilter(absoluteDateFilter);
            expect(result).toEqual(false);
        });
        it('should return false when negative attribute filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isExpressionFilter(negativeAttributeFilter);
            expect(result).toEqual(false);
        });
        it('should return false when positive attribute filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isExpressionFilter(positiveAttributeFilter);
            expect(result).toEqual(false);
        });
        it('should return false when measure value filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isExpressionFilter(measureValueFilter);
            expect(result).toEqual(false);
        });
        it('should return false when ranking filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isExpressionFilter(rankingFilter);
            expect(result).toEqual(false);
        });
        it('should return false when expression filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isExpressionFilter(expressionFilter);
            expect(result).toEqual(true);
        });
    });
    describe('isRankingFilter', function () {
        it('should return false when null is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isRankingFilter(null);
            expect(result).toEqual(false);
        });
        it('should return false when undefined is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isRankingFilter(undefined);
            expect(result).toEqual(false);
        });
        it('should return true when relative date filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isRankingFilter(relativeDateFilter);
            expect(result).toEqual(false);
        });
        it('should return true when absolute date filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isRankingFilter(absoluteDateFilter);
            expect(result).toEqual(false);
        });
        it('should return false when negative attribute filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isRankingFilter(negativeAttributeFilter);
            expect(result).toEqual(false);
        });
        it('should return false when positive attribute filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isRankingFilter(positiveAttributeFilter);
            expect(result).toEqual(false);
        });
        it('should return false when measure value filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isRankingFilter(measureValueFilter);
            expect(result).toEqual(false);
        });
        it('should return true when ranking filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isRankingFilter(rankingFilter);
            expect(result).toEqual(true);
        });
        it('should return false when expression filter is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isRankingFilter(expressionFilter);
            expect(result).toEqual(false);
        });
    });
    describe('isAttributeElementsArray', function () {
        it('should return false when null is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeElementsArray(null);
            expect(result).toEqual(false);
        });
        it('should return false when undefined is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeElementsArray(undefined);
            expect(result).toEqual(false);
        });
        it('should return false when attr elements by ref', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeElementsArray({ uris: ['a', 'b', 'c'] });
            expect(result).toEqual(false);
        });
        it('should return false when attr elements by value', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeElementsArray({ values: ['a', 'b', 'c'] });
            expect(result).toEqual(false);
        });
        it('should return true when attr elements is array', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeElementsArray(['a', 'b', 'c']);
            expect(result).toEqual(true);
        });
        it('should return true when attr elements is empty array', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeElementsArray([]);
            expect(result).toEqual(true);
        });
    });
    describe('isAttributeElementsByRef', function () {
        it('should return false when null is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeElementsByRef(null);
            expect(result).toEqual(false);
        });
        it('should return false when undefined is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeElementsByRef(undefined);
            expect(result).toEqual(false);
        });
        it('should return true when attr elements by ref', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeElementsByRef({ uris: ['a', 'b', 'c'] });
            expect(result).toEqual(true);
        });
        it('should return false when attr elements by value', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeElementsByRef({ values: ['a', 'b', 'c'] });
            expect(result).toEqual(false);
        });
        it('should return false when attr elements is array', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeElementsByRef(['a', 'b', 'c']);
            expect(result).toEqual(false);
        });
        it('should return false when attr elements is empty array', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeElementsByRef([]);
            expect(result).toEqual(false);
        });
    });
    describe('isAttributeElementsByValue', function () {
        it('should return false when null is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeElementsByValue(null);
            expect(result).toEqual(false);
        });
        it('should return false when undefined is tested', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeElementsByValue(undefined);
            expect(result).toEqual(false);
        });
        it('should return false when attr elements by ref', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeElementsByValue({ uris: ['a', 'b', 'c'] });
            expect(result).toEqual(false);
        });
        it('should return true when attr elements by value', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeElementsByValue({ values: ['a', 'b', 'c'] });
            expect(result).toEqual(true);
        });
        it('should return false when attr elements is array', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeElementsByValue(['a', 'b', 'c']);
            expect(result).toEqual(false);
        });
        it('should return false when attr elements is empty array', function () {
            var result = ExecuteAFM_1.ExecuteAFM.isAttributeElementsByValue([]);
            expect(result).toEqual(false);
        });
    });
});
//# sourceMappingURL=ExecuteAFM.test.js.map
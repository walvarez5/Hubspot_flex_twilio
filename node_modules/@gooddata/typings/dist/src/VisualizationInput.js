"use strict";
exports.__esModule = true;
exports.VisualizationInput = void 0;
// (C) 2019-2020 GoodData Corporation
var AFM_1 = require("./AFM");
var VisualizationObject_1 = require("./VisualizationObject");
/**
 * This namespace implements types that are used as inputs to various visualization components.
 *
 * At the moment these most of the types are mere aliases to types in VisualizationObject, AFM, or unions
 * to different types. There is one notable exception: the measure & (simple) measure definition, this type
 * is redefined here to allow simple measure filters be defined as text filters; this is not possible with the
 * standard visualization object.
 */
var VisualizationInput;
(function (VisualizationInput) {
    function isMeasure(obj) {
        return VisualizationObject_1.VisualizationObject.isMeasure(obj);
    }
    VisualizationInput.isMeasure = isMeasure;
    function isMeasureDefinition(obj) {
        return VisualizationObject_1.VisualizationObject.isMeasureDefinition(obj);
    }
    VisualizationInput.isMeasureDefinition = isMeasureDefinition;
    function isArithmeticMeasureDefinition(obj) {
        return VisualizationObject_1.VisualizationObject.isArithmeticMeasureDefinition(obj);
    }
    VisualizationInput.isArithmeticMeasureDefinition = isArithmeticMeasureDefinition;
    function isPopMeasureDefinition(obj) {
        return VisualizationObject_1.VisualizationObject.isPopMeasureDefinition(obj);
    }
    VisualizationInput.isPopMeasureDefinition = isPopMeasureDefinition;
    function isPreviousPeriodMeasureDefinition(obj) {
        return VisualizationObject_1.VisualizationObject.isPreviousPeriodMeasureDefinition(obj);
    }
    VisualizationInput.isPreviousPeriodMeasureDefinition = isPreviousPeriodMeasureDefinition;
    function isAttribute(obj) {
        return VisualizationObject_1.VisualizationObject.isAttribute(obj);
    }
    VisualizationInput.isAttribute = isAttribute;
    function isPositiveAttributeFilter(obj) {
        return AFM_1.AFM.isPositiveAttributeFilter(obj);
    }
    VisualizationInput.isPositiveAttributeFilter = isPositiveAttributeFilter;
    function isNegativeAttributeFilter(obj) {
        return AFM_1.AFM.isNegativeAttributeFilter(obj);
    }
    VisualizationInput.isNegativeAttributeFilter = isNegativeAttributeFilter;
    function isAbsoluteDateFilter(obj) {
        return VisualizationObject_1.VisualizationObject.isAbsoluteDateFilter(obj);
    }
    VisualizationInput.isAbsoluteDateFilter = isAbsoluteDateFilter;
    function isRelativeDateFilter(obj) {
        return VisualizationObject_1.VisualizationObject.isRelativeDateFilter(obj);
    }
    VisualizationInput.isRelativeDateFilter = isRelativeDateFilter;
    function isMeasureValueFilter(obj) {
        return VisualizationObject_1.VisualizationObject.isMeasureValueFilter(obj);
    }
    VisualizationInput.isMeasureValueFilter = isMeasureValueFilter;
    function isRankingFilter(obj) {
        return VisualizationObject_1.VisualizationObject.isRankingFilter(obj);
    }
    VisualizationInput.isRankingFilter = isRankingFilter;
    function isSort(obj) {
        return AFM_1.AFM.isAttributeSortItem(obj) || AFM_1.AFM.isMeasureSortItem(obj);
    }
    VisualizationInput.isSort = isSort;
})(VisualizationInput = exports.VisualizationInput || (exports.VisualizationInput = {}));
//# sourceMappingURL=VisualizationInput.js.map
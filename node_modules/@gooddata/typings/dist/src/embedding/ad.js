"use strict";
exports.__esModule = true;
exports.EmbeddedAnalyticalDesigner = void 0;
// (C) 2020 GoodData Corporation
var common_1 = require("./common");
/**
 * All interface, types, type-guard related to embedded analyticalDesigner
 */
var EmbeddedAnalyticalDesigner;
(function (EmbeddedAnalyticalDesigner) {
    /**
     * All AD command Types
     */
    var GdcAdCommandType;
    (function (GdcAdCommandType) {
        /**
         * The command set drillable items
         */
        GdcAdCommandType["DrillableItems"] = "drillableItems";
        /**
         * The command open an insight
         */
        GdcAdCommandType["OpenInsight"] = "openInsight";
        /**
         * The command save an insight
         */
        GdcAdCommandType["Save"] = "saveInsight";
        /**
         * The command save the insight as a new one
         */
        GdcAdCommandType["SaveAs"] = "saveAsInsight";
        /**
         * The command export an insight
         */
        GdcAdCommandType["Export"] = "exportInsight";
        /**
         * The command reset the insight editor to empty state
         */
        GdcAdCommandType["Clear"] = "clear";
        /**
         * The command undo to previous state
         */
        GdcAdCommandType["Undo"] = "undo";
        /**
         * The command redo to next state
         */
        GdcAdCommandType["Redo"] = "redo";
        /**
         * The command to add or update filter context
         */
        GdcAdCommandType["SetFilterContext"] = "setFilterContext";
        /**
         * The command to remove filter item from current filter context
         */
        GdcAdCommandType["RemoveFilterContext"] = "removeFilterContext";
    })(GdcAdCommandType = EmbeddedAnalyticalDesigner.GdcAdCommandType || (EmbeddedAnalyticalDesigner.GdcAdCommandType = {}));
    /**
     * All event types on AD
     */
    var GdcAdEventType;
    (function (GdcAdEventType) {
        /**
         * Type represent that Insight is saved
         */
        GdcAdEventType["ListeningForDrillableItems"] = "listeningForDrillableItems";
        /**
         * Type represent that a new insight is initialized
         */
        GdcAdEventType["NewInsightInitialized"] = "newInsightInitialized";
        /**
         * Type represent that the insight is opened
         */
        GdcAdEventType["InsightOpened"] = "insightOpened";
        /**
         * Type represent that the insight editor is cleared
         */
        GdcAdEventType["ClearFinished"] = "clearFinished";
        /**
         * Type represent that the insight is saved
         *
         * Note: use `visualizationSaved` because of backward compatibility
         * @see visualizationSaved event on https://help.gooddata.com
         */
        GdcAdEventType["InsightSaved"] = "visualizationSaved";
        /**
         * Type represent that the undo action is finished
         */
        GdcAdEventType["UndoFinished"] = "undoFinished";
        /**
         * Type represent that the redo action is finished
         */
        GdcAdEventType["RedoFinished"] = "redoFinished";
        /**
         * Type represent that the export action is finished
         */
        GdcAdEventType["ExportFinished"] = "exportInsightFinished";
        /**
         * Type that drill performed
         */
        GdcAdEventType["Drill"] = "drill";
        /**
         * Type represent that the filter context is changed
         */
        GdcAdEventType["FilterContextChanged"] = "filterContextChanged";
        /**
         * Type represent that the set filter context action is finished
         */
        GdcAdEventType["SetFilterContextFinished"] = "setFilterContextFinished";
        /**
         * Type represent that the remove filter context action is finished
         */
        GdcAdEventType["RemoveFilterContextFinished"] = "removeFilterContextFinished";
    })(GdcAdEventType = EmbeddedAnalyticalDesigner.GdcAdEventType || (EmbeddedAnalyticalDesigner.GdcAdEventType = {}));
    /**
     * Type-guard checking whether an object is an instance of {@link AdCommandFailedData}
     *
     * @param obj - object to test
     */
    function isAdCommandFailedData(obj) {
        return common_1.isCommandFailedData(obj);
    }
    EmbeddedAnalyticalDesigner.isAdCommandFailedData = isAdCommandFailedData;
    /**
     * Type-guard checking whether an object is an instance of {@link DrillableItemsCommandData}
     *
     * @param obj - object to test
     */
    function isDrillableItemsCommandData(obj) {
        return common_1.getEventType(obj) === GdcAdCommandType.DrillableItems;
    }
    EmbeddedAnalyticalDesigner.isDrillableItemsCommandData = isDrillableItemsCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link OpenInsightCommandData}
     *
     * @param obj - object to test
     */
    function isOpenInsightCommandData(obj) {
        return common_1.getEventType(obj) === GdcAdCommandType.OpenInsight;
    }
    EmbeddedAnalyticalDesigner.isOpenInsightCommandData = isOpenInsightCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link ClearCommandData}
     *
     * @param obj - object to test
     */
    function isClearCommandData(obj) {
        return common_1.getEventType(obj) === GdcAdCommandType.Clear;
    }
    EmbeddedAnalyticalDesigner.isClearCommandData = isClearCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link SaveInsightCommandData}
     *
     * @param obj - object to test
     */
    function isSaveInsightCommandData(obj) {
        return common_1.getEventType(obj) === GdcAdCommandType.Save;
    }
    EmbeddedAnalyticalDesigner.isSaveInsightCommandData = isSaveInsightCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link SaveAsInsightCommandData}
     *
     * @param obj - object to test
     */
    function isSaveAsInsightCommandData(obj) {
        return common_1.getEventType(obj) === GdcAdCommandType.SaveAs;
    }
    EmbeddedAnalyticalDesigner.isSaveAsInsightCommandData = isSaveAsInsightCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link ExportInsightCommandData}
     *
     * @param obj - object to test
     */
    function isExportInsightCommandData(obj) {
        return common_1.getEventType(obj) === GdcAdCommandType.Export;
    }
    EmbeddedAnalyticalDesigner.isExportInsightCommandData = isExportInsightCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link UndoCommandData}
     *
     * @param obj - object to test
     */
    function isUndoCommandData(obj) {
        return common_1.getEventType(obj) === GdcAdCommandType.Undo;
    }
    EmbeddedAnalyticalDesigner.isUndoCommandData = isUndoCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link RedoCommandData}
     *
     * @param obj - object to test
     */
    function isRedoCommandData(obj) {
        return common_1.getEventType(obj) === GdcAdCommandType.Redo;
    }
    EmbeddedAnalyticalDesigner.isRedoCommandData = isRedoCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link SetFilterContextCommand}
     *
     * @param obj - object to test
     */
    function isSetFilterContextCommandData(obj) {
        return common_1.getEventType(obj) === GdcAdCommandType.SetFilterContext;
    }
    EmbeddedAnalyticalDesigner.isSetFilterContextCommandData = isSetFilterContextCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link RemoveFilterContextCommand}
     *
     * @param obj - object to test
     */
    function isRemoveFilterContextCommandData(obj) {
        return common_1.getEventType(obj) === GdcAdCommandType.RemoveFilterContext;
    }
    EmbeddedAnalyticalDesigner.isRemoveFilterContextCommandData = isRemoveFilterContextCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link NewInsightInitializedData}
     *
     * @param obj - object to test
     */
    function isNewInsightInitializedData(obj) {
        return common_1.getEventType(obj) === GdcAdEventType.NewInsightInitialized;
    }
    EmbeddedAnalyticalDesigner.isNewInsightInitializedData = isNewInsightInitializedData;
    /**
     * Type-guard checking whether an object is an instance of {@link InsightOpenedData}
     *
     * @param obj - object to test
     */
    function isInsightOpenedData(obj) {
        return common_1.getEventType(obj) === GdcAdEventType.InsightOpened;
    }
    EmbeddedAnalyticalDesigner.isInsightOpenedData = isInsightOpenedData;
    /**
     * Type-guard checking whether an object is an instance of {@link ClearFinishedData}
     *
     * @param obj - object to test
     */
    function isClearFinishedData(obj) {
        return common_1.getEventType(obj) === GdcAdEventType.ClearFinished;
    }
    EmbeddedAnalyticalDesigner.isClearFinishedData = isClearFinishedData;
    /**
     * Type-guard checking whether an object is an instance of {@link InsightSavedData}
     *
     * @param obj - object to test
     */
    function isInsightSavedData(obj) {
        return common_1.getEventType(obj) === GdcAdEventType.InsightSaved;
    }
    EmbeddedAnalyticalDesigner.isInsightSavedData = isInsightSavedData;
    /**
     * Type-guard checking whether an object is an instance of {@link ExportFinishedData}
     *
     * @param obj - object to test
     */
    function isExportFinishedData(obj) {
        return common_1.getEventType(obj) === GdcAdEventType.ExportFinished;
    }
    EmbeddedAnalyticalDesigner.isExportFinishedData = isExportFinishedData;
    /**
     * Type-guard checking whether an object is an instance of {@link UndoFinishedData}
     *
     * @param obj - object to test
     */
    function isUndoFinishedData(obj) {
        return common_1.getEventType(obj) === GdcAdEventType.UndoFinished;
    }
    EmbeddedAnalyticalDesigner.isUndoFinishedData = isUndoFinishedData;
    /**
     * Type-guard checking whether an object is an instance of {@link RedoFinishedData}
     *
     * @param obj - object to test
     */
    function isRedoFinishedData(obj) {
        return common_1.getEventType(obj) === GdcAdEventType.RedoFinished;
    }
    EmbeddedAnalyticalDesigner.isRedoFinishedData = isRedoFinishedData;
})(EmbeddedAnalyticalDesigner = exports.EmbeddedAnalyticalDesigner || (exports.EmbeddedAnalyticalDesigner = {}));
//# sourceMappingURL=ad.js.map
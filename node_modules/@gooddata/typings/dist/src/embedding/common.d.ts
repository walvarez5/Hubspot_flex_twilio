import { AFM } from '../AFM';
/**
 * List of products using post events
 */
export declare enum GdcProductName {
    /**
     * AD product name
     */
    ANALYTICAL_DESIGNER = "analyticalDesigner",
    /**
     * KD product name
     */
    KPI_DASHBOARD = "dashboard"
}
/**
 * Common event types in application
 */
export declare enum GdcEventType {
    /**
     * Event to notify outer application that the command is invalid or have errors while processing
     */
    AppCommandFailed = "appCommandFailed"
}
/**
 * Base type for event content
 */
export interface IGdcMessage<Product, T, TBody> {
    readonly product: Product;
    readonly event: {
        readonly name: T;
        readonly data?: TBody;
        readonly contextId?: string;
    };
}
/**
 * Base type for gdc event data
 */
export interface IGdcMessageEnvelope<Product, T, TBody> {
    readonly gdc: IGdcMessage<Product, T, TBody>;
}
/**
 * Base type for events
 */
export interface IGdcMessageEvent<Product, T, TBody> extends MessageEvent {
    readonly data: IGdcMessageEnvelope<Product, T, TBody>;
}
/**
 * Type for event listener
 *
 * Note: using by @gooddata/js-utils
 */
export declare type GdcMessageEventListener = (event: IGdcMessageEvent<string, string, any>) => boolean;
/**
 * Config type use to setup the message event listeners
 *
 * Note: using by @gooddata/js-utils
 */
export interface IGdcMessageEventListenerConfig {
    /**
     * The product name where the postmessages are sent/received
     */
    product: string;
    /**
     * The list of events is allowed for processing
     */
    validReceivedPostEvents: string[];
}
export declare enum GdcErrorType {
    /**
     * The posted command is not recognized.
     */
    InvalidCommand = "error:invalidCommand",
    /**
     * Argument specified in the command body is invalid; it has failed the syntactical
     * or semantic validation.
     */
    InvalidArgument = "error:invalidArgument",
    /**
     * Command was posted when the app is not in a state to process the command. For instance:
     *
     * - trying to do save/save-as on new, empty insight
     * - trying to do save/save-as on insight that is in error
     * - trying to do undo when there is no step-back available
     * - trying to do redo when there is no step-forward available
     */
    InvalidState = "error:invalidState",
    /**
     * The Unexpected Happened.
     */
    RuntimeError = "error:runtime"
}
export interface ICommandFailedBody {
    /**
     * Error code indicates category of error that has occurred.
     * The possible types vary between applications.
     */
    errorCode: GdcErrorType;
    /**
     * Error message includes descriptive information about the error.
     * E.g. "Insight title must not contain newline character"
     */
    errorMessage: string;
}
/**
 * Base type for error events sent by application in case command processing comes to an expected
 * or unexpected halt.
 */
export declare type CommandFailed<Product> = IGdcMessageEvent<Product, GdcEventType.AppCommandFailed, ICommandFailedBody>;
/**
 * Base type for the data of error events sent by application
 * in case command processing comes to an expected or unexpected halt.
 */
export declare type CommandFailedData<Product> = IGdcMessageEnvelope<Product, GdcEventType.AppCommandFailed, ICommandFailedBody>;
/**
 * Type-guard checking whether an object is an instance of {@link CommandFailedData}
 *
 * @param obj - object to test
 */
export declare function isCommandFailedData<Product>(obj: any): obj is CommandFailedData<Product>;
/**
 * Minimal meta-information about an object.
 */
export interface IObjectMeta {
    /**
     * Unique, user-assignable identifier of the insight. This identifier does not change during LCM operations.
     */
    identifier: string;
    /**
     * URI of the Insight. In context of GoodData platform, the URI is a link to the visualization object
     * where the insight is persisted.
     *
     * NOTE: URI is workspace scoped; same insight distributed across multiple workspaces using LCM will have
     * different URI.
     */
    uri: string;
    /**
     * Insight title - this is what users see in AD top bar (if visible)
     */
    title: string;
}
/**
 * Additional information for action payload. Use for internal reducers, sagas
 */
export interface IPostMessageContextPayload {
    postMessageContext?: {
        contextId: string;
    };
}
/**
 * Get event type of event from event data
 * @param obj the event data object
 */
export declare function getEventType(obj: any): string;
/**
 * Base type of drillable items command body
 */
export interface ISimpleDrillableItemsCommandBody {
    /**
     * The array of uris of attributes or measures
     */
    uris?: string[];
    /**
     * The array of identifiers of attributes or measures
     */
    identifiers?: string[];
}
/**
 * The main data type of drillable items command
 */
export interface IDrillableItemsCommandBody extends ISimpleDrillableItemsCommandBody {
    /**
     * Master measures items - In-case, a derived measure is composed from a master measure.
     */
    composedFrom?: ISimpleDrillableItemsCommandBody;
}
export declare namespace EmbeddedGdc {
    export type IPositiveAttributeFilter = AFM.IPositiveAttributeFilter;
    export type INegativeAttributeFilter = AFM.INegativeAttributeFilter;
    export interface IAbsoluteDateFilter {
        absoluteDateFilter: {
            dataSet?: ObjQualifier;
            from: string;
            to: string;
        };
    }
    export interface IRelativeDateFilter {
        relativeDateFilter: {
            dataSet?: ObjQualifier;
            granularity: string;
            from: number;
            to: number;
        };
    }
    export type AttributeFilterItem = IPositiveAttributeFilter | INegativeAttributeFilter;
    export type DateFilterItem = IAbsoluteDateFilter | IRelativeDateFilter;
    export type FilterItem = DateFilterItem | AttributeFilterItem;
    export type ObjQualifier = AFM.ObjQualifier;
    type CompatibilityFilter = FilterItem | AFM.IExpressionFilter | AFM.IMeasureValueFilter;
    export interface IRemoveDateFilterItem {
        dataSet: ObjQualifier;
    }
    export interface IRemoveAttributeFilterItem {
        displayForm: ObjQualifier;
    }
    export type RemoveFilterItem = IRemoveDateFilterItem | IRemoveAttributeFilterItem;
    export function isDateFilter(filter: CompatibilityFilter): filter is DateFilterItem;
    export function isRelativeDateFilter(filter: CompatibilityFilter): filter is IRelativeDateFilter;
    export function isAbsoluteDateFilter(filter: CompatibilityFilter): filter is IAbsoluteDateFilter;
    export const isAttributeFilter: typeof AFM.isAttributeFilter;
    export const isPositiveAttributeFilter: typeof AFM.isPositiveAttributeFilter;
    export const isNegativeAttributeFilter: typeof AFM.isNegativeAttributeFilter;
    export const isObjIdentifierQualifier: typeof AFM.isObjIdentifierQualifier;
    export const isObjectUriQualifier: typeof AFM.isObjectUriQualifier;
    /**
     * The filter context content that is used to exchange the filter context
     * between AD, KD embedded page and parent application
     */
    export interface IFilterContextContent {
        filters: FilterItem[];
    }
    /**
     * The remove filter context content that is used to exchange the filter context
     * between AD, KD embedded page and parent application
     */
    export interface IRemoveFilterContextContent {
        filters: RemoveFilterItem[];
    }
    export function isRemoveDateFilter(filter: any): filter is EmbeddedGdc.IRemoveDateFilterItem;
    export function isRemoveAttributeFilter(filter: any): filter is EmbeddedGdc.IRemoveAttributeFilterItem;
    export {};
}

"use strict";
exports.__esModule = true;
exports.EmbeddedGdc = exports.getEventType = exports.isCommandFailedData = exports.GdcErrorType = exports.GdcEventType = exports.GdcProductName = void 0;
// (C) 2020 GoodData Corporation
var isEmpty = require("lodash/isEmpty");
var AFM_1 = require("../AFM");
/**
 * List of products using post events
 */
var GdcProductName;
(function (GdcProductName) {
    /**
     * AD product name
     */
    GdcProductName["ANALYTICAL_DESIGNER"] = "analyticalDesigner";
    /**
     * KD product name
     */
    GdcProductName["KPI_DASHBOARD"] = "dashboard";
})(GdcProductName = exports.GdcProductName || (exports.GdcProductName = {}));
/**
 * Common event types in application
 */
var GdcEventType;
(function (GdcEventType) {
    /**
     * Event to notify outer application that the command is invalid or have errors while processing
     */
    GdcEventType["AppCommandFailed"] = "appCommandFailed";
})(GdcEventType = exports.GdcEventType || (exports.GdcEventType = {}));
var GdcErrorType;
(function (GdcErrorType) {
    /**
     * The posted command is not recognized.
     */
    GdcErrorType["InvalidCommand"] = "error:invalidCommand";
    /**
     * Argument specified in the command body is invalid; it has failed the syntactical
     * or semantic validation.
     */
    GdcErrorType["InvalidArgument"] = "error:invalidArgument";
    /**
     * Command was posted when the app is not in a state to process the command. For instance:
     *
     * - trying to do save/save-as on new, empty insight
     * - trying to do save/save-as on insight that is in error
     * - trying to do undo when there is no step-back available
     * - trying to do redo when there is no step-forward available
     */
    GdcErrorType["InvalidState"] = "error:invalidState";
    /**
     * The Unexpected Happened.
     */
    GdcErrorType["RuntimeError"] = "error:runtime";
})(GdcErrorType = exports.GdcErrorType || (exports.GdcErrorType = {}));
/**
 * Type-guard checking whether an object is an instance of {@link CommandFailedData}
 *
 * @param obj - object to test
 */
function isCommandFailedData(obj) {
    return getEventType(obj) === GdcEventType.AppCommandFailed;
}
exports.isCommandFailedData = isCommandFailedData;
/**
 * Get event type of event from event data
 * @param obj the event data object
 */
function getEventType(obj) {
    var _a = (obj || {}).gdc, _b = (_a === void 0 ? {} : _a).event, _c = (_b === void 0 ? {} : _b).name, name = _c === void 0 ? '' : _c;
    return name;
}
exports.getEventType = getEventType;
var EmbeddedGdc;
(function (EmbeddedGdc) {
    function isDateFilter(filter) {
        return !isEmpty(filter) && (isRelativeDateFilter(filter) || isAbsoluteDateFilter(filter));
    }
    EmbeddedGdc.isDateFilter = isDateFilter;
    function isRelativeDateFilter(filter) {
        return !isEmpty(filter) && filter.relativeDateFilter !== undefined;
    }
    EmbeddedGdc.isRelativeDateFilter = isRelativeDateFilter;
    function isAbsoluteDateFilter(filter) {
        return !isEmpty(filter) && filter.absoluteDateFilter !== undefined;
    }
    EmbeddedGdc.isAbsoluteDateFilter = isAbsoluteDateFilter;
    EmbeddedGdc.isAttributeFilter = AFM_1.AFM.isAttributeFilter;
    EmbeddedGdc.isPositiveAttributeFilter = AFM_1.AFM.isPositiveAttributeFilter;
    EmbeddedGdc.isNegativeAttributeFilter = AFM_1.AFM.isNegativeAttributeFilter;
    EmbeddedGdc.isObjIdentifierQualifier = AFM_1.AFM.isObjIdentifierQualifier;
    EmbeddedGdc.isObjectUriQualifier = AFM_1.AFM.isObjectUriQualifier;
    function isRemoveDateFilter(filter) {
        return !isEmpty(filter) && filter.dataSet !== undefined;
    }
    EmbeddedGdc.isRemoveDateFilter = isRemoveDateFilter;
    function isRemoveAttributeFilter(filter) {
        return !isEmpty(filter) && filter.displayForm !== undefined;
    }
    EmbeddedGdc.isRemoveAttributeFilter = isRemoveAttributeFilter;
})(EmbeddedGdc = exports.EmbeddedGdc || (exports.EmbeddedGdc = {}));
//# sourceMappingURL=common.js.map
"use strict";
exports.__esModule = true;
exports.AFM = void 0;
// (C) 2007-2020 GoodData Corporation
var isEmpty = require("lodash/isEmpty");
/**
 * Types defined here are client-side representation of the AFM. This representation MAY differ from the
 * physical representation of the AFM accepted by the REST API.
 *
 * The intended use is that client code uses exclusively types defined in this namespace. Functions or methods
 * that communicate with executeAfm REST API endpoint MUST transform this AFM to a structure acceptable by
 * the backend.
 *
 * >>> Note for developers: when you modify these structures, be sure to update gooddata-js execute-afm.convert.ts
 * with conversion of the new/updated construct to ExecuteAFM types accepted by backend.
 *
 * @see ./ExecuteAFM
 */
var AFM;
(function (AFM) {
    function isObjectUriQualifier(qualifier) {
        return !isEmpty(qualifier) && qualifier.uri !== undefined;
    }
    AFM.isObjectUriQualifier = isObjectUriQualifier;
    function isObjIdentifierQualifier(qualifier) {
        return !isEmpty(qualifier) && qualifier.identifier !== undefined;
    }
    AFM.isObjIdentifierQualifier = isObjIdentifierQualifier;
    function isSimpleMeasureDefinition(definition) {
        return !isEmpty(definition) && definition.measure !== undefined;
    }
    AFM.isSimpleMeasureDefinition = isSimpleMeasureDefinition;
    function isArithmeticMeasureDefinition(definition) {
        return !isEmpty(definition) && definition.arithmeticMeasure !== undefined;
    }
    AFM.isArithmeticMeasureDefinition = isArithmeticMeasureDefinition;
    function isPopMeasureDefinition(definition) {
        return !isEmpty(definition) && definition.popMeasure !== undefined;
    }
    AFM.isPopMeasureDefinition = isPopMeasureDefinition;
    function isPreviousPeriodMeasureDefinition(definition) {
        return !isEmpty(definition)
            && definition.previousPeriodMeasure !== undefined;
    }
    AFM.isPreviousPeriodMeasureDefinition = isPreviousPeriodMeasureDefinition;
    function isAttributeSortItem(sortItem) {
        return !isEmpty(sortItem) && sortItem.attributeSortItem !== undefined;
    }
    AFM.isAttributeSortItem = isAttributeSortItem;
    function isMeasureSortItem(sortItem) {
        return !isEmpty(sortItem) && sortItem.measureSortItem !== undefined;
    }
    AFM.isMeasureSortItem = isMeasureSortItem;
    function isMeasureLocatorItem(locator) {
        return !isEmpty(locator) && locator.measureLocatorItem !== undefined;
    }
    AFM.isMeasureLocatorItem = isMeasureLocatorItem;
    function isDateFilter(filter) {
        return !isEmpty(filter) && (isRelativeDateFilter(filter) || isAbsoluteDateFilter(filter));
    }
    AFM.isDateFilter = isDateFilter;
    function isRelativeDateFilter(filter) {
        return !isEmpty(filter) && filter.relativeDateFilter !== undefined;
    }
    AFM.isRelativeDateFilter = isRelativeDateFilter;
    function isAbsoluteDateFilter(filter) {
        return !isEmpty(filter) && filter.absoluteDateFilter !== undefined;
    }
    AFM.isAbsoluteDateFilter = isAbsoluteDateFilter;
    function isAttributeFilter(filter) {
        return !isEmpty(filter) && (isPositiveAttributeFilter(filter) || isNegativeAttributeFilter(filter));
    }
    AFM.isAttributeFilter = isAttributeFilter;
    function isPositiveAttributeFilter(filter) {
        return !isEmpty(filter) && filter.positiveAttributeFilter !== undefined;
    }
    AFM.isPositiveAttributeFilter = isPositiveAttributeFilter;
    function isNegativeAttributeFilter(filter) {
        return !isEmpty(filter) && filter.negativeAttributeFilter !== undefined;
    }
    AFM.isNegativeAttributeFilter = isNegativeAttributeFilter;
    function isMeasureValueFilter(filter) {
        return !isEmpty(filter) && filter.measureValueFilter !== undefined;
    }
    AFM.isMeasureValueFilter = isMeasureValueFilter;
    function isRankingFilter(filter) {
        return !isEmpty(filter) && filter.rankingFilter !== undefined;
    }
    AFM.isRankingFilter = isRankingFilter;
    function isExpressionFilter(filter) {
        return !isEmpty(filter) && filter.value !== undefined;
    }
    AFM.isExpressionFilter = isExpressionFilter;
})(AFM = exports.AFM || (exports.AFM = {}));
//# sourceMappingURL=AFM.js.map
import { IObjectMeta } from './Meta';
export declare namespace ExtendedDateFilters {
    type GUID = string;
    type DateString = string;
    type AllTimeType = 'allTime';
    type AbsoluteFormType = 'absoluteForm';
    type RelativeFormType = 'relativeForm';
    type AbsolutePresetType = 'absolutePreset';
    type RelativePresetType = 'relativePreset';
    type OptionType = AllTimeType | AbsoluteFormType | RelativeFormType | AbsolutePresetType | RelativePresetType;
    type RelativeGranularityOffset = number;
    type DateFilterGranularity = 'GDC.time.date' | 'GDC.time.week_us' | 'GDC.time.month' | 'GDC.time.quarter' | 'GDC.time.year';
    interface IDateFilterOption {
        localIdentifier: GUID;
        name: string;
        type: OptionType;
        visible: boolean;
    }
    interface IAbsoluteDateFilterPreset extends IDateFilterOption {
        type: AbsolutePresetType;
        from: DateString;
        to: DateString;
    }
    interface IRelativeDateFilterPreset extends IDateFilterOption {
        type: RelativePresetType;
        granularity: DateFilterGranularity;
        from: RelativeGranularityOffset;
        to: RelativeGranularityOffset;
    }
    interface IRelativeDateFilterPresetOfGranularity<Key extends DateFilterGranularity> extends IRelativeDateFilterPreset {
        granularity: Key;
    }
    interface IAbsoluteDateFilterForm extends IDateFilterOption {
        type: AbsoluteFormType;
        from?: DateString;
        to?: DateString;
    }
    interface IRelativeDateFilterForm extends IDateFilterOption {
        type: RelativeFormType;
        granularity?: DateFilterGranularity;
        availableGranularities: DateFilterGranularity[];
        from?: RelativeGranularityOffset;
        to?: RelativeGranularityOffset;
    }
    interface IAllTimeDateFilter extends IDateFilterOption {
        type: AllTimeType;
    }
    type AbsoluteDateFilterOption = IAbsoluteDateFilterForm | IAbsoluteDateFilterPreset;
    const isAllTimeDateFilter: (option: DateFilterOption) => option is IAllTimeDateFilter;
    const isAbsoluteDateFilterForm: (option: DateFilterOption) => option is IAbsoluteDateFilterForm;
    const isAbsoluteDateFilterPreset: (option: DateFilterOption) => option is IAbsoluteDateFilterPreset;
    const isAbsoluteDateFilterOption: (option: DateFilterOption) => option is AbsoluteDateFilterOption;
    type RelativeDateFilterOption = IRelativeDateFilterForm | IRelativeDateFilterPreset;
    const isRelativeDateFilterForm: (option: DateFilterOption) => option is IRelativeDateFilterForm;
    const isRelativeDateFilterPreset: (option: DateFilterOption) => option is IRelativeDateFilterPreset;
    const isRelativeDateFilterOption: (option: DateFilterOption) => option is RelativeDateFilterOption;
    type DateFilterOption = IAllTimeDateFilter | AbsoluteDateFilterOption | RelativeDateFilterOption;
    type DateFilterRelativeOptionGroup = {
        [key in DateFilterGranularity]?: IRelativeDateFilterPresetOfGranularity<key>[];
    };
    interface IDateFilterOptionsByType {
        allTime?: IAllTimeDateFilter;
        absoluteForm?: IAbsoluteDateFilterForm;
        relativeForm?: IRelativeDateFilterForm;
        absolutePreset?: IAbsoluteDateFilterPreset[];
        relativePreset?: DateFilterRelativeOptionGroup;
    }
    interface IDefaultDateFilterOptions {
        selectedOption: GUID;
        optionsByType: IDateFilterOptionsByType;
    }
    /**
     * Backend model of date filter values.
     */
    interface IDateFilterValue {
        from: string;
        to: string;
        type: 'absolute' | 'relative';
        optionLocalIdentifier: string;
        granularity: DateFilterGranularity;
    }
    /**
     * Types for server-side filter configuration
     */
    interface IDateFilterBase {
        localIdentifier: GUID;
        name: string;
        visible: boolean;
    }
    type IDateFilterAllTime = IDateFilterBase;
    type IDateFilterAbsoluteForm = IDateFilterBase;
    interface IDateFilterRelativeForm extends IDateFilterBase {
        granularities: DateFilterGranularity[];
    }
    interface IDateFilterAbsolutePreset extends IDateFilterBase {
        from: DateString;
        to: DateString;
    }
    interface IDateFilterRelativePreset extends IDateFilterBase {
        from: number;
        to: number;
        granularity: DateFilterGranularity;
    }
    interface IDateFilterConfigContent {
        selectedOption: GUID;
        allTime?: IDateFilterAllTime;
        absoluteForm?: IDateFilterAbsoluteForm;
        relativeForm?: IDateFilterRelativeForm;
        absolutePresets?: IDateFilterAbsolutePreset[];
        relativePresets?: IDateFilterRelativePreset[];
    }
    interface IDateFilterConfig {
        meta: IObjectMeta;
        content: IDateFilterConfigContent;
    }
    type DashboardDateFilterConfigMode = 'readonly' | 'hidden' | 'active';
    interface IDashboardAddedPresets {
        absolutePresets?: IDateFilterAbsolutePreset[];
        relativePresets?: IDateFilterRelativePreset[];
    }
    interface IDashboardDateFilterConfig {
        filterName: string;
        mode: DashboardDateFilterConfigMode;
        hideOptions?: GUID[];
        hideGranularities?: DateFilterGranularity[];
        addPresets?: IDashboardAddedPresets;
    }
    interface IDateFilterReference {
        dateFilterReference: {
            dataSet: string;
        };
    }
    interface IAttributeFilterReference {
        attributeFilterReference: {
            displayForm: string;
        };
    }
}

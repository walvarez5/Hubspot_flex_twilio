"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2007-2020 GoodData Corporation
var typings_1 = require("@gooddata/typings");
function convertAttributeFilter(filter) {
    if (!typings_1.VisualizationObject.isPositiveAttributeFilter(filter)) {
        if (!filter.negativeAttributeFilter.notIn.length) {
            return null;
        }
    }
    return filter;
}
function convertAbsoluteDateFilter(filter) {
    var absoluteDateFilter = filter.absoluteDateFilter;
    if (absoluteDateFilter.from === undefined || absoluteDateFilter.to === undefined) {
        return null;
    }
    return {
        absoluteDateFilter: {
            dataSet: absoluteDateFilter.dataSet,
            from: String(absoluteDateFilter.from),
            to: String(absoluteDateFilter.to),
        },
    };
}
exports.convertAbsoluteDateFilter = convertAbsoluteDateFilter;
function convertRelativeDateFilter(filter) {
    var relativeDateFilter = filter.relativeDateFilter;
    if (relativeDateFilter.from === undefined || !relativeDateFilter.to === undefined) {
        return null;
    }
    return {
        relativeDateFilter: {
            dataSet: relativeDateFilter.dataSet,
            granularity: relativeDateFilter.granularity,
            from: Number(relativeDateFilter.from),
            to: Number(relativeDateFilter.to),
        },
    };
}
exports.convertRelativeDateFilter = convertRelativeDateFilter;
function convertMeasureValueFilter(filter) {
    if (filter.measureValueFilter.condition === undefined) {
        return null;
    }
    return filter;
}
exports.convertMeasureValueFilter = convertMeasureValueFilter;
function convertVisualizationObjectFilter(filter) {
    if (typings_1.VisualizationObject.isAttributeFilter(filter)) {
        return convertAttributeFilter(filter);
    }
    else if (typings_1.VisualizationObject.isAbsoluteDateFilter(filter)) {
        return convertAbsoluteDateFilter(filter);
    }
    else {
        return convertRelativeDateFilter(filter);
    }
}
exports.convertVisualizationObjectFilter = convertVisualizationObjectFilter;
function convertVisualizationObjectExtendedFilter(filter) {
    if (typings_1.VisualizationObject.isMeasureValueFilter(filter)) {
        return convertMeasureValueFilter(filter);
    }
    else if (typings_1.VisualizationObject.isRankingFilter(filter)) {
        return filter;
    }
    else {
        return convertVisualizationObjectFilter(filter);
    }
}
exports.convertVisualizationObjectExtendedFilter = convertVisualizationObjectExtendedFilter;

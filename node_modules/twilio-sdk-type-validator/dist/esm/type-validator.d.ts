export declare type TypeRule = "undefined" | "object" | "boolean" | "number" | "bigint" | "string" | "symbol" | "function" | {
    new (...args: unknown[]): unknown;
};
declare type CustomRule = (value: unknown) => [boolean, string?, string?];
declare type TypeRuleDefinition = {
    mode: "type";
    checks: TypeRule[];
};
declare type LiteralRuleDefinition = {
    mode: "literal";
    checks: unknown[];
};
declare type CustomRuleDefinition = {
    mode: "custom";
    checks: CustomRule[];
};
declare type RuleDefinition = TypeRuleDefinition | LiteralRuleDefinition | CustomRuleDefinition;
declare type RuleArgument = TypeRule | RuleDefinition | (TypeRule | RuleDefinition)[];
declare type Decorator = (target: unknown, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare const type: (...checks: TypeRule[]) => TypeRuleDefinition;
export declare const literal: (...checks: unknown[]) => LiteralRuleDefinition;
export declare const custom: (...checks: CustomRule[]) => CustomRuleDefinition;
export declare const nonEmptyString: CustomRuleDefinition;
export declare const nonNegativeInteger: CustomRuleDefinition;
export declare const pureObject: CustomRuleDefinition;
export declare const objectSchema: (name: string, schema: Record<string, RuleArgument>) => CustomRuleDefinition;
export declare const runtimeTypeValidation: (rules: RuleDefinition[][], values: unknown[]) => void;
export declare const stringifyReceivedType: (value: unknown) => string;
export declare const validateTypes: (...args: RuleArgument[]) => Decorator;
export declare const validateTypesAsync: (...args: RuleArgument[]) => Decorator;
export {};
